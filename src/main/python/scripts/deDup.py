# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import ijson.backends.yajl2_cffi as ijson
import simplejson
from decimal import Decimal
import math
import random
import numpy as np



HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""


def extract_evidence(clargs):
    print('Loading data file...')

    f = open(clargs.input_file[0] , 'rb')

    ''' Program_dict dictionary holds Key values in format
    (Key = File_Name Value = dict(Key = String Method_Name, Value = [String ReturnType, List[String] FormalParam , List[String] Sequences] ))
    '''
    programs_dict = dict()


    valid = []
    #This part appends sorrounding evidences
    done = 0
    ignored = 0
    for program in ijson.items(f, 'programs.item'):

    	file_name = program['file']
    	method_name = program['method']

    	sequences = program['sequences']
    	returnType = program['returnType'] if 'returnType' in program else "void"
    	formalParam = program['formalParam'] if 'formalParam' in program else []

    	if file_name not in programs_dict:
		    programs_dict[file_name] = dict()

    	if method_name not in programs_dict[file_name]:
    	    # done is basically the unique prog_id
    	    programs_dict[file_name][method_name] = [returnType, formalParam, sequences, done] 
    	else:
			# Choose the MethodDeclaration with lowest number of nodes in sequences, the reason being you want to
			# ignore the calls from constructor, as it is present in every sorrounding sequence, and also this target_link_libraries
			# care of the problem of having multiple constructors while extracting from DOM Driver, where you basically  extract multiple
			# copies of same method. However they appear in the data as we again iterate over js[programs], but not here
    	    if numNodesInSequences(sequences) < numNodesInSequences(programs_dict[file_name][method_name][2]):
    		    programs_dict[file_name][method_name] = [returnType, formalParam, sequences, done]

    	done += 1
    	print('Scanned for duplication for {} programs'.format(done), end='\r')

    print('')
	
    f.close()
    f = open(clargs.input_file[0] , 'rb')
    programs = []
    done = 0
    unq = 0
    for program in ijson.items(f, 'programs.item'):

        file_name = program['file']
        method_name = program['method']

        if programs_dict[file_name][method_name][3] == done:
            deDupProg = dict(program)
            programs.append(deDupProg)
            unq += 1
        done += 1
        print('Ran de-Dup for {} programs with {} unique programs'.format(done, unq), end='\r')



    print('\nWriting to {}...'.format(clargs.output_file[0]), end='')
    with open(clargs.output_file[0], 'w') as f:
        simplejson.dump({'programs': programs}, fp=f, indent=2)
    print('done')


def numNodesInSequences(sequences):
    totLen = 0
    for elem in sequences:
        totLen += len(elem['calls'])
    return totLen




if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=HELP)
    parser.add_argument('input_file', type=str, nargs=1,
                        help='input data file')
    parser.add_argument('output_file', type=str, nargs=1,
                        help='output data file')
    parser.add_argument('--python_recursion_limit', type=int, default=10000,
                        help='set recursion limit for the Python interpreter')
    clargs = parser.parse_args()
    sys.setrecursionlimit(clargs.python_recursion_limit)
    print('Hello')
    extract_evidence(clargs)
