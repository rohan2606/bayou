# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import json
import math
import random
import numpy as np
from itertools import chain


import bayou.models.low_level_evidences.evidence
from bayou.models.low_level_evidences.utils import gather_calls
import ast_extractor

HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""



def extract_evidence(clargs):
    print('Loading data file...')
    with open(clargs.input_file[0]) as f:
        js = json.load(f)
    print('Done')
    done = 0
    programs = []

    ''' Program_dict dictionary holds Key values in format
    (Key = File_Name Value = dict(Key = String Method_Name, Value = [String ReturnType, List[String] FormalParam , List[String] Sequences] ))
    '''
    programs_dict = dict()


    valid = []
    #This part appends sorrounding evidences
    done = 0
    ignored = 0
    # for program in js['programs']:
    #     try:
    #         ast_node_graph, ast_paths = ast_extractor.get_ast_paths(program['ast']['_nodes'])
    #         ast_extractor.validate_sketch_paths(program, ast_paths, clargs.max_ast_depth)
    #
    #         file_name = program['file']
    #         method_name = program['method']
    #
    #         sequences = program['sequences']
    #         returnType = program['returnType'] if 'returnType' in program else "void"
    #         formalParam = program['formalParam'] if 'formalParam' in program else []
    #
    #         if len(sequences) > clargs.max_seqs or (len(sequences) == 1 and len(sequences[0]['calls']) == 1) or \
    #             any([len(sequence['calls']) > clargs.max_seq_length for sequence in sequences]):
    #                 raise ast_extractor.TooLongPathError
    #
    #
    #         if file_name not in programs_dict:
    #             programs_dict[file_name] = dict()
    #
    #         if method_name not in programs_dict[file_name]:
    #             programs_dict[file_name][method_name] = [returnType, formalParam, sequences]
    #         else:
    #             # Choose the MethodDeclaration with lowest number of nodes in sequences, the reason being you want to
    #             # ignore the calls from constructor, as it is present in every sorrounding sequence, and also this target_link_libraries
    #             # care of the problem of having multiple constructors while extracting from DOM Driver, where you basically  extract multiple
    #             # copies of same method. However they appear in the data as we again iterate over js[programs]
    #             if numNodesInSequences(sequences) < numNodesInSequences(programs_dict[file_name][method_name][2]):
    #                 programs_dict[file_name][method_name] = [returnType, formalParam, sequences]
    #
    #         valid.append(True)
    #
    #     except (ast_extractor.TooLongPathError, ast_extractor.InvalidSketchError) as e:
    #         ignored += 1
    #         valid.append(False)
    #
    #     done += 1
    #     print('Extracted evidences of sorrounding features for {} programs'.format(done), end='\r')
    #
    # print('')
    #
    # print('{:8d} programs/asts in training data'.format(done))
    # print('{:8d} programs/asts ignored by given config'.format(ignored))
    # print('{:8d} programs/asts to search over'.format(done - ignored))


    # print('Loading data file...')
    # with open(clargs.input_file[0]) as f:
    #     js = json.load(f)
    # print('Done')

    done = 0
    for pid, program in enumerate(js['programs']):

        # if valid[pid] == False:
        #     continue

        file_name = program['file']
        method_name = program['method']

        sequences = program['sequences']
        returnType = program['returnType'] if 'returnType' in program else "void"
        formalParam = program['formalParam'] if 'formalParam' in program else []

        # # Take in classTypes and sample a few
        # classTypes = program['classTypes'] if 'classTypes' in program else []
        # random.shuffle(classTypes)
        # num = np.random.choice(range(len(clargs.distribution)), p=clargs.distribution)
        # classTypes = classTypes[:num+1]
        ####

        # if len(sequences) > clargs.max_seqs or (len(sequences) == 1 and len(sequences[0]['calls']) == 1) or \
        #         any([len(sequence['calls']) > clargs.max_seq_length for sequence in sequences]):
        #     continue

        calls = gather_calls(program['ast'])

        apicalls = list(set(chain.from_iterable([bayou.models.low_level_evidences.evidence.APICalls.from_call(call)
                                                 for call in calls])))
        types = list(set(chain.from_iterable([bayou.models.low_level_evidences.evidence.Types.from_call(call)
                                              for call in calls])))
        keywords = list(set(chain.from_iterable([bayou.models.low_level_evidences.evidence.Keywords.from_call(call)
                                                for call in calls])))


        # num_samples = clargs.num_samples if clargs.num_samples > 0 else math.ceil(len(evidences)/-clargs.num_samples)
        random.shuffle(apicalls)
        random.shuffle(types)
        random.shuffle(keywords)

        sample = dict(program)
        sample['apicalls'] = apicalls
        sample['types'] = types
        sample['keywords'] = keywords

        del sample['classTypes']
        del sample['sorrreturntype']
        del sample['sorrformalparam']
        del sample['sorrsequences']

        # sample['sorrreturntype'] = []
        # sample['sorrformalparam'] = []
        # sample['sorrsequences'] = []

        # sample['classTypes'] = classTypes


        #    (Key = File_Name Value = dict(Key = String Method_Name, Value = [String ReturnType, List[String] FormalParam , List[String] Sequences] ))
        # otherMethods = list(programs_dict[file_name].keys())
        # random.shuffle(otherMethods)
        # num = np.random.choice(range(len(clargs.distribution)), p=clargs.distribution) + 1
        #
        # countSorrMethods = 0
        # for method in otherMethods: # Each iterator is a method Name with @linenumber
        #
        #     # Ignore the current method from list of sorrounding methods
        #     if method == method_name:
        #         continue
        #     # Keep a count on number of sorrounding methods, if it exceeds the random choice, break
        #     countSorrMethods += 1
        #     if countSorrMethods > num:
        #         break
        #
        #     for choice, evidence in zip(programs_dict[file_name][method],['sorrreturntype', 'sorrformalparam', 'sorrsequences']):
        #         sample[evidence].append(choice)

        programs.append(sample)

        done += 1
        print('Extracted evidence [API/Type/Keywords/Sorrounding Evidences] for {} programs'.format(done), end='\r')

    random.shuffle(programs)


    print('\nWriting to {}...'.format(clargs.output_file[0]), end='')
    with open(clargs.output_file[0], 'w') as f:
        json.dump({'programs': programs}, fp=f, indent=2)
    print('done')


# def numNodesInSequences(sequences):
#     totLen = 0
#     for elem in sequences:
#         totLen += len(elem['calls'])
#     return totLen
#



if __name__ == '__main__':
    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description=HELP)
    parser.add_argument('input_file', type=str, nargs=1,
                        help='input data file')
    parser.add_argument('output_file', type=str, nargs=1,
                        help='output data file')
    parser.add_argument('--python_recursion_limit', type=int, default=10000,
                        help='set recursion limit for the Python interpreter')



    clargs = parser.parse_args()
    sys.setrecursionlimit(clargs.python_recursion_limit)
    extract_evidence(clargs)
