{
  "programs": [
    {
      "method": "getOffset@175",
      "body": "public double getOffset(){\n  Object value=this.getValue(OffsetFeature.PATH,OffsetFeature.KEY);\n  Double doubleValue=new Double((String)value);\n  System.out.println(\"Getting Offset.\\nOffset is : \" + doubleValue);\n  return doubleValue;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Double.Double(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "double",
        "double"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Double.Double(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.Double(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "double",
      "file": "./java_projects/mde/src/gov/nasa/ial/mde/solver/SolvedSineFunction.java",
      "classTypes": [
        "String[]",
        "TrigClassifier"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "PrintStream",
        "NumberFormatException",
        "Double"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.Double(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "io",
        "exception"
      ]
    },
    {
      "method": "setDataQualified@161",
      "body": "/** \n * Similar to setData except that if the key is prefixed by \"parent.\"  set the data in the parent.\n * @param qualifiedKey A key which may be prefixed by parent.\n * @param data The value to set\n */\npublic void setDataQualified(String qualifiedKey,String data){\n  if (qualifiedKey == null) {\n    throw new IllegalArgumentException();\n  }\n  if (qualifiedKey.startsWith(PARENT_PREFIX) && parent != null) {\n    parent.setData(qualifiedKey.substring(PARENT_PREFIX.length()),data);\n  }\n else {\n    setData(qualifiedKey,data);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Hashtable.Hashtable(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "Set",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.keySet()"
            ]
          },
          {
            "calls": [
              "java.util.HashSet.HashSet()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.remove(java.lang.Object)",
              "java.util.Hashtable.Hashtable(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.ua/org.eclipse.ui.cheatsheets/src/org/eclipse/ui/internal/cheatsheets/views/CheatSheetManager.java",
      "classTypes": [
        "ICheatSheetManager"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String",
          "String"
        ],
        [
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.util.Map.remove(java.lang.Object)",
            "java.util.Hashtable.Hashtable(int)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "loadingStuffLoadsFromTheCorrectFile@136",
      "body": "@Test public void loadingStuffLoadsFromTheCorrectFile() throws FileNotFoundException {\n  Persistor<Person> persistor=ObjectSerializerPersistor.create(Person.class,context);\n  persistor.persist(Arrays.asList(new Person()));\n  persistor.load();\n  ArgumentCaptor<String> inputFilenameCaptor=ArgumentCaptor.forClass(String.class);\n  verify(context,atLeastOnce()).openFileInput(inputFilenameCaptor.capture());\n  inputFilename=inputFilenameCaptor.getValue();\n  assertEquals(Person.class.getName() + \".data\",inputFilename);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.File.createTempFile(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ScoreKeeper-Android/ScoreKeeperTest/src/net/todd/scorekeeper/ObjectSerializerPersistorTest.java",
      "classTypes": [
        "String",
        "Context",
        "long",
        "String",
        "int",
        "String",
        "File"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "arrays"
      ]
    },
    {
      "method": "read@49",
      "body": "/** \n * {@inheritDoc}\n * @see ConfigDOMReader#read(com.google.gwt.dom.client.Element)\n */\npublic LinkConfig read(AnchorElement anchor){\n  LinkConfig linkConfig=new LinkConfig();\n  DocumentFragment linkMetadata=Element.as(anchor).getMetaData();\n  if (linkMetadata != null) {\n    String startComment=linkMetadata.getChildNodes().getItem(0).getNodeValue();\n    Element wrappingSpan=(Element)linkMetadata.getChildNodes().getItem(1);\n    linkConfig.setReference(EscapeUtils.unescapeBackslash(startComment.substring(\"startwikilink:\".length())));\n    linkConfig.setType(readLinkType(wrappingSpan,linkConfig.getReference()));\n  }\n else {\n    linkConfig.setType(LinkType.EXTERNAL);\n  }\n  linkConfig.setUrl(anchor.getAttribute(\"href\"));\n  linkConfig.setLabel(anchor.getInnerHTML());\n  if (anchor.getChildNodes().getLength() == 1 && \"img\".equalsIgnoreCase(anchor.getFirstChild().getNodeName())) {\n    ImageElement image=(ImageElement)anchor.getFirstChild();\n    linkConfig.setLabelText(imageConfigHTMLParser.read(image).getReference());\n    linkConfig.setReadOnlyLabel(true);\n  }\n else {\n    linkConfig.setLabelText(anchor.getInnerText());\n  }\n  linkConfig.setTooltip(anchor.getTitle());\n  linkConfig.setOpenInNewWindow(\"__blank\".equals(anchor.getRel()));\n  return linkConfig;\n}\n",
      "formalParam": [
        "AnchorElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "LinkConfig",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-client/src/main/java/org/xwiki/gwt/wysiwyg/client/plugin/link/LinkConfigDOMReader.java",
      "classTypes": [
        "ImageConfigDOMReader",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String",
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "substring",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "equals"
      ]
    },
    {
      "method": "getSpecified@620",
      "body": "/** \n * Unimplemented. See org.w3c.dom.Node\n * @return False\n */\npublic boolean getSpecified(){\n  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);\n  return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "EntityReference",
        "String",
        "Text",
        "Attr",
        "NodeList"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/xalan-j/src/org/apache/xml/utils/UnImplNode.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "int"
        ],
        [
          "Attr"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "test0337@14962",
      "body": "public void test0337(){\n  String str=\"#\\n\" + \"public class X {\\n\" + \"  public syn\\n\"+ \"}\";\n  String completeBehind=\"syn\";\n  int cursorLocation=str.lastIndexOf(\"syn\") + completeBehind.length() - 1;\n  String expectedCompletionNodeToString=\"<CompleteOnType:syn>\";\n  String expectedParentNodeToString=\"<NONE>\";\n  String completionIdentifier=\"syn\";\n  String expectedReplacedSource=\"syn\";\n  String expectedUnitDisplayString=\"public class X {\\n\" + \"  <CompleteOnType:syn>;\\n\" + \"  public X() {\\n\"+ \"  }\\n\"+ \"}\\n\";\n  checkDietParse(str.toCharArray(),cursorLocation,expectedCompletionNodeToString,expectedParentNodeToString,expectedUnitDisplayString,completionIdentifier,expectedReplacedSource,\"diet ast\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "length",
        "toCharArray",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
          ]
        }
      ],
      "keywords": [
        "length",
        "integer",
        "string",
        "char",
        "index",
        "lang"
      ]
    },
    {
      "method": "main@3",
      "body": "public static void main(String[] args){\n  int x, a, b, c;\n  Scanner scanner=new Scanner(System.in);\n  x=scanner.nextInt();\n  for (c=3; c < x; ++c) {\n    for (b=2; b < c; ++b) {\n      for (a=1; a < b; ++a) {\n        if ((a * a + b * b) == c * c) {\n          System.out.println(\"(\" + a + \",\"+ b+ \",\"+ c+ \") : \"+ a+ \"*\"+ a+ \" + \"+ b+ \"*\"+ b+ \" = \"+ c+ \"*\"+ c);\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Scanner.Scanner(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Scanner.nextInt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/homework/java/Assignment-I/Ex4.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String",
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Scanner.Scanner(java.io.InputStream)",
            "java.util.Scanner.nextInt()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "input",
        "util",
        "integer",
        "next"
      ]
    },
    {
      "method": "optJSONObject@490",
      "body": "/** \n * Get the optional JSONObject associated with an index. Null is returned if the key is not found, or null if the index has no value, or if the value is not a JSONObject.\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONObject value.\n */\npublic JSONObject optJSONObject(int index){\n  Object o=opt(index);\n  return o instanceof JSONObject ? (JSONObject)o : null;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "String",
        "JSONArray",
        "Object",
        "JSONArray",
        "JSONArray"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.Double(double)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "JSONObject",
      "file": "./java_projects/meetupnow/src/org/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Map"
        ],
        [
          "int"
        ],
        [
          "long"
        ],
        [
          "double"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "get"
      ]
    },
    {
      "method": "update@1655",
      "body": "public JPanel update(Object[] geos){\n  this.geos=geos;\n  if (!checkGeos(geos))   return null;\n  showAnimatingCB.removeItemListener(this);\n  GeoElement temp, geo0=(GeoElement)geos[0];\n  boolean equalAnimating=true;\n  for (int i=1; i < geos.length; i++) {\n    temp=(GeoElement)geos[i];\n    if (geo0.isAnimating() != temp.isAnimating())     equalAnimating=false;\n  }\n  if (equalAnimating)   showAnimatingCB.setSelected(geo0.isAnimating());\n else   showAnimatingCB.setSelected(false);\n  showAnimatingCB.addItemListener(this);\n  return this;\n}\n",
      "formalParam": [
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.AbstractButton.setSelected(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.AbstractButton.setSelected(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          },
          {
            "_call": "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ]
      ],
      "returnType": "JPanel",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "NamePanel",
        "TabPanel",
        "long",
        "JTextField",
        "JComboBox",
        "Object[]",
        "TabPanel"
      ],
      "sorrformalparam": [
        [
          "Object[]"
        ]
      ],
      "types": [
        "ItemListener"
      ],
      "apicalls": [
        "removeItemListener"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
            "javax.swing.AbstractButton.setSelected(boolean)",
            "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
          ]
        }
      ],
      "keywords": [
        "listener",
        "set"
      ]
    },
    {
      "method": "TxLogWriter@44",
      "body": "public TxLogWriter(String txDir,ClassLoaderInterface commsCli){\n  this.commsCli=commsCli;\n  this.dirName=txDir;\n  File dir=new File(dirName);\n  dir.mkdirs();\n}\n",
      "formalParam": [
        "String",
        "ClassLoaderInterface"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.mkdirs()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.Buffer.remaining()",
              "java.nio.ByteBuffer.get(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.remaining()",
              "java.nio.ByteBuffer.get(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.nio.ByteBuffer>.toArray(T[])",
              "java.nio.Buffer.remaining()",
              "java.nio.ByteBuffer.get(byte[])"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/fuzzydb/server/src/main/java/org/fuzzydb/server/internal/server/txlog/TxLogWriter.java",
      "classTypes": [
        "MeteredOutputStream",
        "ClassLoaderInterface",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [
          "ByteBuffer"
        ],
        [
          "ByteBuffer[]"
        ],
        [
          "Collection<ByteBuffer>"
        ]
      ],
      "types": [
        "File"
      ],
      "apicalls": [
        "mkdirs"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.mkdirs()"
          ]
        }
      ],
      "keywords": [
        "io",
        "string",
        "file"
      ]
    },
    {
      "method": "menuDragMouseReleased@930",
      "body": "public void menuDragMouseReleased(MenuDragMouseEvent e){\n  if (!menuItem.isEnabled()) {\n    return;\n  }\n  MenuSelectionManager manager=e.getMenuSelectionManager();\n  MenuElement path[]=e.getPath();\n  Point p=e.getPoint();\n  if (p.x >= 0 && p.x < menuItem.getWidth() && p.y >= 0 && p.y < menuItem.getHeight()) {\n    doClick(manager);\n  }\n else {\n    manager.clearSelectedPath();\n  }\n}\n",
      "formalParam": [
        "MenuDragMouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.awt.Component.isEnabled()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.event.MouseEvent.getPoint()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Point"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "javax.swing.JComponent.getWidth()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "javax.swing.JComponent.getHeight()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "$NOT$javax.swing.AbstractButton.getActionCommand()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "javax.swing.AbstractButton.doClick(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "java.awt.Dimension.Dimension()",
              "javax.swing.JComponent.getInsets()",
              "javax.swing.UIManager.get(java.lang.Object)",
              "javax.swing.text.View.getMaximumSpan(int)",
              "javax.swing.text.View.getPreferredSpan(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/basic/BasicMenuItemUI.java",
      "classTypes": [
        "int",
        "Color",
        "Color",
        "Color",
        "MenuDragMouseListener"
      ],
      "sorrformalparam": [
        [
          "JComponent"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.awt.Component.isEnabled()",
            "java.awt.event.MouseEvent.getPoint()",
            "javax.swing.JComponent.getWidth()",
            "javax.swing.JComponent.getHeight()"
          ]
        },
        {
          "calls": [
            "$NOT$java.awt.Component.isEnabled()",
            "java.awt.event.MouseEvent.getPoint()",
            "javax.swing.JComponent.getWidth()",
            "javax.swing.JComponent.getHeight()",
            "$NOT$javax.swing.AbstractButton.getActionCommand()",
            "javax.swing.AbstractButton.doClick(int)"
          ]
        }
      ],
      "keywords": [
        "mouse"
      ]
    },
    {
      "method": "updateTaxonomyTree@263",
      "body": "/** \n * Update taxonomy tree: If home path or workspace is changed, move taxonomy tree to new target\n * @param name\n * @param workspace\n * @param homePath\n * @return true: if taxonomy tree already has moved successfullyfalse: if taxonomy has not changed\n * @throws RepositoryException\n * @throws AccessControlException\n * @throws Exception\n */\npublic boolean updateTaxonomyTree(String name,String workspace,String homePath,String actionName) throws RepositoryException, AccessControlException, Exception {\n  String repository=getApplicationComponent(RepositoryService.class).getCurrentRepository().getConfiguration().getName();\n  TaxonomyService taxonomyService=getApplicationComponent(TaxonomyService.class);\n  Node taxonomyTreeNode=taxonomyService.getTaxonomyTree(name,true);\n  Node homeNode=taxonomyTreeNode.getParent();\n  String srcWorkspace=taxonomyTreeNode.getSession().getWorkspace().getName();\n  Session session=getSession(workspace);\n  Workspace objWorkspace=session.getWorkspace();\n  if (homeNode.getPath().equals(homePath) && srcWorkspace.equals(workspace))   return false;\n  ActionServiceContainer actionService=getApplicationComponent(ActionServiceContainer.class);\n  if (actionService.hasActions(taxonomyTreeNode)) {\n    actionService.removeAction(taxonomyTreeNode,actionName,repository);\n  }\n  String destPath=homePath + \"/\" + name;\n  destPath=destPath.replaceAll(\"/+\",\"/\");\n  if (srcWorkspace.equals(workspace)) {\n    objWorkspace.move(taxonomyTreeNode.getPath(),destPath);\n  }\n else {\n    objWorkspace.copy(srcWorkspace,taxonomyTreeNode.getPath(),destPath);\n    taxonomyTreeNode.remove();\n    homeNode.save();\n  }\n  session.save();\n  taxonomyTreeNode=(Node)session.getItem(destPath);\n  session.logout();\n  taxonomyService.updateTaxonomyTree(name,taxonomyTreeNode);\n  return true;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/ecms/core/webui-administration/src/main/java/org/exoplatform/ecm/webui/component/admin/taxonomy/UITaxonomyTreeContainer.java",
      "classTypes": [
        "String",
        "TaxonomyTreeData",
        "String",
        "String[]",
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals",
        "replaceAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "replace",
        "boolean",
        "object"
      ]
    },
    {
      "method": "getAlertPriority@59",
      "body": "public String getAlertPriority(){\n  if (this.alert.getPriority() == 0) {\n    return \"n/a\";\n  }\n else   if (PatientAlertType.SymptomReporting.name().equals(getType().name())) {\n    return String.format(\"SYMPTOM PRIO-%d\",this.alert.getPriority());\n  }\n else {\n    return String.valueOf(this.alert.getPriority());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.valueOf(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/TAMA-Web/tama.patient/src/main/java/org/motechproject/tama/patient/domain/PatientAlert.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "java.lang.String.valueOf(char[])"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "keyReleased@135",
      "body": "public void keyReleased(final KeyEvent e){\n  if (e.isConsumed()) {\n    return;\n  }\n  if (!this.isValidKeyCode(e.getKeyCode())) {\n    return;\n  }\n  this.keyEvent=e;\n  RequestThread.runInParallel(this);\n  e.consume();\n}\n",
      "formalParam": [
        "KeyEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.InputEvent.isConsumed()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.awt.event.KeyEvent.getKeyCode()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.InputEvent.consume()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.isPopupVisible()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.InputEvent.getModifiers()"
            ]
          },
          {
            "calls": [
              "java.awt.event.ActionEvent.getModifiers()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/kolmafia/src/net/sourceforge/kolmafia/swingui/listener/ThreadedListener.java",
      "classTypes": [
        "KeyEvent",
        "MouseEvent",
        "ActionEvent"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        []
      ],
      "types": [
        "Integer",
        "Boolean",
        "InputEvent"
      ],
      "apicalls": [
        "isConsumed",
        "consume"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.InputEvent.isConsumed()",
            "$NOT$java.awt.event.KeyEvent.getKeyCode()",
            "java.awt.event.InputEvent.consume()"
          ]
        }
      ],
      "keywords": [
        "consumed",
        "event"
      ]
    },
    {
      "method": "line@130",
      "body": "public void line(double x1,double y1,double x2,double y2){\n  move(x1,y1);\n  lineto(x2,y2);\n}\n",
      "formalParam": [
        "double",
        "double",
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.append(double)",
              "java.lang.StringBuilder.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/antlr4/runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java",
      "classTypes": [
        "double",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "double",
          "double",
          "double",
          "double"
        ],
        [
          "double"
        ]
      ],
      "types": [
        "String",
        "StringBuilder",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.lang.StringBuilder.append(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "format",
        "string",
        "builder",
        "object",
        "lang"
      ]
    },
    {
      "method": "save@133",
      "body": "public void save(ImagePlus imp,String path){\n  File f=new File(path);\n  save(imp,f.getParent(),f.getName());\n}\n",
      "formalParam": [
        "ImagePlus",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getParent()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/fiji/src-plugins/IO_/src/main/java/io/Nrrd_Writer.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "int",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "getParent",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getParent()",
            "java.io.File.getName()"
          ]
        }
      ],
      "keywords": [
        "string",
        "get",
        "file",
        "io"
      ]
    },
    {
      "method": "start@105",
      "body": "public static synchronized void start(String repository,String axis2xml) throws Exception {\n  if (count == 0) {\n    ConfigurationContext er=getNewConfigurationContext(repository,axis2xml);\n    receiver=new SimpleHTTPServer(er,TESTING_PORT);\n    try {\n      receiver.start();\n      System.out.print(\"Server started on port \" + TESTING_PORT + \".....\");\n    }\n catch (    Exception e) {\n      throw new AxisFault(e.getMessage(),e);\n    }\n    try {\n      Thread.sleep(2000);\n    }\n catch (    InterruptedException e1) {\n      throw new AxisFault(\"Thread interuptted\",e1);\n    }\n  }\n  count++;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "ConfigurationContext",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.endsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "$NOT$java.io.File.exists()",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.io.PrintStream.print(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/rampart/1.6.1-wso2v4/modules/rampart-integration/src/main/java/org/apache/axis2/integration/UtilServer.java",
      "classTypes": [
        "String",
        "int",
        "SimpleHTTPServer",
        "int"
      ],
      "sorrformalparam": [
        [
          "File",
          "String"
        ],
        [
          "String",
          "String"
        ],
        []
      ],
      "types": [
        "InterruptedException",
        "Long",
        "String"
      ],
      "apicalls": [
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "io",
        "long",
        "interrupted",
        "stream"
      ]
    },
    {
      "method": "getASet@7",
      "body": "public Object getASet(boolean b){\n  if (b)   return new HashSet();\n else   return new TreeSet();\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.TreeSet.TreeSet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.HashSet.HashSet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Float.Float(double)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.Integer(int)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/fb-contrib/samples/URV_Sample.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "boolean"
        ]
      ],
      "types": [
        "HashSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet.TreeSet()"
          ]
        },
        {
          "calls": [
            "java.util.HashSet.HashSet()"
          ]
        }
      ],
      "keywords": [
        "hash"
      ]
    },
    {
      "method": "getDiskRaiseNotFoundWhenRandomVDCIdTest@454",
      "body": "/** \n * Expect a NotFoundException when getting a single disk and the virtual datacenter does not exist.\n */\n@Test(expectedExceptions={NotFoundException.class},enabled=false) public void getDiskRaiseNotFoundWhenRandomVDCIdTest(){\n  Integer randomId;\n  do {\n    randomId=new Random().nextInt(10000);\n  }\n while (randomId.equals(vdc.getId()));\n  EntityManager em=getEntityManagerWithAnActiveTransaction();\n  service=new StorageService(em);\n  service.getHardDiskByVM(randomId,vapp.getId(),vm.getId(),0);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Random.Random()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Random.Random()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Random.nextInt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Integer.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.lang.Integer.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/abiquo/api/src/test/java/com/abiquo/api/services/cloud/DiskManagementServiceTest.java",
      "classTypes": [
        "long",
        "StorageService",
        "VirtualDatacenter",
        "VirtualAppliance",
        "VirtualMachine"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Random.Random()",
            "java.util.Random.nextInt(int)",
            "java.lang.Integer.equals(java.lang.Object)",
            "java.util.Random.Random()",
            "java.util.Random.nextInt(int)",
            "java.lang.Integer.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "integer",
        "equals"
      ]
    },
    {
      "method": "testMarshalXSDataMessageError@72",
      "body": "public void testMarshalXSDataMessageError() throws Exception {\n  XSDataString debugMessage=new XSDataString();\n  debugMessage.setValue(\"Test string value\");\n  XSDataString errorType=new XSDataString();\n  errorType.setValue(\"Test string value\");\n  XSDataMessageError xsDataMessageError=new XSDataMessageError();\n  xsDataMessageError.setDebugInfo(debugMessage);\n  xsDataMessageError.setErrorType(errorType);\n  StringWriter stringWriter=new StringWriter();\n  XMLContext context=new XMLContext();\n  context.addPackage(\"org.edna_site.eclipse.kernel.xsdata\");\n  Marshaller marshaller=context.createMarshaller();\n  marshaller.setWriter(stringWriter);\n  marshaller.marshal(xsDataMessageError);\n  String xml=stringWriter.toString();\n  System.out.println(xml);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.FileReader.FileReader(java.io.File)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.FileReader.FileReader(java.io.File)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/edna-rcp/org.edna.mxv1.test/src/org/edna/mxv1/test/TestCaseXSDataMXv1.java",
      "classTypes": [
        "File",
        "XMLContext"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "StringWriter",
        "String"
      ],
      "apicalls": [
        "println",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "io",
        "stream",
        "writer",
        "string",
        "print"
      ]
    },
    {
      "method": "toElementsString@56",
      "body": "public String toElementsString(String tab,boolean lite){\n  StringBuffer buf=new StringBuffer();\n  buf.append(super.toElementsString(tab,lite));\n  return buf.toString();\n}\n",
      "formalParam": [
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/smartworksV3/src/net/smartworks/server/engine/like/model/Like.java",
      "classTypes": [
        "String",
        "int",
        "String",
        "Log",
        "String",
        "String",
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "Object",
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "object",
        "buffer",
        "lang"
      ]
    },
    {
      "method": "buildComponentPanel@945",
      "body": "/** \n * Adds the specified  {@link JComponent} to a {@link JPanel} with a left flow layout.\n * @param component The component to add.\n * @return See below.\n */\npublic static JPanel buildComponentPanel(JComponent component){\n  return buildComponentPanel(component,5,5,true);\n}\n",
      "formalParam": [
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JPanel.JPanel()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.FlowLayout.FlowLayout(int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          },
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "JTextPane",
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.Document.getLength()",
              "javax.swing.text.Document.insertString(int,java.lang.String,javax.swing.text.AttributeSet)",
              "javax.swing.JComponent.setOpaque(boolean)",
              "javax.swing.text.JTextComponent.setEditable(boolean)",
              "java.awt.Component.setFocusable(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JPanel.JPanel()",
              "java.awt.FlowLayout.FlowLayout(int,int,int)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Container.add(java.awt.Component)",
              "javax.swing.JComponent.setOpaque(boolean)"
            ]
          }
        ]
      ],
      "returnType": "JPanel",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/util/ui/UIUtilities.java",
      "classTypes": [
        "String",
        "String",
        "int",
        "Color",
        "long",
        "Color",
        "int",
        "Color",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "JComponent",
          "int",
          "int"
        ]
      ],
      "types": [
        "JPanel",
        "Container",
        "JComponent",
        "FlowLayout",
        "Component"
      ],
      "apicalls": [
        "setLayout"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JPanel.JPanel()",
            "java.awt.FlowLayout.FlowLayout(int,int,int)",
            "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "java.awt.Container.add(java.awt.Component)",
            "javax.swing.JComponent.setOpaque(boolean)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "add",
        "container",
        "manager"
      ]
    },
    {
      "method": "setHistoryMaxSize@651",
      "body": "/** \n * Sets the maximal size of the historical data. Defaults to {@link #DEFAULT_HISTORY_MAX_LENGTH}<p> <strong>Note:</strong> Setting this property will immediately enforce the specified max history size by dropping enough old historical records to enforce the desired size. Thus, any records that exceed the history size will be discarded and irreversibly lost. </p>\n * @param historyMaxSize The max history size.\n */\npublic void setHistoryMaxSize(int historyMaxSize){\nsynchronized (mInstanceLock) {\n    if (mHistoryMaxSize == historyMaxSize) {\n      return;\n    }\n    mHistoryMaxSize=historyMaxSize;\n    pruneExcessiveHistoricalRecordsLocked();\n    sortActivities();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collections.unmodifiableList(java.util.List)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "ActivityChooserModel",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/The-Reverse-Recipe-Book/actionbarsherlock4.0/src/com/actionbarsherlock/widget/ActivityChooserModel.java",
      "classTypes": [
        "String",
        "Intent",
        "List<HistoricalRecord>",
        "String"
      ],
      "sorrformalparam": [
        [
          "Intent"
        ],
        [
          "Context",
          "String"
        ],
        [
          "Runnable"
        ],
        [
          "ActivitySorter"
        ],
        [
          "ResolveInfo"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "integer",
        "collections"
      ]
    },
    {
      "method": "onProvisioningEvent@33",
      "body": "@Override public void onProvisioningEvent(String eventName,Object... args){\n  String formattedMessage=getFormattedMessage(eventName,args);\n  System.out.println(formattedMessage);\n  System.out.flush();\n  logger.log(Level.FINE,formattedMessage);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/cloudify/esc-commands/src/main/java/org/cloudifysource/esc/shell/listener/CliProvisioningDriverListener.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Logger"
      ],
      "apicalls": [
        "log",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.flush()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "io",
        "stream",
        "flush",
        "log",
        "logging"
      ]
    },
    {
      "method": "getPercentOfNotExecutedTest@247",
      "body": "/** \n * @return percent of not executed Test\n */\npublic double getPercentOfNotExecutedTest(){\n  return 100 - getPercentOfExecutedTest();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.pow(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Math.floor(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "double"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.pow(double,double)",
              "java.lang.Math.floor(double)"
            ]
          }
        ]
      ],
      "returnType": "double",
      "file": "./java_projects/perfpublisher-plugin/src/main/java/hudson/plugins/PerfPublisher/Report/Report.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Double"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.pow(double,double)",
            "java.lang.Math.floor(double)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "getSubmission@3154",
      "body": "/** \n * Access a User's AssignmentSubmission to a particular Assignment.\n * @param assignmentReference The reference of the assignment.\n * @param person -The User who's Submission you would like.\n * @return AssignmentSubmission The user's submission for that Assignment.\n * @throws IdUnusedException if there is no object with this id.\n * @throws PermissionException if the current user is not allowed to access this.\n */\npublic AssignmentSubmission getSubmission(String assignmentReference,User person){\n  AssignmentSubmission submission=null;\n  String assignmentId=assignmentId(assignmentReference);\n  if ((assignmentReference != null) && (person != null)) {\n    submission=m_submissionStorage.get(assignmentId,person.getId());\n  }\n  if (submission != null) {\n    try {\n      unlock2(SECURE_ACCESS_ASSIGNMENT_SUBMISSION,SECURE_ACCESS_ASSIGNMENT,submission.getReference());\n    }\n catch (    PermissionException e) {\n      return null;\n    }\n  }\n  return submission;\n}\n",
      "formalParam": [
        "String",
        "User"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "void",
        "String",
        "AssignmentSubmissionEdit",
        "AssignmentContentEdit"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.NumberFormat.getInstance()",
              "java.text.NumberFormat.getNumberInstance(java.util.Locale)",
              "java.text.NumberFormat.setMaximumFractionDigits(int)",
              "java.text.NumberFormat.setMinimumFractionDigits(int)",
              "java.text.NumberFormat.setGroupingUsed(boolean)",
              "java.lang.Double.Double(java.lang.String)",
              "java.text.Format.format(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)",
              "java.util.List.size()",
              "java.lang.Throwable.toString()",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "AssignmentSubmission",
      "file": "./java_projects/Fudan-Sakai/assignment/assignment-impl/impl/src/java/org/sakaiproject/assignment/impl/BaseAssignmentService.java",
      "classTypes": [
        "boolean",
        "int",
        "String",
        "List",
        "String",
        "List",
        "String"
      ],
      "sorrformalparam": [
        [
          "Object",
          "Object",
          "Event"
        ],
        [
          "String"
        ],
        [],
        [
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "index",
        "last",
        "string",
        "lang"
      ]
    },
    {
      "method": "run@195",
      "body": "public void run(){\n  try {\n    byte[] buf=new byte[BUF];\n    int read=0;\n    while (!isInterrupted() && (read=_is.read(buf)) != -1) {\n      if (read == 0)       continue;\n      _os.write(buf,0,read);\n      _os.flush();\n    }\n  }\n catch (  InterruptedIOException iioe) {\n  }\ncatch (  Throwable t) {\n    _thrownError=t;\n  }\n finally {\n    try {\n      if (_closeInput) {\n        _is.close();\n      }\n else {\n        _os.close();\n      }\n    }\n catch (    IOException ioe) {\n    }\n  }\n  try {\n    _barrier.await();\n  }\n catch (  InterruptedException ie) {\n  }\ncatch (  BrokenBarrierException bbe) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.flush()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.Thread.isInterrupted()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/nutch/src/java/org/apache/nutch/util/CommandRunner.java",
      "classTypes": [
        "int",
        "boolean",
        "boolean",
        "String",
        "InputStream",
        "CyclicBarrier",
        "OutputStream",
        "int",
        "OutputStream"
      ],
      "sorrformalparam": [],
      "types": [
        "IOException"
      ],
      "apicalls": [
        "close",
        "read"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()",
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.close()"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()",
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "close"
      ]
    },
    {
      "method": "writeBuffer@94",
      "body": "public void writeBuffer(Buffer buf,String tag) throws IOException {\n  printCommaUnlessFirst();\n  stream.print(Utils.toCSVBuffer(buf));\n  throwExceptionOnError(tag);\n}\n",
      "formalParam": [
        "Buffer",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.print(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.checkError()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.print(java.lang.String)",
              "java.io.PrintStream.print(double)",
              "java.io.PrintStream.checkError()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.print(java.lang.String)",
              "java.io.PrintStream.print(double)",
              "java.io.PrintStream.checkError()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.print(java.lang.String)",
              "java.io.PrintStream.print(long)",
              "java.io.PrintStream.checkError()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.print(java.lang.String)",
              "java.io.PrintStream.print(char[])",
              "java.io.PrintStream.checkError()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ADFS/adfs-common-project/adfs-common/src/main/java/org/apache/hadoop/record/CsvRecordOutput.java",
      "classTypes": [
        "boolean",
        "PrintStream"
      ],
      "sorrformalparam": [
        [
          "float",
          "String"
        ],
        [
          "double",
          "String"
        ],
        [
          "int",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.print(char[])",
            "java.io.PrintStream.checkError()"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "testMul@60",
      "body": "public void testMul() throws Exception {\n  generate(\"print 3 * 2\",getName());\n  assertOutput(getName());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.exists()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Compiladores2012/compiler/src/test/java/compiler/ClassGeneratorTestCase.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.getPath()",
            "java.io.File.exists()",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getPath()",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "get",
        "boolean",
        "file",
        "string",
        "path"
      ]
    },
    {
      "method": "getNames@82",
      "body": "/** \n * Returns the list of values.\n * @return  names\n */\npublic List getNames(){\n  if ((generalNames == null) || (generalNames.size() == 0)) {\n    return null;\n  }\n  return new ArrayList(generalNames);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.ArrayList.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.util.Iterator.next()",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.append(char)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "List",
      "file": "./java_projects/harmony-classlib/modules/security/src/main/java/common/org/apache/harmony/security/x509/GeneralNames.java",
      "classTypes": [
        "List",
        "byte[]",
        "ASN1Type"
      ],
      "sorrformalparam": [
        [
          "StringBuffer",
          "String"
        ]
      ],
      "types": [
        "ArrayList",
        "Collection",
        "Integer",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.ArrayList.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "size",
        "collection"
      ]
    },
    {
      "method": "testConstructor1@38",
      "body": "/** \n * A new queue has the indicated capacity\n */\npublic void testConstructor1(){\n  assertEquals(SIZE,new ArrayBlockingQueue(SIZE).remainingCapacity());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.concurrent.ArrayBlockingQueue.put(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.AbstractCollection.isEmpty()",
              "java.lang.Integer.Integer(int)",
              "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
              "java.util.AbstractCollection.isEmpty()",
              "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
              "java.util.concurrent.ArrayBlockingQueue.size()",
              "java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Arrays.asList(T[])",
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int,boolean,java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.AbstractCollection.isEmpty()",
              "java.lang.Integer.Integer(int)",
              "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
              "java.util.AbstractCollection.isEmpty()",
              "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
              "java.util.concurrent.ArrayBlockingQueue.size()",
              "java.util.concurrent.ArrayBlockingQueue.take()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Arrays.asList(T[])",
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int,boolean,java.util.Collection)",
              "java.util.concurrent.ArrayBlockingQueue.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.AbstractCollection.isEmpty()",
              "java.lang.Integer.Integer(int)",
              "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
              "java.util.AbstractCollection.isEmpty()",
              "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
              "java.util.concurrent.ArrayBlockingQueue.size()",
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.AbstractCollection.isEmpty()",
              "java.lang.Integer.Integer(int)",
              "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
              "java.util.AbstractCollection.isEmpty()",
              "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
              "java.util.concurrent.ArrayBlockingQueue.size()",
              "java.util.concurrent.ArrayBlockingQueue.drainTo(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.util.AbstractCollection.isEmpty()",
              "java.lang.Integer.Integer(int)",
              "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
              "java.util.AbstractCollection.isEmpty()",
              "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
              "java.util.concurrent.ArrayBlockingQueue.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.interrupt()",
              "java.lang.Thread.join()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.sleep(long)",
              "java.util.concurrent.ArrayBlockingQueue.take()",
              "java.lang.Thread.interrupt()",
              "java.lang.Thread.join()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/concurrent/src/test/java/ArrayBlockingQueueTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
            "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "toString@302",
      "body": "@Override public String toString(){\n  return getFullyQualifiedName();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer(int)",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.substring(int)",
              "java.lang.String.String(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ptp/rdt/org.eclipse.ptp.rdt.core/src/org/eclipse/ptp/internal/rdt/core/search/RemoteQualifiedTypeName.java",
      "classTypes": [
        "RemoteQualifiedTypeName",
        "int",
        "int",
        "String[]",
        "int",
        "int",
        "String",
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "String[]"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(int)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "integer",
        "append",
        "lang"
      ]
    },
    {
      "method": "addChildScriptContext@258",
      "body": "/** \n * {@inheritDoc}\n */\n@Override public void addChildScriptContext(ScriptContext context){\nsynchronized (this) {\n    if (childScriptContexts == null) {\n      childScriptContexts=new HashSet<ScriptContext>();\n    }\n    if (childScriptContexts.contains(context)) {\n      log.error(\"Double child definition, root: \" + root.getAbsolutePath() + \", child: \"+ context.getRoot().getAbsolutePath());\n      return;\n    }\n    if (isInitialized()) {\n      context.init();\n    }\n  }\n  childScriptContexts.add(context);\n}\n",
      "formalParam": [
        "ScriptContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.isDirectory()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Exception.Exception()",
              "java.lang.Exception.Exception(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Aion-Energy-Life-/AL-Commons/src/com/aionemu/commons/scripting/impl/ScriptContextImpl.java",
      "classTypes": [
        "CompilationResult",
        "ClassListener",
        "ScriptContext"
      ],
      "sorrformalparam": [
        [
          "File",
          "ScriptContext"
        ],
        []
      ],
      "types": [
        "HashSet"
      ],
      "apicalls": [
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": [
        "path",
        "absolute",
        "get",
        "io"
      ]
    },
    {
      "method": "getResourceAsStream@36",
      "body": "public static InputStream getResourceAsStream(String path){\n  InputStream stream=ImageUtils.class.getResourceAsStream(path);\n  String[] split=path.split(\"/\");\n  path=split[split.length - 1];\n  if (stream == null) {\n    File resource=new File(\".\\\\src\\\\main\\\\resources\\\\\" + path);\n    if (resource.exists()) {\n      try {\n        stream=new BufferedInputStream(new FileInputStream(resource));\n      }\n catch (      IOException ignore) {\n      }\n    }\n  }\n  return stream;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "InputStream",
      "file": "./java_projects/SpoutcraftLauncher/src/main/java/org/spoutcraft/launcher/util/ResourceUtils.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String",
        "FileInputStream",
        "BufferedInputStream",
        "FileNotFoundException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.lang.String.split(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "java.lang.String.split(java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "input",
        "found",
        "io",
        "split",
        "get"
      ]
    },
    {
      "method": "mouseMoved@683",
      "body": "public void mouseMoved(MouseEvent ev){\n  if (ev.getSource() instanceof Window) {\n    JRootPane root=getRootPane();\n    if (DecorationHelper.getWindowDecorationStyle(root) == NONE) {\n      return;\n    }\n    Window w=(Window)ev.getSource();\n    Frame f=null;\n    Dialog d=null;\n    if (w instanceof Frame) {\n      f=(Frame)w;\n    }\n else     if (w instanceof Dialog) {\n      d=(Dialog)w;\n    }\n    int cursor=getCursor(calculateCorner(w,ev.getX(),ev.getY()));\n    if (cursor != 0 && ((f != null && (f.isResizable() && (DecorationHelper.getExtendedState(f) & BaseRootPaneUI.MAXIMIZED_BOTH) == 0)) || (d != null && d.isResizable()))) {\n      w.setCursor(Cursor.getPredefinedCursor(cursor));\n    }\n else {\n      w.setCursor(savedCursor);\n    }\n  }\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.MouseEvent.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.MouseEvent.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.getWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Window.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.awt.Frame.isResizable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Dialog.isResizable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Window.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.SwingUtilities.getWindowAncestor(java.awt.Component)",
              "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getWidth()",
              "java.awt.Component.getHeight()",
              "java.awt.Frame.isResizable()",
              "java.awt.Dialog.isResizable()",
              "java.awt.Cursor.getPredefinedCursor(int)",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getWidth()",
              "java.awt.Component.getHeight()",
              "java.awt.Frame.isResizable()",
              "java.awt.Dialog.isResizable()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Container.remove(java.awt.Component)",
              "java.awt.Container.add(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Container.getLayout()",
              "java.awt.Container.setLayout(java.awt.LayoutManager)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Component.repaint()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Component.repaint()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Pail/src/main/java/com/jtattoo/plaf/BaseRootPaneUI.java",
      "classTypes": [
        "int",
        "Window"
      ],
      "sorrformalparam": [
        [
          "JRootPane",
          "Component"
        ],
        [
          "MouseEvent"
        ],
        [
          "JRootPane",
          "BaseTitlePane"
        ],
        [
          "JRootPane"
        ],
        [
          "JRootPane"
        ],
        [
          "JComponent"
        ],
        [
          "JRootPane"
        ]
      ],
      "types": [
        "Boolean",
        "Component",
        "MouseEvent"
      ],
      "apicalls": [
        "isResizable",
        "setCursor",
        "getPredefinedCursor"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Component.getWidth()",
            "java.awt.Component.getHeight()",
            "java.awt.Frame.isResizable()",
            "java.awt.Dialog.isResizable()",
            "java.awt.Cursor.getPredefinedCursor(int)",
            "java.awt.Window.setCursor(java.awt.Cursor)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Component.getWidth()",
            "java.awt.Component.getHeight()",
            "java.awt.Frame.isResizable()",
            "java.awt.Dialog.isResizable()",
            "java.awt.Window.setCursor(java.awt.Cursor)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "x",
        "dialog",
        "mouse"
      ]
    },
    {
      "method": "convert@121",
      "body": "/** \n * convert a single long array into an array of DocumentBlock instances\n * @param array the byte array to be converted\n * @param size the intended size of the array (which may be smaller)\n * @return an array of DocumentBlock instances, filled from theinput array\n */\npublic static DocumentBlock[] convert(final byte[] array,final int size){\n  DocumentBlock[] rval=new DocumentBlock[(size + POIFSConstants.BIG_BLOCK_SIZE - 1) / POIFSConstants.BIG_BLOCK_SIZE];\n  int offset=0;\n  for (int k=0; k < rval.length; k++) {\n    rval[k]=new DocumentBlock();\n    if (offset < array.length) {\n      int length=Math.min(POIFSConstants.BIG_BLOCK_SIZE,array.length - offset);\n      System.arraycopy(array,offset,rval[k]._data,0,length);\n      if (length != POIFSConstants.BIG_BLOCK_SIZE) {\n        Arrays.fill(rval[k]._data,length,POIFSConstants.BIG_BLOCK_SIZE,_default_value);\n      }\n    }\n else {\n      Arrays.fill(rval[k]._data,_default_value);\n    }\n    offset+=POIFSConstants.BIG_BLOCK_SIZE;\n  }\n  return rval;\n}\n",
      "formalParam": [
        "byte[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.fill(byte[],byte)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Arrays.fill(byte[],byte)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Arrays.fill(byte[],int,int,byte)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ]
      ],
      "returnType": "DocumentBlock[]",
      "file": "./java_projects/jubula.core/org.apache.poi/src/java/org/apache/poi/poifs/storage/DocumentBlock.java",
      "classTypes": [
        "byte",
        "byte[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "DocumentBlock[]",
          "byte[]",
          "int"
        ]
      ],
      "types": [
        "Byte",
        "Math"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.fill(byte[],byte)",
            "java.lang.Math.min(int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.util.Arrays.fill(byte[],int,int,byte)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.fill(byte[],byte)",
            "java.util.Arrays.fill(byte[],byte)"
          ]
        }
      ],
      "keywords": [
        "arraycopy",
        "fill",
        "lang"
      ]
    },
    {
      "method": "setClassifier@160",
      "body": "/** \n * Set the classifier\n * @param v The value\n */\npublic void setClassifier(String v){\n  if (v != null && !v.trim().equals(\"\"))   classifier=v;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/fungal/core/src/main/java/com/github/fungal/bootstrap/DependencyType.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "string"
      ]
    },
    {
      "method": "testParser@16",
      "body": "public void testParser() throws Exception {\n  InputStream nyData=getClass().getClassLoader().getResourceAsStream(\"ny-weather.xml\");\n  Weather weather=new YahooParser().parse(\"10002\",nyData);\n  assertEquals(\"New York\",weather.getLocation().getCity());\n  assertEquals(\"NY\",weather.getLocation().getRegion());\n  assertEquals(\"US\",weather.getLocation().getCountry());\n  assertEquals(\"39\",weather.getCondition().getTemp());\n  assertEquals(\"Fair\",weather.getCondition().getText());\n  assertEquals(\"39\",weather.getWind().getChill());\n  assertEquals(\"67\",weather.getAtmosphere().getHumidity());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/maven-reference-en/examples/ch-optimize/simple-parent/simple-weather/src/test/java/org/sonatype/mavenbook/weather/yahoo/YahooParserTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Class",
        "ClassLoader"
      ],
      "apicalls": [
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "loader",
        "class",
        "stream"
      ]
    },
    {
      "method": "propertyChange@67",
      "body": "public void propertyChange(PropertyChangeEvent e){\n  if (e.getPropertyName().equals(LINE_STYLE_PROPERTY))   decodeLineStyle(e.getNewValue());\n}\n",
      "formalParam": [
        "PropertyChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.beans.PropertyChangeEvent.getNewValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.UIManager.getColor(java.lang.Object)",
              "java.awt.Graphics.setColor(java.awt.Color)",
              "java.awt.Graphics.getClipBounds()",
              "java.awt.Graphics.drawLine(int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getClientProperty(java.lang.Object)",
              "java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/javax/swing/plaf/metal/MetalTreeUI.java",
      "classTypes": [
        "String",
        "int",
        "int",
        "String",
        "PropertyChangeListener",
        "String"
      ],
      "sorrformalparam": [
        [
          "Graphics",
          "JComponent"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [],
      "apicalls": [
        "getPropertyName",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.beans.PropertyChangeEvent.getNewValue()"
          ]
        },
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "event",
        "equals",
        "object"
      ]
    },
    {
      "method": "setInput@29",
      "body": "public void setInput(String stackFileName,long begin,long end){\n  if (begin == -1 || end == -1) {\n    viewer.getDocument().set(\"No stack trace available.\\nSee <eclipse install>/plugins/org.eclipse.osgi/.options\");\n    viewer.refresh();\n    return;\n  }\n  try {\n    byte[] chars=new byte[0];\n    FileInputStream fis=new FileInputStream(stackFileName);\n    try {\n      fis.skip(begin);\n      chars=new byte[(int)(end - begin)];\n      fis.read(chars);\n    }\n  finally {\n      fis.close();\n    }\n    viewer.getDocument().set(new String(chars));\n    viewer.refresh();\n  }\n catch (  FileNotFoundException e) {\n  }\ncatch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String",
        "long",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileInputStream.skip(long)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.FileInputStream.read(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.FileInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.String(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.runtime/bundles/org.eclipse.core.tools/src/org/eclipse/core/tools/runtime/StackTraceView.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Byte"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.FileInputStream.skip(long)",
            "java.io.FileInputStream.read(byte[])",
            "java.io.FileInputStream.close()",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "read",
        "long"
      ]
    },
    {
      "method": "find@36",
      "body": "public Iterator<Item> find(String cat,Collection<String> features,CIELabColor color,double dist,int minPrice,int maxPrice){\n  if (dist < 0) {\n    color=null;\n  }\n  Vector<Iterator<Item>> iters=new Vector<Iterator<Item>>();\n  Collection<ItemFinder> categories;\n  if ((cat != \"\") && (cat != null)) {\n    categories=categoryMap.itemFinders(cat);\n  }\n else {\n    categories=categoryMap.values();\n  }\n  for (  ItemFinder finder : categories) {\n    iters.add(finder.find(features,color,dist,minPrice,maxPrice));\n  }\n  return new CombinedIterator(iters);\n}\n",
      "formalParam": [
        "String",
        "Collection<String>",
        "CIELabColor",
        "double",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.TreeMap<Tau_K,Tau_V>.values()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Collection"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Iterator<Item>",
      "file": "./java_projects/Hobo/src/org/styloot/hobo/hoboindex/SimpleHoboIndex.java",
      "classTypes": [
        "Logger",
        "CategoryMap"
      ],
      "sorrformalparam": [],
      "types": [
        "Vector",
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.Vector()",
            "java.util.TreeMap<Tau_K,Tau_V>.values()"
          ]
        }
      ],
      "keywords": [
        "tree",
        "collection"
      ]
    },
    {
      "method": "setHistoryMaxSize@651",
      "body": "/** \n * Sets the maximal size of the historical data. Defaults to {@link #DEFAULT_HISTORY_MAX_LENGTH}<p> <strong>Note:</strong> Setting this property will immediately enforce the specified max history size by dropping enough old historical records to enforce the desired size. Thus, any records that exceed the history size will be discarded and irreversibly lost. </p>\n * @param historyMaxSize The max history size.\n */\npublic void setHistoryMaxSize(int historyMaxSize){\nsynchronized (mInstanceLock) {\n    if (mHistoryMaxSize == historyMaxSize) {\n      return;\n    }\n    mHistoryMaxSize=historyMaxSize;\n    pruneExcessiveHistoricalRecordsLocked();\n    sortActivities();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collections.unmodifiableList(java.util.List)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "int",
        "ActivityChooserModel",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Common-Sense-Net-2/AndroidBarSherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java",
      "classTypes": [
        "LinkedList<Runnable>",
        "Intent",
        "Object",
        "Map<String,ActivityChooserModel>",
        "Handler",
        "Object",
        "int",
        "boolean",
        "Map<String,ActivityResolveInfo>",
        "String"
      ],
      "sorrformalparam": [
        [
          "Runnable"
        ],
        [
          "Intent"
        ],
        [
          "ResolveInfo"
        ],
        [
          "Context",
          "String"
        ],
        [
          "ActivitySorter"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "remove",
        "size",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "size",
        "remove",
        "list",
        "util",
        "boolean",
        "empty"
      ]
    },
    {
      "method": "addDebugContextProvider@72",
      "body": "public synchronized void addDebugContextProvider(IDebugContextProvider provider){\n  if (fWindow == null)   return;\n  IWorkbenchPart part=provider.getPart();\n  fProvidersByPartId.put(getCombinedPartId(part),provider);\n  boolean canSetActive=true;\n  if (provider instanceof IDebugContextProvider2) {\n    canSetActive=((IDebugContextProvider2)provider).isWindowContextProvider();\n  }\n  if (canSetActive) {\n    IWorkbenchPart activePart=null;\n    IWorkbenchPage activePage=fWindow.getActivePage();\n    if (activePage != null) {\n      activePart=activePage.getActivePart();\n    }\n    canSetActive=(activePart == null && part == null) || (activePart != null && activePart.equals(part));\n  }\n  if (canSetActive) {\n    fProviders.add(0,provider);\n  }\n else {\n    fProviders.add(provider);\n  }\n  notify(provider);\n  provider.addDebugContextListener(this);\n}\n",
      "formalParam": [
        "IDebugContextProvider"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.List.add(int,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.indexOf(java.lang.Object)",
              "java.util.List.remove(int)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.debug/org.eclipse.debug.ui/ui/org/eclipse/debug/internal/ui/contexts/DebugWindowContextService.java",
      "classTypes": [
        "Map",
        "Map",
        "DebugContextSourceProvider",
        "IWorkbenchWindow"
      ],
      "sorrformalparam": [
        [
          "IWorkbenchPartReference"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.List.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.List.add(int,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "boolean"
      ]
    },
    {
      "method": "padNum@117",
      "body": "public String padNum(int num,int pad){\n  String res=Integer.toString(num);\n  if (pad > 0) {\n    while (res.length() < pad) {\n      res=\"0\" + res;\n    }\n  }\n  return res;\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/hbase-book/ch09/src/main/java/util/HBaseHelper.java",
      "classTypes": [
        "Configuration",
        "HBaseAdmin"
      ],
      "sorrformalparam": [
        [
          "String",
          "String[]",
          "String[]",
          "String[]"
        ]
      ],
      "types": [],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.String.length()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "length"
      ]
    },
    {
      "method": "getSerializedSize@8750",
      "body": "public int getSerializedSize(){\n  int size=memoizedSerializedSize;\n  if (size != -1)   return size;\n  size=0;\n{\n    int dataSize=0;\n    for (    int element : getIdsList()) {\n      dataSize+=com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(element);\n    }\n    size+=dataSize;\n    size+=1 * getIdsList().size();\n  }\n{\n    int dataSize=0;\n    for (    java.lang.String element : getNamesList()) {\n      dataSize+=com.google.protobuf.CodedOutputStream.computeStringSizeNoTag(element);\n    }\n    size+=dataSize;\n    size+=1 * getNamesList().size();\n  }\n  memoizedSerializedSize=size;\n  return size;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.Integer>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "Builder",
        "void",
        "void",
        "int",
        "Builder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/mumble-android/src/net/sf/mumble/MumbleProto.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "boolean",
        "boolean",
        "java.lang.String"
      ],
      "sorrformalparam": [
        [
          "net.sf.mumble.MumbleProto.UserStats"
        ],
        [
          "com.google.protobuf.CodedOutputStream"
        ],
        [
          "com.google.protobuf.CodedOutputStream"
        ],
        [],
        [
          "net.sf.mumble.MumbleProto.QueryUsers"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.size()",
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "string",
        "size"
      ]
    },
    {
      "method": "ASTList@54",
      "body": "/** \n * Initializes a list expression with a Java Collection\n */\npublic ASTList(Collection objects){\n  super(ExpressionParserTreeConstants.JJTLIST);\n  setValues(objects);\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.Iterator.next()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.Object"
                  },
                  {
                    "_call": "java.util.List.add(java.lang.Object)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              },
              {
                "_call": "java.util.List.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Collection.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "Expression",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char[])",
              "java.io.PrintWriter.print(char)",
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cayenne/framework/cayenne-jdk1.5-unpublished/src/main/java/org/apache/cayenne/exp/parser/ASTList.java",
      "classTypes": [
        "Object[]"
      ],
      "sorrformalparam": [
        [
          "Iterator"
        ],
        [
          "int",
          "Object"
        ],
        [],
        [],
        [
          "PrintWriter",
          "String"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Collection",
        "Object",
        "Iterator"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.List.toArray()"
          ]
        },
        {
          "calls": [
            "java.util.Collection.toArray()"
          ]
        }
      ],
      "keywords": [
        "array",
        "iterator",
        "list",
        "add",
        "util"
      ]
    },
    {
      "method": "invalidateRelationshipNameProperties@436",
      "body": "public void invalidateRelationshipNameProperties(String ns){\n  getCache().removeNode(getFqn(ns,NODE_REL_NAME_PROPS));\n  if (log.isLoggable(Level.FINER)) {\n    log.finer(this.toString() + \"Invalidating IdentityObjectRelationshipName properties. \" + \"Namespace:\"+ ns);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.finer(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "Collection<IdentityObject>",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/picketlink-idm/picketlink-idm-cache/src/main/java/org/picketlink/idm/impl/cache/InfinispanIdentityStoreCacheProviderImpl.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "int",
          "Object"
        ],
        [
          "String",
          "IdentityObjectSearch",
          "Collection<IdentityObject>"
        ],
        [
          "String",
          "IdentityObjectSearch"
        ],
        [
          "String"
        ],
        [
          "String",
          "String",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.finer(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "logging"
      ]
    },
    {
      "method": "toString@81",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"NewFilter(\");\n  sb.append(\")\");\n  return (sb.toString());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/geronimo/testsuite/javaee6-testsuite/servlet3.0-test/servlet3.0-test-war/src/main/java/org/apache/geronimo/testsuite/servlet3/app/CviewerFilter.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "paintTreeCellBorder@2735",
      "body": "/** \n * Paints the border of the row containing a cell in a tree.\n * @param context SynthContext identifying the <code>JComponent</code> and<code>Region</code> to paint to\n * @param g <code>Graphics</code> to paint to\n * @param x X coordinate of the area to paint to\n * @param y Y coordinate of the area to paint to\n * @param w Width of the area to paint to\n * @param h Height of the area to paint to\n */\npublic void paintTreeCellBorder(SynthContext context,Graphics g,int x,int y,int w,int h){\n  paintBorder(context,g,x,y,w,h,null);\n}\n",
      "formalParam": [
        "SynthContext",
        "Graphics",
        "int",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.image.BufferedImage.createGraphics()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Graphics2D"
              },
              {
                "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.JComponent"
              },
              {
                "_call": "java.awt.Graphics.dispose()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Graphics2D.translate(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.swing.plaf.synth.SynthContext.getComponent()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.JComponent"
              },
              {
                "_call": "java.awt.Graphics2D.translate(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DExcept",
                "_catch": [
                  {
                    "_call": "java.lang.Throwable.printStackTrace()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_try": [
                  {
                    "_call": "java.awt.geom.AffineTransform.createInverse()",
                    "_throws": [
                      "java.awt.geom.NoninvertibleTransformException"
                    ],
                    "node": "DAPICall",
                    "_returns": "java.awt.geom.AffineTransform"
                  },
                  {
                    "_call": "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
            ]
          },
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
              "java.awt.image.BufferedImage.createGraphics()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics.dispose()",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
            ]
          },
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
              "java.awt.image.BufferedImage.createGraphics()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics.dispose()",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
            ]
          },
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
              "java.awt.image.BufferedImage.createGraphics()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics.dispose()",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
            ]
          },
          {
            "calls": [
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.awt.Graphics2D.translate(int,int)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics2D.translate(int,int)",
              "java.awt.geom.AffineTransform.createInverse()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
              "java.awt.image.BufferedImage.createGraphics()",
              "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
              "javax.swing.plaf.synth.SynthContext.getComponent()",
              "java.awt.Graphics.dispose()",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/nimbus/SynthPainterImpl.java",
      "classTypes": [
        "NimbusStyle"
      ],
      "sorrformalparam": [
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "dispose"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.awt.Graphics2D.translate(int,int)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.geom.AffineTransform.createInverse()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)"
          ]
        },
        {
          "calls": [
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.awt.Graphics2D.translate(int,int)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics2D.translate(int,int)",
            "java.awt.geom.AffineTransform.createInverse()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.awt.image.BufferedImage.BufferedImage(int,int,int)",
            "java.awt.image.BufferedImage.createGraphics()",
            "java.awt.Graphics2D.transform(java.awt.geom.AffineTransform)",
            "javax.swing.plaf.synth.SynthContext.getComponent()",
            "java.awt.Graphics.dispose()",
            "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "affine",
        "synth",
        "translate",
        "inverse",
        "j",
        "geom",
        "awt",
        "stack"
      ]
    },
    {
      "method": "put@15",
      "body": "public void put(K key,V value){\n  ConcurrentLinkedQueue<V> values=underlying.get(key);\n  if (values == null) {\n    ConcurrentLinkedQueue<V> newValues=New.concurrentLinkedQueue();\n    values=underlying.putIfAbsent(key,newValues);\n    if (values == null)     values=newValues;\n  }\n  values.add(value);\n}\n",
      "formalParam": [
        "K",
        "V"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.putIfAbsent(Tau_K,Tau_V)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.concurrent.ConcurrentLinkedQueue<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jbehave-eclipse-plugin/src/org/technbolts/util/ConcurrentMultimap.java",
      "classTypes": [
        "ConcurrentHashMap<K,ConcurrentLinkedQueue<V>>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "ConcurrentLinkedQueue"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.putIfAbsent(Tau_K,Tau_V)",
            "java.util.concurrent.ConcurrentLinkedQueue<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "queue",
        "hash",
        "absent"
      ]
    },
    {
      "method": "tearDown@70",
      "body": "@AfterClass public static void tearDown() throws Exception {\n  if (uow != null) {\n    uow.discard();\n    uow=null;\n  }\n  if (uowf != null && uowf.isUnitOfWorkActive()) {\n    while (uowf.isUnitOfWorkActive()) {\n      UnitOfWork uow=uowf.currentUnitOfWork();\n      if (uow.isOpen()) {\n        System.err.println(\"UnitOfWork not cleaned up:\" + uow.usecase().name());\n        uow.discard();\n      }\n else {\n        throw new InternalError(\"I have seen a case where a UoW is on the stack, but not opened. First is: \" + uow.usecase().name());\n      }\n    }\n    new Exception(\"UnitOfWork not properly cleaned up\").printStackTrace();\n  }\n  if (app != null) {\n    app.passivate();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Exception.Exception(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/qi4j-sdk/samples/dci-cargo/dcisample_a/src/test/java/org/qi4j/sample/dcicargo/sample_a/bootstrap/test/TestApplication.java",
      "classTypes": [
        "Application",
        "UnitOfWorkFactory"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Character",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.lang.Exception.Exception(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "character",
        "io"
      ]
    },
    {
      "method": "load@44",
      "body": "public static void load(String libPath){\n  if (mLoaded.contains(libPath)) {\n    return;\n  }\n  File libFile;\n  try {\n    libFile=getResourceAsFile(libPath);\n  }\n catch (  BrutException ex) {\n    throw new UnsatisfiedLinkError(ex.getMessage());\n  }\n  System.load(libFile.getAbsolutePath());\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.System.load(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "File"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.io.File>.get(java.lang.Object)",
              "java.util.Map<java.lang.String,java.io.File>.put(java.lang.String,java.io.File)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "java.io.File.deleteOnExit()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.close()",
              "java.io.OutputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/brut.j.util/src/main/java/brut/util/Jar.java",
      "classTypes": [
        "Map<String,File>",
        "Set<String>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "java.io.File.getAbsolutePath()",
            "java.lang.System.load(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "load"
      ]
    },
    {
      "method": "camelCaseMatch@3828",
      "body": "/** \n * Answers true if a sub-pattern matches the subpart of the given name using CamelCase rules, or false otherwise. char[] CamelCase matching does NOT accept explicit wild-cards '*' and '?' and is inherently case sensitive. Can match only subset of name/pattern, considering end positions as non-inclusive. The subpattern is defined by the patternStart and patternEnd positions. <br> CamelCase denotes the convention of writing compound names without spaces, and capitalizing every term. This function recognizes both upper and lower CamelCase, depending whether the leading character is capitalized or not. The leading part of an upper CamelCase pattern is assumed to contain a sequence of capitals which are appearing in the matching name; e.g. 'NPE' will match 'NullPointerException', but not 'NewPerfData'. A lower CamelCase pattern uses a lowercase first character. In Script, type names follow the upper CamelCase convention, whereas method or field names follow the lower CamelCase convention. <br> The pattern may contain lowercase characters, which will be match in a case sensitive way. These characters must appear in sequence in the name. For instance, 'NPExcep' will match 'NullPointerException', but not 'NullPointerExCEPTION' or 'NuPoEx' will match 'NullPointerException', but not 'NoPointerException'. <br> <br> Examples: <ol> <li> <pre> pattern = { 'N', 'P', 'E' } patternStart = 0 patternEnd = 3 name = { 'N', 'u','l', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n' } nameStart = 0 nameEnd = 20 result =&gt; true </pre> </li> <li> <pre> pattern = { 'N', 'P', 'E' } patternStart = 0 patternEnd = 3 name = { 'N', 'o', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n' } nameStart = 0 nameEnd = 21 result =&gt; true </pre> </li> <li> <pre> pattern = { 'N', 'u', 'P', 'o', 'E', 'x' } patternStart = 0 patternEnd = 6 name = { 'N', 'u','l', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n' } nameStart = 0 nameEnd = 20 result =&gt; true </pre> </li> <li> <pre> pattern = { 'N', 'u', 'P', 'o', 'E', 'x' } patternStart = 0 patternEnd = 6 name = { 'N', 'o', 'P', 'e', 'r', 'm', 'i', 's', 's', 'i', 'o', 'n', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n' } nameStart = 0 nameEnd = 21 result =&gt; false </pre> </li> <li> <pre> pattern = { 'n', p', 'e' } patternStart = 0 patternEnd = 3 name = { 'N', 'u','l', 'l', 'P', 'o', 'i', 'n', 't', 'e', 'r', 'E', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n' } nameStart = 0 nameEnd = 20 result =&gt; false </pre> </li> </ol>\n * @param pattern the given pattern\n * @param patternStart the start index of the pattern, inclusive\n * @param patternEnd the end index of the pattern, exclusive\n * @param name the given name\n * @param nameStart the start index of the name, inclusive\n * @param nameEnd the end index of the name, exclusive\n * @return true if a sub-pattern matches the subpart of the given name,false otherwise\n */\npublic static final boolean camelCaseMatch(char[] pattern,int patternStart,int patternEnd,char[] name,int nameStart,int nameEnd){\n  if (name == null)   return false;\n  if (pattern == null)   return true;\n  if (patternEnd < 0)   patternEnd=pattern.length;\n  if (nameEnd < 0)   nameEnd=name.length;\n  if (patternEnd <= patternStart)   return nameEnd <= nameStart;\n  if (nameEnd <= nameStart)   return false;\n  if (name[nameStart] != pattern[patternStart]) {\n    return false;\n  }\n  char patternChar, nameChar;\n  int iPattern=patternStart;\n  int iName=nameStart;\n  while (true) {\n    iPattern++;\n    iName++;\n    if (iPattern == patternEnd) {\n      return true;\n    }\n    if (iName == nameEnd) {\n      return false;\n    }\n    if ((patternChar=pattern[iPattern]) == name[iName]) {\n      continue;\n    }\n    if (patternChar < MAX_OBVIOUS) {\n      if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[patternChar] & ScannerHelper.C_UPPER_LETTER) == 0) {\n        return false;\n      }\n    }\n else     if (Character.isJavaIdentifierPart(patternChar) && !Character.isUpperCase(patternChar)) {\n      return false;\n    }\n    while (true) {\n      if (iName == nameEnd) {\n        return false;\n      }\n      nameChar=name[iName];\n      if (nameChar < MAX_OBVIOUS) {\n        if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[nameChar] & (ScannerHelper.C_LOWER_LETTER | ScannerHelper.C_SPECIAL | ScannerHelper.C_DIGIT)) != 0) {\n          iName++;\n        }\n else         if (patternChar != nameChar) {\n          return false;\n        }\n else {\n          break;\n        }\n      }\n else       if (Character.isJavaIdentifierPart(nameChar) && !Character.isUpperCase(nameChar)) {\n        iName++;\n      }\n else       if (patternChar != nameChar) {\n        return false;\n      }\n else {\n        break;\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "char[]",
        "int",
        "int",
        "char[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Character.isJavaIdentifierPart(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.lang.Character.isUpperCase(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Character.isJavaIdentifierPart(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.lang.Character.isUpperCase(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "char[]",
        "String",
        "String",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Character.isJavaIdentifierPart(char)",
              "$NOT$java.lang.Character.isUpperCase(char)",
              "java.lang.Character.isJavaIdentifierPart(char)",
              "$NOT$java.lang.Character.isUpperCase(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Character.toLowerCase(char)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.String.String(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.Character.toLowerCase(char)",
              "java.lang.String.charAt(int)",
              "java.lang.Character.toLowerCase(char)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/studio3-php/plugins/com.aptana.editor.php.epl/dltk/org2/eclipse/dltk/compiler/CharOperation.java",
      "classTypes": [
        "char[][]"
      ],
      "sorrformalparam": [
        [
          "char[]",
          "char[]"
        ],
        [
          "char[]"
        ],
        [
          "String",
          "char"
        ],
        [
          "char[][]"
        ],
        [
          "char[]",
          "String",
          "boolean"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Character.isJavaIdentifierPart(char)",
            "$NOT$java.lang.Character.isUpperCase(char)",
            "java.lang.Character.isJavaIdentifierPart(char)",
            "$NOT$java.lang.Character.isUpperCase(char)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "identifier",
        "case",
        "part"
      ]
    },
    {
      "method": "propertyChange@68",
      "body": "/** \n * If host is changed this main  panel need to be refreshed using the new host.\n */\npublic void propertyChange(PropertyChangeEvent evt){\n  if (evt.getPropertyName().equals(\"REFRESH_HOST\")) {\n    browser.updateRepositoriesCombo();\n  }\n  if (evt.getPropertyName().equals(\"REFRESH_TOPCONCEPT\") || evt.getPropertyName().equals(\"REFRESH_NARROWER\")) {\n    browser.updateBrowseTables();\n  }\n}\n",
      "formalParam": [
        "PropertyChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/aida-plugin/src/main/java/org/vle/aid/taverna/panel/AIDMainPanel.java",
      "classTypes": [
        "AIDBrowsePanel",
        "AIDSearchPanel",
        "JSplitPane",
        "AIDServerConfigPanel",
        "AIDSkosLensConfigPanel"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get",
        "change"
      ]
    },
    {
      "method": "context@202",
      "body": "@Test public void context(){\n  Context context=Lang.context();\n  List<String> list=new ArrayList<String>();\n  list.add(\"jk\");\n  context.set(\"a\",list);\n  assertEquals(\"jk\",El.eval(context,\"a.get((1-1))\"));\n  assertEquals(\"jk\",El.eval(context,\"a.get(1-1)\"));\n  assertEquals(\"jk\",El.eval(context,\"a.get(0)\"));\n  assertTrue((Boolean)El.eval(Lang.context(),\"a==null\"));\n  try {\n    assertTrue((Boolean)El.eval(Lang.context(),\"a.a\"));\n    fail();\n  }\n catch (  Exception e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.lang.Thread.start()",
              "java.util.concurrent.CountDownLatch.await()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/nutz/test/org/nutz/el/El2Test.java",
      "classTypes": [
        "El"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "ArrayList",
        "List"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list"
      ]
    },
    {
      "method": "minimumLayoutSize@55",
      "body": "public Dimension minimumLayoutSize(Container parent){\nsynchronized (parent.getTreeLock()) {\n    Component c=getComponent(parent);\n    Insets insets=parent.getInsets();\n    if (c != null) {\n      Dimension d=c.getMinimumSize();\n      return new Dimension((int)d.getWidth() + insets.left + insets.right,(int)d.getHeight() + insets.top + insets.bottom);\n    }\n else {\n      return new Dimension(insets.left + insets.right,insets.top + insets.bottom);\n    }\n  }\n}\n",
      "formalParam": [
        "Container"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getTreeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Container.getComponents()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component[]"
          },
          {
            "_call": "java.awt.Component.isVisible()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Container.getInsets()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Insets"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Dimension.Dimension(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Component.getMinimumSize()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Dimension"
              },
              {
                "_call": "java.awt.Dimension.Dimension(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Component.getTreeLock()",
              "java.awt.Container.getComponents()",
              "java.awt.Component.isVisible()",
              "java.awt.Container.getInsets()",
              "java.awt.Component.getPreferredSize()",
              "java.awt.Dimension.Dimension(int,int)"
            ]
          },
          {
            "calls": [
              "java.awt.Component.getTreeLock()",
              "java.awt.Container.getComponents()",
              "java.awt.Component.isVisible()",
              "java.awt.Container.getInsets()",
              "java.awt.Dimension.Dimension(int,int)"
            ]
          }
        ]
      ],
      "returnType": "Dimension",
      "file": "./java_projects/sradonia-tools/src/main/java/net/sradonia/gui/CenterLayout.java",
      "classTypes": [
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Container"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getTreeLock()",
            "java.awt.Container.getComponents()",
            "java.awt.Component.isVisible()",
            "java.awt.Container.getInsets()",
            "java.awt.Component.getMinimumSize()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        },
        {
          "calls": [
            "java.awt.Component.getTreeLock()",
            "java.awt.Container.getComponents()",
            "java.awt.Component.isVisible()",
            "java.awt.Container.getInsets()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        }
      ],
      "keywords": [
        "visible"
      ]
    },
    {
      "method": "stop@209",
      "body": "public synchronized void stop(){\n  getLogger().info(\"HttpProxy service stopped.\");\n  running=false;\n  if (serverSocket != null) {\n    try {\n      serverSocket.close();\n    }\n catch (    IOException e) {\n      getLogger().warn(\"Exception while stopping HttpProxy service:\",e);\n    }\n  }\n  if (serverThread != null) {\n    serverThread.interrupt();\n  }\n  if (pool != null) {\n    pool.shutdownNow();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.ServerSocket.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ExecutorService.shutdownNow()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.ServerSocket.accept()",
              "java.util.concurrent.Executor.execute(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.ServerSocket.ServerSocket(int)",
              "java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          },
          {
            "calls": [
              "java.net.ServerSocket.ServerSocket(int)",
              "java.util.concurrent.Executors.newFixedThreadPool(int,java.util.concurrent.ThreadFactory)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.net.ServerSocket.close()",
              "java.lang.Thread.interrupt()",
              "java.util.concurrent.ExecutorService.shutdownNow()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/nexus/nexus/nexus-proxy/src/main/java/org/sonatype/nexus/proxy/http/DefaultHttpProxyService.java",
      "classTypes": [
        "int",
        "HttpProxyService",
        "ExecutorService",
        "Thread",
        "Logger",
        "NexusURLResolver",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Thread",
        "List",
        "ExecutorService"
      ],
      "apicalls": [
        "close",
        "interrupt"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.ServerSocket.close()",
            "java.lang.Thread.interrupt()",
            "java.util.concurrent.ExecutorService.shutdownNow()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "server",
        "now"
      ]
    },
    {
      "method": "testIsLeaf@129",
      "body": "public void testIsLeaf() throws Exception {\n  DynamicUtilTreeNode node=new DynamicUtilTreeNode(\"value\",null);\n  assertFalse(node.getAllowsChildren());\n  assertTrue(node.isLeaf());\n  node.setAllowsChildren(true);\n  assertFalse(node.isLeaf());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.tree.DefaultMutableTreeNode.getUserObject()",
              "javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/swing/src/test/api/java.injected/javax/swing/JTree_DynamicUtilTreeNodeTest.java",
      "classTypes": [
        "JTree.DynamicUtilTreeNode"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.tree.DefaultMutableTreeNode.getAllowsChildren()",
            "javax.swing.tree.DefaultMutableTreeNode.setAllowsChildren(boolean)"
          ]
        }
      ],
      "keywords": [
        "children",
        "boolean",
        "tree",
        "default"
      ]
    },
    {
      "method": "evaluateItem@44",
      "body": "@Override public Item evaluateItem(XPathContext xpathContext) throws XPathException {\n  final String propertyNameString=argument[0].evaluateAsString(xpathContext).toString();\n  final QName propertyNameQName=Dom4jUtils.extractTextValueQName(namespaceMappings,propertyNameString,false);\n  if (propertyNameString.toLowerCase().indexOf(\"password\") != -1) {\n    return null;\n  }\n  if (VERSION_PROPERTY.equals(propertyNameString)) {\n    return VERSION;\n  }\n else   if (CONFORMANCE_LEVEL_PROPERTY.equals(propertyNameString)) {\n    return CONFORMANCE_LEVEL;\n  }\n else   if (XFormsConstants.XXFORMS_NAMESPACE_URI.equals(propertyNameQName.getNamespaceURI())) {\n    final Object value=XFormsProperties.getProperty(getContainingDocument(xpathContext),propertyNameQName.getName());\n    if (value == null)     return null;\n    return (Item)XFormsUtils.convertJavaObjectToSaxonObject(value);\n  }\n else {\n    throw new XPathException(\"Invalid property() function parameter: \" + propertyNameString);\n  }\n}\n",
      "formalParam": [
        "XPathContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Item",
      "file": "./java_projects/orbeon-forms/src/java/org/orbeon/oxf/xforms/function/Property.java",
      "classTypes": [
        "String",
        "String",
        "StringValue",
        "Map<String,String>",
        "StringValue"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "case",
        "boolean",
        "equals",
        "integer"
      ]
    },
    {
      "method": "getXmlComponents@92",
      "body": "/** \n * Get all XML defined (throught components.xml and component.xml) components\n */\npublic Set<FileDescriptor> getXmlComponents(){\n  Set<FileDescriptor> fileDescriptors=new HashSet<FileDescriptor>();\n  fileDescriptors.addAll(componentsXmlDeploymentHandler.getResources());\n  fileDescriptors.addAll(dotComponentDotXmlDeploymentHandler.getResources());\n  return Collections.unmodifiableSet(fileDescriptors);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.unmodifiableSet(java.util.Set)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()"
            ]
          }
        ]
      ],
      "returnType": "Set<FileDescriptor>",
      "file": "./java_projects/Seam2.3/jboss-seam/src/main/java/org/jboss/seam/deployment/StandardDeploymentStrategy.java",
      "classTypes": [
        "NamespaceDeploymentHandler",
        "AnnotationDeploymentHandler"
      ],
      "sorrformalparam": [
        [
          "ClassLoader",
          "ServletContext"
        ]
      ],
      "types": [
        "Collections",
        "HashSet",
        "Set"
      ],
      "apicalls": [
        "unmodifiableSet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Collections.unmodifiableSet(java.util.Set)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "util",
        "unmodifiable",
        "hash"
      ]
    },
    {
      "method": "testImageMacroBasic@61",
      "body": "/** \n * Simplest possible use of the image macro.\n */\npublic void testImageMacroBasic() throws IOException {\n  String html=parser.parseToHtml(\"there is a macro [[Image(local_attachment.png)]] in the [[Image(http://www.example.com/external.png)]] page\");\n  TestUtil.println(html);\n  assertTrue(Pattern.compile(\"<body><p>there is a macro <img border=\\\"0\\\" src=\\\"local_attachment.png\\\"/> in the <img border=\\\"0\\\" src=\\\"http://www.example.com/external.png\\\"/> page</p></body>\").matcher(html).find());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_call": "java.util.regex.Matcher.find()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String,int)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/mylyn.docs/org.eclipse.mylyn.wikitext.tests/src/org/eclipse/mylyn/wikitext/tracwiki/core/TracWikiLanguageTest.java",
      "classTypes": [
        "MarkupParser",
        "TracWikiLanguage"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Pattern"
      ],
      "apicalls": [
        "compile"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "uninstall@129",
      "body": "public void uninstall(String groupName,String symbolicName,String version) throws Exception {\n  Group group=groupManager.findGroupByName(groupName);\n  if (group == null) {\n    throw new IllegalArgumentException(\"Cluster group \" + groupName + \" doesn't exist\");\n  }\n  if (eventProducer.getSwitch().getStatus().equals(SwitchStatus.OFF)) {\n    throw new IllegalStateException(\"Cluster event producer is OFF for this node\");\n  }\n  ClassLoader originalClassLoader=Thread.currentThread().getContextClassLoader();\n  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n  try {\n    Map<String,BundleState> bundles=clusterManager.getMap(Constants.BUNDLE_MAP + Configurations.SEPARATOR + groupName);\n    BundleState state=bundles.get(symbolicName + \"/\" + version);\n    if (state == null) {\n      throw new IllegalArgumentException(\"Bundle \" + symbolicName + \"/\"+ version+ \" is not found in cluster group \"+ groupName);\n    }\n    String location=state.getLocation();\n    CellarSupport support=new CellarSupport();\n    support.setClusterManager(this.clusterManager);\n    support.setGroupManager(this.groupManager);\n    support.setConfigurationAdmin(this.configurationAdmin);\n    if (!support.isAllowed(group,Constants.CATEGORY,location,EventType.OUTBOUND)) {\n      throw new IllegalArgumentException(\"Bundle location \" + location + \" is blocked outbound\");\n    }\n    bundles.remove(symbolicName + \"/\" + version);\n  }\n  finally {\n    Thread.currentThread().setContextClassLoader(originalClassLoader);\n  }\n  RemoteBundleEvent event=new RemoteBundleEvent(symbolicName,version,null,BundleEvent.UNINSTALLED);\n  event.setSourceGroup(group);\n  eventProducer.produce(event);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "TabularData",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.Thread.currentThread()",
              "java.lang.Class.getClassLoader()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.Thread.currentThread()",
              "java.lang.Class.getClassLoader()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
              "java.lang.String.split(java.lang.String)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.Thread.currentThread()",
              "java.lang.Class.getClassLoader()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/karaf-cellar/management/src/main/java/org/apache/karaf/cellar/management/internal/CellarBundleMBeanImpl.java",
      "classTypes": [
        "ConfigurationAdmin",
        "EventProducer",
        "ClusterManager",
        "GroupManager"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.Thread.currentThread()",
            "java.lang.Class.getClassLoader()",
            "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
          ]
        }
      ],
      "keywords": [
        "thread",
        "loader"
      ]
    },
    {
      "method": "read@3186",
      "body": "public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {\n  org.apache.thrift7.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift7.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 0:\n      if (field.type == org.apache.thrift7.protocol.TType.I32) {\n        this.success=iprot.readI32();\n        set_success_isSet(true);\n      }\n else {\n        org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift7.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.set(int,boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "BitSet"
      ],
      "sorrformalparam": [
        [
          "abort_result"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "set"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.set(int,boolean)"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "saveUploadedFile@75",
      "body": "public void saveUploadedFile(String filename){\n  BufferedInputStream inputStream=null;\n  FileOutputStream outputStream=null;\n  try {\n    inputStream=new BufferedInputStream(this.item.getInputStream());\n    outputStream=new FileOutputStream(filename);\n    int c;\n    byte[] b=new byte[4096];\n    while ((c=inputStream.read(b)) != -1) {\n      outputStream.write(b,0,c);\n    }\n  }\n catch (  IOException e) {\n    throw new ForumException(e);\n  }\n finally {\n    if (outputStream != null) {\n      try {\n        outputStream.flush();\n        outputStream.close();\n      }\n catch (      IOException e) {\n      }\n    }\n    if (inputStream != null) {\n      try {\n        inputStream.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.FileOutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.FilterInputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jforum2/src/net/jforum/view/forum/common/UploadUtils.java",
      "classTypes": [
        "FileItem",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "FilterInputStream",
        "IOException",
        "OutputStream",
        "FileOutputStream",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.FilterInputStream.read(byte[])",
            "java.io.FileOutputStream.write(byte[],int,int)",
            "java.io.FilterInputStream.read(byte[])",
            "java.io.OutputStream.flush()",
            "java.io.FileOutputStream.close()",
            "java.io.BufferedInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "addConfigParameterListener@61",
      "body": "public void addConfigParameterListener(ConfigParameterListener l){\n  listeners.add(l);\n  if (listeners.size() == 1) {\n    COConfigurationManager.addParameterListener(key,this);\n  }\n}\n",
      "formalParam": [
        "ConfigParameterListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frostwire-android/src/azureus/org/gudy/azureus2/pluginsimpl/local/config/ConfigParameterImpl.java",
      "classTypes": [
        "List",
        "String"
      ],
      "sorrformalparam": [
        [
          "ConfigParameterListener"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "add",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.add(java.lang.Object)",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "object",
        "boolean",
        "add",
        "util"
      ]
    },
    {
      "method": "warn@93",
      "body": "/** \n * Warn the user of a problem.\n * @param msg Message text to issue\n * @param args Arguments to pass to the message\n * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decidethe error condition is severe enough to halt processing.\n * @throws TransformerException\n * @xsl.usage internal\n */\npublic void warn(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {\n  warn(srcLctr,null,null,msg,args);\n}\n",
      "formalParam": [
        "SourceLocator",
        "String",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/lcmc/src/lib/org/apache/xalan/transformer/MsgMgr.java",
      "classTypes": [
        "TransformerImpl"
      ],
      "sorrformalparam": [
        [
          "SourceLocator",
          "Node",
          "Node",
          "String",
          "Object[]"
        ],
        [
          "SourceLocator",
          "String"
        ]
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "transform",
        "locator"
      ]
    },
    {
      "method": "testExceptionMessages@218",
      "body": "public void testExceptionMessages() throws Exception {\n  logExceptionMessages();\n  checkLogRecords(true);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Iterator.hasNext()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.Iterator.hasNext()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
              "java.io.InputStream.close()",
              "java.util.logging.Logger.getLogger(java.lang.String)",
              "java.util.logging.Logger.getParent()",
              "java.util.logging.Logger.getParent()",
              "java.util.logging.Logger.getParent()",
              "java.util.logging.Logger.getHandlers()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.lang.String.startsWith(java.lang.String)",
              "$NOT$java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.lang.String.startsWith(java.lang.String)",
              "$NOT$java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/commons-logging/src/test/org/apache/commons/logging/jdk14/CustomConfigTestCase.java",
      "classTypes": [
        "String",
        "Logger",
        "TestHandler",
        "LogManager",
        "Level",
        "Handler",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.lang.String.startsWith(java.lang.String)",
            "$NOT$java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "string",
        "iterator",
        "util",
        "boolean",
        "next",
        "lang"
      ]
    },
    {
      "method": "read@2184",
      "body": "public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n  org.apache.thrift.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 1:\n      if (field.type == org.apache.thrift.protocol.TType.I32) {\n        this.numRows=iprot.readI32();\n        setNumRowsIsSet(true);\n      }\n else {\n        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.set(int,boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "fetchAll_result",
        "String",
        "String",
        "fetchN_result",
        "void",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear(int)"
            ]
          },
          {
            "calls": [
              "java.util.BitSet.set(int,boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/hive/0.8.1-wso2v2/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java",
      "classTypes": [
        "Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>",
        "org.apache.thrift.protocol.TField",
        "org.apache.thrift.protocol.TStruct",
        "Map<String,_Fields>",
        "org.apache.thrift.protocol.TStruct",
        "Map<String,_Fields>",
        "Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [
          "String"
        ],
        [],
        [
          "_Fields",
          "Object"
        ]
      ],
      "types": [],
      "apicalls": [
        "set"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.set(int,boolean)"
          ]
        }
      ],
      "keywords": [
        "bit",
        "util",
        "integer"
      ]
    },
    {
      "method": "testFlipBitException@430",
      "body": "/** \n * flipBit(int n) of a negative n\n */\npublic void testFlipBitException(){\n  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};\n  int aSign=1;\n  int number=-7;\n  BigInteger aNumber=new BigInteger(aSign,aBytes);\n  try {\n    aNumber.flipBit(number);\n    fail(\"ArithmeticException has not been caught\");\n  }\n catch (  ArithmeticException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(int,byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.flipBit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.math.BigInteger"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.testBit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.bitLength()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.setBit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.testBit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.setBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "$NOT$java.math.BigInteger.testBit(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerOperateBitsTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(int,byte[])",
            "java.math.BigInteger.flipBit(int)"
          ]
        }
      ],
      "keywords": [
        "big"
      ]
    },
    {
      "method": "removeLOBMapping@3274",
      "body": "/** \n * Remove the key(LOCATOR) from the hash table.\n * @param key an integer that represents the locator that needs to beremoved from the table.\n */\npublic void removeLOBMapping(int key){\n  getlobHMObj().remove(new Integer(key));\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "int",
        "Savepoint",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.lang.Integer.Integer(int)",
              "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.PreparedStatement.setString(int,java.lang.String)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/derby/java/engine/org/apache/derby/impl/jdbc/EmbedConnection.java",
      "classTypes": [
        "SQLWarning",
        "DatabaseMetaData",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Object"
        ],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "HashMap",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.lang.Integer.Integer(int)",
            "java.util.HashMap.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "hash",
        "remove",
        "util",
        "object"
      ]
    },
    {
      "method": "doSave@1176",
      "body": "/** \n * This is for implementing  {@link IEditorPart} and simply saves the model file.<!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\n@Override public void doSave(IProgressMonitor progressMonitor){\n  final Map<Object,Object> saveOptions=new HashMap<Object,Object>();\n  saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED,Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);\n  WorkspaceModifyOperation operation=new WorkspaceModifyOperation(){\n    @Override public void execute(    IProgressMonitor monitor){\n      boolean first=true;\n      for (      Resource resource : editingDomain.getResourceSet().getResources()) {\n        if ((first || !resource.getContents().isEmpty() || isPersisted(resource)) && !editingDomain.isReadOnly(resource)) {\n          try {\n            long timeStamp=resource.getTimeStamp();\n            resource.save(saveOptions);\n            if (resource.getTimeStamp() != timeStamp) {\n              savedResources.add(resource);\n            }\n          }\n catch (          Exception exception) {\n            resourceToDiagnosticMap.put(resource,analyzeResourceProblems(resource,exception));\n          }\n          first=false;\n        }\n      }\n    }\n  }\n;\n  updateProblemIndication=false;\n  try {\n    new ProgressMonitorDialog(getSite().getShell()).run(true,false,operation);\n    ((BasicCommandStack)editingDomain.getCommandStack()).saveIsDone();\n    firePropertyChange(IEditorPart.PROP_DIRTY);\n  }\n catch (  Exception exception) {\n    EurEditorPlugin.INSTANCE.log(exception);\n  }\n  updateProblemIndication=true;\n  updateProblemIndication();\n}\n",
      "formalParam": [
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Object[]",
        "Object[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "$NOT$java.util.Collection<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.Set.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.Set.toArray()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/CertWare/net.certware.argument.eur.editor/src/net/certware/argument/eur/presentation/EurEditor.java",
      "classTypes": [
        "ComposedAdapterFactory",
        "MarkerHelper",
        "Collection<Resource>",
        "ISelection",
        "Collection<ISelectionChangedListener>",
        "TreeViewer",
        "boolean",
        "AdapterFactoryEditingDomain",
        "TabbedPropertySheetPage",
        "IStatusLineManager"
      ],
      "sorrformalparam": [
        [
          "IMarker"
        ],
        [
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "HashMap",
        "Map",
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()",
            "java.util.Map<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "put",
        "map"
      ]
    },
    {
      "method": "getFeatureType@237",
      "body": "/** \n * Turn the key into a String and return the corresponding featureType, if any.\n * @param ds     look in this datset\n * @param key    if starts with \":\", replace with value of global attribute\n * @param errlog error messages here\n * @return featureType, or null\n */\nstatic public FeatureType getFeatureType(NetcdfDataset ds,String key,Formatter errlog){\n  FeatureType ft=null;\n  String fts=getLiteral(ds,key,errlog);\n  if (fts != null) {\n    ft=FeatureType.valueOf(fts.toUpperCase());\n    if ((ft == null) && (errlog != null))     errlog.format(\" Cant find Feature type %s from %s\\n\",fts,key);\n  }\n  return ft;\n}\n",
      "formalParam": [
        "NetcdfDataset",
        "String",
        "Formatter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Formatter"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.substring(int)",
              "java.util.Formatter.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "FeatureType",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/nc2/ft/point/standard/Evaluator.java",
      "classTypes": [
        "Variable",
        "Attribute",
        "String",
        "Variable"
      ],
      "sorrformalparam": [
        [
          "NetcdfDataset",
          "String",
          "Formatter"
        ]
      ],
      "types": [
        "String",
        "Object",
        "Locale",
        "Formatter"
      ],
      "apicalls": [
        "toUpperCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toUpperCase()",
            "java.util.Formatter.format(java.util.Locale,java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "case",
        "string",
        "object",
        "locale"
      ]
    },
    {
      "method": "ConfigManager@25",
      "body": "public ConfigManager(MobLoot plugin){\n  _plugin=plugin;\n  _configFile=new File(_plugin.getDataFolder() + File.separator + \"General.yml\");\n  _worldDropTable=new HashMap<String,HashMap<CreatureID,ArrayList<ItemInfo>>>();\n  loadConfig();\n}\n",
      "formalParam": [
        "MobLoot"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.exists()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.io.File.exists()",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/MobLoot/src/com/stevenmattera/MobLoot/ConfigManager.java",
      "classTypes": [
        "FileConfiguration",
        "MobLoot",
        "File"
      ],
      "sorrformalparam": [
        [
          "String",
          "CreatureID",
          "String[]"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.io.File.exists()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.io.File.exists()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "exists"
      ]
    },
    {
      "method": "getCallerPrincipal@247",
      "body": "@Override public Principal getCallerPrincipal(){\n  final ThreadContext threadContext=ThreadContext.getThreadContext();\n  final SecurityContext securityContext=threadContext.get(SecurityContext.class);\n  final Set<Principal> principals=securityContext.subject.getPrincipals();\n  if (!principals.isEmpty()) {\n    for (    final Principal principal : principals) {\n      if (principal.getClass().isAnnotationPresent(CallerPrincipal.class)) {\n        return principal;\n      }\n    }\n    return principals.iterator().next();\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.security.auth.Subject.getPrincipals()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Set<java.security.Principal>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class.isAnnotationPresent(java.lang.Class)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Set<java.security.Principal>.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              },
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ThreadLocal<Tau_T>.get()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.lang.ThreadLocal<Tau_T>.set(Tau_T)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>(int)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>(int)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Principal",
      "file": "./java_projects/openejb/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
      "classTypes": [
        "String",
        "ThreadLocal<Identity>",
        "String",
        "SecurityContext",
        "Map<Object,Identity>",
        "List<Principal>"
      ],
      "sorrformalparam": [
        [
          "UUID"
        ],
        [
          "Principal[]",
          "Set<String>"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "isAnnotationPresent"
      ],
      "sequences": [
        {
          "calls": [
            "javax.security.auth.Subject.getPrincipals()",
            "$NOT$java.util.Set<java.security.Principal>.isEmpty()",
            "java.lang.Class.isAnnotationPresent(java.lang.Class)",
            "java.util.Set<java.security.Principal>.iterator()",
            "java.util.Iterator.next()"
          ]
        },
        {
          "calls": [
            "javax.security.auth.Subject.getPrincipals()",
            "$NOT$java.util.Set<java.security.Principal>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "security",
        "principals",
        "annotation"
      ]
    },
    {
      "method": "sendOperation2Nodes@154",
      "body": "public Map<String,Object> sendOperation2Nodes(final Set<String> iNodeIds,final OAbstractDistributedTask<? extends Object> iTask) throws ODistributedException {\n  final Map<String,Object> result=new HashMap<String,Object>();\n  for (  String nodeId : iNodeIds) {\n    final Member m=remoteClusterNodes.get(nodeId);\n    if (m == null)     OLogManager.instance().warn(this,\"DISTRIBUTED -> cannot execute operation on remote member %s because is disconnected\",nodeId);\n else     result.put(nodeId,sendOperation2Node(nodeId,iTask));\n  }\n  return result;\n}\n",
      "formalParam": [
        "Set<String>",
        "OAbstractDistributedTask<? extends Object>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "Set<String>",
        "void",
        "void",
        "HazelcastInstance",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<java.lang.String>.size()",
              "java.util.HashSet<java.lang.String>.HashSet<String>(int)",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Set<java.lang.String>.size()",
              "java.util.HashSet<java.lang.String>.HashSet<String>(int)",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Boolean>.remove(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Boolean>.isEmpty()"
            ]
          },
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Boolean>.remove(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Boolean>.isEmpty()",
              "java.util.Map<java.lang.String,java.lang.Boolean>.entrySet()",
              "java.lang.String.split(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)"
            ]
          }
        ]
      ],
      "returnType": "Map<String,Object>",
      "file": "./java_projects/Orient/distributed/src/main/java/com/orientechnologies/orient/server/hazelcast/OHazelcastPlugin.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String",
          "String"
        ],
        [],
        []
      ],
      "types": [
        "Map"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "put",
        "util",
        "object",
        "hash"
      ]
    },
    {
      "method": "checkStreetDistanceJAXBMapping@269",
      "body": "public static void checkStreetDistanceJAXBMapping(StreetDistance result,String feed,String parentXpath){\n  assertQ(\"streetDistance is not correcty mapped with jaxb\",feed,\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ Constants.STREETDISTANCE_JAXB_NAME+ \"/name[.='\"+ result.getName()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/gid[.='\"+ result.getGid()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/oneWay[.='\"+ result.getOneWay()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/streetType[.='\"+ result.getStreetType()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/distance[.='\"+ result.getDistance()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/lat[.='\"+ result.getLat()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/lng[.='\"+ result.getLng()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/length[.='\"+ result.getLength()+ \"']\",\"/\" + Constants.STREETSEARCHRESULTSDTO_JAXB_NAME + \"/\"+ GisFeatureDistance.GISFEATUREDISTANCE_JAXB_NAME+ \"/countryCode[.='\"+ result.getCountryCode()+ \"']\");\n}\n",
      "formalParam": [
        "StreetDistance",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "String",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.toString(java.lang.String)",
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.longValue()",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/gisgraphy-mirror/gisgraphy/src/test/java/com/gisgraphy/test/FeedChecker.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String"
        ],
        [
          "StreetSearchResultsDto",
          "String"
        ],
        [
          "StreetSearchResultsDto",
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "StreetSearchResultsDto",
          "ByteArrayOutputStream"
        ],
        [
          "GeolocResultsDto",
          "String"
        ],
        [
          "GeolocResultsDto",
          "String"
        ]
      ],
      "types": [
        "ParserConfigurationException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "java.lang.String.getBytes(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "java.lang.String.trim()"
          ]
        }
      ],
      "keywords": [
        "configuration"
      ]
    },
    {
      "method": "mouseMoved@683",
      "body": "public void mouseMoved(MouseEvent ev){\n  if (ev.getSource() instanceof Window) {\n    JRootPane root=getRootPane();\n    if (DecorationHelper.getWindowDecorationStyle(root) == NONE) {\n      return;\n    }\n    Window w=(Window)ev.getSource();\n    Frame f=null;\n    Dialog d=null;\n    if (w instanceof Frame) {\n      f=(Frame)w;\n    }\n else     if (w instanceof Dialog) {\n      d=(Dialog)w;\n    }\n    int cursor=getCursor(calculateCorner(w,ev.getX(),ev.getY()));\n    if (cursor != 0 && ((f != null && (f.isResizable() && (DecorationHelper.getExtendedState(f) & BaseRootPaneUI.MAXIMIZED_BOTH) == 0)) || (d != null && d.isResizable()))) {\n      w.setCursor(Cursor.getPredefinedCursor(cursor));\n    }\n else {\n      w.setCursor(savedCursor);\n    }\n  }\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.MouseEvent.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.MouseEvent.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.getWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Window.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.awt.Frame.isResizable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Dialog.isResizable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Window.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.SwingUtilities.getWindowAncestor(java.awt.Component)",
              "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getWidth()",
              "java.awt.Component.getHeight()",
              "java.awt.Frame.isResizable()",
              "java.awt.Dialog.isResizable()",
              "java.awt.Cursor.getPredefinedCursor(int)",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getWidth()",
              "java.awt.Component.getHeight()",
              "java.awt.Frame.isResizable()",
              "java.awt.Dialog.isResizable()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Container.remove(java.awt.Component)",
              "java.awt.Container.add(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Container.getLayout()",
              "java.awt.Container.setLayout(java.awt.LayoutManager)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Component.repaint()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Component.repaint()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Pail/src/main/java/com/jtattoo/plaf/BaseRootPaneUI.java",
      "classTypes": [
        "int",
        "Window"
      ],
      "sorrformalparam": [
        [
          "JRootPane",
          "Component"
        ],
        [
          "MouseEvent"
        ],
        [
          "JRootPane",
          "BaseTitlePane"
        ],
        [
          "JRootPane"
        ],
        [
          "JRootPane"
        ],
        [
          "JComponent"
        ],
        [
          "JRootPane"
        ]
      ],
      "types": [
        "Boolean",
        "Component",
        "MouseEvent"
      ],
      "apicalls": [
        "isResizable",
        "setCursor",
        "getPredefinedCursor"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Component.getWidth()",
            "java.awt.Component.getHeight()",
            "java.awt.Frame.isResizable()",
            "java.awt.Dialog.isResizable()",
            "java.awt.Cursor.getPredefinedCursor(int)",
            "java.awt.Window.setCursor(java.awt.Cursor)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Component.getWidth()",
            "java.awt.Component.getHeight()",
            "java.awt.Frame.isResizable()",
            "java.awt.Dialog.isResizable()",
            "java.awt.Window.setCursor(java.awt.Cursor)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "x",
        "dialog",
        "mouse"
      ]
    },
    {
      "method": "getInlineBindingPrefix@477",
      "body": "public String getInlineBindingPrefix(){\n  return get(\"component.inlineBindingPrefix\",getInlineBindingPrefixDefault());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.putAll(java.util.Map)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
              "java.io.FileOutputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/wolips/wolips/core/plugins/org.objectstyle.wolips.variables/java/org/objectstyle/wolips/variables/BuildProperties.java",
      "classTypes": [
        "Properties",
        "boolean",
        "IProject",
        "String",
        "Version",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "boolean"
        ],
        [
          "Root"
        ],
        []
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Properties.getProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "properties",
        "lang",
        "string",
        "property",
        "equals"
      ]
    },
    {
      "method": "isEmpty@67",
      "body": "public static boolean isEmpty(String value){\n  return value == null || value.trim().equals(\"\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/BioInvIndex/services/src/main/java/uk/ac/ebi/bioinvindex/services/utils/StringFormating.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "string",
        "trim"
      ]
    },
    {
      "method": "onReceive@61",
      "body": "@Override public void onReceive(Context context,Intent intent){\n  final String action=intent.getAction();\n  if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {\n    handleAdapterStateChange(intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.ERROR));\n  }\n else   if (action.equals(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED)) {\n    handleConnectionStateChange(intent.getIntExtra(BluetoothAdapter.EXTRA_CONNECTION_STATE,BluetoothAdapter.STATE_DISCONNECTED));\n  }\n  refreshViews();\n}\n",
      "formalParam": [
        "Context",
        "Intent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/frameworks_base/packages/SystemUI/src/com/android/systemui/statusbar/policy/BluetoothController.java",
      "classTypes": [
        "int",
        "Context",
        "boolean",
        "int",
        "ArrayList<ImageView>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "string"
      ]
    },
    {
      "method": "storeSelectedEnginesToPrefs@361",
      "body": "/** \n * Store a Map of engines and their sync states to prefs.\n * @param prefs SharedPreferences that the engines are associated with.\n * @param userSelectedEngines Map<String, Boolean> of engine name to sync state\n */\npublic static void storeSelectedEnginesToPrefs(SharedPreferences prefs,Map<String,Boolean> selectedEngines){\n  ExtendedJSONObject jObj=new ExtendedJSONObject();\n  for (  Entry<String,Boolean> e : selectedEngines.entrySet()) {\n    jObj.put(e.getKey(),e.getValue());\n  }\n  String json=jObj.toJSONString();\n  long currentTime=System.currentTimeMillis();\n  Editor edit=prefs.edit();\n  edit.putString(PREF_USER_SELECTED_ENGINES_TO_SYNC,json);\n  edit.putLong(PREF_USER_SELECTED_ENGINES_TO_SYNC_TIMESTAMP,currentTime);\n  Logger.error(LOG_TAG,\"Storing user-selected engines at [\" + currentTime + \"].\");\n  edit.commit();\n}\n",
      "formalParam": [
        "SharedPreferences",
        "Map<String,Boolean>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Boolean>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "URI",
        "String",
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()",
              "java.net.URI.URI(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URI.toASCIIString()",
              "$NOT$java.lang.String.endsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android-sync/src/main/java/org/mozilla/gecko/sync/SyncConfiguration.java",
      "classTypes": [
        "String",
        "SyncConfiguration",
        "String",
        "Set<String>",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "boolean"
        ],
        [],
        []
      ],
      "types": [
        "Long",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Boolean>.entrySet()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "handleRequestExceptionWithoutCauseShouldReturnIt@72",
      "body": "@Test public void handleRequestExceptionWithoutCauseShouldReturnIt(){\n  RequestException e=new RequestException(\"msg\",null);\n  RuntimeException actual=CRestException.handle(e);\n  assertEquals(CRestException.class,actual.getClass());\n  assertSame(e,actual.getCause());\n  assertSame(\"msg\",actual.getMessage());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.getCause()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.Throwable(java.lang.String)",
              "java.lang.Throwable.getCause()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/crest/core/src/test/java/org/codegist/crest/CRestExceptionTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "getCause",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getCause()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "message",
        "cause",
        "throwable",
        "get"
      ]
    },
    {
      "method": "helpCreateProcedureWord@207",
      "body": "public static WordEntry helpCreateProcedureWord(String alias,String path,String uuid){\n  FakeSqlProcedureAspect aspect=new FakeSqlProcedureAspect();\n  aspect.fullName=path.replace(IPath.SEPARATOR,IndexConstants.NAME_DELIM_CHAR);\n  aspect.nameInSource=alias;\n  aspect.path=new Path(path);\n  aspect.uuid=uuid;\n  WORD_ENTRIES.clear();\n  RuntimeAdapter.addCallableWord(aspect,null,null,WORD_ENTRIES);\n  WordEntry word=(WordEntry)WORD_ENTRIES.get(0);\n  System.out.println(\"word = \" + word);\n  return word;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "WordEntry",
        "void",
        "WordEntry",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.util.List.clear()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.List.add(java.lang.Object)",
              "java.util.ArrayList.ArrayList(int)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.util.List.clear()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.List.add(java.lang.Object)",
              "java.util.ArrayList.ArrayList(int)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.List.add(java.lang.Object)",
              "java.util.ArrayList.ArrayList(int)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection.size()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "WordEntry",
      "file": "./java_projects/teiid-designer/tests/org.teiid.designer.transformation.test/src/org/teiid/designer/transformation/metadata/TestTransformationMetadataFacade.java",
      "classTypes": [
        "List",
        "String",
        "String",
        "String",
        "List",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String",
          "boolean",
          "boolean",
          "boolean",
          "boolean",
          "boolean",
          "boolean",
          "int"
        ],
        [],
        [
          "String",
          "String",
          "String",
          "String",
          "boolean",
          "boolean",
          "int",
          "String"
        ],
        [],
        [],
        [
          "Object",
          "char"
        ]
      ],
      "types": [
        "PrintStream",
        "Character"
      ],
      "apicalls": [
        "clear",
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.util.List.clear()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "replace",
        "stream",
        "string",
        "sequence",
        "println"
      ]
    },
    {
      "method": "run@105",
      "body": "public void run(){\n  while (isRunning) {\n    try {\n      sleep(INTERVAL);\n    }\n catch (    InterruptedException e) {\n    }\n    reap();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_V"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_V"
              },
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_V"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.Map<Tau_K,Tau_V>.clear()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
              "java.util.List<Tau_E>.clear()"
            ]
          },
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.Map<Tau_K,Tau_V>.clear()",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.remove(java.lang.Object)",
              "java.lang.System.currentTimeMillis()",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/studio3/plugins/com.aptana.core/src/com/aptana/core/util/KeepAliveObjectPool.java",
      "classTypes": [
        "int",
        "long",
        "Map<T,Long>",
        "ConnectionReaper",
        "boolean",
        "List<T>"
      ],
      "sorrformalparam": [
        [],
        [
          "int"
        ],
        [
          "T"
        ]
      ],
      "types": [
        "System"
      ],
      "apicalls": [
        "keySet",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.lang.System.currentTimeMillis()",
            "java.util.Map<Tau_K,Tau_V>.keySet()",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.Map<Tau_K,Tau_V>.size()",
            "java.util.List<Tau_E>.size()",
            "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "long",
        "thread",
        "interrupted"
      ]
    },
    {
      "method": "main@11",
      "body": "public static void main(String[] args) throws Exception {\n  Locale es=new Locale(\"es\");\n  String[] isoLangs=es.getISOLanguages();\n  String error=\"\";\n  for (int i=0; i < isoLangs.length; i++) {\n    Locale current=new Locale(isoLangs[i]);\n    String localeString=current.getDisplayLanguage(es);\n    String startLetter=localeString.substring(0,1);\n    if (!startLetter.toLowerCase(es).equals(startLetter)) {\n      error=error + \"\\n\\t\" + isoLangs[i]+ \" \"+ localeString;\n    }\n  }\n  if (error.length() > 0) {\n    throw new Exception(\"\\nFollowing language names starts with upper-case letter: \" + error + \"\\nLower-case expected!\");\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Locale.Locale(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Locale.getISOLanguages()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.util.Locale.Locale(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Locale.getDisplayLanguage(java.util.Locale)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toLowerCase(java.util.Locale)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/sun/util/resources/Locale/Bug6275682.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "equals",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Locale.Locale(java.lang.String)",
            "java.util.Locale.getISOLanguages()",
            "java.util.Locale.Locale(java.lang.String)",
            "java.util.Locale.getDisplayLanguage(java.util.Locale)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toLowerCase(java.util.Locale)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "get",
        "display",
        "integer",
        "case",
        "substring",
        "boolean",
        "length"
      ]
    },
    {
      "method": "delay@28",
      "body": "/** \n * Delay for a certain amount of time.  The delay will handle InterruptedException by restarting the Thread.sleep(), thus guaranteeing to wait for \"delayInMs\" milliseconds\n * @param delayInMs the delay in ms, must not be negative\n */\npublic static void delay(long delayInMs){\n  if (delayInMs == 0) {\n    return;\n  }\n  if (delayInMs < 0) {\n    throw new IllegalArgumentException(\"delay has to be positive\");\n  }\n  long endTime=new Date().getTime() + delayInMs;\n  long delay=delayInMs;\n  do {\n    try {\n      Thread.sleep(delay);\n    }\n catch (    InterruptedException e) {\n    }\n    delay=endTime - (new Date().getTime());\n  }\n while (delay > 0);\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jubula.core/org.eclipse.jubula.tools/src/org/eclipse/jubula/tools/utils/TimeUtil.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Date",
        "InterruptedException",
        "Long",
        "Thread"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.lang.Thread.sleep(long)",
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.lang.Thread.sleep(long)",
            "java.util.Date.Date()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "time",
        "thread"
      ]
    },
    {
      "method": "getServiceInt@415",
      "body": "/** \n * Get a service wide property as a int. The passed in Properties set overrides any system, applcation or per-database properties.\n * @return value of the property if set subject to min and max, defaultValue ifit is not set or set to a non-integer value.\n * @exception StandardException Standard Derby error handling. \n */\npublic static int getServiceInt(PersistentSet set,Properties props,String key,int min,int max,int defaultValue) throws StandardException {\n  String value=null;\n  if (props != null)   value=props.getProperty(key);\n  if (value == null)   value=PropertyUtil.getServiceProperty(set,key);\n  return PropertyUtil.handleInt(value,min,max,defaultValue);\n}\n",
      "formalParam": [
        "PersistentSet",
        "Properties",
        "String",
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "String",
        "boolean",
        "boolean",
        "boolean",
        "Serializable",
        "int",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()",
              "java.util.Properties.getProperty(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()",
              "java.util.Properties.getProperty(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.trim()",
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/derby/java/engine/org/apache/derby/iapi/services/property/PropertyUtil.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "String[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "String",
          "Serializable",
          "int",
          "int",
          "int"
        ],
        [
          "String",
          "int"
        ],
        [
          "PersistentSet",
          "String",
          "String"
        ],
        [
          "Dictionary"
        ],
        [
          "Properties"
        ],
        [
          "String"
        ],
        [
          "Dictionary",
          "String"
        ],
        [
          "String",
          "int",
          "int",
          "int"
        ],
        [
          "String",
          "boolean"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "parse"
      ]
    },
    {
      "method": "createLookaheadDFA@1298",
      "body": "public DFA createLookaheadDFA(int decision,boolean wackTempStructures){\n  Decision d=getDecision(decision);\n  String enclosingRule=d.startState.enclosingRule.name;\n  Rule r=d.startState.enclosingRule;\n  NFAState decisionStartState=getDecisionNFAStartState(decision);\n  long startDFA=0, stopDFA;\n  if (composite.watchNFAConversion) {\n    System.out.println(\"--------------------\\nbuilding lookahead DFA (d=\" + decisionStartState.getDecisionNumber() + \") for \"+ decisionStartState.getDescription());\n    startDFA=System.currentTimeMillis();\n  }\n  DFA lookaheadDFA=new DFA(decision,decisionStartState);\n  boolean failed=lookaheadDFA.probe.isNonLLStarDecision() || lookaheadDFA.probe.analysisOverflowed();\n  if (failed && lookaheadDFA.okToRetryDFAWithK1()) {\n    decisionsWhoseDFAsUsesSynPreds.remove(lookaheadDFA);\n    d.blockAST.setBlockOption(this,\"k\",Utils.integer(1));\n    if (composite.watchNFAConversion) {\n      System.out.print(\"trying decision \" + decision + \" again with k=1; reason: \"+ lookaheadDFA.getReasonForFailure());\n    }\n    lookaheadDFA=null;\n    lookaheadDFA=new DFA(decision,decisionStartState);\n  }\n  setLookaheadDFA(decision,lookaheadDFA);\n  if (wackTempStructures) {\n    for (    DFAState s : lookaheadDFA.getUniqueStates().values()) {\n      s.reset();\n    }\n  }\n  updateLineColumnToLookaheadDFAMap(lookaheadDFA);\n  if (composite.watchNFAConversion) {\n    stopDFA=System.currentTimeMillis();\n    System.out.println(\"cost: \" + lookaheadDFA.getNumberOfStates() + \" states, \"+ (int)(stopDFA - startDFA)+ \" ms\");\n  }\n  return lookaheadDFA;\n}\n",
      "formalParam": [
        "int",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Vector<Tau_E>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.PrintStream.print(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "DFA",
        "DFA",
        "int",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.Math.max(int,int)",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.get(int)",
              "java.io.PrintStream.println(char[])",
              "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.io.PrintStream.println(java.lang.String)",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.Math.max(int,int)",
              "java.lang.String.charAt(int)",
              "java.lang.Math.max(int,int)",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>>.get(java.lang.Object)",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.Object>>.put(java.lang.String,java.util.Map<java.lang.String,java.lang.Object>)",
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toString()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "DFA",
      "file": "./java_projects/antlr3/tool/src/main/java/org/antlr/tool/Grammar.java",
      "classTypes": [
        "Vector<Decision>",
        "String",
        "ST"
      ],
      "sorrformalparam": [
        [
          "String",
          "int"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Grammar"
        ],
        [
          "GrammarAST",
          "String",
          "GrammarAST",
          "GrammarAST"
        ],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.size()",
            "java.util.Vector<Tau_E>.get(int)",
            "java.io.PrintStream.println(char[])",
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.print(char[])",
            "java.lang.System.currentTimeMillis()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "get",
        "lang"
      ]
    },
    {
      "method": "listHomes@180",
      "body": "/** \n * Get list of player's homes in String format\n * @param playername\n * @return\n */\npublic String listHomes(String playername){\nsynchronized (this.lock) {\n    final ArrayList<Warp> homes_u=this.getUserWarps(playername);\n    String homes_s=\"\";\n    if (homes_u != null) {\n      for (      final Warp home : homes_u) {\n        if (home != null) {\n          homes_s+=\", \" + home.getName();\n        }\n      }\n      if (!homes_s.equalsIgnoreCase(\"\")) {\n        homes_s=homes_s.substring(2);\n      }\n    }\n    return homes_s;\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/joe.to/src/to/joe/manager/Warps.java",
      "classTypes": [
        "ArrayList<Warp>",
        "Object",
        "ArrayList<Warp>",
        "J2"
      ],
      "sorrformalparam": [
        [
          "Player"
        ]
      ],
      "types": [
        "Boolean",
        "Integer"
      ],
      "apicalls": [
        "substring",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "ignore",
        "integer",
        "string",
        "case",
        "lang"
      ]
    },
    {
      "method": "toString@213",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(getClass().getName());\n  sb.append(\": \").append(getErrorCount()).append(\" errors\");\n  for (  ObjectError error : getAllErrors()) {\n    sb.append('\\n').append(error);\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.pop()",
              "java.lang.String.length()",
              "$NOT$java.lang.String.endsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.lang.String.length()",
              "$NOT$java.lang.String.endsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "$NOT$java.lang.String.endsWith(java.lang.String)",
              "java.util.Vector<java.lang.String>.clear()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/spring-framework/spring-context/src/main/java/org/springframework/validation/AbstractErrors.java",
      "classTypes": [
        "String",
        "Stack<String>"
      ],
      "sorrformalparam": [
        [],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "class"
      ]
    },
    {
      "method": "shutdown@236",
      "body": "@Override public void shutdown(){\n  shutdown=true;\n  jobMaps.clear();\n  clusterStatlisteners.clear();\n  jobStatListeners.clear();\n  statistics.interrupt();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.Thread.isAlive()",
              "java.util.Map<Tau_K,Tau_V>.remove(java.lang.Object)",
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.concurrent.locks.Condition.signalAll()",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.clear()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cdh3u3-with-mesos/hadoop-0.20.2-cdh3u3/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/Statistics.java",
      "classTypes": [
        "int",
        "Condition",
        "int",
        "CountDownLatch",
        "Map<Integer,JobStats>",
        "int",
        "List<StatListener<JobStats>>"
      ],
      "sorrformalparam": [
        [
          "Job"
        ],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.clear()",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "hashCode@693",
      "body": "public int hashCode(){\n  int hash=mHash;\n  return hash == 0 ? mHash=KeyFactory.hashCode(mArray) : hash;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class.isArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Double.doubleToLongBits(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Float.floatToIntBits(float)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Double.compare(double,double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Float.compare(float,float)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/indextank-engine/cojen-2.2.1-sources/org/cojen/util/KeyFactory.java",
      "classTypes": [
        "int",
        "float[]",
        "short[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Float",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "doubleToLongBits"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class.isArray()",
            "java.lang.Float.floatToIntBits(float)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.Class.isArray()",
            "java.lang.Double.doubleToLongBits(double)"
          ]
        }
      ],
      "keywords": [
        "int",
        "class",
        "boolean",
        "double",
        "long",
        "integer"
      ]
    },
    {
      "method": "process@339",
      "body": "@Override public boolean process() throws Exception {\n  try {\n    if (updateBusyRequired)     updateBusy(childQueue,true);\n    final Object[] fa=element instanceof File ? ((File)element).list() : File.listRoots();\n    final int size=fa == null || fa.length < 1 ? 0 : fa.length;\n    if (treeViewer.getControl().isDisposed())     return false;\n    treeViewer.getControl().getDisplay().asyncExec(new Runnable(){\n      @Override public void run(){\n        if (treeViewer.getControl().isDisposed())         return;\n        updateChildCountInternal(element,size);\n      }\n    }\n);\n  }\n  finally {\n    if (updateBusyRequired)     updateBusy(childQueue,true);\n  }\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.listRoots()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.File[]"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.list()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.io.File.isDirectory()",
              "java.util.concurrent.BlockingQueue<Tau_E>.add(Tau_E)"
            ]
          },
          {
            "calls": [
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.isDirectory()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.listRoots()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/scisoft-ui/uk.ac.diamond.sda.navigator/src/uk/ac/diamond/sda/navigator/views/FileContentProvider.java",
      "classTypes": [
        "int",
        "Map<File,List<File>>",
        "BlockingQueue<UpdateRequest>",
        "Thread",
        "Cursor",
        "TreeViewer",
        "FileSortType",
        "boolean",
        "BlockingQueue<UpdateRequest>",
        "enum"
      ],
      "sorrformalparam": [
        [
          "Object",
          "int"
        ],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.list()"
          ]
        },
        {
          "calls": [
            "java.io.File.listRoots()"
          ]
        }
      ],
      "keywords": [
        "roots"
      ]
    },
    {
      "method": "testLetterUnicodeHuge@159",
      "body": "public void testLetterUnicodeHuge() throws Exception {\n  Random random=random();\n  int maxLength=4300;\n  MockAnalyzer left=new MockAnalyzer(random,jvmLetter,false);\n  left.setMaxTokenLength(255);\n  Analyzer right=new Analyzer(){\n    @Override protected TokenStreamComponents createComponents(    String fieldName,    Reader reader){\n      Tokenizer tokenizer=new LetterTokenizer(TEST_VERSION_CURRENT,reader);\n      return new TokenStreamComponents(tokenizer,tokenizer);\n    }\n  }\n;\n  int numIterations=atLeast(50);\n  for (int i=0; i < numIterations; i++) {\n    String s=_TestUtil.randomUnicodeString(random,maxLength);\n    assertEquals(s,left.tokenStream(\"foo\",newStringReader(s)),right.tokenStream(\"foo\",newStringReader(s)));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextBoolean()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextBoolean()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.Random.nextBoolean()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/lucene-solr/lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestDuelingAnalyzers.java",
      "classTypes": [
        "CharacterRunAutomaton"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.util.Random.nextBoolean()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.util.Random.nextBoolean()"
          ]
        }
      ],
      "keywords": [
        "next",
        "random",
        "reader"
      ]
    },
    {
      "method": "onLongClick@587",
      "body": "@Override public boolean onLongClick(View view){\n  if (view == mDefaultActivityButton) {\n    if (mAdapter.getCount() > 0) {\n      mIsSelectingDefaultActivity=true;\n      showPopupUnchecked(mInitialActivityCount);\n    }\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n  return true;\n}\n",
      "formalParam": [
        "View"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.Math.max(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/dreamDroid/libraries/ABS/src/com/actionbarsherlock/widget/ActivityChooserView.java",
      "classTypes": [
        "boolean",
        "FrameLayout",
        "Drawable",
        "ActivityChooserViewAdapter"
      ],
      "sorrformalparam": [
        [],
        [
          "ActivityChooserModel"
        ],
        [
          "View"
        ],
        []
      ],
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "max",
        "integer",
        "lang",
        "min"
      ]
    },
    {
      "method": "isLogErrorEnabled@44",
      "body": "public static boolean isLogErrorEnabled(){\n  return isOptionEnabled(Logger.TRACE_DEBUG_LOG_ERROR);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Boolean.valueOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Boolean"
          },
          {
            "_call": "java.lang.Boolean.booleanValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Boolean.valueOf(java.lang.String)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/netifera/platform/com.netifera.platform.host/com.netifera.platform.host.terminal.ui/src/com/netifera/platform/host/internal/terminal/ui/Activator.java",
      "classTypes": [
        "Activator",
        "String",
        "ServiceTracker",
        "ImageCache"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "booleanValue",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Boolean.valueOf(java.lang.String)",
            "java.lang.Boolean.booleanValue()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "string",
        "value",
        "lang"
      ]
    },
    {
      "method": "getOverlayPainters@720",
      "body": "/** \n * Returns a non-null, non-modifiable list of overlay painters associated with the specified decoration area type.\n * @param decorationAreaType Decoration area type.\n * @return A non-null, non-modifiable list of overlay painters associatedwith the specified decoration area type.\n */\npublic List<SubstanceOverlayPainter> getOverlayPainters(DecorationAreaType decorationAreaType){\n  if (!this.overlayPaintersMap.containsKey(decorationAreaType))   return Collections.emptyList();\n  return Collections.unmodifiableList(this.overlayPaintersMap.get(decorationAreaType));\n}\n",
      "formalParam": [
        "DecorationAreaType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.emptyList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.Collections.unmodifiableList(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "sorrreturntype": [
        "SubstanceSkin"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap(java.util.Map)"
            ]
          }
        ]
      ],
      "returnType": "List<SubstanceOverlayPainter>",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/substance-58d3873/src/org/pushingpixels/substance/api/SubstanceSkin.java",
      "classTypes": [
        "SubstanceBorderPainter",
        "SubstanceButtonShaper",
        "double"
      ],
      "sorrformalparam": [
        [
          "ColorSchemeTransform",
          "String"
        ]
      ],
      "types": [
        "List"
      ],
      "apicalls": [
        "emptyList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.emptyList()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "empty",
        "collections",
        "util"
      ]
    },
    {
      "method": "minimumLayoutSize@134",
      "body": "/** \n * Calculates the minimum size dimensions for the specified panel given the components in the specified parent container.\n * @param parent the component to be laid out\n * @return the minimul layoutsize\n * @see #preferredLayoutSize\n */\npublic Dimension minimumLayoutSize(final Container parent){\nsynchronized (parent.getTreeLock()) {\n    final Insets ins=parent.getInsets();\n    final Component[] comps=parent.getComponents();\n    int height=ins.top + ins.bottom;\n    int width=ins.left + ins.right;\n    for (int i=0; i < comps.length; i++) {\n      if (comps[i].isVisible() == false) {\n        continue;\n      }\n      final Dimension min=comps[i].getMinimumSize();\n      height+=min.height;\n      if (min.width > width) {\n        width=min.width;\n      }\n    }\n    return new Dimension(width + ins.left + ins.right,height + ins.top + ins.bottom);\n  }\n}\n",
      "formalParam": [
        "Container"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getTreeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Container.getInsets()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Insets"
          },
          {
            "_call": "java.awt.Container.getComponents()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component[]"
          },
          {
            "_call": "java.awt.Component.isVisible()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Component.getMinimumSize()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Dimension"
          },
          {
            "_call": "java.awt.Dimension.Dimension(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Component.getTreeLock()",
              "java.awt.Container.getInsets()",
              "java.awt.Component.getBounds()",
              "java.awt.Container.getComponents()",
              "java.awt.Component.isVisible()",
              "java.awt.Component.getPreferredSize()",
              "java.awt.Component.setBounds(int,int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "Dimension",
      "file": "./java_projects/Promasi-V2/org.promasi.desktop_swing/Libs/jcommon-1.0.17/source/org/jfree/ui/tabbedui/VerticalLayout.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Container"
        ]
      ],
      "types": [],
      "apicalls": [
        "getTreeLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getTreeLock()",
            "java.awt.Container.getInsets()",
            "java.awt.Container.getComponents()",
            "java.awt.Component.isVisible()",
            "java.awt.Component.getMinimumSize()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        }
      ],
      "keywords": [
        "visible",
        "tree",
        "component",
        "insets"
      ]
    },
    {
      "method": "getBoolean@294",
      "body": "public static boolean getBoolean(ByteBuffer bytes){\n  return bytes.slice().get() != 0;\n}\n",
      "formalParam": [
        "ByteBuffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.slice()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          }
        ]
      },
      "sorrreturntype": [
        "double",
        "ByteBuffer",
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.slice()",
              "java.nio.ByteBuffer.getDouble()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.order(java.nio.ByteOrder)",
              "java.nio.ByteBuffer.putLong(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.getMostSignificantBits()",
              "java.util.UUID.getLeastSignificantBits()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/usergrid-stack/core/src/main/java/org/usergrid/utils/ConversionUtils.java",
      "classTypes": [
        "String",
        "String",
        "Logger",
        "ByteBuffer"
      ],
      "sorrformalparam": [
        [
          "ByteBuffer"
        ],
        [
          "Long"
        ],
        [
          "UUID"
        ]
      ],
      "types": [],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.slice()",
            "java.nio.ByteBuffer.get()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "nio",
        "slice",
        "get",
        "byte"
      ]
    },
    {
      "method": "callMethods@159",
      "body": "public static void callMethods(Object object,String[] methods) throws Exception {\n  Set methodNames=new HashSet(Arrays.asList(methods));\n  Method[] classMethods=object.getClass().getMethods();\n  for (int i=0; i < classMethods.length; i++) {\n    if (methodNames.contains(classMethods[i].getName())) {\n      classMethods[i].invoke(object,new Object[classMethods[i].getParameterTypes().length]);\n    }\n  }\n}\n",
      "formalParam": [
        "Object",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet.HashSet(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class.getMethods()",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method[]"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.reflect.Method.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Set.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.reflect.Method.getName()",
              "java.util.Set.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/springfaces-v1/org.springframework.faces.mvc/src/test/java/org/springframework/faces/mvc/test/MvcFacesTestUtils.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Method"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.lang.Class.getMethods()",
            "java.lang.reflect.Method.getName()",
            "java.util.Set.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.lang.Class.getMethods()",
            "java.lang.reflect.Method.getName()",
            "java.util.Set.contains(java.lang.Object)",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "get",
        "access"
      ]
    },
    {
      "method": "toArray@194",
      "body": "public Object[] toArray(){\n  return delegate().toArray();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.toArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object[]"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "int",
        "int",
        "boolean",
        "T[]",
        "boolean",
        "boolean",
        "boolean",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.add(Tau_E)",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.remove(java.lang.Object)",
              "java.util.Set<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.size()",
              "java.util.Set<Tau_E>.contains(java.lang.Object)",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.remove(java.lang.Object)",
              "java.util.Set<Tau_E>.size()"
            ]
          }
        ]
      ],
      "returnType": "Object[]",
      "file": "./java_projects/play-associations/src/play/modules/associations/AssociativeSet.java",
      "classTypes": [
        "Iterator<T>",
        "T"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [],
        [],
        [
          "Object"
        ],
        [
          "T[]"
        ],
        [
          "T"
        ],
        [
          "Collection<?>"
        ],
        [
          "Object"
        ],
        [
          "T"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.toArray()"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "getKey@7423",
      "body": "public byte[] getKey(){\n  setKey(TBaseHelper.rightSize(key));\n  return key.array();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.array()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "byte[]",
        "String",
        "String",
        "None",
        "void",
        "String",
        "String",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
              "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": []
          },
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "TField",
        "TField"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [
          "multiget_count_args"
        ],
        [
          "TProtocol"
        ],
        [],
        [],
        [
          "multiget_slice_result"
        ]
      ],
      "types": [
        "Byte",
        "ByteBuffer"
      ],
      "apicalls": [
        "wrap"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.nio.ByteBuffer.array()"
          ]
        }
      ],
      "keywords": [
        "nio",
        "buffer",
        "byte"
      ]
    },
    {
      "method": "readFields@99",
      "body": "@Override public final void readFields(DataInput in) throws IOException {\n  I vertexId=getConf().createVertexId();\n  vertexId.readFields(in);\n  V vertexValue=getConf().createVertexValue();\n  vertexValue.readFields(in);\n  initialize(vertexId,vertexValue);\n  int numEdges=in.readInt();\n  edgeList=Lists.newArrayListWithCapacity(numEdges);\n  for (int i=0; i < numEdges; ++i) {\n    I targetVertexId=getConf().createVertexId();\n    targetVertexId.readFields(in);\n    E edgeValue=getConf().createEdgeValue();\n    edgeValue.readFields(in);\n    edgeList.add(new Edge<I,E>(targetVertexId,edgeValue));\n  }\n  boolean halt=in.readBoolean();\n  if (halt) {\n    voteToHalt();\n  }\n else {\n    wakeUp();\n  }\n}\n",
      "formalParam": [
        "DataInput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataInput.readInt()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.DataInput.readBoolean()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.DataOutput.writeInt(int)",
              "java.io.DataOutput.writeBoolean(boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/giraph/src/main/java/org/apache/giraph/graph/EdgeListVertex.java",
      "classTypes": [
        "List<Edge<I,E>>",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "DataOutput"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.DataInput.readInt()",
            "java.io.DataInput.readBoolean()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "read",
        "data",
        "integer"
      ]
    },
    {
      "method": "setHighlightrow@703",
      "body": "/** \n * Set the row to highlight\n * @param highlightRowIn the row to highlight or -1 for no highlight\n */\npublic void setHighlightrow(String highlightRowIn){\n  if ((highlightRowIn == null) || highlightRowIn.equals(\"\")) {\n    highlightRow=-1;\n  }\n else {\n    try {\n      highlightRow=Integer.parseInt(highlightRowIn);\n    }\n catch (    NumberFormatException nfe) {\n      highlightRow=-1;\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Corisco/dspace-1.6.2-src-release-corisco-1/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui/jsptag/BrowseListTag.java",
      "classTypes": [
        "int",
        "Logger",
        "String",
        "String",
        "BrowseItem[]",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "exception"
      ]
    },
    {
      "method": "doExecute@52",
      "body": "@Override public void doExecute(TestContext context){\n  log.info(\"Assert container asserting exceptions of type \" + exception);\n  try {\n    setLastExecutedAction(action);\n    action.execute(context);\n  }\n catch (  Exception e) {\n    log.info(\"Validating caught exception ...\");\n    if (exception.isAssignableFrom(e.getClass())) {\n      if (message != null && !message.equals(e.getLocalizedMessage())) {\n        throw new ValidationException(\"Validation failed for asserted exception message - expected: '\" + message + \"' but was: '\"+ e.getLocalizedMessage()+ \"'\",e);\n      }\n      log.info(\"Exception is as expected: \" + e.getClass() + \": \"+ e.getLocalizedMessage());\n      log.info(\"Exception validation successful\");\n      return;\n    }\n else {\n      throw new ValidationException(\"Validation failed for asserted exception type - expected: '\" + exception + \"' but was: '\"+ e.getClass().getName()+ \"'\",e);\n    }\n  }\n  throw new ValidationException(\"Missing asserted exception '\" + exception + \"'\");\n}\n",
      "formalParam": [
        "TestContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Throwable.getLocalizedMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/citrus_1/modules/citrus-core/src/main/java/com/consol/citrus/container/Assert.java",
      "classTypes": [
        "Logger",
        "TestAction"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "Class"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Throwable.getLocalizedMessage()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "localized",
        "get",
        "assignable",
        "object",
        "string"
      ]
    },
    {
      "method": "getTypeInfo@432",
      "body": "public TypeInfo getTypeInfo(String name,ClassLoader cl) throws ClassNotFoundException {\n  if (name == null)   throw new IllegalArgumentException(\"Null class name\");\n  if (cl == null)   cl=Thread.currentThread().getContextClassLoader();\n  TypeInfo primitive=PrimitiveInfo.valueOf(name);\n  if (primitive != null)   return primitive;\n  NumberInfo number=NumberInfo.valueOf(name);\n  if (number != null) {\nsynchronized (number) {\n      if (number.getPhase() != NumberInfo.Phase.INITIALIZING) {\n        if (number.getPhase() != NumberInfo.Phase.COMPLETE) {\n          number.initializing();\n          number.setDelegate((TypeInfo)get(Class.forName(name,false,cl)));\n        }\n        return number;\n      }\n    }\n  }\n  Class<?> clazz=Class.forName(name,false,cl);\n  return getTypeInfo(clazz);\n}\n",
      "formalParam": [
        "String",
        "ClassLoader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
            "_throws": [
              "java.lang.ClassNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.Class.getName()"
            ]
          }
        ]
      ],
      "returnType": "TypeInfo",
      "file": "./java_projects/jboss-reflect/src/main/java/org/jboss/reflect/plugins/javassist/JavassistTypeInfoFactoryImpl.java",
      "classTypes": [
        "ClassPoolFactory",
        "AnnotationValue[]"
      ],
      "sorrformalparam": [
        [
          "Class"
        ],
        [
          "String",
          "ClassLoader"
        ]
      ],
      "types": [
        "Class",
        "ClassNotFoundException"
      ],
      "apicalls": [
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "loader",
        "context",
        "found"
      ]
    },
    {
      "method": "removeTC@1690",
      "body": "public void removeTC(Item tc){\n  if (tc.getPos().size() > 1) {\n    int index=tc.getPos().get(tc.getPos().size() - 1).intValue();\n    int position=tc.getPos().size() - 1;\n    ArrayList<Integer> temp=(ArrayList<Integer>)tc.getPos().clone();\n    temp.remove(temp.size() - 1);\n    Item parent=getItem(temp,false);\n    parent.getSubItems().remove(tc);\n    if (parent.getSubItemsNr() >= index) {\n      for (int i=index; i < parent.getSubItemsNr(); i++) {\n        parent.getSubItem(i).updatePos(position,new Integer(parent.getSubItem(i).getPos().get(position).intValue() - 1));\n      }\n    }\n    updateLocations(parent);\n    repaint();\n  }\n else {\n    int index=tc.getPos().get(0).intValue();\n    Repository.getSuite().remove(tc);\n    if (Repository.getSuiteNr() >= index) {\n      for (int i=index; i < Repository.getSuiteNr(); i++) {\n        Repository.getSuita(i).updatePos(0,new Integer(Repository.getSuita(i).getPos().get(0).intValue() - 1));\n      }\n      if (Repository.getSuiteNr() > 0) {\n        Repository.getSuita(0).setLocation(new int[]{5,10});\n        updateLocations(Repository.getSuita(0));\n      }\n      repaint();\n      selectedcollection.clear();\n    }\n  }\n}\n",
      "formalParam": [
        "Item"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.Integer(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Component.repaint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.clear()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.Integer>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.ArrayList<java.lang.Integer>.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.lang.Integer.Integer(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Component.repaint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Item",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.lang.Integer.Integer(int)",
              "java.util.ArrayList<java.lang.Integer>.add(java.lang.Integer)",
              "java.lang.Integer.Integer(java.lang.String)",
              "java.util.ArrayList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.get(int)",
              "java.util.ArrayList<Tau_E>.remove(int)",
              "java.awt.Component.repaint()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Twister/src/client/userinterface/java/src/Grafic.java",
      "classTypes": [
        "JComboBox<String>",
        "boolean",
        "JButton"
      ],
      "sorrformalparam": [
        [
          "Item",
          "boolean"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.size()",
            "java.util.ArrayList<java.lang.Integer>.remove(int)",
            "java.lang.Integer.Integer(java.lang.String)",
            "java.awt.Component.repaint()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.Integer(java.lang.String)",
            "java.awt.Component.repaint()",
            "java.util.ArrayList<Tau_E>.clear()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "format",
        "integer",
        "string",
        "clear",
        "size"
      ]
    },
    {
      "method": "testAttemptedTokenAcquisitionWithNoRedirect@59",
      "body": "@Test public void testAttemptedTokenAcquisitionWithNoRedirect() throws Exception {\n  AuthorizationCodeAccessTokenProvider provider=new AuthorizationCodeAccessTokenProvider();\n  try {\n    OAuth2AccessToken token=provider.obtainAccessToken(resource,new DefaultAccessTokenRequest());\n    fail(\"Expected UserRedirectRequiredException\");\n    assertNotNull(token);\n  }\n catch (  IllegalStateException e) {\n    String message=e.getMessage();\n    assertTrue(\"Wrong message: \" + message,message.contains(\"No redirect URI has been established\"));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.contains(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/spring-security-oauth/samples/oauth2/tonr/src/test/java/org/springframework/security/oauth/examples/tonr/TestAuthorizationCodeGrant.java",
      "classTypes": [
        "AuthorizationCodeResourceDetails"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.String.contains(java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "message",
        "contains",
        "get"
      ]
    },
    {
      "method": "toXml@330",
      "body": "/** \n * Marshals an  {@link ErrorResult} to XML.\n * @param errorResult\n * @return\n */\npublic static String toXml(final ErrorResult errorResult){\n  try {\n    final Marshaller marshaller=ERROR_RESULT_JAXB_CONTEXT.createMarshaller();\n    final StringWriter sw=new StringWriter();\n    marshaller.marshal(errorResult,sw);\n    return sw.toString();\n  }\n catch (  final JAXBException je) {\n    final String objectAsString=ToStringBuilder.reflectionToString(errorResult,ToStringStyle.SHORT_PREFIX_STYLE);\n    throw new RuntimeException(\"Failed to XML marshall: \" + objectAsString,je);\n  }\n}\n",
      "formalParam": [
        "ErrorResult"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.bind.JAXBContext.createMarshaller()",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.Marshaller"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "UriBuilder",
        "File",
        "XMLGregorianCalendar",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.isEmpty()",
              "java.util.List<java.lang.String>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<java.lang.String>.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.List<java.lang.String>.isEmpty()",
              "java.util.List<java.lang.String>.get(int)",
              "java.lang.Integer.valueOf(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "$NOT$java.io.File.delete()",
              "$NOT$java.io.File.mkdir()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.GregorianCalendar.GregorianCalendar()",
              "java.util.TimeZone.getTimeZone(java.lang.String)",
              "java.util.GregorianCalendar.setTimeZone(java.util.TimeZone)",
              "java.util.Calendar.getTimeInMillis()",
              "java.util.Calendar.setTimeInMillis(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/RSB/src/main/java/eu/openanalytics/rsb/Util.java",
      "classTypes": [
        "eu.openanalytics.rsb.soap.types.ObjectFactory",
        "Pattern",
        "Map<String,String>",
        "String",
        "ObjectMapper",
        "ObjectFactory"
      ],
      "sorrformalparam": [
        [
          "HttpHeaders",
          "String"
        ],
        [
          "UriInfo",
          "HttpHeaders"
        ],
        [
          "String"
        ],
        [
          "GregorianCalendar"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "JAXBException",
        "StringWriter",
        "JAXBContext"
      ],
      "apicalls": [
        "createMarshaller"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "context",
        "writer"
      ]
    },
    {
      "method": "test_booleanValue@408",
      "body": "/** \n * @tests java.lang.Short#byteValue()\n */\npublic void test_booleanValue(){\n  assertEquals(1,new Short((short)1).byteValue());\n  assertEquals(2,new Short((short)2).byteValue());\n  assertEquals(0,new Short((short)0).byteValue());\n  assertEquals(-1,new Short((short)-1).byteValue());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.byteValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          },
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.byteValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          },
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.byteValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          },
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.byteValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.longValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.longValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.longValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.floatValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.floatValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.floatValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.hashCode()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.hashCode()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.hashCode()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.valueOf(java.lang.String)",
              "java.lang.Short.shortValue()",
              "java.lang.Short.valueOf(java.lang.String)",
              "java.lang.Short.shortValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.doubleValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.doubleValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.doubleValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.intValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.intValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.shortValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.shortValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.shortValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.shortValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.toString()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.toString()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.toString()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Short.byteValue()",
              "java.lang.Short.Short(short)",
              "java.lang.Short.byteValue()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ShortTest.java",
      "classTypes": [
        "Short",
        "Short"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Byte",
        "Short"
      ],
      "apicalls": [
        "byteValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Short.Short(short)",
            "java.lang.Short.byteValue()",
            "java.lang.Short.Short(short)",
            "java.lang.Short.byteValue()",
            "java.lang.Short.Short(short)",
            "java.lang.Short.byteValue()",
            "java.lang.Short.Short(short)",
            "java.lang.Short.byteValue()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "short",
        "value",
        "byte"
      ]
    },
    {
      "method": "testAddingContactDetails@328",
      "body": "/** \n * Tests adding a contact detail to an existing contact.\n */\n@SmallTest public void testAddingContactDetails(){\n  Log.i(LOG_TAG,\"***** EXECUTING testAddingContactDetails *****\");\n  Log.i(LOG_TAG,\"Create ContactSummaryTable\");\n  ContactSummaryTable.create(mTestDatabase.getWritableDatabase());\n  Log.i(LOG_TAG,\"Create also a ContactDetailsTable\");\n  ContactDetailsTable.create(mTestDatabase.getWritableDatabase());\n  Log.i(LOG_TAG,\"Add a contact to ContactSummaryTable\");\n  final Contact contact=mTestModule.createDummyContactData();\n  contact.localContactID=new Long(10);\n  contact.nativeContactId=new Integer(11);\n  ContactSummaryTable.addContact(contact,mTestDatabase.getWritableDatabase());\n  Log.i(LOG_TAG,\"Add a contact detail to the previous contact\");\n  final ContactDetail contactDetail=new ContactDetail();\n  contactDetail.localContactID=contact.localContactID;\n  boolean isMe=false;\n  contactDetail.setEmail(\"test@example.com\",ContactDetail.DetailKeyTypes.HOME);\n  assertEquals(getDisplayName(contact,isMe),ContactSummaryTable.updateContactDisplayName(contact,mTestDatabase.getWritableDatabase(),isMe));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.Long(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/360-Engine-for-Android/tests/src/com/vodafone360/people/tests/database/NowPlusContactSummaryTest.java",
      "classTypes": [
        "TestModule",
        "TestDatabase",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Long",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.Long(long)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "integer",
        "long"
      ]
    },
    {
      "method": "declaracaoParametro@1591",
      "body": "public final NoDeclaracaoParametro declaracaoParametro() throws RecognitionException {\n  NoDeclaracaoParametro parametro=null;\n  Token tkr=null;\n  Token ID4=null;\n  InformacaoTipoDado informacaoTipoDado=null;\n  Quantificador vQuantificador=null;\n  pilhaContexto.push(\"declaracaoParametro\");\n  try {\n{\n      pushFollow(FOLLOW_declaracaoTipoDado_in_declaracaoParametro1458);\n      informacaoTipoDado=declaracaoTipoDado();\n      state._fsp--;\n      if (state.failed) {\n        return parametro;\n      }\n      int alt15=2;\n      int LA15_0=input.LA(1);\n      if ((LA15_0 == 41)) {\n        alt15=1;\n      }\nswitch (alt15) {\ncase 1:\n{\n          tkr=(Token)match(input,41,FOLLOW_41_in_declaracaoParametro1465);\n          if (state.failed) {\n            return parametro;\n          }\n        }\n      break;\n  }\n  ID4=(Token)match(input,ID,FOLLOW_ID_in_declaracaoParametro1469);\n  if (state.failed) {\n    return parametro;\n  }\n  pushFollow(FOLLOW_quantificador_in_declaracaoParametro1475);\n  vQuantificador=quantificador();\n  state._fsp--;\n  if (state.failed) {\n    return parametro;\n  }\n  if (state.backtracking == 0) {\n    if (gerarArvore) {\n      ModoAcesso modoAcesso=null;\n      TipoDado tipoDado=null;\n      TrechoCodigoFonte trechoCodigoFonteTipoDado=null;\n      if (tkr == null) {\n        modoAcesso=ModoAcesso.POR_VALOR;\n      }\n else {\n        if (tkr != null) {\n          modoAcesso=ModoAcesso.POR_REFERENCIA;\n        }\n      }\n      if (informacaoTipoDado != null) {\n        tipoDado=informacaoTipoDado.getTipoDado();\n        trechoCodigoFonteTipoDado=informacaoTipoDado.getTrechoCodigoFonte();\n      }\n      parametro=new NoDeclaracaoParametro((ID4 != null ? ID4.getText() : null),tipoDado,vQuantificador,modoAcesso);\n      parametro.setTrechoCodigoFonteNome(criarTrechoCodigoFonte(ID4));\n      parametro.setTrechoCodigoFonteTipoDado(trechoCodigoFonteTipoDado);\n    }\n  }\n}\n}\n catch (RecognitionException re) {\nreportError(re);\nrecover(input,re);\n}\n finally {\npilhaContexto.pop();\n}\nreturn parametro;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Stack<java.lang.String>.pop()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "NoDeclaracao",
        "void",
        "NoExpressao",
        "List<NoExpressao>",
        "NoPare",
        "NoRetorne",
        "NoEscolha"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack<java.lang.String>.push(java.lang.String)",
              "java.util.Stack<java.lang.String>.pop()"
            ]
          }
        ]
      ],
      "returnType": "NoDeclaracaoParametro",
      "file": "./java_projects/Portugol-Nucleo/src/br/univali/portugol/nucleo/analise/sintatica/PortugolParser.java",
      "classTypes": [
        "String[]",
        "BitSet",
        "int",
        "int",
        "int",
        "BitSet",
        "BitSet",
        "BitSet",
        "BitSet"
      ],
      "sorrformalparam": [
        [
          "Token",
          "InformacaoTipoDado"
        ],
        [],
        [
          "String"
        ],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Stack<java.lang.String>.push(java.lang.String)",
            "java.util.Stack<java.lang.String>.pop()"
          ]
        }
      ],
      "keywords": [
        "string",
        "pop",
        "push",
        "util"
      ]
    },
    {
      "method": "format@130",
      "body": "public TextEdit format(String source,int offset,int length,int indentationLevel,boolean isSelection,IFormattingContext context,String indentSufix) throws FormatterException {\n  String input=new String(source.substring(offset,offset + length));\n  try {\n    IParseRootNode parseResult=ParserPoolFactory.parse(getMainContentType(),input).getRootNode();\n    if (parseResult != null) {\n      String output=format(input,parseResult,indentationLevel,offset,isSelection);\n      if (output != null) {\n        if (!input.equals(output)) {\n          return new ReplaceEdit(offset,length,output);\n        }\n else {\n          return new MultiTextEdit();\n        }\n      }\n    }\n  }\n catch (  Exception e) {\n    StatusLineMessageTimerManager.setErrorMessage(FormatterMessages.Formatter_formatterErrorStatus,ERROR_DISPLAY_TIMEOUT,true);\n    IdeLog.logError(JSONPlugin.getDefault(),e);\n  }\n  return null;\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "int",
        "boolean",
        "IFormattingContext",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "TextEdit",
      "file": "./java_projects/studio3/plugins/com.aptana.editor.json/src/com/aptana/editor/json/formatter/JSONFormatter.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int,int)",
            "java.lang.String.String(java.lang.String)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "equals"
      ]
    },
    {
      "method": "setString@133",
      "body": "/** \n * Set the String we are currently parsing.  The parser state is also reset to begin at the start of this string.\n * @param string The string to be parsed.\n */\npublic void setString(String string){\n  this.string=string;\n  if (string != null) {\n    this.length=string.length();\n    chars=this.string.toCharArray();\n  }\n else {\n    this.length=0;\n    chars=new char[0];\n  }\n  reset();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/catalina/util/StringParser.java",
      "classTypes": [
        "String",
        "int",
        "char",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "toCharArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
          ]
        }
      ],
      "keywords": [
        "length",
        "array",
        "char",
        "integer",
        "lang",
        "string"
      ]
    },
    {
      "method": "testC@198",
      "body": "public Future<String> testC(long callerThreadId){\n  Assert.assertTrue(\"testC should be executed in blocing mode\",Thread.currentThread().getId() == callerThreadId);\n  lastInvokeMethod=\"testC\";\n  return new AsyncResult<String>(\"testC\");\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getId()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "Future<String>",
        "Future<String>",
        "void",
        "Future<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()"
            ]
          }
        ]
      ],
      "returnType": "Future<String>",
      "file": "./java_projects/openejb/openejb/container/openejb-core/src/test/java/org/apache/openejb/core/asynch/AsynchTest.java",
      "classTypes": [
        "String",
        "SessionContext",
        "ConfigurationFactory",
        "String"
      ],
      "sorrformalparam": [
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ]
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "currentThread",
        "getId"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getId()"
          ]
        }
      ],
      "keywords": [
        "long",
        "thread",
        "current"
      ]
    },
    {
      "method": "badMagic@138",
      "body": "public INTERNAL badMagic(Throwable t,Object arg0){\n  return badMagic(CompletionStatus.COMPLETED_NO,t,arg0);\n}\n",
      "formalParam": [
        "Throwable",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          },
          {
            "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "BAD_PARAM",
        "BAD_OPERATION"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.initCause(java.lang.Throwable)",
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.initCause(java.lang.Throwable)",
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "INTERNAL",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/corba/se/impl/logging/IORSystemException.java",
      "classTypes": [
        "int",
        "int",
        "LogWrapperFactory",
        "int",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "CompletionStatus"
        ],
        [
          "CompletionStatus",
          "Throwable"
        ]
      ],
      "types": [
        "Logger"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.initCause(java.lang.Throwable)",
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "cause",
        "loggable",
        "level"
      ]
    },
    {
      "method": "scaleVector_1@157",
      "body": "public Point2D scaleVector_1(Point2D p){\n  AffineTransform t=getTransform();\n  return new Point2D.Double(p.getX() / t.getScaleX(),p.getY() / t.getScaleY());\n}\n",
      "formalParam": [
        "Point2D"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.Point2D.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.AffineTransform.getScaleX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.Point2D.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.AffineTransform.getScaleY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "Point2D",
        "void",
        "Point2D"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.AffineTransform.getScaleX()",
              "java.awt.geom.AffineTransform.getTranslateX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.geom.AffineTransform.getScaleY()",
              "java.awt.geom.AffineTransform.getTranslateY()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.AffineTransform.getScaleInstance(double,double)",
              "java.awt.geom.AffineTransform.concatenate(java.awt.geom.AffineTransform)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.AffineTransform.getScaleX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.geom.AffineTransform.getScaleY()"
            ]
          }
        ]
      ],
      "returnType": "Point2D",
      "file": "./java_projects/KanonProject/ui/src/main/java/com/projity/pm/graphic/network/NetworkParamsImpl.java",
      "classTypes": [
        "Rectangle",
        "BarStyles",
        "NetworkLayout",
        "NodeModelCache",
        "AffineTransform",
        "LinkRouting",
        "int",
        "GraphicConfiguration"
      ],
      "sorrformalparam": [
        [
          "Point2D"
        ],
        [
          "int"
        ],
        [
          "Point2D"
        ]
      ],
      "types": [],
      "apicalls": [
        "getY"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.Point2D.getX()",
            "java.awt.geom.AffineTransform.getScaleX()",
            "java.awt.geom.Point2D.getY()",
            "java.awt.geom.AffineTransform.getScaleY()"
          ]
        }
      ],
      "keywords": [
        "awt",
        "point2"
      ]
    },
    {
      "method": "multiget_slice_args@8575",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic multiget_slice_args(multiget_slice_args other){\n  if (other.isSetKeys()) {\n    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();\n    for (    ByteBuffer other_element : other.keys) {\n      ByteBuffer temp_binary_element=TBaseHelper.copyBinary(other_element);\n      ;\n      __this__keys.add(temp_binary_element);\n    }\n    this.keys=__this__keys;\n  }\n  if (other.isSetColumn_parent()) {\n    this.column_parent=new ColumnParent(other.column_parent);\n  }\n  if (other.isSetPredicate()) {\n    this.predicate=new SlicePredicate(other.predicate);\n  }\n  if (other.isSetConsistency_level()) {\n    this.consistency_level=other.consistency_level;\n  }\n}\n",
      "formalParam": [
        "multiget_slice_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "multiget_count_args",
        "String",
        "void",
        "multiget_slice_args",
        "String",
        "get_count_result",
        "String",
        "multiget_slice_result"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
              "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.nio.ByteBuffer,java.lang.Integer>.HashMap<ByteBuffer,Integer>()",
              "java.util.Map<java.nio.ByteBuffer,java.lang.Integer>.put(java.nio.ByteBuffer,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
              "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "enum",
        "enum",
        "TField",
        "enum",
        "TField",
        "InvalidRequestException",
        "ConsistencyLevel",
        "enum",
        "int"
      ],
      "sorrformalparam": [
        [
          "describe_splits_result"
        ],
        [],
        [],
        [
          "ByteBuffer",
          "int"
        ],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "calculateKeyedChecksum@68",
      "body": "/** \n * Calculates keyed checksum.\n * @param data the data used to generate the checksum.\n * @param size length of the data.\n * @param key the key used to encrypt the checksum.\n * @return keyed checksum.\n */\npublic byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {\n  try {\n    return Des3.calculateChecksum(key,usage,data,0,size);\n  }\n catch (  GeneralSecurityException e) {\n    KrbCryptoException ke=new KrbCryptoException(e.getMessage());\n    ke.initCause(e);\n    throw ke;\n  }\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "byte[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.lang.Throwable.initCause(java.lang.Throwable)"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/sun/security/krb5/internal/crypto/HmacSha1Des3KdCksumType.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "byte[]",
          "int",
          "byte[]",
          "byte[]",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "actionPerformed@3415",
      "body": "/** \n * ActionListener for the scroll buttons.\n */\npublic void actionPerformed(ActionEvent e){\n  ActionMap map=tabPane.getActionMap();\n  if (map != null) {\n    String actionKey;\n    if (e.getSource() == scrollForwardButton) {\n      actionKey=\"scrollTabsForwardAction\";\n    }\n else {\n      actionKey=\"scrollTabsBackwardAction\";\n    }\n    Action action=map.get(actionKey);\n    if (action != null && action.isEnabled()) {\n      action.actionPerformed(new ActionEvent(tabPane,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));\n    }\n  }\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.getActionMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.ActionMap"
          },
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.event.ActionEvent.getWhen()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.awt.event.ActionEvent.getModifiers()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String,long,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "None",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JComponent.isOpaque()",
              "javax.swing.JComponent.setOpaque(boolean)",
              "javax.swing.UIManager.getColor(java.lang.Object)",
              "java.awt.Component.getBackground()",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getParent()",
              "javax.swing.JTabbedPane.indexOfTabComponent(java.awt.Component)",
              "javax.swing.JTabbedPane.setTabComponentAt(int,java.awt.Component)"
            ]
          },
          {
            "calls": [
              "java.awt.Component.getParent()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.setName(java.lang.String)",
              "javax.swing.JComponent.isOpaque()",
              "javax.swing.JComponent.setOpaque(boolean)",
              "javax.swing.UIManager.getColor(java.lang.Object)",
              "java.awt.Component.getBackground()",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JTabbedPane.indexOfTabComponent(java.awt.Component)",
              "javax.swing.JTabbedPane.setTabComponentAt(int,java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Container.getComponentCount()"
            ]
          },
          {
            "calls": [
              "java.awt.Container.getComponentCount()",
              "java.awt.Container.getComponent(int)",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()",
              "java.awt.Component.setBounds(int,int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
      "classTypes": [
        "int",
        "JButton",
        "Hashtable<Integer,Integer>",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "Component"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.getActionMap()",
            "java.util.EventObject.getSource()",
            "java.awt.event.ActionEvent.getWhen()",
            "java.awt.event.ActionEvent.getModifiers()",
            "java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String,long,int)"
          ]
        }
      ],
      "keywords": [
        "object"
      ]
    },
    {
      "method": "getAnonymousPeerId@277",
      "body": "public static byte[] getAnonymousPeerId(String my_ip,int my_port){\n  byte[] anon_peer_id=new byte[20];\n  anon_peer_id[0]=(byte)'[';\n  anon_peer_id[1]=(byte)']';\n  try {\n    byte[] ip_bytes=my_ip.getBytes(Constants.DEFAULT_ENCODING);\n    int ip_len=ip_bytes.length;\n    if (ip_len > 18) {\n      ip_len=18;\n    }\n    System.arraycopy(ip_bytes,0,anon_peer_id,2,ip_len);\n    int port_copy=my_port;\n    for (int j=2 + ip_len; j < 20; j++) {\n      anon_peer_id[j]=(byte)(port_copy & 0xff);\n      port_copy>>=8;\n    }\n  }\n catch (  UnsupportedEncodingException e) {\n    Debug.printStackTrace(e);\n  }\n  return (anon_peer_id);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "byte[]",
      "file": "./java_projects/frostwire-android/src/azureus/org/gudy/azureus2/core3/tracker/client/impl/TRTrackerAnnouncerImpl.java",
      "classTypes": [
        "TRTrackerAnnouncerResponse",
        "Map"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "system",
        "lang"
      ]
    },
    {
      "method": "drawWavyString@732",
      "body": "/** \n * Draw a string with letters that move up and down individually. \n */\npublic void drawWavyString(String s,int x,int y,int align,int increment_x,double tmr,double amplitude,double pos_phaseshift,double timer_phaseshift,JGFont font,JGColor col){\n  setFont(font);\n  setColor(col);\n  if (align == 0) {\n    x-=increment_x * s.length() / 2;\n  }\n else   if (align == 1) {\n    x-=increment_x * s.length();\n  }\n  for (int i=0; i < s.length(); i++)   drawString(s.substring(i,i + 1),x + i * increment_x,y + (int)(amplitude * -Math.cos(Math.PI * (pos_phaseshift * i + tmr * timer_phaseshift))),0);\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "int",
        "int",
        "double",
        "double",
        "double",
        "double",
        "JGFont",
        "JGColor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "JGPoint",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
              "java.lang.System.exit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Class.getName()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/TT2POL/RLCompetition/src/jgame/platform/MyEngine.java",
      "classTypes": [
        "double",
        "JGFont",
        "int",
        "int",
        "int",
        "JGFont"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String[]",
          "int"
        ],
        []
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "onMessage@49",
      "body": "@Test(enabled=false) public void onMessage(final String iText){\n  System.out.print(iText);\n  System.out.flush();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/orientdb_1/tests/src/test/java/com/orientechnologies/orient/test/database/auto/DbCheckTest.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.flush()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "range@39",
      "body": "public static List<TileCoordinate> range(TileCoordinate start,TileCoordinate stop){\n  List<TileCoordinate> list=new ArrayList<TileCoordinate>();\n  for (int i=getMinRow(start,stop); i <= getMaxRow(start,stop); i++) {\n    addCoordinatesForRow(i,getMinCol(start,stop),getMaxCol(start,stop),list);\n  }\n  return list;\n}\n",
      "formalParam": [
        "TileCoordinate",
        "TileCoordinate"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.Math.max(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Math.max(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "List<TileCoordinate>",
      "file": "./java_projects/geolatte-mapserver/src/main/java/org/geolatte/mapserver/tms/TileCoordinate.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)",
            "java.util.List<Tau_E>.add(Tau_E)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "testDeleteNode@465",
      "body": "public void testDeleteNode() throws SecurityException, NoSuchMethodException, IOException {\n  Method method=TerremarkVCloudExpressAsyncClient.class.getMethod(\"deleteNode\",URI.class);\n  HttpRequest request=processor.createRequest(method,URI.create(\"https://vcloud/extensions/nodeService/12\"));\n  assertRequestLineEquals(request,\"DELETE https://vcloud/extensions/nodeService/12 HTTP/1.1\");\n  assertNonPayloadHeadersEqual(request,\"\");\n  assertPayloadEquals(request,null,null,false);\n  assertResponseParserClassEquals(method,request,ReleasePayloadAndReturn.class);\n  assertSaxResponseParserClassEquals(method,null);\n  assertExceptionParserClassEquals(method,ReturnVoidOnNotFoundOr404.class);\n  checkFilters(request);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method"
          },
          {
            "_call": "java.net.URI.create(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.net.URI.create(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.net.URI.create(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.net.URI.create(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jclouds/providers/trmk-vcloudexpress/src/test/java/org/jclouds/trmk/vcloudexpress/TerremarkVCloudExpressAsyncClientTest.java",
      "classTypes": [
        "ReferenceTypeImpl",
        "ReferenceTypeImpl",
        "VDC",
        "ReferenceTypeImpl",
        "Org",
        "ReferenceTypeImpl",
        "ReferenceTypeImpl",
        "ReferenceTypeImpl",
        "ReferenceTypeImpl"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "URI",
        "NoSuchMethodException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.net.URI.create(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "net",
        "string"
      ]
    },
    {
      "method": "execute@35",
      "body": "public boolean execute(HttpServletRequest request,HttpServletResponse response) throws CarbonException, IOException {\n  String webContext=(String)request.getAttribute(CarbonConstants.WEB_CONTEXT);\n  String serverURL=(String)request.getAttribute(CarbonConstants.SERVER_URL);\n  String cookie=(String)request.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);\n  Map<String,ArrayList<FileItemData>> fileItemsMap=getFileItemsMap();\n  if (fileItemsMap == null || fileItemsMap.isEmpty()) {\n    String msg=\"File uploading failed. No files are specified\";\n    log.error(msg);\n    CarbonUIMessage.sendCarbonUIMessage(msg,CarbonUIMessage.ERROR,request,response,getContextRoot(request) + \"/\" + webContext+ \"/ds/upload.jsp\");\n  }\n  DBSFileUploadClient serviceUploaderClient=new DBSFileUploadClient(configurationContext,serverURL,cookie);\n  String msg;\n  try {\n    if (fileItemsMap != null) {\n      for (      Object o : fileItemsMap.keySet()) {\n        String fieldName=(String)o;\n        FileItemData fileItemData=fileItemsMap.get(fieldName).get(0);\n        String fileName=getFileName(fileItemData.getFileItem().getName());\n        checkServiceFileExtensionValidity(fileName,ALLOWED_FILE_EXTENSIONS);\n        if (fileName.endsWith(\".dbs\")) {\n          serviceUploaderClient.uploadService(fileName,\"\",fileItemData.getDataHandler());\n        }\n else {\n          throw new CarbonException(\"File with extension \" + fileName + \" is not supported!\");\n        }\n      }\n      response.setContentType(\"text/html; charset=utf-8\");\n      msg=\"Uploaded the DBS. Deployment in progress. Status of the upload will be known once the \" + \"deployment is complete.Please refresh the service list in a moment\";\n      CarbonUIMessage.sendCarbonUIMessage(msg,CarbonUIMessage.INFO,request,response,getContextRoot(request) + \"/\" + webContext+ \"/service-mgt/index.jsp\");\n      return true;\n    }\n  }\n catch (  java.lang.Exception e) {\n    msg=\"File upload failed. \" + e.getMessage();\n    log.error(msg);\n    CarbonUIMessage.sendCarbonUIMessage(msg.replace(\"'\",\"`\").replace(\"\\\"\",\"`\").replace('\\n',' '),CarbonUIMessage.ERROR,request,response,getContextRoot(request) + \"/\" + webContext+ \"/ds/upload.jsp\");\n  }\n  return false;\n}\n",
      "formalParam": [
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(char,char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/platform/components/data-services/org.wso2.carbon.dataservices.ui/src/main/java/org/wso2/carbon/dataservices/ui/fileupload/DBSFileUploadExecutor.java",
      "classTypes": [
        "String[]"
      ],
      "sorrformalparam": [],
      "types": [
        "CharSequence"
      ],
      "apicalls": [
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.lang.String.replace(char,char)"
          ]
        }
      ],
      "keywords": [
        "message",
        "string",
        "get"
      ]
    },
    {
      "method": "create@111",
      "body": "/** \n * Creates a bitwise store with extra parameters that are unique to it.\n * @param name is the name of the newly create store.\n * @param schema is the data used to define the store, such as the fields and dictionaries.\n * @param capacity is the initial capacity of the store (in other words, how many records will be initially created with the store.)\n * @param specificProps the list of extra properties that are specific to this store.\n * @return The newly created bitwise store.\n */\npublic BitwiseStore create(String name,StoreSchema schema,int capacity,Properties specificProps){\n  if (name == null) {\n    throw new IllegalArgumentException(\"Store name cannot be null\");\n  }\n  if (schema == null) {\n    throw new IllegalArgumentException(\"Store schema cannot be null\");\n  }\nsynchronized (MUTEX) {\n    DaoKey key=new DaoKey(name);\n    log.debug(\"Creating store [{}]\",key);\n    Properties p=provider_.loadProperties(name);\n    if (p == null) {\n      p=new Properties();\n    }\n    if (specificProps != null) {\n      p.putAll(specificProps);\n    }\n    DaoManager daoManager=KeyedDaoManager.getInstance(key);\n    if (daoManager == null) {\n      KeyedDaoManager.createInstance(key,p);\n      daoManager=KeyedDaoManager.getInstance(key);\n    }\n    try {\n      daoManager.startTransaction();\n      BitwiseStoreDtoDao dao=(BitwiseStoreDtoDao)daoManager.getDao(BitwiseStoreDtoDao.class);\n      BitwiseStoreDto data=new BitwiseStoreDto();\n      data.setName(name);\n      data.setCapacity(capacity);\n      BitVector deleted=new BitVector(capacity);\n      deleted.setAll();\n      data.setDeleted(deleted);\n      BitVector cleared=new BitVector(capacity);\n      cleared.setAll();\n      data.setCleared(cleared);\n      data.setSchema(schema);\n      dao.create(data);\n      BitwiseStore store=new BitwiseStore(data);\n      store.create(p);\n      STORE_MAP.put(name,new BitwiseStoreRef(key));\n      store.flush();\n      if (specificProps != null) {\n        provider_.saveSpecificProperties(name,specificProps);\n      }\n      daoManager.commitTransaction();\n      return store;\n    }\n  finally {\n      daoManager.endTransaction();\n    }\n  }\n}\n",
      "formalParam": [
        "String",
        "StoreSchema",
        "int",
        "Properties"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.putAll(java.util.Map)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.remove(java.lang.Object)",
              "java.util.Map<java.lang.String,java.util.concurrent.locks.ReentrantLock>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.keySet()",
              "java.util.Collections.unmodifiableSet(java.util.Set)"
            ]
          }
        ]
      ],
      "returnType": "BitwiseStore",
      "file": "./java_projects/genobyte/genobyte/src/main/java/org/obiba/bitwise/BitwiseStoreUtil.java",
      "classTypes": [
        "ThreadLocal<AtomicInteger>",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        []
      ],
      "types": [
        "Map",
        "HashMap"
      ],
      "apicalls": [
        "putAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.putAll(java.util.Map)",
            "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "hashtable"
      ]
    },
    {
      "method": "setConfiguration@36",
      "body": "public void setConfiguration(final SmooksResourceConfiguration resourceConfig) throws SmooksConfigurationException {\n  this.format=resourceConfig.getStringParameter(FORMAT_CONFIG_KEY,DEFAULT_DATE_FORMAT);\n  this.decoder=new SimpleDateFormat(this.format.trim());\n}\n",
      "formalParam": [
        "SmooksResourceConfiguration"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()",
              "java.util.TimeZone.getTimeZone(java.lang.String)",
              "java.text.DateFormat.setTimeZone(java.util.TimeZone)",
              "java.lang.String.trim()",
              "java.text.DateFormat.parse(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/soatools/utils/smooks/src/main/java/de/objectcode/soatools/util/smooks/decoders/UTCDateDecoder.java",
      "classTypes": [
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "SimpleDateFormat"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "simple",
        "text",
        "trim",
        "format",
        "lang"
      ]
    },
    {
      "method": "insertUpdate@330",
      "body": "/** \n * Enables or not the  {@link #save} control.\n * @see DocumentListener#insertUpdate(DocumentEvent)\n */\npublic void insertUpdate(DocumentEvent e){\n  handleTextModification();\n}\n",
      "formalParam": [
        "DocumentEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.getText()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.swing.AbstractButton.setEnabled(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.getText()",
              "java.lang.String.trim()",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "javax.swing.AbstractButton.setEnabled(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getParent()",
              "java.awt.Component.getLocation()",
              "java.awt.Window.setLocation(java.awt.Point)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getParent()",
              "java.awt.Component.getLocation()",
              "java.awt.Component.getParent()",
              "java.awt.Component.getLocation()",
              "java.awt.Window.setLocation(java.awt.Point)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/util/ui/InputDialog.java",
      "classTypes": [
        "String",
        "int",
        "JButton"
      ],
      "sorrformalparam": [
        [
          "DocumentEvent"
        ],
        [
          "Point"
        ],
        []
      ],
      "types": [
        "AbstractButton",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.getText()",
            "java.lang.String.trim()",
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "javax.swing.AbstractButton.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "enabled",
        "button",
        "text",
        "set"
      ]
    },
    {
      "method": "populate@42",
      "body": "public void populate(){\n  EntityManager em=emf.createEntityManager();\n  for (int i=0; i < 2; i++) {\n    long time=(long)(System.currentTimeMillis() / 1000) + i * 1317;\n    BigDecimal did=new BigDecimal(time);\n    EBigDecimalID e1=new EBigDecimalID(did);\n    EDBigDecimalID e2=new EDBigDecimalID(e1);\n    em.persist(e1);\n    em.persist(e2);\n    int time2=(int)(System.currentTimeMillis() / 1000) + i * 7131;\n    BigInteger iid=new BigInteger(Integer.toString(time2));\n    EBigIntegerID e3=new EBigIntegerID(iid);\n    EDBigIntegerID e4=new EDBigIntegerID(e3);\n    em.persist(e3);\n    em.persist(e4);\n    Date id=new Date(time);\n    EDateID e5=new EDateID(id);\n    EDDateID e6=new EDDateID(e5);\n    em.persist(e5);\n    em.persist(e6);\n    if (i == 0) {\n      java.sql.Date sid=new java.sql.Date(time);\n      ESQLDateID e7=new ESQLDateID(sid);\n      EDSQLDateID e8=new EDSQLDateID(e7);\n      em.persist(e7);\n      em.persist(e8);\n    }\n  }\n  em.getTransaction().begin();\n  em.getTransaction().commit();\n  em.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigDecimal.BigDecimal(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.toString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigDecimal.BigDecimal(long)",
              "java.lang.Integer.toString(int)",
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.util.Date.Date(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()",
              "java.util.List.get(int)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/derivedid/TestDerivedIdentity.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "BigDecimal",
        "Date",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.math.BigDecimal.BigDecimal(long)",
            "java.lang.Integer.toString(int)",
            "java.math.BigInteger.BigInteger(java.lang.String)",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "big",
        "string",
        "math",
        "decimal",
        "integer"
      ]
    },
    {
      "method": "testForExclusion@63",
      "body": "public boolean testForExclusion(Config config){\n  boolean matches=false;\n  if (this.eventTypePattern != null) {\n    Matcher matcher=eventTypePattern.matcher(config.getEventType());\n    if (!matcher.matches()) {\n      return false;\n    }\n else {\n      matches=true;\n    }\n  }\n  if (this.eventAttributeTypePattern != null) {\n    Matcher matcher=eventAttributeTypePattern.matcher(config.getEventAttributeType());\n    if (!matcher.matches()) {\n      return false;\n    }\n else {\n      matches=true;\n    }\n  }\n  return matches;\n}\n",
      "formalParam": [
        "Config"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_call": "$NOT$java.util.regex.Matcher.matches()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_call": "$NOT$java.util.regex.Matcher.matches()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/Arecibo/agent/src/main/java/com/ning/arecibo/agent/config/exclusion/ExclusionConfig.java",
      "classTypes": [
        "Pattern",
        "Pattern"
      ],
      "sorrformalparam": [],
      "types": [
        "Matcher",
        "CharSequence",
        "Boolean"
      ],
      "apicalls": [
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "$NOT$java.util.regex.Matcher.matches()",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "$NOT$java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "sequence",
        "matches"
      ]
    },
    {
      "method": "FunctionLocator@34",
      "body": "/** \n * Constructor Performs the location of the function text.\n * @param contents The Parameter text to process.\n * @throws LexerException if an error occurs while lexing the Parameter text.\n * @throws IOException if an error occurs while lexing the Parameter text.\n */\npublic FunctionLocator(String contents) throws LexerException, IOException {\n  JubulaParameterLexer lexer=new JubulaParameterLexer(new PushbackReader(new StringReader(contents)));\n  Token token=lexer.next();\n  List<Token> functionTokens=null;\n  while (!(token instanceof EOF)) {\n    if (token instanceof TFunctionToken) {\n      functionTokens=new LinkedList<Token>();\n    }\n else     if (token instanceof TEndFunctionArgsToken) {\n      functionTokens=null;\n    }\n else     if (functionTokens != null) {\n      functionTokens.add(token);\n    }\n    token=lexer.next();\n  }\n  if (functionTokens != null) {\n    StringBuilder functionContentsBuilder=new StringBuilder();\n    for (    Token tokenInFunction : functionTokens) {\n      functionContentsBuilder.append(tokenInFunction.getText());\n    }\n    m_functionContents=functionContentsBuilder.toString();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/jubula.core/org.eclipse.jubula.client.core/src/org/eclipse/jubula/client/core/parser/parameter/FunctionLocator.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "object",
        "lang",
        "io",
        "list",
        "util",
        "reader"
      ]
    },
    {
      "method": "ClassLoader@223",
      "body": "ClassLoader(ClassLoader parentLoader,boolean nullAllowed){\n  SecurityManager smgr=System.getSecurityManager();\n  if (smgr != null) {\n    smgr.checkCreateClassLoader();\n  }\n  if (parentLoader == null && !nullAllowed) {\n    throw new NullPointerException(\"Parent ClassLoader may not be null\");\n  }\n  parent=parentLoader;\n}\n",
      "formalParam": [
        "ClassLoader",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "_call": "java.lang.SecurityManager.checkCreateClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "ClassLoader",
        "ClassLoader",
        "URL"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getSecurityManager()",
              "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
              "java.lang.SecurityManager.checkPermission(java.security.Permission)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getSecurityManager()",
              "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
              "java.lang.SecurityManager.checkPermission(java.security.Permission)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration<java.net.URL>.hasMoreElements()",
              "java.util.Enumeration<java.net.URL>.nextElement()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/android_libcore/luni/src/main/java/java/lang/ClassLoader.java",
      "classTypes": [
        "Map<String,Package>",
        "ClassLoader",
        "ClassLoader"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "SecurityManager"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.lang.SecurityManager.checkCreateClassLoader()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "class",
        "system",
        "manager",
        "security",
        "loader",
        "check"
      ]
    },
    {
      "method": "over@994",
      "body": "public static Complex over(Complex a,Complex b){\n  Complex c=new Complex(0.0D,0.0D);\n  if (Complex.infOption && !a.isInfinite() && b.isInfinite())   return c;\n  double denom=0.0D, ratio=0.0D;\n  if (a.isZero()) {\n    if (b.isZero()) {\n      c.real=Double.NaN;\n      c.imag=Double.NaN;\n    }\n else {\n      c.real=0.0D;\n      c.imag=0.0D;\n    }\n  }\n else {\n    if (Math.abs(b.real) >= Math.abs(b.imag)) {\n      ratio=b.imag / b.real;\n      denom=b.real + b.imag * ratio;\n      c.real=(a.real + a.imag * ratio) / denom;\n      c.imag=(a.imag - a.real * ratio) / denom;\n    }\n else {\n      ratio=b.real / b.imag;\n      denom=b.real * ratio + b.imag;\n      c.real=(a.real * ratio + a.imag) / denom;\n      c.imag=(a.imag * ratio - a.real) / denom;\n    }\n  }\n  return c;\n}\n",
      "formalParam": [
        "Complex",
        "Complex"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Complex",
        "Complex",
        "void",
        "void",
        "Complex",
        "Complex"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.toRadians(double)",
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.sin(double)",
              "java.lang.Math.cos(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ]
      ],
      "returnType": "Complex",
      "file": "./java_projects/flanagan/src/main/java/flanagan/complex/Complex.java",
      "classTypes": [
        "double",
        "char",
        "double",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "double",
          "Complex"
        ],
        [
          "Complex"
        ],
        [
          "double",
          "double"
        ],
        [
          "double",
          "double"
        ],
        [
          "Complex"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)"
          ]
        }
      ],
      "keywords": [
        "double"
      ]
    },
    {
      "method": "testLong@116",
      "body": "public void testLong() throws Exception {\n  final ClassFieldExtractor ext=cache.getExtractor(TestBean.class,\"longField\",getClass().getClassLoader());\n  final TestBean bean=new TestBean();\n  assertEquals(424242,((Number)ext.getValue(null,bean)).longValue());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Number.longValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.Number.intValue()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/4.0.x/drools-core/src/test/java/org/drools/base/ClassFieldExtractorTest.java",
      "classTypes": [
        "ClassFieldExtractorCache"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Class",
        "Long",
        "Number"
      ],
      "apicalls": [
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.Number.longValue()"
          ]
        }
      ],
      "keywords": [
        "long",
        "lang",
        "loader"
      ]
    },
    {
      "method": "write@158",
      "body": "/** \n * This method writes <code>len</code> bytes from the byte array <code>buf</code> starting at position <code>offset</code> in the buffer. These bytes will be written to the internal buffer.  However, if this write operation fills the buffer, the buffer will be flushed to the underlying output stream.\n * @param buf The array of bytes to write.\n * @param offset The index into the byte array to start writing from.\n * @param len The number of bytes to write.\n * @exception IOException If an error occurs\n */\npublic synchronized void write(byte[] buf,int offset,int len) throws IOException {\n  if (len < (this.buf.length - count)) {\n    System.arraycopy(buf,offset,this.buf,count,len);\n    count+=len;\n  }\n else {\n    flush();\n    out.write(buf,offset,len);\n  }\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.flush()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.OutputStream.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.OutputStream.flush()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/java/io/BufferedOutputStream.java",
      "classTypes": [
        "byte[]",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        },
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "findAll@1696",
      "body": "/** \n * Finds an ordered range of all the d l file ranks. <p> Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to  {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.</p>\n * @param start the lower bound of the range of d l file ranks to return\n * @param end the upper bound of the range of d l file ranks to return (not inclusive)\n * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)\n * @return the ordered range of d l file ranks\n * @throws SystemException if a system exception occurred\n */\npublic List<DLFileRank> findAll(int start,int end,OrderByComparator orderByComparator) throws SystemException {\n  Object[] finderArgs=new Object[]{String.valueOf(start),String.valueOf(end),String.valueOf(orderByComparator)};\n  List<DLFileRank> list=(List<DLFileRank>)FinderCacheUtil.getResult(FINDER_PATH_FIND_ALL,finderArgs,this);\n  if (list == null) {\n    StringBundler query=null;\n    String sql=null;\n    if (orderByComparator != null) {\n      query=new StringBundler(2 + (orderByComparator.getOrderByFields().length * 3));\n      query.append(_SQL_SELECT_DLFILERANK);\n      appendOrderByComparator(query,_ORDER_BY_ENTITY_ALIAS,orderByComparator);\n      sql=query.toString();\n    }\n else {\n      sql=_SQL_SELECT_DLFILERANK.concat(DLFileRankModelImpl.ORDER_BY_JPQL);\n    }\n    Session session=null;\n    try {\n      session=openSession();\n      Query q=session.createQuery(sql);\n      if (orderByComparator == null) {\n        list=(List<DLFileRank>)QueryUtil.list(q,getDialect(),start,end,false);\n        Collections.sort(list);\n      }\n else {\n        list=(List<DLFileRank>)QueryUtil.list(q,getDialect(),start,end);\n      }\n    }\n catch (    Exception e) {\n      throw processException(e);\n    }\n finally {\n      if (list == null) {\n        FinderCacheUtil.removeResult(FINDER_PATH_FIND_ALL,finderArgs);\n      }\n else {\n        cacheResult(list);\n        FinderCacheUtil.putResult(FINDER_PATH_FIND_ALL,finderArgs,list);\n      }\n      closeSession(session);\n    }\n  }\n  return list;\n}\n",
      "formalParam": [
        "int",
        "int",
        "OrderByComparator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.concat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Collections.sort(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.intValue()"
            ]
          }
        ]
      ],
      "returnType": "List<DLFileRank>",
      "file": "./java_projects/liferay-portal-trunk/portal-impl/src/com/liferay/portlet/documentlibrary/service/persistence/DLFileRankPersistenceImpl.java",
      "classTypes": [
        "LayoutPersistence",
        "FinderPath"
      ],
      "sorrformalparam": [
        [
          "long"
        ],
        [
          "long",
          "long"
        ],
        [
          "long",
          "long",
          "long"
        ],
        [
          "long"
        ]
      ],
      "types": [
        "List",
        "Collections",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.concat(java.lang.String)",
            "java.util.Collections.sort(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "collections"
      ]
    },
    {
      "method": "render@366",
      "body": "public void render(GenericTextField textField){\n  FontRenderer font=SpoutClient.getHandle().fontRenderer;\n  RenderUtil.drawRectangle((int)(textField.getScreenX() - 1),(int)(textField.getScreenY() - 1),(int)(textField.getScreenX() + textField.getWidth() + 1),(int)(textField.getScreenY() + textField.getHeight() + 1),textField.getBorderColor().toInt());\n  RenderUtil.drawRectangle((int)textField.getScreenX(),(int)textField.getScreenY(),(int)(textField.getScreenX() + textField.getWidth()),(int)(textField.getScreenY() + textField.getHeight()),textField.getFieldColor().toInt());\n  int x=(int)(textField.getScreenX() + GenericTextField.PADDING);\n  int y=(int)(textField.getScreenY() + GenericTextField.PADDING);\n  int color=textField.isEnabled() ? textField.getColor().toInt() : textField.getDisabledColor().toInt();\n  int[] cursor=textField.getTextProcessor().getCursor2D();\n  int lineNum=0;\n  int cursorOffset=0;\n  if (textField.getText().length() != 0) {\n    String line;\n    Iterator<String> iter=textField.getTextProcessor().iterator();\n    while (iter.hasNext()) {\n      line=iter.next();\n      if (lineNum == cursor[0]) {\n        cursorOffset=font.getStringWidth(line.substring(0,cursor[1]));\n      }\n      font.drawStringWithShadow(line,x,y + (GenericTextField.LINE_HEIGHT + GenericTextField.LINE_SPACING) * lineNum++,color);\n    }\n  }\n else   if (!textField.isFocus()) {\n    font.drawStringWithShadow(textField.getPlaceholder(),x,y,color);\n  }\n  boolean showCursor=textField.isEnabled() && textField.isFocus() && shouldRenderCursor;\n  if (showCursor) {\n    font.drawStringWithShadow(\"_\",x + cursorOffset,y + (GenericTextField.LINE_HEIGHT + GenericTextField.LINE_SPACING) * cursor[0] + 1,color);\n  }\n}\n",
      "formalParam": [
        "GenericTextField"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.String>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.Math.max(int,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.Math.max(int,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Spoutcraft/src/main/java/org/spoutcraft/client/gui/MCRenderDelegate.java",
      "classTypes": [
        "RenderItemCustom",
        "TIntObjectHashMap<String>",
        "HashMap<UUID,GuiButton>",
        "Color",
        "MinecraftFont",
        "TObjectIntMap<GenericBitmap>"
      ],
      "sorrformalparam": [
        [
          "GenericButton"
        ],
        [
          "String",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.next()",
            "java.lang.String.substring(int,int)",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "getNamedEntities@58",
      "body": "public List<opennlp.tools.coref.mention.Parse> getNamedEntities(){\n  List<Parse> names=new ArrayList<Parse>();\n  List<Parse> kids=new LinkedList<Parse>(Arrays.asList(parse.getChildren()));\n  while (kids.size() > 0) {\n    Parse p=kids.remove(0);\n    if (entitySet.contains(p.getType())) {\n      names.add(p);\n    }\n else {\n      kids.addAll(Arrays.asList(p.getChildren()));\n    }\n  }\n  return createParses(names.toArray(new Parse[names.size()]));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Set<java.lang.String>.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "List<opennlp.tools.coref.mention.Parse>",
        "List<opennlp.tools.coref.mention.Parse>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Arrays.asList(T[])",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "List<opennlp.tools.coref.mention.Parse>",
      "file": "./java_projects/opennlp/opennlp-tools/src/main/java/opennlp/tools/coref/mention/DefaultParse.java",
      "classTypes": [
        "int",
        "String[]",
        "Parse",
        "Set<String>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Set",
        "Collection"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "java.util.Set<java.lang.String>.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "arrays",
        "list",
        "collection"
      ]
    },
    {
      "method": "getDefaultTextCharset@385",
      "body": "/** \n * Returns the platform's default character encoding.\n */\npublic static String getDefaultTextCharset(){\n  if (defaultEncoding != null) {\n    return defaultEncoding;\n  }\n  return defaultEncoding=Charset.defaultCharset().name();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.charset.Charset.defaultCharset()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.Charset"
          },
          {
            "_call": "java.nio.charset.Charset.name()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.charset.Charset.forName(java.lang.String)",
              "java.nio.charset.Charset.name()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/awt/datatransfer/DataTransferer.java",
      "classTypes": [
        "int",
        "String",
        "boolean",
        "Integer",
        "boolean",
        "ByteBuffer",
        "Long",
        "Constructor<?>"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Charset",
        "Character"
      ],
      "apicalls": [
        "name",
        "defaultCharset"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.charset.Charset.defaultCharset()",
            "java.nio.charset.Charset.name()"
          ]
        }
      ],
      "keywords": [
        "name",
        "string",
        "charset",
        "nio"
      ]
    },
    {
      "method": "actionPerformed@50",
      "body": "/** \n * Handles button clicks for dialog.\n */\n@Override public void actionPerformed(ActionEvent e){\n  Object source=e.getSource();\n  try {\n    if (source == btOK || source == inputPanel.getTextComponent()) {\n      setVisibleForTools(!processInput());\n    }\n else     if (source == btApply) {\n      processInput();\n    }\n else     if (source == btCancel) {\n      setVisibleForTools(false);\n    }\n  }\n catch (  Exception ex) {\n    setVisibleForTools(false);\n  }\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "$NOT$java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/geogebra/desktop/geogebra/gui/dialog/InputDialogAngleFixed.java",
      "classTypes": [
        "GeoPoint[]",
        "String",
        "Kernel",
        "GeoPoint",
        "GeoElement[]",
        "GeoSegment[]"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "$NOT$java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "event",
        "source",
        "get",
        "string"
      ]
    },
    {
      "method": "DownloadManager@30",
      "body": "private DownloadManager(Context context){\n  this.context=context.getApplicationContext();\n  getExternalFilesDirPreAPIv8();\n  apkIndex=0;\n}\n",
      "formalParam": [
        "Context"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "$NOT$java.io.File.mkdirs()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.getPath()",
              "java.io.File.File(java.lang.String)",
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.mkdirs()"
            ]
          },
          {
            "calls": [
              "java.io.File.getPath()",
              "java.io.File.File(java.lang.String)",
              "$NOT$java.io.File.exists()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Roger/Android/Roger/src/com/bignerdranch/franklin/roger/network/DownloadManager.java",
      "classTypes": [
        "DownloadManager",
        "int"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.getPath()",
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.mkdirs()"
          ]
        },
        {
          "calls": [
            "java.io.File.getPath()",
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "path",
        "exists"
      ]
    },
    {
      "method": "hashCode@81",
      "body": "/** \n * HashTable code based on identifier hash codes.\n * @return hash value.\n */\npublic int hashCode(){\n  return id == null ? System.identityHashCode(this) : id.hashCode();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.hashCode()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.identityHashCode(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "int",
      "file": "./java_projects/InformationSystem/generators/hibernate/tests/org.obeonetwork.dsl.entity.gen.java.hibernate.tests/src/inheritance_associations_package/org/obeonetwork/sample/inheritanceassociations/Class101Sub.java",
      "classTypes": [
        "String",
        "String",
        "long"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()"
          ]
        },
        {
          "calls": [
            "java.lang.System.identityHashCode(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "code"
      ]
    },
    {
      "method": "JcpSelection@585",
      "body": "@SuppressWarnings(\"unchecked\") public JcpSelection(IAtomContainer tocopy1) throws Exception {\n  IMolecule tocopy=tocopy1.getBuilder().newInstance(IMolecule.class,tocopy1);\n  StringWriter sw=new StringWriter();\n  new MDLV2000Writer(sw).writeMolecule(tocopy);\n  this.mol=sw.toString();\n  SmilesGenerator sg=new SmilesGenerator();\n  smiles=sg.createSMILES(tocopy);\n  svg=jcpPanel.getSVGString();\n  sw=new StringWriter();\n  Class cmlWriterClass=null;\n  try {\n    cmlWriterClass=this.getClass().getClassLoader().loadClass(\"org.openscience.cdk.io.CMLWriter\");\n    if (cmlWriterClass != null) {\n      IChemObjectWriter cow=(IChemObjectWriter)cmlWriterClass.newInstance();\n      Constructor constructor=cow.getClass().getConstructor(new Class[]{Writer.class});\n      cow=(IChemObjectWriter)constructor.newInstance(new Object[]{sw});\n      cow.write(tocopy);\n      cow.close();\n    }\n    cml=sw.toString();\n  }\n catch (  Exception exception) {\n    logger.error(\"Could not load CMLWriter: \",exception.getMessage());\n    logger.debug(exception);\n  }\n}\n",
      "formalParam": [
        "IAtomContainer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader"
              },
              {
                "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Class"
              },
              {
                "_call": "java.io.StringWriter.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/jchempaint/src/main/org/openscience/jchempaint/action/CopyPasteAction.java",
      "classTypes": [
        "String",
        "DataFlavor",
        "String",
        "DataFlavor",
        "DataFlavor[]",
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()",
            "java.io.StringWriter.StringWriter()",
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.io.StringWriter.toString()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()",
            "java.io.StringWriter.StringWriter()",
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "writer",
        "class"
      ]
    },
    {
      "method": "removeTC@1690",
      "body": "public void removeTC(Item tc){\n  if (tc.getPos().size() > 1) {\n    int index=tc.getPos().get(tc.getPos().size() - 1).intValue();\n    int position=tc.getPos().size() - 1;\n    ArrayList<Integer> temp=(ArrayList<Integer>)tc.getPos().clone();\n    temp.remove(temp.size() - 1);\n    Item parent=getItem(temp,false);\n    parent.getSubItems().remove(tc);\n    if (parent.getSubItemsNr() >= index) {\n      for (int i=index; i < parent.getSubItemsNr(); i++) {\n        parent.getSubItem(i).updatePos(position,new Integer(parent.getSubItem(i).getPos().get(position).intValue() - 1));\n      }\n    }\n    updateLocations(parent);\n    repaint();\n  }\n else {\n    int index=tc.getPos().get(0).intValue();\n    Repository.getSuite().remove(tc);\n    if (Repository.getSuiteNr() >= index) {\n      for (int i=index; i < Repository.getSuiteNr(); i++) {\n        Repository.getSuita(i).updatePos(0,new Integer(Repository.getSuita(i).getPos().get(0).intValue() - 1));\n      }\n      if (Repository.getSuiteNr() > 0) {\n        Repository.getSuita(0).setLocation(new int[]{5,10});\n        updateLocations(Repository.getSuita(0));\n      }\n      repaint();\n      selectedcollection.clear();\n    }\n  }\n}\n",
      "formalParam": [
        "Item"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.Integer(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Component.repaint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.clear()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.Integer>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.ArrayList<java.lang.Integer>.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.lang.Integer.Integer(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Component.repaint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Item",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.size()",
              "java.util.ArrayList<java.lang.Integer>.remove(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.lang.Integer.Integer(int)",
              "java.util.ArrayList<java.lang.Integer>.add(java.lang.Integer)",
              "java.lang.Integer.Integer(java.lang.String)",
              "java.util.ArrayList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.get(int)",
              "java.util.ArrayList<Tau_E>.remove(int)",
              "java.awt.Component.repaint()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Twister/src/client/userinterface/java/src/Grafic.java",
      "classTypes": [
        "JComboBox<String>",
        "boolean",
        "JButton"
      ],
      "sorrformalparam": [
        [
          "Item",
          "boolean"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.size()",
            "java.util.ArrayList<java.lang.Integer>.remove(int)",
            "java.lang.Integer.Integer(java.lang.String)",
            "java.awt.Component.repaint()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.Integer(java.lang.String)",
            "java.awt.Component.repaint()",
            "java.util.ArrayList<Tau_E>.clear()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "format",
        "integer",
        "string",
        "clear",
        "size"
      ]
    },
    {
      "method": "mouseClicked@1753",
      "body": "@Override public void mouseClicked(MouseEvent e){\n  if (e.getClickCount() == 2) {\n    setButton.doClick();\n  }\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.event.MouseEvent.getClickCount()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.AbstractButton.doClick()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getSystemEventQueue()",
              "java.util.EventObject.getSource()",
              "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/google-closure-compiler/lib/rhino/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "JLabel",
        "long",
        "JSplitPane",
        "int",
        "JList",
        "long",
        "Dim",
        "JButton",
        "JButton"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "doClick",
        "getClickCount"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getClickCount()",
            "javax.swing.AbstractButton.doClick()"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.getClickCount()"
          ]
        }
      ],
      "keywords": [
        "click",
        "mouse",
        "button",
        "awt",
        "get",
        "abstract",
        "swing"
      ]
    },
    {
      "method": "shouldEnable@64",
      "body": "/** \n * Returns whether this action should be enabled for the given selection.\n * @param selection the selection\n * @return enablement\n */\npublic boolean shouldEnable(IStructuredSelection selection){\n  if (selection.isEmpty()) {\n    return false;\n  }\n  for (Iterator i=selection.iterator(); i.hasNext(); ) {\n    IMarker marker=(IMarker)i.next();\n    if (!(MarkerUtil.isMarkerType(marker,IMarker.TASK) && !MarkerUtil.isComplete(marker) && MarkerUtil.isEditable(marker))) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "formalParam": [
        "IStructuredSelection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/eclipse.platform.ui/bundles/org.eclipse.ui.ide/src/org/eclipse/ui/views/tasklist/MarkCompletedAction.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "boolean",
        "next",
        "util"
      ]
    },
    {
      "method": "startObjectEntry@45",
      "body": "@Override public boolean startObjectEntry(String key) throws ParseException, IOException {\n  if (\"coordinates\".equals(key)) {\n    lines=new ArrayList();\n  }\n  return true;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/geotools/modules/unsupported/geojson/src/main/java/org/geotools/geojson/geom/MultiLineHandler.java",
      "classTypes": [
        "List<Coordinate[]>",
        "List<Coordinate>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.ArrayList.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "string",
        "lang",
        "array",
        "list",
        "equals"
      ]
    },
    {
      "method": "RemoveReplicaRequest@43",
      "body": "/** \n * Constructs an extended operation object for removing a replica.\n * @param dn          The distinguished name of the replica'spartition root. <br><br>\n * @param serverDN    The distinguished name of server from which the replicawill be removed. <br><br>\n * @param flags   Determines whether all servers in the replica ring mustbe up before proceeding. When set to zero, the status of the servers is not checked. When set to LDAP_ENSURE_SERVERS_UP, all servers must be up for the operation to proceed.\n * @exception LDAPException A general exception which includes an error messageand an LDAP error code.\n */\npublic RemoveReplicaRequest(String dn,String serverDN,int flags) throws LDAPException {\n  super(ReplicationConstants.DELETE_REPLICA_REQ,null);\n  try {\n    if ((dn == null) || (serverDN == null))     throw new IllegalArgumentException(ExceptionMessages.PARAM_ERROR);\n    ByteArrayOutputStream encodedData=new ByteArrayOutputStream();\n    LBEREncoder encoder=new LBEREncoder();\n    ASN1Integer asn1_flags=new ASN1Integer(flags);\n    ASN1OctetString asn1_serverDN=new ASN1OctetString(serverDN);\n    ASN1OctetString asn1_dn=new ASN1OctetString(dn);\n    asn1_flags.encode(encoder,encodedData);\n    asn1_serverDN.encode(encoder,encodedData);\n    asn1_dn.encode(encoder,encodedData);\n    setValue(encodedData.toByteArray());\n  }\n catch (  IOException ioe) {\n    throw new LDAPException(ExceptionMessages.ENCODING_ERROR,LDAPException.ENCODING_ERROR,(String)null);\n  }\n}\n",
      "formalParam": [
        "String",
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/openldap-jldap/com/novell/ldap/extensions/RemoveReplicaRequest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "io",
        "array",
        "output",
        "stream",
        "byte"
      ]
    },
    {
      "method": "getUsername@536",
      "body": "public String getUsername(final String prompt){\n  showPrompt(prompt);\n  return console.readLine();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "List<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.lang.String>.size()",
              "java.io.PrintStream.print(char[])",
              "java.io.PrintStream.println(char[])"
            ]
          },
          {
            "calls": [
              "java.util.Collection<java.lang.String>.size()",
              "java.io.PrintStream.print(char[])",
              "java.io.PrintStream.println()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.delete()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.endsWith(java.lang.String)",
              "java.io.PrintStream.print(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/imagej/core/updater/core/src/main/java/imagej/updater/ui/CommandLine.java",
      "classTypes": [
        "FileObject",
        "Console",
        "LogService",
        "int",
        "FilesCollection",
        "Set<String>",
        "Progress",
        "Console"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String",
          "String",
          "boolean"
        ],
        [
          "Collection<String>"
        ],
        [
          "FileObject"
        ],
        [
          "String"
        ],
        [
          "String[]",
          "int"
        ]
      ],
      "types": [
        "Boolean",
        "PrintStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.endsWith(java.lang.String)",
            "java.io.PrintStream.print(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "stream"
      ]
    },
    {
      "method": "PortletRemoteServiceProxy@10",
      "body": "protected PortletRemoteServiceProxy(String moduleBaseURL,String remoteServiceRelativePath,String serializationPolicyName,Serializer serializer){\n  super(moduleBaseURL,remoteServiceRelativePath,serializationPolicyName,serializer);\n  setRpcRequestBuilder(new PortletRpcRequestBuilder());\n  configureServiceEntryPoint(remoteServiceRelativePath);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "Serializer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/gwt-portlet-bridge/gwt-portlet-bridge/src/main/java/com/chfourie/gwtportletbridge/client/general/impl/PortletRemoteServiceProxy.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Class",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "get"
      ]
    },
    {
      "method": "visit@107",
      "body": "@Override public void visit(ExpressionList el){\n  for (Iterator iter=el.getExpressions().iterator(); iter.hasNext(); ) {\n    Expression expression=(Expression)iter.next();\n    expression.accept(this);\n  }\n}\n",
      "formalParam": [
        "ExpressionList"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/squall/src/sql/visitors/jsql/JoinTablesExprsVisitor.java",
      "classTypes": [
        "Table",
        "JoinTablesExprs"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next",
        "boolean",
        "iterator"
      ]
    },
    {
      "method": "SearchPath@37",
      "body": "public SearchPath(String searchPath){\n  StringTokenizer st=new StringTokenizer(searchPath,File.pathSeparator);\n  List<String> dlist=new ArrayList<String>();\n  while (st.hasMoreTokens()) {\n    dlist.add(st.nextToken());\n  }\n  pathString=searchPath;\n  pathArray=(String[])dlist.toArray(new String[dlist.size()]);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.exists()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/tools/example/debug/gui/SearchPath.java",
      "classTypes": [
        "String",
        "String[]"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "ArrayList",
        "List"
      ],
      "apicalls": [
        "nextToken"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()"
          ]
        }
      ],
      "keywords": [
        "next",
        "boolean",
        "add",
        "token"
      ]
    },
    {
      "method": "FractionalPart_0@1223",
      "body": "@Test public void FractionalPart_0(){\n  t(\"FractionalPart[6/5]\",\"1 / 5\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra/test/src/test/java/geogebra/cas/GeoGebraCasIntegrationTest.java",
      "classTypes": [
        "Kernel",
        "MyArbitraryConstant",
        "boolean",
        "GeoGebraCasInterface",
        "CASTestLogger"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String",
        "Integer",
        "HashSet"
      ],
      "apicalls": [
        "length",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "integer",
        "set",
        "hash",
        "lang"
      ]
    },
    {
      "method": "releaseConnection@144",
      "body": "/** \n * @see net.jforum.DBConnection#releaseConnection(java.sql.Connection)\n */\npublic void releaseConnection(Connection conn){\n  if (conn == null) {\n    return;\n  }\n  try {\n    conn.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "Connection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.close()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/guj.com.br/src/net/jforum/C3P0PooledConnection.java",
      "classTypes": [
        "ComboPooledDataSource"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "SQLException"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.close()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "print",
        "trace",
        "connection",
        "lang",
        "stack",
        "sql"
      ]
    },
    {
      "method": "lineIterator@688",
      "body": "/** \n * Return an Iterator for the lines in an <code>InputStream</code>, using the character encoding specified (or default encoding if null). <p> <code>LineIterator</code> holds a reference to the open <code>InputStream</code> specified here. When you have finished with the iterator you should close the stream to free internal resources. This can be done by closing the stream directly, or by calling {@link LineIterator#close()} or {@link LineIterator#closeQuietly(LineIterator)}. <p> The recommended usage pattern is: <pre> try { LineIterator it = IOUtils.lineIterator(stream, \"UTF-8\"); while (it.hasNext()) { String line = it.nextLine(); /// do something with line } } finally { IOUtils.closeQuietly(stream); } </pre>\n * @param input  the <code>InputStream</code> to read from, not null\n * @param encoding  the encoding to use, null means platform default\n * @return an Iterator of the lines in the reader, never null\n * @throws IllegalArgumentException if the input is null\n * @throws IOException if an I/O error occurs, such as if the encoding is invalid\n * @since Commons IO 1.2\n */\npublic static LineIterator lineIterator(InputStream input,String encoding) throws IOException {\n  Reader reader=null;\n  if (encoding == null) {\n    reader=new InputStreamReader(input);\n  }\n else {\n    reader=new InputStreamReader(input,encoding);\n  }\n  return new LineIterator(reader);\n}\n",
      "formalParam": [
        "InputStream",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "byte[]",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.String(byte[],java.lang.String)",
              "java.io.Writer.write(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.String(byte[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)",
              "java.io.Reader.read(char[])",
              "java.io.Writer.write(char[],int,int)",
              "java.io.Reader.read(char[])",
              "java.io.OutputStreamWriter.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.CharSequence.toString()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.OutputStream.write(byte[])"
            ]
          },
          {
            "calls": [
              "java.lang.CharSequence.toString()",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Reader.read(char[])",
              "java.io.Writer.write(char[],int,int)",
              "java.io.Reader.read(char[])"
            ]
          }
        ]
      ],
      "returnType": "LineIterator",
      "file": "./java_projects/nebula/widgets/picture/org.eclipse.nebula.widgets.picture/src/org/eclipse/nebula/widgets/picture/internal/IOUtils.java",
      "classTypes": [
        "int",
        "int",
        "char[]",
        "char",
        "byte[]",
        "char",
        "char",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "byte[]",
          "Writer",
          "String"
        ],
        [
          "Reader",
          "OutputStream"
        ],
        [
          "CharSequence",
          "OutputStream",
          "String"
        ],
        [
          "InputStream"
        ],
        [
          "Reader"
        ]
      ],
      "types": [
        "UnsupportedEncodingException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "input",
        "reader",
        "encoding",
        "io",
        "string"
      ]
    },
    {
      "method": "testSendEvent@73",
      "body": "@Test public void testSendEvent() throws IOException {\n  jmsTemplate.send(Topics.ALERT_METADATA_IssueUpdate_Updated,new TextMessageCreator(IOUtils.toString(this.getClass().getResourceAsStream(\"/connector/ALERT.KEUI.IssueUpdate.Annotated.xml\"))));\n  assertAction();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
              "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/STARDOM/eu.alert-project.iccs.stardom.core/eu.alert-project.iccs.stardom.alert-connector/src/test/java/eu/alertproject/iccs/stardom/internal/IssueUpdateAnnotatedListenerTest.java",
      "classTypes": [
        "ProfileDao",
        "MetricDao",
        "IssueUpdatedAnnotatedListener",
        "JmsTemplate"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
            "java.util.concurrent.CountDownLatch.await(long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "concurrent"
      ]
    },
    {
      "method": "Vectors_ScalarProduct_3@2817",
      "body": "@Test public void Vectors_ScalarProduct_3(){\n  t(\"(1, 2)*{3,4}\",\"11\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra/test/src/test/java/geogebra/cas/GeoGebraCasIntegrationTest.java",
      "classTypes": [
        "Kernel",
        "boolean",
        "CASTestLogger",
        "GeoGebraCasInterface",
        "MyArbitraryConstant"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "length",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "set",
        "equals",
        "boolean",
        "integer"
      ]
    },
    {
      "method": "getTimestamp@752",
      "body": "/** \n * Converts the X-coordinate of the given  {@link Point} to a precisetimestamp, useful for display purposes.\n * @param aPoint the X,Y-coordinate to convert to a precise timestamp, cannot be <code>null</code>.\n * @return a precise timestamp, as double value.\n * @see DisplayUtils#displayTime(double)\n */\npublic double getTimestamp(final Point aPoint){\n  final double zoomFactor=getZoomFactor();\n  final double scaleFactor=TIMESTAMP_FACTOR * zoomFactor;\n  double x=aPoint.x / zoomFactor;\n  final Long triggerPos=getTriggerPosition();\n  if (triggerPos != null) {\n    x-=triggerPos.longValue();\n  }\n  if (!hasTimingData()) {\n    return (scaleFactor * x) / scaleFactor;\n  }\n  return (scaleFactor * x) / (scaleFactor * getSampleRate());\n}\n",
      "formalParam": [
        "Point"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.valueOf(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Long"
          },
          {
            "_call": "java.lang.Long.longValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Rectangle.getLocation()",
              "java.awt.Point.Point(int,int)"
            ]
          }
        ]
      ],
      "returnType": "double",
      "file": "./java_projects/ols/client/src/main/java/nl/lxtreme/ols/client/signaldisplay/model/SignalDiagramModel.java",
      "classTypes": [
        "SignalDiagramController",
        "SignalElementManager",
        "int",
        "int",
        "double",
        "DataSet",
        "ZoomController",
        "int",
        "enum",
        "int"
      ],
      "sorrformalparam": [
        [
          "Rectangle",
          "int"
        ]
      ],
      "types": [
        "String",
        "Long",
        "NumberFormatException"
      ],
      "apicalls": [
        "valueOf",
        "longValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.valueOf(java.lang.String)",
            "java.lang.Long.longValue()"
          ]
        }
      ],
      "keywords": [
        "long",
        "format",
        "string",
        "number",
        "lang"
      ]
    },
    {
      "method": "InjectionMetadata@56",
      "body": "public InjectionMetadata(Class targetClass,Collection<InjectedElement> elements){\n  if (!elements.isEmpty()) {\n    this.injectedElements=Collections.synchronizedSet(new LinkedHashSet<InjectedElement>(elements.size()));\n    for (    InjectedElement element : elements) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Found injected element on class [\" + targetClass.getName() + \"]: \"+ element);\n      }\n      this.injectedElements.add(element);\n    }\n  }\n else {\n    this.injectedElements=Collections.emptySet();\n  }\n}\n",
      "formalParam": [
        "Class",
        "Collection<InjectedElement>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Collections.emptySet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.Collection<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collection<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Collections.synchronizedSet(java.util.Set)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              },
              {
                "_call": "java.lang.Class.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Set<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<Tau_E>.iterator()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.remove()",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/spring-framework/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java",
      "classTypes": [
        "Set<InjectedElement>",
        "Boolean"
      ],
      "sorrformalparam": [
        [
          "RootBeanDefinition"
        ]
      ],
      "types": [],
      "apicalls": [
        "isEmpty",
        "synchronizedSet"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collections.emptySet()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collection<Tau_E>.size()",
            "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(int)",
            "java.util.Collections.synchronizedSet(java.util.Set)",
            "java.lang.Class.getName()",
            "java.util.Set<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "synchronized",
        "size"
      ]
    },
    {
      "method": "decodeAsciiString@62",
      "body": "/** \n * Read until null termination is found\n */\npublic static String decodeAsciiString(ByteBuffer buffer){\n  StringBuffer stringBuffer=new StringBuffer();\n  byte b=buffer.get();\n  while (b != 0) {\n    stringBuffer.append((char)b);\n    b=buffer.get();\n  }\n  return stringBuffer.toString();\n}\n",
      "formalParam": [
        "ByteBuffer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.nio.ByteBuffer.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.get(byte[])",
              "java.lang.String.String(byte[],java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/xella/src/xella/net/ByteDecoder.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "ByteBuffer",
          "int"
        ]
      ],
      "types": [
        "ByteBuffer",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.nio.ByteBuffer.get()",
            "java.lang.StringBuffer.append(char)",
            "java.nio.ByteBuffer.get()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "nio",
        "character",
        "get"
      ]
    },
    {
      "method": "updateShort@640",
      "body": "public void updateShort(String columnName,short x) throws SQLException {\n  updateShort(findColumn(columnName),x);\n}\n",
      "formalParam": [
        "String",
        "short"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.List.indexOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/codjo-fake-db/src/main/java/fakedb/FakeResultSet.java",
      "classTypes": [
        "Object[][]",
        "Number",
        "Statement",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "long"
        ],
        [
          "String",
          "Date"
        ]
      ],
      "types": [
        "Integer",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.List.indexOf(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "index"
      ]
    },
    {
      "method": "setLabels@3869",
      "body": "public void setLabels(){\n  setBorder(BorderFactory.createTitledBorder(app.getPlain(\"Size\")));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.TitledBorder"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "JPanel",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedItem(java.lang.Object)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.AbstractButton.isSelected()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "JCheckBox",
        "long",
        "JToggleButton",
        "LayerPanel",
        "Object[]",
        "long",
        "LabelPanel",
        "AnimationStepPanel",
        "Object[]",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Object[]"
        ],
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "setBorder",
        "createTitledBorder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "titled"
      ]
    },
    {
      "method": "testRemove0@153",
      "body": "public final void testRemove0(){\n  while (!ref.isEmpty()) {\n    int key=ref.tailMap((ref.firstKey() + ref.lastKey()) / 2).firstKey();\n    assertEquals(ref.remove(key),map.remove(key));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.firstKey()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.lastKey()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.tailMap(java.lang.Integer)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.SortedMap"
              },
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.Integer,java.lang.Integer>.equals(java.lang.Object)",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.Integer,java.lang.Integer>.clear()",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
              "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
              "java.io.ObjectOutputStream.close()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
              "java.io.ObjectInputStream.readObject()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/SortedMapTestBase.java",
      "classTypes": [
        "SortedMap<Integer,Integer>",
        "int",
        "SortedMap<Integer,Integer>",
        "int",
        "Random"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "tailMap",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.firstKey()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.lastKey()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.tailMap(java.lang.Integer)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
            "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "last",
        "boolean",
        "tail",
        "remove",
        "sorted",
        "integer",
        "util"
      ]
    },
    {
      "method": "doFilter@26",
      "body": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {\n  String key=request.getParameter(\"key\");\n  String uri=((HttpServletRequest)request).getRequestURI();\n  String remote_ip=request.getRemoteAddr();\n  logger.debug(String.format(\"%s - %s\",remote_ip,uri));\n  if (!remote_ip.matches(SENATE_IP_RANGE)) {\n    if (uri.matches(\"(/GeoApi)?/api/.*\") && key == null) {\n      logger.debug(\"API Request Denied: Offsite Request Missing Key\");\n      ((HttpServletResponse)response).sendRedirect(\"http://www.nysenate.gov\");\n      return;\n    }\n    if (!uri.matches(\"(/GeoApi)?(/maps/.*?)\")) {\n      logger.debug(\"Application Request Denied. Offsite Request.\");\n      ((HttpServletResponse)response).sendRedirect(\"http://www.nysenate.gov\");\n      return;\n    }\n  }\n  chain.doFilter(request,response);\n}\n",
      "formalParam": [
        "ServletRequest",
        "ServletResponse",
        "FilterChain"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "$NOT$java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/GeoApi/src/main/java/gov/nysenate/sage/servlets/SenateFilter.java",
      "classTypes": [
        "Logger",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Object"
      ],
      "apicalls": [
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "$NOT$java.lang.String.matches(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "$NOT$java.lang.String.matches(java.lang.String)",
            "java.lang.String.matches(java.lang.String)",
            "$NOT$java.lang.String.matches(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "matches",
        "format",
        "string",
        "object",
        "locale"
      ]
    },
    {
      "method": "getTimestamp@399",
      "body": "public Timestamp getTimestamp(String columnName,Calendar cal) throws SQLException {\n  return getTimestamp(findColumn(columnName),cal);\n}\n",
      "formalParam": [
        "String",
        "Calendar"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.List.indexOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "Clob",
        "long",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)",
              "java.lang.Number.longValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Timestamp",
      "file": "./java_projects/codjo-fake-db/src/main/java/fakedb/FakeResultSet.java",
      "classTypes": [
        "int",
        "int",
        "Object[][]",
        "Number"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Object",
        "List",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.List.indexOf(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "index",
        "integer",
        "arrays",
        "util"
      ]
    },
    {
      "method": "should@123",
      "body": "@Test public void should(){\n  Pattern VARIANT_EXTRACTOR_REGEX=Pattern.compile(\"((\\\\.)[^\\\\d][\\\\w]*)\");\n  Matcher variantMatcher=VARIANT_EXTRACTOR_REGEX.matcher(\"http://localhost:8080/v1/test-service-mock-0.9.2-SNAPSHOT/whatever.xml\");\n  if (variantMatcher.find()) {\n    for (int i=1; i <= variantMatcher.groupCount(); i++) {\n      System.out.println(variantMatcher.group(i));\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.find()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.regex.Matcher.group(int)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.String"
                  },
                  {
                    "_call": "java.io.PrintStream.println(java.lang.String)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.regex.Matcher.groupCount()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/repose/project-set/components/content-normalization/src/test/java/com/rackspace/papi/components/cnorm/normalizer/MediaTypeNormalizerTest.java",
      "classTypes": [
        "MediaTypeNormalizer",
        "List<MediaType>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Pattern"
      ],
      "apicalls": [
        "groupCount",
        "compile"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()"
          ]
        },
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.group(int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.regex.Matcher.groupCount()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "print",
        "util",
        "group"
      ]
    },
    {
      "method": "write@40",
      "body": "@Override public void write(List<? extends Product> items) throws Exception {\n  delegate.write(items);\n  StringBuilder builder=new StringBuilder();\n  for (  Product product : items) {\n    builder.append(product.getId());\n  }\n  chunkMD5.add(DigestUtils.md5DigestAsHex(builder.toString().getBytes(\"UTF-8\")));\n}\n",
      "formalParam": [
        "List<? extends Product>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)",
              "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
              "java.io.Writer.append(java.lang.CharSequence)",
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.Writer.append(java.lang.CharSequence)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Spring-Batch-in-Action/sbia/ch06/src/main/java/com/manning/sbia/ch06/custom/ProductMD5ItemWriter.java",
      "classTypes": [
        "List<String>"
      ],
      "sorrformalparam": [
        [
          "Writer"
        ]
      ],
      "types": [
        "String",
        "UnsupportedEncodingException",
        "StringBuilder",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()",
            "java.lang.String.getBytes(java.lang.String)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "encoding",
        "util",
        "string",
        "add"
      ]
    },
    {
      "method": "onCreate@76",
      "body": "@Override public void onCreate(Bundle savedInstanceState){\n  super.onCreate(savedInstanceState);\n  if (!Boolean.parseBoolean(SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {\n    finish();\n  }\n  mHandler=new Handler();\n  Thread waitForConnectionCompleteThread=new Thread(null,mTask,\"EcmExitDialogWaitThread\");\n  waitForConnectionCompleteThread.start();\n  mPhone=PhoneFactory.getDefaultPhone();\n  mPhone.registerForEcmTimerReset(mTimerResetHandler,ECM_TIMER_RESET,null);\n  IntentFilter filter=new IntentFilter();\n  filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);\n  registerReceiver(mEcmExitReceiver,filter);\n}\n",
      "formalParam": [
        "Bundle"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Boolean.parseBoolean(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/android_packages_apps_phone/src/com/android/phone/EmergencyCallbackModeExitDialog.java",
      "classTypes": [
        "ServiceConnection",
        "String",
        "AlertDialog",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Runnable",
        "Boolean",
        "Thread"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Boolean.parseBoolean(java.lang.String)",
            "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "start",
        "lang",
        "parse",
        "runnable",
        "string"
      ]
    },
    {
      "method": "decryptIt@38",
      "body": "public ArrayList<DownloadLink> decryptIt(CryptedLink param,ProgressController progress) throws Exception {\n  ArrayList<DownloadLink> decryptedLinks=new ArrayList<DownloadLink>();\n  br.setFollowRedirects(false);\n  String parameter=param.toString();\n  br.getPage(parameter);\n  if (br.containsHTML(\"(File Not Found|The file you requested was not found|This file never existed on|Removed due to copyright violations)\") || !br.containsHTML(\"download.php\"))   throw new DecrypterException(JDL.L(\"plugins.decrypt.errormsg.unavailable\",\"Perhaps wrong URL or the download is not available anymore.\"));\n  String[] redirectLinks=br.getRegex(\"\\\"(download\\\\.php\\\\?id=.*?fileid=[a-z0-9A-Z]+)\\\"\").getColumn(0);\n  String directLink=br.getRegex(\"(/get\\\\.php\\\\?dl=.*?)\\\"\").getMatch(0);\n  if (redirectLinks == null || redirectLinks.length == 0)   return null;\n  progress.setRange(redirectLinks.length);\n  for (  String link : redirectLinks) {\n    link=link.replace(\"amp;\",\"\");\n    Browser cl=br.cloneBrowser();\n    cl.getPage(\"http://massmirror.com/\" + link);\n    String dllink=cl.getRedirectLocation();\n    if (dllink == null)     return null;\n    decryptedLinks.add(createDownloadlink(dllink));\n    progress.increase(1);\n  }\n  if (directLink != null) {\n    String link=\"directhttp://http://massmirror.com\" + directLink;\n    DownloadLink direct=new DownloadLink(null,null,\"DirectHTTP\",link,true);\n    direct.setProperty(\"refURL\",br.getURL());\n    decryptedLinks.add(direct);\n  }\n  return decryptedLinks;\n}\n",
      "formalParam": [
        "CryptedLink",
        "ProgressController"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "ArrayList<DownloadLink>",
      "file": "./java_projects/jdownloader/trunk/src/jd/plugins/decrypter/MassMirrorCom.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "ArrayList",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "replace",
        "string",
        "char",
        "lang",
        "array"
      ]
    },
    {
      "method": "entityReference@523",
      "body": "/** \n * Receive notivication of a entityReference.\n * @param name name of the entity reference\n */\npublic void entityReference(String name) throws org.xml.sax.SAXException {\n  append(m_doc.createEntityReference(name));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.lang.String.String(char[],int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.trim()",
              "java.lang.String.length()",
              "java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Stack.push(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.lang.String.String(char[],int,int)",
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Stack.pop()",
              "java.util.Vector.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.lang.String.String(char[],int,int)",
              "java.lang.String.trim()",
              "java.lang.String.length()",
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.String(char[],int,int)",
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/org/apache/xml/internal/utils/DOMBuilder.java",
      "classTypes": [
        "Node",
        "Node",
        "Stack",
        "DocumentFragment",
        "Document",
        "boolean",
        "Node"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "String"
        ],
        [
          "char[]",
          "int",
          "int"
        ],
        [
          "String",
          "String",
          "String",
          "Attributes"
        ],
        [
          "char[]",
          "int",
          "int"
        ],
        [
          "String",
          "String",
          "String"
        ],
        [
          "char[]",
          "int",
          "int"
        ],
        [
          "char[]",
          "int",
          "int"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang"
      ]
    },
    {
      "method": "DowntimeProblem@328",
      "body": "public String DowntimeProblem(Object problemObj,String snoozeTime,String comment) throws NagiosParsingFailedException {\n  String CustomData=\"\";\n  if (comment.equals(\"\")) {\n    comment=\"no comment\";\n  }\n  CustomData+=\"com_author=\" + Uri.encode(mNagiosSite.getUrlUser());\n  CustomData+=\"&com_data=\" + Uri.encode(comment);\n  Date now=new Date();\n  SimpleDateFormat sdf=new SimpleDateFormat(DateFormat.toDateFormat(DM.I.getConfiguration().getMiscDateFormat()));\n  CustomData+=\"&start_time=\" + Uri.encode(sdf.format(now).toString());\n  CustomData+=\"&end_time=\" + Uri.encode(snoozeTime);\n  CustomData+=\"&fixed=1\";\n  if (problemObj.getClass() == NagiosService.class) {\n    return SendCmd(problemObj,ScheduleDowntime,CustomData);\n  }\n else   if (problemObj.getClass() == NagiosHost.class) {\n    return SendCmd(problemObj,ScheduleHostDowntime,CustomData);\n  }\n else   return \"Could not execute command...\";\n}\n",
      "formalParam": [
        "Object",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.text.DateFormat.format(java.util.Date)",
              "java.lang.String.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/Nagroid/src/de/schoar/nagroid/nagios/parser/NagiosV2Parser.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "Object",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Date.Date()",
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.format(java.util.Date)",
            "java.lang.String.toString()"
          ]
        }
      ],
      "keywords": [
        "equals"
      ]
    },
    {
      "method": "process@1016",
      "body": "public void process(InputStream in,ZipEntry zipEntry) throws IOException {\n  copyEntry(zipEntry,in,out);\n}\n",
      "formalParam": [
        "InputStream",
        "ZipEntry"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.zip.ZipEntry.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.zip.ZipEntry.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.zip.ZipEntry.setTime(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "byte[]",
        "void",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.zip.ZipFile.getEntry(java.lang.String)",
              "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.listFiles()",
              "$NOT$java.io.File.exists()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.zip.ZipFile.getName()",
              "java.util.zip.ZipFile.getEntry(java.lang.String)",
              "java.util.zip.ZipFile.getInputStream(java.util.zip.ZipEntry)",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
              "java.util.Map.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/zt-zip/src/main/java/org/zeroturnaround/zip/ZipUtil.java",
      "classTypes": [
        "boolean",
        "NameMapper",
        "String",
        "ZipOutputStream"
      ],
      "sorrformalparam": [
        [
          "ZipFile",
          "String"
        ],
        [
          "File",
          "File",
          "NameMapper",
          "int"
        ],
        [
          "ZipFile",
          "String",
          "File"
        ],
        [
          "File",
          "ZipEntryTransformerEntry[]",
          "File"
        ]
      ],
      "types": [
        "ZipEntry",
        "Long",
        "InputStream"
      ],
      "apicalls": [
        "getTime",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.zip.ZipEntry.getName()",
            "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
            "java.util.zip.ZipEntry.getTime()",
            "java.util.zip.ZipEntry.setTime(long)",
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "get",
        "input",
        "buffered",
        "util",
        "name"
      ]
    },
    {
      "method": "insertRequest@59",
      "body": "public void insertRequest(String userId,int questionNumber){\n  LinkedList<RequestAndAnswer> requestAndAnswers=userRequestAndAnswers.get(userId);\n  if (requestAndAnswers == null) {\n    requestAndAnswers=new LinkedList<RequestAndAnswer>();\n    LinkedList<RequestAndAnswer> tmpAnswers=userRequestAndAnswers.putIfAbsent(userId,requestAndAnswers);\n    if (tmpAnswers != null) {\n      requestAndAnswers=tmpAnswers;\n    }\n  }\n  RequestAndAnswer requestAndAnswer=new RequestAndAnswer();\n  requestAndAnswer.questionNumber=questionNumber;\n  requestAndAnswers.add(requestAndAnswer);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "List<Answer>",
        "List<Answer>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
              "java.util.LinkedList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.ArrayList(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          },
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
              "java.util.Collections.emptyList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
              "java.util.LinkedList<Tau_E>.getLast()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Joker/backend/memory/src/main/java/cl/own/usi/dao/impl/memory/UserDAOImpl.java",
      "classTypes": [
        "ConcurrentMap<String,User>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "Answer"
        ]
      ],
      "types": [
        "LinkedList",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.LinkedList<cl.own.usi.dao.impl.memory.UserDAOImpl.RequestAndAnswer>>.get(java.lang.Object)",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.LinkedList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "object",
        "string",
        "util"
      ]
    },
    {
      "method": "preSave@297",
      "body": "/** \n * {@inheritDoc} \n */\npublic String preSave(WikiContext context,String content) throws RedirectException {\n  cleanBanList();\n  refreshBlacklists(context);\n  Change change=getChange(context,content);\n  if (!ignoreThisUser(context)) {\n    checkBanList(context,change);\n    checkSinglePageChange(context,content,change);\n    checkPatternList(context,content,change);\n  }\n  if (!m_stopAtFirstMatch) {\n    Integer score=(Integer)context.getVariable(ATTR_SPAMFILTER_SCORE);\n    if (score != null && score.intValue() >= m_scoreLimit) {\n      throw new RedirectException(\"Herb says you got too many points\",getRedirectPage(context));\n    }\n  }\n  log(context,ACCEPT,\"-\",change.toString());\n  return content;\n}\n",
      "formalParam": [
        "WikiContext",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Vector<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.remove()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.lang.StringBuffer.StringBuffer()",
              "java.util.Random.Random()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.lang.String.toLowerCase()",
              "java.lang.System.currentTimeMillis()"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jspwiki/src/org/apache/wiki/filters/SpamFilter.java",
      "classTypes": [
        "int",
        "long",
        "String",
        "String",
        "long",
        "int"
      ],
      "sorrformalparam": [
        [
          "HttpServletRequest"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Vector<Tau_E>.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.remove()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "iterator"
      ]
    },
    {
      "method": "getVisualMargin@121",
      "body": "public Insets getVisualMargin(Component c){\n  Insets insets=new Insets(layoutMargin.top,layoutMargin.left,layoutMargin.bottom,layoutMargin.right);\n  if (c instanceof JComponent) {\n    Insets componentMargin=(Insets)((JComponent)c).getClientProperty(propertyName);\n    if (componentMargin == null && propertyName != null) {\n      componentMargin=UIManager.getInsets(uiManagerPropertyName);\n    }\n    if (componentMargin != null) {\n      if (!isTopFixed)       insets.top=componentMargin.top;\n      if (!isLeftFixed)       insets.left=componentMargin.left;\n      if (!isBottomFixed)       insets.bottom=componentMargin.bottom;\n      if (!isRightFixed)       insets.right=componentMargin.right;\n    }\n  }\n  return insets;\n}\n",
      "formalParam": [
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Insets.Insets(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.UIManager.getInsets(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Insets"
          }
        ]
      },
      "sorrreturntype": [
        "Insets"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Insets.Insets(int,int,int,int)",
              "javax.swing.UIManager.getInsets(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Insets",
      "file": "./java_projects/substance/src/org/pushingpixels/substance/internal/contrib/randelshofer/quaqua/VisualMargin.java",
      "classTypes": [
        "boolean",
        "String",
        "String",
        "Insets"
      ],
      "sorrformalparam": [
        [
          "Component"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "getInsets"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Insets.Insets(int,int,int,int)",
            "javax.swing.UIManager.getInsets(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "manager"
      ]
    },
    {
      "method": "getNamedOutputsList@198",
      "body": "/** \n * Returns list of channel names.\n * @param conf job conf\n * @return List of channel Names\n */\npublic static List<String> getNamedOutputsList(JobConf conf){\n  List<String> names=new ArrayList<String>();\n  StringTokenizer st=new StringTokenizer(conf.get(NAMED_OUTPUTS,\"\"),\" \");\n  while (st.hasMoreTokens()) {\n    names.add(st.nextToken());\n  }\n  return names;\n}\n",
      "formalParam": [
        "JobConf"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "OutputCollector"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
              "java.util.Collections.unmodifiableSet(java.util.Set)",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.toCharArray()",
              "java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ]
      ],
      "returnType": "List<String>",
      "file": "./java_projects/hadoop-20-warehouse/src/mapred/org/apache/hadoop/mapred/lib/MultipleOutputs.java",
      "classTypes": [
        "Map<String,RecordWriter>",
        "RecordWriter",
        "String"
      ],
      "sorrformalparam": [
        [
          "JobConf"
        ],
        [
          "String",
          "String",
          "Reporter"
        ]
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()"
          ]
        }
      ],
      "keywords": [
        "tokens",
        "add",
        "util"
      ]
    },
    {
      "method": "FilterProxyInputStream@22",
      "body": "protected FilterProxyInputStream(InputStream in,String encoding,IProcessOutputFilter processOutputFilter){\n  super();\n  this.processOutputFilter=processOutputFilter;\n  charset=Charset.defaultCharset();\n  try {\n    charset=Charset.forName(encoding);\n  }\n catch (  IllegalCharsetNameException e) {\n  }\n  this.reader=new BufferedReader(new InputStreamReader(in,charset));\n}\n",
      "formalParam": [
        "InputStream",
        "String",
        "IProcessOutputFilter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.charset.Charset.defaultCharset()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.Charset"
          },
          {
            "_call": "java.nio.charset.Charset.forName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.Charset"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/studio3/plugins/com.aptana.console/src/com/aptana/console/process/FilterProxyInputStream.java",
      "classTypes": [
        "Charset",
        "char",
        "BufferedReader",
        "ByteArrayInputStream",
        "IProcessOutputFilter"
      ],
      "sorrformalparam": [],
      "types": [
        "InputStreamReader",
        "InputStream",
        "Charset",
        "BufferedReader"
      ],
      "apicalls": [
        "forName"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.charset.Charset.defaultCharset()",
            "java.nio.charset.Charset.forName(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.nio.charset.Charset)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)"
          ]
        }
      ],
      "keywords": [
        "reader",
        "stream",
        "nio",
        "io"
      ]
    },
    {
      "method": "$req@186",
      "body": "/** \n * simple wrapper for HttpRequest setters\n * @return\n */\npublic HttpRequest $req(){\n  return HttpRequest.class == this.getClass() ? (HttpRequest)this : new HttpRequest(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicReference<java.lang.String>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "$NOT$java.lang.String.startsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "HttpResponse",
        "Rfc822HeaderState"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicReference<java.lang.String>.get()",
              "$NOT$java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicReference<java.nio.channels.SelectionKey>.set(java.nio.channels.SelectionKey)",
              "java.nio.channels.SocketChannel.socket()",
              "java.net.Socket.getInetAddress()",
              "java.util.concurrent.atomic.AtomicReference<java.net.InetAddress>.set(java.net.InetAddress)"
            ]
          }
        ]
      ],
      "returnType": "HttpRequest",
      "file": "./java_projects/RelaxFactory/rxf-server/src/main/java/rxf/server/Rfc822HeaderState.java",
      "classTypes": [
        "AtomicReference<String>",
        "String[]",
        "AtomicReference<SelectionKey>",
        "ByteBuffer",
        "AtomicReference<String[]>",
        "AtomicReference<Map<String,String>>",
        "AtomicReference<String>",
        "AtomicReference<String>"
      ],
      "sorrformalparam": [
        [],
        [
          "SelectionKey"
        ]
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "startsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicReference<java.lang.String>.get()",
            "$NOT$java.lang.String.startsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "get",
        "boolean",
        "util",
        "lang",
        "string",
        "starts"
      ]
    },
    {
      "method": "getRGB@440",
      "body": "/** \n * Returns the color/alpha components of the pixel in the default RGB color model format.  A color conversion is done if necessary. The pixel value is specified as an <code>int</code>. The returned value is in a non pre-multiplied format.  Thus, if the alpha is premultiplied, this method divides it out of the color components.  If the alpha value is 0, for example, the color values are each 0.\n * @param pixel the specified pixel\n * @return the RGB value of the color/alpha components of the specifiedpixel.\n * @see ColorModel#getRGBdefault\n */\nfinal public int getRGB(int pixel){\n  if (is_sRGB || is_LinearRGB) {\n    return (getAlpha(pixel) << 24) | (getRed(pixel) << 16) | (getGreen(pixel) << 8)| (getBlue(pixel) << 0);\n  }\n  float rgb[]=getDefaultRGBComponents(pixel);\n  return (getAlpha(pixel) << 24) | (((int)(rgb[0] * 255.0f + 0.5f)) << 16) | (((int)(rgb[1] * 255.0f + 0.5f)) << 8)| (((int)(rgb[2] * 255.0f + 0.5f)) << 0);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "float[]"
          },
          {
            "_call": "java.awt.color.ColorSpace.toRGB(float[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "float[]"
          },
          {
            "_call": "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "float[]"
          },
          {
            "_call": "java.awt.color.ColorSpace.toRGB(float[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "float[]"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int",
        "Object",
        "int",
        "int",
        "boolean",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getRGBdefault()",
              "java.awt.color.ColorSpace.fromRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.Raster.getSampleModel()",
              "java.awt.image.SampleModel.getNumBands()",
              "java.awt.image.ColorModel.getNumComponents()",
              "java.awt.image.Raster.getTransferType()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
              "java.awt.color.ColorSpace.toRGB(float[])"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/awt/image/DirectColorModel.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "byte[]"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "Object"
        ],
        [
          "int"
        ],
        [
          "int",
          "Object"
        ],
        [
          "Object"
        ],
        [
          "Object"
        ],
        [
          "Raster"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "ColorModel"
      ],
      "apicalls": [
        "toRGB"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
            "java.awt.color.ColorSpace.toRGB(float[])",
            "java.awt.image.ColorModel.getNormalizedComponents(int[],int,float[],int)",
            "java.awt.color.ColorSpace.toRGB(float[])"
          ]
        }
      ],
      "keywords": [
        "space",
        "get",
        "model"
      ]
    },
    {
      "method": "updateItemSize@540",
      "body": "@RequestMapping(value=\"{board}/edit-item/{id}/size\",method=RequestMethod.POST) public synchronized ResponseEntity<String> updateItemSize(@ModelAttribute(\"project\") KanbanProject project,@PathVariable(\"board\") String boardType,@PathVariable(\"id\") int id,@RequestParam(\"newValue\") String newValue) throws IOException {\n  WorkItem workItem=project.getWorkItemTree().getWorkItem(id);\n  workItem.setAverageCaseEstimate(parseInteger(newValue,0));\n  project.save();\n  return new ResponseEntity<String>(String.format(\"Size change successfully.  New size: %s\",workItem.getAverageCaseEstimate()),HttpStatus.OK);\n}\n",
      "formalParam": [
        "KanbanProject",
        "String",
        "int",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "ResponseEntity<String>",
        "ModelAndView"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "ResponseEntity<String>",
      "file": "./java_projects/kanban-app/src/main/java/com/metservice/kanban/web/KanbanBoardController.java",
      "classTypes": [
        "Logger",
        "Gson",
        "int",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [
          "KanbanProject",
          "String",
          "int",
          "String"
        ],
        [
          "KanbanProject",
          "String",
          "String[]"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "parse",
        "int",
        "lang"
      ]
    },
    {
      "method": "attachThread@55",
      "body": "public QueryStatus attachThread(){\n  if (CPU_TIME_SUPPORTED) {\n    _cpuTimes.set(_bean.getCurrentThreadCpuTime());\n  }\n else {\n    _cpuTimes.set(-1L);\n  }\n  _totalShards.incrementAndGet();\n  return this;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.ThreadLocal<java.lang.Long>.set(java.lang.Long)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.ThreadLocal<java.lang.Long>.set(java.lang.Long)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "QueryStatus"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()",
              "java.lang.ThreadLocal<java.lang.Long>.get()",
              "java.util.concurrent.atomic.AtomicLong.addAndGet(long)"
            ]
          }
        ]
      ],
      "returnType": "QueryStatus",
      "file": "./java_projects/blur/src/blur-core/src/main/java/com/nearinfinity/blur/manager/status/QueryStatus.java",
      "classTypes": [
        "ThreadMXBean",
        "String",
        "long",
        "boolean",
        "AtomicBoolean",
        "boolean",
        "long",
        "AtomicInteger",
        "AtomicBoolean"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer",
        "ThreadLocal",
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<java.lang.Long>.set(java.lang.Long)",
            "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
          ]
        }
      ],
      "keywords": [
        "thread",
        "set",
        "lang",
        "atomic",
        "concurrent"
      ]
    },
    {
      "method": "testChildAxisDeep@97",
      "body": "public void testChildAxisDeep() throws RepositoryException {\n  Node n1=testRootNode.addNode(\"node1\");\n  n1.addNode(\"a\").addNode(\"b\");\n  Node n2=testRootNode.addNode(\"node2\");\n  n2.addNode(\"a\").addNode(\"b\").addNode(\"c\").setProperty(\"prop\",\"a\");\n  Node n3=testRootNode.addNode(\"node2\");\n  n3.addNode(\"a\").addNode(\"b\").addNode(\"c\").setProperty(\"prop\",\"b\");\n  testRootNode.save();\n  List expected=Arrays.asList(new String[]{n1.getPath(),n2.getPath(),n3.getPath()});\n  String xpath=testPath + \"/* order by a/b/c/@prop\";\n  assertEquals(expected,collectPaths(executeQuery(xpath)));\n  Collections.reverse(expected);\n  xpath=testPath + \"/* order by a/b/c/@prop descending\";\n  assertEquals(expected,collectPaths(executeQuery(xpath)));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.Collections.reverse(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jcr/exo.jcr.component.core/src/test/java/org/exoplatform/services/jcr/api/core/query/OrderByTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Collections",
        "Arrays"
      ],
      "apicalls": [
        "reverse"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.Collections.reverse(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "collections",
        "list"
      ]
    },
    {
      "method": "checkPropertyAccess@301",
      "body": "@Override public void checkPropertyAccess(String property){\n  checkAccess();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.getThreadGroup()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ThreadGroup"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Thread.dumpStack()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()",
              "$NOT$java.lang.Thread.getThreadGroup()"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()",
              "java.lang.Thread.dumpStack()"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/SpoutcraftAPI/src/main/java/org/spoutcraft/spoutcraftapi/addon/SimpleSecurityManager.java",
      "classTypes": [
        "boolean",
        "ThreadGroup",
        "HashSet<String>",
        "double",
        "HashMap<String,HashSet<String>>",
        "Thread"
      ],
      "sorrformalparam": [
        [
          "Thread"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "dumpStack",
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getThreadGroup()",
            "java.lang.Thread.dumpStack()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getThreadGroup()"
          ]
        }
      ],
      "keywords": [
        "get",
        "thread",
        "lang"
      ]
    },
    {
      "method": "start@114",
      "body": "public void start() throws Exception {\n  _log.trace(\"starting...\");\n  boolean isDaemon=true;\n  _scavenger=new Timer(isDaemon);\n  long delay=_scavengerPeriod + Math.round(Math.random() * _scavengerPeriod);\n  if (_log.isDebugEnabled())   _log.debug(\"starting distributed scavenger thread...(period: \" + delay + \" secs)\");\n  _scavenger.scheduleAtFixedRate(new Scavenger(),delay * 1000,_scavengerPeriod * 1000);\n  _log.debug(\"...distributed scavenger thread started\");\n  _log.trace(\"...started\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Timer.Timer(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Math.random()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Math.round(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jetty-project/jetty-jboss/src/main/java/org/mortbay/j2ee/session/AbstractStore.java",
      "classTypes": [
        "int",
        "Timer"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Timer"
      ],
      "apicalls": [
        "random"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Timer.Timer(boolean)",
            "java.lang.Math.random()",
            "java.lang.Math.round(double)",
            "java.util.Timer.scheduleAtFixedRate(java.util.TimerTask,long,long)"
          ]
        }
      ],
      "keywords": [
        "timer"
      ]
    },
    {
      "method": "toString@256",
      "body": "/** \n * Produce a comma delimited text from a JSONArray of JSONObjects using a provided list of names. The list of names is not included in the output.\n * @param names A JSONArray of strings.\n * @param ja A JSONArray of JSONObjects.\n * @return A comma delimited text.\n * @throws JSONException\n */\npublic static String toString(JSONArray names,JSONArray ja) throws JSONException {\n  if (names == null || names.length() == 0) {\n    return null;\n  }\n  StringBuffer sb=new StringBuffer();\n  for (int i=0; i < ja.length(); i+=1) {\n    JSONObject jo=ja.optJSONObject(i);\n    if (jo != null) {\n      sb.append(rowToString(jo.toJSONArray(names)));\n    }\n  }\n  return sb.toString();\n}\n",
      "formalParam": [
        "JSONArray",
        "JSONArray"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/openintents/wifiqr/WifiQRDesktop/src/org/json/CDL.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "generateArmChart@99",
      "body": "@Override @Transactional(propagation=Propagation.REQUIRED) public ChartData generateArmChart(Trial trial){\n  ChartData chData=new ChartData();\n  int i=1;\n  ArrayList<String> xL=new ArrayList<String>();\n  ArrayList<double[]> data=new ArrayList<double[]>();\n  for (  TreatmentArm t : trial.getTreatmentArms()) {\n    data.add(new double[]{t.getSubjects().size()});\n    xL.add(Integer.toString(i));\n    i++;\n  }\n  chData.setData(data);\n  chData.setXLabels(xL);\n  return chData;\n}\n",
      "formalParam": [
        "Trial"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Integer.toString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "ChartData",
      "file": "./java_projects/randi2/src/main/java/de/randi2/services/ChartsServiceImpl.java",
      "classTypes": [
        "TrialDao"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "java.lang.Integer.toString(int)",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "findOrCreateTagRecords@187",
      "body": "/** \n * Returns all tag records as specified by the tags. If a tag is not in  the tags table, it is added to the table.\n * @param tags the tags string\n * @return list of tag records\n */\npublic static List<ActiveRecord> findOrCreateTagRecords(String tags){\n  if (tags == null || \"\".equals(tags))   return null;\n  tags=tags.toLowerCase();\n  List<String> tagList=Converters.convertStringToList(tags);\n  if (tagList == null)   return null;\n  List<ActiveRecord> tagRecords=new ArrayList<ActiveRecord>();\n  for (  String tagName : tagList) {\n    ActiveRecord atag=ActiveRecordUtil.getGateway(Tag.class).findFirst(\"name='\" + tagName + \"'\");\n    if (atag == null) {\n      atag=new Tag();\n      atag.setData(\"name=\" + tagName);\n      atag.create();\n    }\n    tagRecords.add(atag);\n  }\n  return tagRecords;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.toLowerCase()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.toLowerCase()",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.toLowerCase()",
              "java.util.List<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "List<ActiveRecord>",
      "file": "./java_projects/scooter/source/src/com/scooterframework/orm/activerecord/tag/TagHelper.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "ActiveRecord",
          "String"
        ],
        [
          "ActiveRecord"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.toLowerCase()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "string",
        "util",
        "case"
      ]
    },
    {
      "method": "execute@421",
      "body": "@Override public Void execute(final ISession session,final SeConnection connection) throws SeException, IOException {\n  try {\n    connection.close();\n    LOGGER.fine(session.toString() + \" successfully closed\");\n  }\n catch (  Exception ignore) {\n    LOGGER.fine(\"Problem closing \" + session.toString() + \": \"+ ignore.getMessage());\n  }\n  return null;\n}\n",
      "formalParam": [
        "ISession",
        "SeConnection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "SeVersion"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Void",
      "file": "./java_projects/geotools/modules/plugin/arcsde/common/src/main/java/org/geotools/arcsde/session/Commands.java",
      "classTypes": [
        "SeTable",
        "Command<String>",
        "Command<List<SeLayer>>",
        "Command<SeInsert>",
        "SeObjectId",
        "Command<Void>"
      ],
      "sorrformalparam": [
        [
          "ISession",
          "SeConnection"
        ]
      ],
      "types": [
        "Logger"
      ],
      "apicalls": [
        "fine"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.fine(java.lang.String)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "fine",
        "logger"
      ]
    },
    {
      "method": "getCorrespondingCMDocument@467",
      "body": "/** \n * may return null\n * @param node\n * @return\n */\npublic CMDocument getCorrespondingCMDocument(Node node){\n  ensureInitialized();\n  CMDocument doc=node instanceof ElementImplForJSP ? tagNameToDocument.get(node.getNodeName()) : null;\n  return doc;\n}\n",
      "formalParam": [
        "Node"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "GSPTagLibDocument",
        "List<GSPTagLibDocument>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "CMDocument",
      "file": "./java_projects/grails-ide/org.grails.ide.eclipse.editor.gsp/src/org/grails/ide/eclipse/editor/gsp/tags/PerProjectTagProvider.java",
      "classTypes": [
        "IProject",
        "Map<String,GSPTagLibDocument>",
        "Set<String>",
        "GSPTagJavaDocParser"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        []
      ],
      "types": [
        "HashMap",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "set",
        "map",
        "util",
        "boolean",
        "list",
        "string",
        "add"
      ]
    },
    {
      "method": "testSingleObjectAssert@33",
      "body": "public void testSingleObjectAssert() throws Exception {\n  StatefulSession session=getSession();\n  final Cheese stilton=new Cheese(\"stilton\",5);\n  Future futureAssert=session.asyncInsert(stilton);\n  Future futureFireAllRules=session.asyncFireAllRules();\n  int i=0;\n  while (!futureFireAllRules.isDone()) {\n    Thread.sleep(100);\n    if (i++ > 5) {\n      fail(\"Future should have finished by now\");\n    }\n  }\n  assertTrue(futureAssert.getObject() instanceof FactHandle);\n  assertEquals(\"stilton\",list.get(0));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.List.add(java.lang.Object)",
              "java.lang.Thread.sleep(long)",
              "java.util.List.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.List.add(java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.util.List.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-compiler/src/test/java/org/drools/integrationtests/StatefulSessionTest.java",
      "classTypes": [
        "List"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Thread",
        "Object"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.util.List.get(int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "decodeMultiple@49",
      "body": "public Result[] decodeMultiple(BinaryBitmap image,Hashtable hints) throws NotFoundException {\n  Vector results=new Vector();\n  DetectorResult[] detectorResult=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (int i=0; i < detectorResult.length; i++) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n      ResultPoint[] points=detectorResult[i].getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      if (decoderResult.getByteSegments() != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,decoderResult.getByteSegments());\n      }\n      if (decoderResult.getECLevel() != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,decoderResult.getECLevel().toString());\n      }\n      results.addElement(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    Result[] resultArray=new Result[results.size()];\n    for (int i=0; i < results.size(); i++) {\n      resultArray[i]=(Result)results.elementAt(i);\n    }\n    return resultArray;\n  }\n}\n",
      "formalParam": [
        "BinaryBitmap",
        "Hashtable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.util.Vector.size()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Result[]",
      "file": "./java_projects/huiswerk/print/zxing-1.6/core/src/com/google/zxing/multi/qrcode/QRCodeMultiReader.java",
      "classTypes": [
        "Result[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.isEmpty()",
            "java.util.Vector.size()",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "object",
        "element",
        "vector",
        "empty",
        "integer"
      ]
    },
    {
      "method": "TestTreeElement@24",
      "body": "/** \n * Create a new instance of the receiver .\n * @param index\n * @param treeParent\n */\npublic TestTreeElement(int index,TestTreeElement treeParent){\n  super();\n  this.parent=treeParent;\n  name=generateFirstEntry() + String.valueOf(index);\n}\n",
      "formalParam": [
        "int",
        "TestTreeElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.valueOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.substring(int)",
              "java.lang.String.length()",
              "java.lang.String.valueOf(int)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/eclipse.platform.ui/tests/org.eclipse.ui.tests.performance/src/org/eclipse/jface/tests/performance/TestTreeElement.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int)",
            "java.lang.String.length()",
            "java.lang.String.valueOf(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "value"
      ]
    },
    {
      "method": "testGetAnonTypeOperationWithProtoBuff@75",
      "body": "@Test public void testGetAnonTypeOperationWithProtoBuff() throws ServiceException, DatatypeConfigurationException {\n  GetAnonType anonType=new GetAnonType();\n  Items value=new Items();\n  Test1 t=new Test1();\n  t.setProductName(\"phone\");\n  t.setQuantity(12);\n  GregorianCalendar greCal=new GregorianCalendar();\n  greCal.setTimeInMillis(10000);\n  t.setUSPrice(10000.334349d);\n  t.setShipDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(greCal));\n  value.getItem().add(t);\n  anonType.setIn1(value);\n  GlobalType gtype=new GlobalType();\n  gtype.setGlobalName(\"gtype\");\n  anonType.setIn2(gtype);\n  anonType.setIn3(\"value\");\n  GetAnonTypeResponse response=(GetAnonTypeResponse)invoke(\"normal\",BindingConstants.PAYLOAD_PROTOBUF,BindingConstants.PAYLOAD_PROTOBUF,\"getAnonType\",SOAConstants.TRANSPORT_LOCAL,null,anonType);\n  Assert.assertEquals(response.getOut1().getItem().get(0).getProductName(),\"SOA\");\n  Assert.assertEquals(response.getOut1().getItem().get(0).getQuantity(),100);\n  Assert.assertEquals(response.getOut2().getGlobalName(),\"value\");\n  Assert.assertEquals(response.getOut3(),\"value\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.GregorianCalendar.GregorianCalendar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.setTimeInMillis(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.GregorianCalendar.GregorianCalendar()",
              "java.util.Calendar.setTimeInMillis(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.GregorianCalendar.GregorianCalendar()",
              "java.util.Calendar.setTimeInMillis(long)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.GregorianCalendar.GregorianCalendar()",
              "java.util.Calendar.setTimeInMillis(long)",
              "java.math.BigDecimal.BigDecimal(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.contentEquals(java.lang.CharSequence)",
              "java.lang.String.String(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.contentEquals(java.lang.CharSequence)",
              "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
              "java.util.List<java.lang.Object>.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/turmeric-runtime/integration-tests/BlogsInterOpModifiedV1Consumer/src/main/java/org/ebayopensource/test/ProtoBufFormatLocalInvocationTests.java",
      "classTypes": [
        "Service",
        "SharedBlogsInterOpModifiedV1Consumer"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "String",
          "String",
          "String",
          "String",
          "String",
          "String",
          "Object"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.GregorianCalendar.GregorianCalendar()",
            "java.util.Calendar.setTimeInMillis(long)"
          ]
        }
      ],
      "keywords": [
        "util",
        "time",
        "millis"
      ]
    },
    {
      "method": "content@28",
      "body": "public String content(String path,String project){\n  for (  Entry<String,Set<String>> testMethod : getMethods().entrySet()) {\n    for (    String productionMethod : testMethod.getValue()) {\n      System.out.println(path + \";\" + project+ \";\"+ classInfo.getName()+ \";\"+ testMethod.getKey()+ \";\"+ productionMethod);\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Collection<MetricResult>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.entrySet()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/metricminer/src/main/java/org/metricminer/tasks/metric/testedmethods/TestedMethodFinderMetric.java",
      "classTypes": [
        "TestedMethodVisitor",
        "ClassInfoVisitor"
      ],
      "sorrformalparam": [
        [
          "SourceCode"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.util.Set<java.lang.String>>.entrySet()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "entry",
        "stream",
        "string"
      ]
    },
    {
      "method": "loadImage@72",
      "body": "/** \n * Helper method to load an image file from the CLASSPATH\n * @param imageName the package and name of the file to load relative to the CLASSPATH\n * @return an ImageIcon instance with the specified image file\n * @throws IllegalArgumentException if the image resource cannot be loaded.\n */\npublic ImageIcon loadImage(String imageName){\n  try {\n    ClassLoader classloader=getClass().getClassLoader();\n    java.net.URL url=classloader.getResource(imageName);\n    if (url != null) {\n      ImageIcon icon=new ImageIcon(url);\n      return icon;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  throw new IllegalArgumentException(\"Unable to load image: \" + imageName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader"
              },
              {
                "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.net.URL"
              },
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "ImageIcon",
      "file": "./java_projects/rawr/lib/rawr/launch4j/src/net/sf/launch4j/form/ConfigForm.java",
      "classTypes": [
        "TitledSeparator",
        "JTextArea",
        "JTabbedPane"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "ImageIcon"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "loader",
        "icon",
        "print",
        "stack"
      ]
    },
    {
      "method": "visit@107",
      "body": "@Override public void visit(ExpressionList el){\n  for (Iterator iter=el.getExpressions().iterator(); iter.hasNext(); ) {\n    Expression expression=(Expression)iter.next();\n    expression.accept(this);\n  }\n}\n",
      "formalParam": [
        "ExpressionList"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/squall/src/sql/visitors/jsql/JoinTablesExprsVisitor.java",
      "classTypes": [
        "Table",
        "JoinTablesExprs"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next",
        "boolean",
        "iterator"
      ]
    },
    {
      "method": "runTest@16",
      "body": "public String runTest(String url,String homeCommunityId,String repositoryId,String[] documentIds){\n  String lastDocRetrieved=\"Not Started\";\n  DocRetrieveClient docRetrieve=new DocRetrieveClient();\n  for (  String docId : documentIds) {\n    String status=docRetrieve.retrieveDocument(url,homeCommunityId,repositoryId,docId);\n    if (\"Success\".equals(status)) {\n      lastDocRetrieved=docId;\n    }\n else {\n      System.out.println(\"Failure: \" + status);\n      break;\n    }\n  }\n  return lastDocRetrieved;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/CONNECT/Product/IntegrationTest/JunitIntegrationTests/Gateway/LoadTest/src/main/java/gov/hhs/fha/nhinc/nhindocretrieve/DocRetrieveLoadTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "io",
        "print",
        "println"
      ]
    },
    {
      "method": "processAction@66",
      "body": "@Override public void processAction(ActionMapping mapping,ActionForm form,PortletConfig portletConfig,ActionRequest actionRequest,ActionResponse actionResponse) throws Exception {\n  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);\n  try {\n    if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {\n      updateRule(actionRequest);\n    }\n else     if (cmd.equals(Constants.DELETE)) {\n      deleteRule(actionRequest);\n    }\n    sendRedirect(actionRequest,actionResponse);\n  }\n catch (  Exception e) {\n    if (e instanceof PrincipalException) {\n      SessionErrors.add(actionRequest,e.getClass());\n      setForward(actionRequest,\"portlet.mobile_device_rules.error\");\n    }\n else     if (e instanceof NoSuchActionException || e instanceof NoSuchRuleGroupException || e instanceof UnknownRuleHandlerException) {\n      SessionErrors.add(actionRequest,e.getClass());\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "formalParam": [
        "ActionMapping",
        "ActionForm",
        "PortletConfig",
        "ActionRequest",
        "ActionResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/liferay-portal/portal-impl/src/com/liferay/portlet/mobiledevicerules/action/EditRuleAction.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "lang",
        "boolean",
        "string",
        "equals"
      ]
    },
    {
      "method": "addDebugContextProvider@72",
      "body": "public synchronized void addDebugContextProvider(IDebugContextProvider provider){\n  if (fWindow == null)   return;\n  IWorkbenchPart part=provider.getPart();\n  fProvidersByPartId.put(getCombinedPartId(part),provider);\n  boolean canSetActive=true;\n  if (provider instanceof IDebugContextProvider2) {\n    canSetActive=((IDebugContextProvider2)provider).isWindowContextProvider();\n  }\n  if (canSetActive) {\n    IWorkbenchPart activePart=null;\n    IWorkbenchPage activePage=fWindow.getActivePage();\n    if (activePage != null) {\n      activePart=activePage.getActivePart();\n    }\n    canSetActive=(activePart == null && part == null) || (activePart != null && activePart.equals(part));\n  }\n  if (canSetActive) {\n    fProviders.add(0,provider);\n  }\n else {\n    fProviders.add(provider);\n  }\n  notify(provider);\n  provider.addDebugContextListener(this);\n}\n",
      "formalParam": [
        "IDebugContextProvider"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.List.add(int,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.indexOf(java.lang.Object)",
              "java.util.List.remove(int)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.debug/org.eclipse.debug.ui/ui/org/eclipse/debug/internal/ui/contexts/DebugWindowContextService.java",
      "classTypes": [
        "Map",
        "Map",
        "DebugContextSourceProvider",
        "IWorkbenchWindow"
      ],
      "sorrformalparam": [
        [
          "IWorkbenchPartReference"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.List.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.List.add(int,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map",
        "boolean"
      ]
    },
    {
      "method": "minimumLayoutSize@55",
      "body": "public Dimension minimumLayoutSize(Container parent){\nsynchronized (parent.getTreeLock()) {\n    Component c=getComponent(parent);\n    Insets insets=parent.getInsets();\n    if (c != null) {\n      Dimension d=c.getMinimumSize();\n      return new Dimension((int)d.getWidth() + insets.left + insets.right,(int)d.getHeight() + insets.top + insets.bottom);\n    }\n else {\n      return new Dimension(insets.left + insets.right,insets.top + insets.bottom);\n    }\n  }\n}\n",
      "formalParam": [
        "Container"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getTreeLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Container.getComponents()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component[]"
          },
          {
            "_call": "java.awt.Component.isVisible()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.awt.Container.getInsets()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Insets"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Dimension.Dimension(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Component.getMinimumSize()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Dimension"
              },
              {
                "_call": "java.awt.Dimension.Dimension(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Component.getTreeLock()",
              "java.awt.Container.getComponents()",
              "java.awt.Component.isVisible()",
              "java.awt.Container.getInsets()",
              "java.awt.Component.getPreferredSize()",
              "java.awt.Dimension.Dimension(int,int)"
            ]
          },
          {
            "calls": [
              "java.awt.Component.getTreeLock()",
              "java.awt.Container.getComponents()",
              "java.awt.Component.isVisible()",
              "java.awt.Container.getInsets()",
              "java.awt.Dimension.Dimension(int,int)"
            ]
          }
        ]
      ],
      "returnType": "Dimension",
      "file": "./java_projects/sradonia-tools/src/main/java/net/sradonia/gui/CenterLayout.java",
      "classTypes": [
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Container"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getTreeLock()",
            "java.awt.Container.getComponents()",
            "java.awt.Component.isVisible()",
            "java.awt.Container.getInsets()",
            "java.awt.Component.getMinimumSize()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        },
        {
          "calls": [
            "java.awt.Component.getTreeLock()",
            "java.awt.Container.getComponents()",
            "java.awt.Component.isVisible()",
            "java.awt.Container.getInsets()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        }
      ],
      "keywords": [
        "visible"
      ]
    },
    {
      "method": "main@126",
      "body": "public static void main(String args[]) throws Exception {\n  mainThread=Thread.currentThread();\n  try {\n    init();\n  }\n catch (  TestPassedException e) {\n    return;\n  }\n  try {\n    Thread.sleep(sleepTime);\n    throw new RuntimeException(\"Timed out after \" + sleepTime / 1000 + \" seconds\");\n  }\n catch (  InterruptedException e) {\n    if (!testGeneratedInterrupt)     throw e;\n    testGeneratedInterrupt=false;\n    if (theTestPassed == false) {\n      throw new RuntimeException(failureMessage);\n    }\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()",
              "java.awt.TextArea.append(java.lang.String)",
              "java.awt.TextArea.append(java.lang.String)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/awt/print/Dialog/DialogOrient.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        [
          "String[]"
        ],
        [],
        [],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "long",
        "current"
      ]
    },
    {
      "method": "getLastMillisecond@419",
      "body": "/** \n * Returns the last millisecond of the month, evaluated using the supplied calendar (which determines the time zone).\n * @param calendar  the calendar (<code>null</code> not permitted).\n * @return The last millisecond of the month.\n * @throws NullPointerException if <code>calendar</code> is<code>null</code>.\n */\npublic long getLastMillisecond(Calendar calendar){\n  int eom=SerialDate.lastDayOfMonth(this.month,this.year);\n  calendar.set(this.year,this.month - 1,eom,23,59,59);\n  calendar.set(Calendar.MILLISECOND,999);\n  return calendar.getTime().getTime();\n}\n",
      "formalParam": [
        "Calendar"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.set(int,int,int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.set(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "long"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Calendar.set(int,int,int,int,int,int)",
              "java.util.Calendar.set(int,int)",
              "java.util.Calendar.getTime()",
              "java.util.Date.getTime()",
              "java.util.Calendar.set(int,int,int,int,int,int)",
              "java.util.Calendar.set(int,int)",
              "java.util.Calendar.getTime()",
              "java.util.Date.getTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Calendar.set(int,int,int,int,int,int)",
              "java.util.Calendar.set(int,int)",
              "java.util.Calendar.getTime()",
              "java.util.Date.getTime()"
            ]
          }
        ]
      ],
      "returnType": "long",
      "file": "./java_projects/JobScheduler/prathamesh-sonpatki-JobScheduler-7abfc2a/src/org/jfree/data/time/Month.java",
      "classTypes": [
        "long",
        "int",
        "int",
        "long",
        "long"
      ],
      "sorrformalparam": [
        [
          "Calendar"
        ],
        [
          "Calendar"
        ]
      ],
      "types": [
        "Date",
        "Integer",
        "Calendar",
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.set(int,int,int,int,int,int)",
            "java.util.Calendar.set(int,int)",
            "java.util.Calendar.getTime()",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "util",
        "integer",
        "set",
        "time"
      ]
    },
    {
      "method": "setScheme@1007",
      "body": "/** \n * Set the scheme for this URI. The scheme is converted to lowercase before it is set.\n * @param p_scheme the scheme for this URI (cannot be null)\n * @throws MalformedURIException if p_scheme is not a conformantscheme name\n */\npublic void setScheme(String p_scheme) throws MalformedURIException {\n  if (p_scheme == null) {\n    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_FROM_NULL_STRING,null));\n  }\n  if (!isConformantSchemeName(p_scheme)) {\n    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_NOT_CONFORMANT,null));\n  }\n  m_scheme=p_scheme.toLowerCase();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "$NOT$java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              },
              {
                "_call": "java.lang.String.indexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()",
              "$NOT$java.lang.String.charAt(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/main/java/org/apache/xml/serializer/utils/URI.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "boolean",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Integer",
        "Character"
      ],
      "apicalls": [
        "toLowerCase",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "$NOT$java.lang.String.charAt(int)",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.indexOf(int)",
            "java.lang.String.length()",
            "java.lang.String.toLowerCase()"
          ]
        }
      ],
      "keywords": [
        "trim",
        "length",
        "char",
        "lang",
        "character"
      ]
    },
    {
      "method": "skipPast@295",
      "body": "/** \n * Skip characters until past the requested string. If it is not found, we are left at the end of the source with a result of false.\n * @param to A string to skip past.\n * @throws JSONException\n */\npublic boolean skipPast(String to) throws JSONException {\n  boolean b;\n  char c;\n  int i;\n  int j;\n  int offset=0;\n  int length=to.length();\n  char[] circle=new char[length];\n  for (i=0; i < length; i+=1) {\n    c=next();\n    if (c == 0) {\n      return false;\n    }\n    circle[i]=c;\n  }\n  for (; ; ) {\n    j=offset;\n    b=true;\n    for (i=0; i < length; i+=1) {\n      if (circle[j] != to.charAt(i)) {\n        b=false;\n        break;\n      }\n      j+=1;\n      if (j >= length) {\n        j-=length;\n      }\n    }\n    if (b) {\n      return true;\n    }\n    c=next();\n    if (c == 0) {\n      return false;\n    }\n    circle[offset]=c;\n    offset+=1;\n    if (offset >= length) {\n      offset-=length;\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Character.isWhitespace(char)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.toString()",
              "java.lang.String.trim()",
              "java.lang.StringBuffer.append(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.Character.isWhitespace(char)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.toString()",
              "java.lang.String.trim()",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/JSON-java/XMLTokener.java",
      "classTypes": [
        "java.util.HashMap"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "char"
      ]
    },
    {
      "method": "GameEngine@120",
      "body": "/** \n * Creates other things vital to the game logic, like the world class.\n * @throws Exception \n */\npublic GameEngine(Server server) throws Exception {\n  this.server=server;\n  isRunning=true;\n  File packedFile=new File(\"data/mapdata/packed.dat\");\n  if (!packedFile.exists()) {\n    MapDataPacker.pack(\"data/mapdata/unpacked/\",\"data/mapdata/packed.dat\");\n  }\n  packedFile=new File(\"data/clip/packed.dat\");\n  mapData=new HashMap<Integer,int[]>();\n  MapDataLoader.load(mapData);\n  PacketHandlers.loadHandlers();\n  logger.info(\"Loading item definitions...\");\n  ItemDefinition.load();\n  logger.info(\"Loading npc definitions...\");\n  NPCDefinition.load();\n  shopHandler.loadShops();\n  logger.info(\"Loading world list data...\");\n  WorldList worldList=new WorldList();\n  worldList.load();\n}\n",
      "formalParam": [
        "Server"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Nemoria/src/com/rs2hd/GameEngine.java",
      "classTypes": [
        "ThreadGroup",
        "int"
      ],
      "sorrformalparam": [
        [
          "String",
          "Runnable"
        ]
      ],
      "types": [
        "HashMap",
        "String"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "java.io.File.File(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
          ]
        }
      ],
      "keywords": [
        "string",
        "exists",
        "file",
        "boolean",
        "io"
      ]
    },
    {
      "method": "wildcardToJavaRegex@223",
      "body": "public static String wildcardToJavaRegex(String expr){\n  if (expr == null) {\n    throw new IllegalArgumentException(\"expr is null\");\n  }\n  final StringBuilder buf=new StringBuilder();\n  for (int i=0; i < expr.length(); ++i) {\n    final char ch=expr.charAt(i);\n    if (ch == '*') {\n      buf.append('.');\n    }\n else     if (ch == '.') {\n      buf.append('\\\\');\n    }\n    buf.append(ch);\n  }\n  return buf.toString();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              },
              {
                "node": "DBranch",
                "_else": [
                  {
                    "_call": "java.lang.StringBuilder.append(char)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.StringBuilder"
                  }
                ],
                "_cond": [],
                "_then": [
                  {
                    "_call": "java.lang.StringBuilder.append(char)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.StringBuilder"
                  }
                ]
              },
              {
                "_call": "java.lang.StringBuilder.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "List<String>",
        "List<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          },
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          },
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jboss-as/cli/src/main/java/org/jboss/as/cli/Util.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "ModelControllerClient",
          "OperationRequestAddress",
          "String"
        ],
        [
          "ModelControllerClient",
          "OperationRequestAddress"
        ]
      ],
      "types": [
        "Character",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.String.length()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "character",
        "char"
      ]
    },
    {
      "method": "normalize@260",
      "body": "/** \n * Unimplemented. See org.w3c.dom.Node \n */\npublic void normalize(){\n  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Text",
        "ProcessingInstruction",
        "String",
        "boolean",
        "boolean",
        "Comment",
        "String",
        "Node"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/xalan-j/src/org/apache/xml/utils/UnImplNode.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [],
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [],
        []
      ],
      "types": [
        "Class"
      ],
      "apicalls": [
        "getName",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "class",
        "print",
        "name",
        "get"
      ]
    },
    {
      "method": "getGenericsBounds@782",
      "body": "public static String getGenericsBounds(ClassNode type){\n  GenericsType[] genericsTypes=type.getGenericsTypes();\n  if (genericsTypes == null)   return null;\n  StringBuffer ret=new StringBuffer(100);\n  if (type.isGenericsPlaceHolder()) {\n    addSubTypes(ret,type.getGenericsTypes(),\"\",\"\");\n  }\n else {\n    GenericsType gt=new GenericsType(type);\n    writeGenericsBounds(ret,gt,false);\n  }\n  return ret.toString();\n}\n",
      "formalParam": [
        "ClassNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer(int)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/groovy-eclipse/base/org.codehaus.groovy/src/org/codehaus/groovy/classgen/BytecodeHelper.java",
      "classTypes": [
        "MethodVisitor"
      ],
      "sorrformalparam": [
        [
          "ClassNode"
        ],
        [
          "ClassNode"
        ],
        [
          "Variable",
          "boolean"
        ],
        [
          "Variable",
          "boolean"
        ],
        [
          "Class"
        ]
      ],
      "types": [
        "String",
        "StringBuffer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(int)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "integer"
      ]
    },
    {
      "method": "isSimpleType@1257",
      "body": "public final boolean isSimpleType(){\n  List<? extends PropertyInfo> props=getProperties();\n  if (props.size() != 1)   return false;\n  return props.get(0).kind() == PropertyKind.VALUE;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Integer>.size()",
              "java.util.HashMap<java.lang.String,java.lang.Integer>.put(java.lang.String,java.lang.Integer)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/SOCIETIES-Platform/platform-infrastructure/client-frwk/Examples/JaxbAndroidImpl/src/main/java/com/sun/xml/bind/v2/model/impl/ClassInfoImpl.java",
      "classTypes": [
        "ClassInfoImpl<T,C,F,M>",
        "C",
        "PropertyInfoImpl[]"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "get",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": [
        "size",
        "get",
        "list",
        "util"
      ]
    },
    {
      "method": "main@39",
      "body": "public static void main(String... args){\n  try {\n    JavaCompiler javac=javax.tools.ToolProvider.getSystemJavaCompiler();\n    DiagnosticListener<JavaFileObject> dl=new DiagnosticListener<JavaFileObject>(){\n      public void report(      Diagnostic<? extends JavaFileObject> message){\n        throw new NullPointerException(SILLY_BILLY);\n      }\n    }\n;\n    StandardJavaFileManager fm=javac.getStandardFileManager(dl,null,null);\n    Iterable<? extends JavaFileObject> files=fm.getJavaFileObjectsFromStrings(Arrays.asList(\"badfile.java\"));\n    javac.getTask(null,fm,dl,null,null,files).call();\n  }\n catch (  RuntimeException e) {\n    Throwable cause=e.getCause();\n    if (cause instanceof NullPointerException && cause.getMessage().equals(SILLY_BILLY))     return;\n    throw new Error(\"unexpected exception caught: \" + e);\n  }\ncatch (  Throwable t) {\n    throw new Error(\"unexpected exception caught: \" + t);\n  }\n  throw new Error(\"no exception caught\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getCause()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_try": [
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/langtools/test/tools/javac/T6265400.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "List",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.lang.Throwable.getCause()",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "message",
        "boolean"
      ]
    },
    {
      "method": "decryptByPublicKey@117",
      "body": "/** \n * \u516c\u94a5\u89e3\u5bc6\n */\npublic static byte[] decryptByPublicKey(byte[] data,String certificatePath) throws Exception {\n  PublicKey publicKey=getPublicKey(certificatePath);\n  Cipher cipher=Cipher.getInstance(publicKey.getAlgorithm());\n  cipher.init(Cipher.DECRYPT_MODE,publicKey);\n  return cipher.doFinal(data);\n}\n",
      "formalParam": [
        "byte[]",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
            "_throws": [
              "java.security.cert.CertificateException"
            ],
            "node": "DAPICall",
            "_returns": "java.security.cert.CertificateFactory"
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)",
            "_throws": [
              "java.security.cert.CertificateException"
            ],
            "node": "DAPICall",
            "_returns": "java.security.cert.Certificate"
          },
          {
            "_call": "java.io.FileInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.crypto.Cipher.getInstance(java.lang.String)",
            "_throws": [
              "java.security.NoSuchAlgorithmException",
              "javax.crypto.NoSuchPaddingException"
            ],
            "node": "DAPICall",
            "_returns": "javax.crypto.Cipher"
          },
          {
            "_call": "javax.crypto.Cipher.init(int,java.security.Key)",
            "_throws": [
              "java.security.InvalidKeyException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.crypto.Cipher.doFinal(byte[])",
            "_throws": [
              "javax.crypto.IllegalBlockSizeException",
              "javax.crypto.BadPaddingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "byte[]",
        "boolean",
        "boolean",
        "byte[]",
        "boolean",
        "boolean",
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)",
              "java.io.FileInputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)",
              "java.io.FileInputStream.close()",
              "javax.crypto.Cipher.getInstance(java.lang.String)",
              "javax.crypto.Cipher.init(int,java.security.Key)",
              "javax.crypto.Cipher.doFinal(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.KeyStore.getInstance(java.lang.String)",
              "java.lang.String.toCharArray()",
              "java.security.KeyStore.load(java.io.InputStream,char[])",
              "java.io.FileInputStream.close()",
              "java.security.KeyStore.getCertificate(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.Signature.getInstance(java.lang.String)",
              "java.security.Signature.initVerify(java.security.PublicKey)",
              "java.security.Signature.update(byte[])",
              "java.security.Signature.verify(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.KeyStore.getInstance(java.lang.String)",
              "java.lang.String.toCharArray()",
              "java.security.KeyStore.load(java.io.InputStream,char[])",
              "java.io.FileInputStream.close()",
              "javax.crypto.Cipher.getInstance(java.lang.String)",
              "javax.crypto.Cipher.init(int,java.security.Key)",
              "javax.crypto.Cipher.doFinal(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)",
              "java.io.FileInputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.KeyStore.getInstance(java.lang.String)",
              "java.lang.String.toCharArray()",
              "java.security.KeyStore.load(java.io.InputStream,char[])",
              "java.io.FileInputStream.close()",
              "java.security.KeyStore.getCertificate(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.security.KeyStore.getInstance(java.lang.String)",
              "java.lang.String.toCharArray()",
              "java.security.KeyStore.load(java.io.InputStream,char[])",
              "java.io.FileInputStream.close()",
              "javax.crypto.Cipher.getInstance(java.lang.String)",
              "javax.crypto.Cipher.init(int,java.security.Key)",
              "javax.crypto.Cipher.doFinal(byte[])"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/JavaBasic/src/jack/code/crypto/CertificateEncryption.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "byte[]",
          "String"
        ],
        [
          "String",
          "String",
          "String"
        ],
        [
          "byte[]",
          "String",
          "String"
        ],
        [
          "byte[]",
          "String",
          "String",
          "String"
        ],
        [
          "Date",
          "String"
        ],
        [
          "Date",
          "String",
          "String",
          "String"
        ],
        [
          "byte[]",
          "String",
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "generateCertificate"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.cert.CertificateFactory.getInstance(java.lang.String)",
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)",
            "java.io.FileInputStream.close()",
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key)",
            "javax.crypto.Cipher.doFinal(byte[])"
          ]
        }
      ],
      "keywords": [
        "padding",
        "found",
        "stream",
        "exception",
        "crypto"
      ]
    },
    {
      "method": "getServiceAlerts@351",
      "body": "@Override public ListBean<ServiceAlertBean> getServiceAlerts(SituationQueryBean arg0){\n  blockUntilBundleIsReady();\n  return _transitDataService.getServiceAlerts(arg0);\n}\n",
      "formalParam": [
        "SituationQueryBean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.yield()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "ArrivalAndDepartureBean",
        "ListBean<TripProblemReportSummaryBean>",
        "ListBean<String>",
        "ListBean<RouteBean>",
        "String",
        "TripProblemReportBean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()"
            ]
          }
        ]
      ],
      "returnType": "ListBean<ServiceAlertBean>",
      "file": "./java_projects/onebusaway-nyc/onebusaway-nyc-transit-data-federation/src/main/java/org/onebusaway/nyc/transit_data_federation/impl/NycTransitDataServiceImpl.java",
      "classTypes": [
        "BundleManagementService",
        "TransitDataService",
        "PredictionIntegrationService",
        "ScheduledServiceService",
        "Logger",
        "int",
        "BundleSearchService"
      ],
      "sorrformalparam": [
        [
          "ArrivalAndDepartureForStopQueryBean"
        ],
        [
          "TripProblemReportQueryBean"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "ArrivalAndDepartureForStopQueryBean",
          "RegisterAlarmQueryBean"
        ],
        [
          "String",
          "long"
        ],
        [
          "VehicleLocationRecordBean"
        ]
      ],
      "types": [
        "Thread",
        "InterruptedException",
        "Long"
      ],
      "apicalls": [
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.yield()"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "long"
      ]
    },
    {
      "method": "type@14551",
      "body": "/** \n * Add option -type to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps type(String type){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-type\");\n  if (type != null) {\n    buf.append(type.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.String.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.String.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Double"
        ],
        [],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "length"
      ]
    },
    {
      "method": "writeBufferArrayBlockingWithTimeout@156",
      "body": "@Test public void writeBufferArrayBlockingWithTimeout() throws IOException, InterruptedException {\n  connectedChannelMock.enableWrite(false);\n  WriteBufferArrayBlocking writeRunnable=new WriteBufferArrayBlocking(connectedChannelMock,1000,TimeUnit.MILLISECONDS,\"write\",\"with\",\"timeout\");\n  Thread writeThread=new Thread(writeRunnable);\n  writeThread.start();\n  writeThread.join();\n  assertWrittenMessage(connectedChannelMock);\n  connectedChannelMock.enableWrite(true);\n  writeThread=new Thread(writeRunnable);\n  writeThread.start();\n  writeThread.join();\n  assertEquals(16,writeRunnable.getWriteResult());\n  assertWrittenMessage(connectedChannelMock,\"write\",\"with\",\"timeout\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join(long)",
              "java.lang.Thread.isAlive()",
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.join()",
              "java.lang.Thread.isAlive()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.join()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/xnio_1/api/src/test/java/org/xnio/channels/ChannelsTestCase.java",
      "classTypes": [
        "int",
        "AcceptingChannel<C>",
        "ByteBuffer[]",
        "long",
        "int",
        "ReadableMessageChannel",
        "long",
        "MessageChannelMock"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "InterruptedException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.Thread.join()",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "start",
        "interrupted"
      ]
    },
    {
      "method": "mergeFrom@17161",
      "body": "public Builder mergeFrom(org.drools.marshalling.impl.ProtobufMessages.Activation other){\n  if (other == org.drools.marshalling.impl.ProtobufMessages.Activation.getDefaultInstance())   return this;\n  if (other.hasTuple()) {\n    mergeTuple(other.getTuple());\n  }\n  if (other.hasSalience()) {\n    setSalience(other.getSalience());\n  }\n  if (other.hasPackageName()) {\n    setPackageName(other.getPackageName());\n  }\n  if (other.hasRuleName()) {\n    setRuleName(other.getRuleName());\n  }\n  if (other.hasActivationGroup()) {\n    setActivationGroup(other.getActivationGroup());\n  }\n  if (other.hasIsActivated()) {\n    setIsActivated(other.getIsActivated());\n  }\n  if (other.hasHandleId()) {\n    setHandleId(other.getHandleId());\n  }\n  if (!other.logicalDependency_.isEmpty()) {\n    if (logicalDependency_.isEmpty()) {\n      logicalDependency_=other.logicalDependency_;\n      bitField0_=(bitField0_ & ~0x00000080);\n    }\n else {\n      ensureLogicalDependencyIsMutable();\n      logicalDependency_.addAll(other.logicalDependency_);\n    }\n    onChanged();\n  }\n  this.mergeUnknownFields(other.getUnknownFields());\n  return this;\n}\n",
      "formalParam": [
        "org.drools.marshalling.impl.ProtobufMessages.Activation"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.Integer>.addAll(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Integer>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "Builder",
        "Builder",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.addAll(java.util.Collection)"
            ]
          },
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.get(int)",
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ]
      ],
      "returnType": "Builder",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/marshalling/impl/ProtobufMessages.java",
      "classTypes": [
        "int",
        "java.lang.Object",
        "int"
      ],
      "sorrformalparam": [
        [
          "org.drools.marshalling.impl.ProtobufMessages.EqualityKey"
        ],
        [
          "int",
          "int"
        ],
        []
      ],
      "types": [
        "List"
      ],
      "apicalls": [
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.isEmpty()",
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
            "java.util.List<java.lang.Integer>.addAll(java.util.Collection)"
          ]
        },
        {
          "calls": [
            "java.util.List<java.lang.Integer>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "collection",
        "list",
        "integer",
        "array",
        "add"
      ]
    },
    {
      "method": "matches@102",
      "body": "public boolean matches(File f){\n  return f.lastModified() == this.getLastModified() && f.length() == this.getSize();\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.lastModified()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.File.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/L2jServer_Core/L2J_Server/java/com/l2jserver/gameserver/scripting/CompiledScriptHolder.java",
      "classTypes": [
        "long",
        "CompiledScript"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.lastModified()",
            "java.io.File.length()"
          ]
        }
      ],
      "keywords": [
        "length",
        "last",
        "file"
      ]
    },
    {
      "method": "multiget_slice_args@8575",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic multiget_slice_args(multiget_slice_args other){\n  if (other.isSetKeys()) {\n    List<ByteBuffer> __this__keys=new ArrayList<ByteBuffer>();\n    for (    ByteBuffer other_element : other.keys) {\n      ByteBuffer temp_binary_element=TBaseHelper.copyBinary(other_element);\n      ;\n      __this__keys.add(temp_binary_element);\n    }\n    this.keys=__this__keys;\n  }\n  if (other.isSetColumn_parent()) {\n    this.column_parent=new ColumnParent(other.column_parent);\n  }\n  if (other.isSetPredicate()) {\n    this.predicate=new SlicePredicate(other.predicate);\n  }\n  if (other.isSetConsistency_level()) {\n    this.consistency_level=other.consistency_level;\n  }\n}\n",
      "formalParam": [
        "multiget_slice_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "None",
        "String",
        "String",
        "byte[]",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "ByteBuffer",
        "TField",
        "TField",
        "TField"
      ],
      "sorrformalparam": [
        [],
        [
          "describe_splits_args"
        ],
        [],
        [],
        [],
        []
      ],
      "types": [
        "ArrayList",
        "ByteBuffer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
            "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
          ]
        }
      ],
      "keywords": [
        "util",
        "array"
      ]
    },
    {
      "method": "getFileSystemView@79",
      "body": "public static FileSystemView getFileSystemView(){\n  useSystemExtensionsHiding=UIManager.getDefaults().getBoolean(\"FileChooser.useSystemExtensionHiding\");\n  UIManager.addPropertyChangeListener(new PropertyChangeListener(){\n    public void propertyChange(    PropertyChangeEvent e){\n      if (e.getPropertyName().equals(\"lookAndFeel\")) {\n        useSystemExtensionsHiding=UIManager.getDefaults().getBoolean(\"FileChooser.useSystemExtensionHiding\");\n      }\n    }\n  }\n);\n  if (File.separatorChar == '\\\\') {\n    if (windowsFileSystemView == null) {\n      windowsFileSystemView=new WindowsFileSystemView();\n    }\n    return windowsFileSystemView;\n  }\n  if (File.separatorChar == '/') {\n    if (unixFileSystemView == null) {\n      unixFileSystemView=new UnixFileSystemView();\n    }\n    return unixFileSystemView;\n  }\n  if (genericFileSystemView == null) {\n    genericFileSystemView=new GenericFileSystemView();\n  }\n  return genericFileSystemView;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.UIManager.getDefaults()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.UIDefaults"
          },
          {
            "_call": "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "String",
        "boolean",
        "Icon",
        "File",
        "boolean",
        "File[]",
        "Boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.getAbsolutePath()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getParent()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "javax.swing.ImageIcon.ImageIcon(java.awt.Image,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.io.File.isDirectory()",
              "javax.swing.UIManager.getIcon(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.io.File.isAbsolute()",
              "java.io.File.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()"
            ]
          },
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()",
              "java.util.Vector.addElement(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.isDirectory()",
              "java.lang.Boolean.valueOf(boolean)"
            ]
          }
        ]
      ],
      "returnType": "FileSystemView",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/filechooser/FileSystemView.java",
      "classTypes": [
        "FileSystemView"
      ],
      "sorrformalparam": [
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [],
        [
          "File"
        ],
        [
          "File",
          "boolean"
        ],
        [
          "File"
        ]
      ],
      "types": [
        "UIManager",
        "PropertyChangeListener"
      ],
      "apicalls": [
        "getDefaults",
        "addPropertyChangeListener"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.UIManager.getDefaults()",
            "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "ui",
        "change",
        "defaults",
        "listener",
        "manager"
      ]
    },
    {
      "method": "getUserRolesFromContextRealm@413",
      "body": "/** \n * This gets the current site id and transforms it into the realm. From there it asks the AuthzGroupService for the roles of the given users\n * @param inUsers the Collection of users who have their roles looked up.This is a Collection of userId Strings\n * @return Returns the map of users as keys and their roles as values.If the user is not in the realm then they will have a null role.\n */\npublic Map getUserRolesFromContextRealm(Collection inUsers){\n  String thisSiteId=null;\n  try {\n    thisSiteId=ToolManager.getCurrentPlacement().getContext();\n  }\n catch (  Exception ex) {\n    log.warn(\"Failure to get site id from ToolManager.  \\n\" + \"Need to fix if not running in unit test.\");\n    log.warn(\"getUserRolesFromContextRealm : \" + ex.getMessage());\n  }\n  if (thisSiteId == null)   return new HashMap();\n  String realmName=\"/site/\" + thisSiteId;\n  return AuthzGroupService.getUsersRole(inUsers,realmName);\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.String.startsWith(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Map",
      "file": "./java_projects/Fudan-Sakai/sam/samigo-services/src/java/org/sakaiproject/tool/assessment/integration/helper/integrated/AgentHelperImpl.java",
      "classTypes": [
        "Log",
        "AgentImpl"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.util.HashMap.HashMap()"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "setParameter@537",
      "body": "public boolean setParameter(String parameter,long defaultValue){\n  Long newValue=new Long(defaultValue);\n  try {\n    Long oldValue=(Long)propertiesMap.put(parameter,newValue);\n    return notifyParameterListenersIfChanged(parameter,newValue,oldValue);\n  }\n catch (  ClassCastException e) {\n    notifyParameterListeners(parameter);\n    return true;\n  }\n}\n",
      "formalParam": [
        "String",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.Long(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Long.compareTo(java.lang.Long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "ConfigurationManager",
        "boolean",
        "None",
        "int",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map.get(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Map.get(java.lang.Object)",
              "java.lang.Long.Long(long)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.get(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Map.get(java.lang.Object)",
              "java.lang.Long.Long(long)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Long.intValue()",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Long.intValue()",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.lang.Long.compareTo(java.lang.Long)",
              "java.lang.Long.Long(long)",
              "java.lang.Long.compareTo(java.lang.Long)",
              "java.lang.Long.Long(long)",
              "java.lang.Long.compareTo(java.lang.Long)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/frostwire-desktop/components/azureus/src/main/java/org/gudy/azureus2/core3/config/impl/ConfigurationManager.java",
      "classTypes": [
        "FrequencyLimitedDispatcher"
      ],
      "sorrformalparam": [
        [
          "Map"
        ],
        [
          "String",
          "String"
        ],
        [
          "Map"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "int",
          "int",
          "int"
        ]
      ],
      "types": [
        "Integer",
        "Long"
      ],
      "apicalls": [
        "compareTo"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.Long(long)",
            "java.lang.Long.compareTo(java.lang.Long)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "long",
        "integer"
      ]
    },
    {
      "method": "getWeb@226",
      "body": "public static String getWeb(String fullname){\n  int i=fullname.lastIndexOf(\".\");\n  return fullname.substring(0,i);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "long",
        "Date",
        "List<String>",
        "org.w3c.dom.Document",
        "String",
        "String",
        "List<String>",
        "org.w3c.dom.Document"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.security.MessageDigest.digest(byte[])",
              "java.lang.Math.max(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.lastModified()",
              "java.util.Date.Date(long)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.lastModified()",
              "java.util.Date.Date(long)",
              "java.util.Date.Date()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "javax.xml.parsers.DocumentBuilder.newDocument()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.substring(int)",
              "java.lang.String.indexOf(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toLowerCase()",
              "java.lang.String.toUpperCase()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Locale.Locale(java.lang.String,java.lang.String)",
              "java.util.Locale.getISO3Language()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.addAll(java.util.Collection)",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-oldcore/src/main/java/com/xpn/xwiki/util/Util.java",
      "classTypes": [
        "Perl5Matcher",
        "PatternCache",
        "Logger",
        "String",
        "Perl5Util"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "String",
          "int"
        ],
        [],
        [
          "String",
          "XWikiContext"
        ],
        [
          "String"
        ],
        [
          "String",
          "String",
          "int"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "substring",
        "last"
      ]
    },
    {
      "method": "testShiftLeft4@1089",
      "body": "/** \n * shiftLeft(int n) a positive number, n > 0\n */\npublic void testShiftLeft4(){\n  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};\n  int aSign=1;\n  int number=45;\n  byte rBytes[]={48,7,12,-97,-42,-117,37,-85,96,126,36,99,64,0,0,0,0,0};\n  BigInteger aNumber=new BigInteger(aSign,aBytes);\n  BigInteger result=aNumber.shiftLeft(number);\n  byte resBytes[]=new byte[rBytes.length];\n  resBytes=result.toByteArray();\n  for (int i=0; i < resBytes.length; i++) {\n    assertTrue(resBytes[i] == rBytes[i]);\n  }\n  assertEquals(\"incorrect sign\",1,result.signum());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(int,byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.shiftLeft(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.math.BigInteger"
          },
          {
            "_call": "java.math.BigInteger.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.math.BigInteger.signum()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.math.BigInteger.flipBit(int)",
              "java.math.BigInteger.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.flipBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerOperateBitsTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Byte",
        "BigInteger"
      ],
      "apicalls": [
        "signum",
        "shiftLeft",
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(int,byte[])",
            "java.math.BigInteger.shiftLeft(int)",
            "java.math.BigInteger.toByteArray()",
            "java.math.BigInteger.signum()"
          ]
        }
      ],
      "keywords": [
        "math",
        "signum"
      ]
    },
    {
      "method": "testDiscoverMachineWithouRemoteService@55",
      "body": "public void testDiscoverMachineWithouRemoteService(){\n  RemoteService nc=env.datacenter.findRemoteService(RemoteServicePredicates.type(RemoteServiceType.NODE_COLLECTOR));\n  nc.delete();\n  try {\n    String ip=Config.get(\"abiquo.hypervisor.address\");\n    HypervisorType type=HypervisorType.valueOf(Config.get(\"abiquo.hypervisor.type\"));\n    String user=Config.get(\"abiquo.hypervisor.user\");\n    String pass=Config.get(\"abiquo.hypervisor.pass\");\n    env.datacenter.discoverSingleMachine(ip,type,user,pass);\n  }\n catch (  AbiquoException ex) {\n    assertHasError(ex,Status.NOT_FOUND,\"RS-2\");\n  }\n  URI endpoint=URI.create(env.context.getApiContext().getProviderMetadata().getEndpoint());\n  nc=RemoteService.builder(env.context.getApiContext(),env.datacenter).type(RemoteServiceType.NODE_COLLECTOR).ip(endpoint.getHost()).build();\n  nc.save();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.create(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          },
          {
            "_call": "java.net.URI.getHost()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jclouds/labs/abiquo/src/test/java/org/jclouds/abiquo/domain/infrastructure/MachineLiveApiTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String",
        "URI"
      ],
      "apicalls": [
        "getHost",
        "create"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.create(java.lang.String)",
            "java.net.URI.getHost()"
          ]
        }
      ],
      "keywords": [
        "net",
        "create",
        "get"
      ]
    },
    {
      "method": "FTPManifest@167",
      "body": "/** \n * <p> Constructor that pulls all of the configuration options from an XML config file </p>\n * @param configFile Configuration file to parse\n * @throws ParserConfigurationException\n * @throws SAXException\n * @throws IOException\n * @throws TransformerException\n */\npublic FTPManifest(File configFile) throws ParserConfigurationException, SAXException, IOException, TransformerException {\n  init();\n  parseConfigFile(configFile);\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getCanonicalName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.logging.Logger.getLogger(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.logging.Logger"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "None",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getCanonicalName()",
              "java.util.logging.Logger.getLogger(java.lang.String)",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getCanonicalName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getCanonicalName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Java-Commons/bc-commons-applications/src/com/brightcove/commons/applications/FTPManifest.java",
      "classTypes": [
        "Logger",
        "String",
        "Long",
        "FTPManifestThread"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "Integer",
          "String",
          "String",
          "Boolean",
          "Long",
          "String",
          "Map<String,FTPManifestEntry>",
          "Boolean"
        ],
        [
          "String",
          "String",
          "String",
          "Boolean",
          "Long",
          "String",
          "Map<String,FTPManifestEntry>",
          "Boolean"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getCanonicalName()",
            "java.util.logging.Logger.getLogger(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
          ]
        }
      ],
      "keywords": [
        "canonical"
      ]
    },
    {
      "method": "genImage@225",
      "body": "public void genImage(SelectEvent event){\n  lstGraphicText.clear();\n  lstNumber.clear();\n  FamTypMatch typMatch=(FamTypMatch)event.getObject();\n  current.setFamFormationItemList(new ArrayList<FamFormationItem>());\n  for (int i=1; i <= typMatch.getNbPlayer(); i++) {\n    lstNumber.add(String.format(\"%d\",i));\n    FamFormationItem item=new FamFormationItem();\n    item.setNumItem(i);\n    current.getFamFormationItemList().add(item);\n  }\n}\n",
      "formalParam": [
        "SelectEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int)",
              "java.lang.String.indexOf(int)",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.lang.Integer.valueOf(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.lang.Integer.valueOf(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/FAM/FAM-admin/src/main/java/org/fam/jsf/controller/FamFormationController.java",
      "classTypes": [
        "Logger",
        "List<String>",
        "List<CanvasFormationItem>",
        "FamFormationFacade",
        "List<StreamedContent>"
      ],
      "sorrformalparam": [
        [
          "DragDropEvent"
        ],
        [],
        []
      ],
      "types": [
        "String",
        "ArrayList"
      ],
      "apicalls": [
        "clear",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.clear()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "clear",
        "boolean",
        "util"
      ]
    },
    {
      "method": "Frame@228",
      "body": "/** \n * Initializes a new instance of <code>Frame</code> that is not visible and has no title.\n */\npublic Frame(){\n  this(\"\");\n  noteFrame(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ref.ReferenceQueue.poll()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ref.Reference"
          },
          {
            "_call": "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.ref.ReferenceQueue.poll()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ref.Reference"
          },
          {
            "_call": "java.lang.ref.WeakReference<java.awt.Frame>.WeakReference<Frame>(java.awt.Frame)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.add(java.lang.ref.WeakReference<java.awt.Frame>)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Cursor.Cursor(int)",
              "java.awt.Window.setCursor(java.awt.Cursor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ref.ReferenceQueue.poll()",
              "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.remove(java.lang.Object)",
              "java.lang.ref.ReferenceQueue.poll()",
              "java.lang.ref.WeakReference<java.awt.Frame>.WeakReference<Frame>(java.awt.Frame)",
              "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.add(java.lang.ref.WeakReference<java.awt.Frame>)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/classpath/java/awt/Frame.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int",
        "MenuBar",
        "int",
        "int",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "String",
          "GraphicsConfiguration"
        ]
      ],
      "types": [
        "Frame"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.ReferenceQueue.poll()",
            "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.remove(java.lang.Object)",
            "java.lang.ref.ReferenceQueue.poll()",
            "java.lang.ref.WeakReference<java.awt.Frame>.WeakReference<Frame>(java.awt.Frame)",
            "java.util.ArrayList<java.lang.ref.WeakReference<java.awt.Frame>>.add(java.lang.ref.WeakReference<java.awt.Frame>)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "getArray@112",
      "body": "public Array getArray(String colName) throws SQLException {\n  return getArray(findColumn(colName));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.List.indexOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "long",
        "Time",
        "void",
        "void",
        "void",
        "byte",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)",
              "java.lang.Number.longValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.indexOf(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Array",
      "file": "./java_projects/codjo-fake-db/src/main/java/fakedb/FakeResultSet.java",
      "classTypes": [
        "Statement",
        "int",
        "int",
        "Number",
        "Object[][]",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "String",
          "int"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "long"
        ],
        [
          "String",
          "byte[]"
        ],
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "Time"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.List.indexOf(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "arrays",
        "integer"
      ]
    },
    {
      "method": "valueOf@110",
      "body": "public static org.apache.karaf.features.Feature valueOf(String str){\n  if (str.indexOf(SPLIT_FOR_NAME_AND_VERSION) >= 0) {\n    String strName=str.substring(0,str.indexOf(SPLIT_FOR_NAME_AND_VERSION));\n    String strVersion=str.substring(str.indexOf(SPLIT_FOR_NAME_AND_VERSION) + SPLIT_FOR_NAME_AND_VERSION.length(),str.length());\n    return new Feature(strName,strVersion);\n  }\n else {\n    return new Feature(str);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "org.apache.karaf.features.Feature",
      "file": "./java_projects/karaf/features/core/src/main/java/org/apache/karaf/features/internal/model/Feature.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "List<Conditional>",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "indexOf",
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "length",
        "string",
        "lang"
      ]
    },
    {
      "method": "getExpectedSchemaLocation@70",
      "body": "public String getExpectedSchemaLocation(){\n  String path=getSchemaFile().getPath();\n  String url=path.replaceFirst(\"www\",SCHEMA_SERVER_BASE_URL);\n  return url;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.listFiles(java.io.FilenameFilter)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File[]"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.replaceFirst(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "List<SchemaDirectory>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.getName()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.io.File.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.listFiles()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.List<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/schema/src/test/java/org/datacite/schema/SchemaDirectory.java",
      "classTypes": [
        "File",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "replaceFirst"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.listFiles(java.io.FilenameFilter)",
            "java.io.File.getPath()",
            "java.lang.String.replaceFirst(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "filename"
      ]
    },
    {
      "method": "startObjectEntry@45",
      "body": "@Override public boolean startObjectEntry(String key) throws ParseException, IOException {\n  if (\"coordinates\".equals(key)) {\n    lines=new ArrayList();\n  }\n  return true;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/geotools/modules/unsupported/geojson/src/main/java/org/geotools/geojson/geom/MultiLineHandler.java",
      "classTypes": [
        "List<Coordinate[]>",
        "List<Coordinate>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.ArrayList.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "string",
        "lang",
        "array",
        "list",
        "equals"
      ]
    },
    {
      "method": "testReadWrite_Block_64K@2125",
      "body": "public void testReadWrite_Block_64K() throws Exception {\n  byte[] sourceArray=new byte[CAPACITY_64KB];\n  for (int i=0; i < sourceArray.length; i++) {\n    sourceArray[i]=(byte)i;\n  }\n  this.channel1.socket().bind(localAddr2);\n  this.channel1.connect(localAddr1);\n  this.channel2.socket().bind(localAddr1);\n  this.channel2.connect(localAddr2);\n  ByteBuffer sourceBuf=ByteBuffer.wrap(sourceArray);\n  try {\n    channel1.write(sourceBuf);\n    fail(\"Should throw IOException\");\n  }\n catch (  IOException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.channels.DatagramChannel.socket()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.DatagramSocket"
          },
          {
            "_call": "java.net.DatagramSocket.bind(java.net.SocketAddress)",
            "_throws": [
              "java.net.SocketException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.nio.channels.DatagramChannel"
          },
          {
            "_call": "java.nio.channels.DatagramChannel.socket()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.DatagramSocket"
          },
          {
            "_call": "java.net.DatagramSocket.bind(java.net.SocketAddress)",
            "_throws": [
              "java.net.SocketException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.nio.channels.DatagramChannel"
          },
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.channels.DatagramChannel.isConnected()",
              "java.nio.channels.DatagramChannel.receive(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.DatagramChannel.isConnected()",
              "java.nio.ByteBuffer.allocateDirect(int)",
              "java.nio.ByteBuffer.asReadOnlyBuffer()",
              "java.nio.Buffer.isReadOnly()",
              "java.nio.channels.DatagramChannel.receive(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.DatagramChannel.open()",
              "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.Buffer.position(int)",
              "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocateDirect(int)",
              "java.nio.channels.DatagramChannel.send(java.nio.ByteBuffer,java.net.SocketAddress)",
              "java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
              "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
              "java.nio.channels.DatagramChannel.isConnected()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.DatagramChannel.isConnected()",
              "java.net.DatagramSocket.close()",
              "java.net.DatagramSocket.isClosed()",
              "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
              "java.nio.channels.DatagramChannel.isConnected()",
              "java.nio.ByteBuffer.allocateDirect(int)",
              "java.nio.channels.DatagramChannel.receive(java.nio.ByteBuffer)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/nio/src/test/java/common/org/apache/harmony/nio/tests/java/nio/channels/DatagramChannelTest.java",
      "classTypes": [
        "InetSocketAddress",
        "int",
        "String",
        "long",
        "InetSocketAddress",
        "int",
        "DatagramSocket",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "DatagramChannel"
      ],
      "apicalls": [
        "write",
        "socket"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.channels.DatagramChannel.socket()",
            "java.net.DatagramSocket.bind(java.net.SocketAddress)",
            "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
            "java.nio.channels.DatagramChannel.socket()",
            "java.net.DatagramSocket.bind(java.net.SocketAddress)",
            "java.nio.channels.DatagramChannel.connect(java.net.SocketAddress)",
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.nio.channels.DatagramChannel.write(java.nio.ByteBuffer)"
          ]
        }
      ],
      "keywords": [
        "address",
        "buffer"
      ]
    },
    {
      "method": "valueOf@110",
      "body": "public static org.apache.karaf.features.Feature valueOf(String str){\n  if (str.indexOf(SPLIT_FOR_NAME_AND_VERSION) >= 0) {\n    String strName=str.substring(0,str.indexOf(SPLIT_FOR_NAME_AND_VERSION));\n    String strVersion=str.substring(str.indexOf(SPLIT_FOR_NAME_AND_VERSION) + SPLIT_FOR_NAME_AND_VERSION.length(),str.length());\n    return new Feature(strName,strVersion);\n  }\n else {\n    return new Feature(str);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "org.apache.karaf.features.Feature",
      "file": "./java_projects/karaf/features/core/src/main/java/org/apache/karaf/features/internal/model/Feature.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "List<Conditional>",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "indexOf",
        "substring",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "length",
        "string",
        "lang"
      ]
    },
    {
      "method": "receiveMessage@396",
      "body": "/** \n * Auto generated method signature Retrieves one or more messages from the specified queue.  For each message returned, the response includes the message body; MD5 digest of the message body; receipt handle, which is the identifier you must provide when deleting the message; and message ID of each message. Messages returned by this action stay in the queue until you delete them. However, once a message is returned to a ReceiveMessage request, it is not returned on subsequent ReceiveMessage requests for the duration of the VisibilityTimeout. If you do not specify a VisibilityTimeout in the request, the overall visibility timeout for the queue is used for the returned messages.\n * @param receiveMessage - contains visibility timeout and number of messages\n */\npublic ReceiveMessageResponse receiveMessage(ReceiveMessage receiveMessage) throws AxisFault {\n  int maxNumberOfMessages=1;\n  BigInteger messageCount=receiveMessage.getMaxNumberOfMessages();\n  if (messageCount != null) {\n    maxNumberOfMessages=messageCount.intValue();\n    if (maxNumberOfMessages > 10 || maxNumberOfMessages < 1) {\n      throw new FaultResponse(Utils.getMessageRequestId(),\"ReadCountOutOfRange\",\"The value for MaxNumberOfMessages is not valid \" + \"(must be from 1 to 10).\").createAxisFault();\n    }\n  }\n  String messageBoxId=Utils.getQueueNameFromRequestURI();\n  long visibilityTimeout=0;\n  BigInteger timeoutValue=receiveMessage.getVisibilityTimeout();\n  if (timeoutValue != null) {\n    visibilityTimeout=timeoutValue.longValue();\n    if (visibilityTimeout > MessageBoxConstants.TWELVE_HOURS_IN_SECONDS && visibilityTimeout < 0) {\n      throw new FaultResponse(Utils.getMessageRequestId(),\"InvalidParameterValue\",\"One or more parameters cannot be validated.\").createAxisFault();\n    }\n  }\n  Map<String,String> attributeMap=new ConcurrentHashMap<String,String>();\n  boolean attributesRequired=true;\n  if (receiveMessage.getAttributeName() == null) {\n    attributesRequired=false;\n  }\n  try {\n    List<SQSMessage> messageList=Utils.getMessageBoxService().receiveMessage(messageBoxId,maxNumberOfMessages,visibilityTimeout,attributeMap);\n    int numberOfMessagesRetreived=messageList.size();\n    Message_type0[] message_type0=new Message_type0[numberOfMessagesRetreived];\n    int index=0;\n    for (    SQSMessage receivedMessage : messageList) {\n      message_type0[index]=new Message_type0();\n      message_type0[index].setBody(receivedMessage.getBody());\n      message_type0[index].setMessageId(receivedMessage.getMessageId());\n      message_type0[index].setMD5OfBody(receivedMessage.getMd5ofMessageBody());\n      message_type0[index].setReceiptHandle(receivedMessage.getReceiptHandle());\n      if (attributesRequired) {\n        message_type0[index].setAttribute(getAttributeValues(attributeMap,receiveMessage.getAttributeName()));\n      }\n      index++;\n    }\n    ReceiveMessageResponse receiveMessageResponse=new ReceiveMessageResponse();\n    ReceiveMessageResult_type0 receiveMessageResult_type0=new ReceiveMessageResult_type0();\n    receiveMessageResult_type0.setMessage(message_type0);\n    receiveMessageResponse.setReceiveMessageResult(receiveMessageResult_type0);\n    receiveMessageResponse.setResponseMetadata(getResponseMetadata_type0());\n    if (log.isInfoEnabled()) {\n      log.info(numberOfMessagesRetreived + \" messages are received from queue,  \" + messageBoxId);\n    }\n    return receiveMessageResponse;\n  }\n catch (  MessageBoxException e) {\n    throw new FaultResponse(e,Utils.getMessageRequestId()).createAxisFault();\n  }\n}\n",
      "formalParam": [
        "ReceiveMessage"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.math.BigInteger.longValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String>.ConcurrentHashMap<String,String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "SendMessageResponse"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()"
            ]
          }
        ]
      ],
      "returnType": "ReceiveMessageResponse",
      "file": "./java_projects/platform/components/messagebox/org.wso2.carbon.messagebox.sqs/src/main/java/org/wso2/carbon/messagebox/sqs/internal/MessageQueueSkeleton.java",
      "classTypes": [
        "Log"
      ],
      "sorrformalparam": [
        [
          "SendMessage"
        ]
      ],
      "types": [
        "ConcurrentHashMap",
        "String"
      ],
      "apicalls": [
        "longValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.intValue()",
            "java.math.BigInteger.longValue()",
            "java.util.concurrent.ConcurrentHashMap<java.lang.String,java.lang.String>.ConcurrentHashMap<String,String>()"
          ]
        }
      ],
      "keywords": [
        "math",
        "value",
        "map",
        "big"
      ]
    },
    {
      "method": "mouseClicked@267",
      "body": "public void mouseClicked(MouseEvent e){\n  JList plist=(JList)e.getSource();\n  int index=plist.locationToIndex(e.getPoint());\n  if (index >= 0) {\n    User p=(User)plist.getModel().getElementAt(index);\n    peopleListModel.removeElement(p);\n    participantListModel.addElement(p);\n  }\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.MouseEvent.getPoint()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Point"
          },
          {
            "_call": "javax.swing.JList.locationToIndex(java.awt.Point)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JList.locationToIndex(java.awt.Point)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Fellesprosjekt/src/gui/ParticipantList.java",
      "classTypes": [
        "DefaultListSelectionModel",
        "Event",
        "DefaultListSelectionModel",
        "EventWindow",
        "JTextField",
        "ListModel",
        "ListModel",
        "JScrollPane",
        "ArrayList<User>"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "MouseEvent"
      ],
      "apicalls": [
        "getPoint",
        "locationToIndex"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getPoint()",
            "javax.swing.JList.locationToIndex(java.awt.Point)"
          ]
        }
      ],
      "keywords": [
        "point",
        "list",
        "swing",
        "get"
      ]
    },
    {
      "method": "getMargin@264",
      "body": "/** \n * {@inheritDoc }\n */\n@Override public float getMargin(final Object candidate,final float coeff){\n  evaluate();\n  if (Float.isNaN(cachedWidth)) {\n    final Expression expWidth=styleElement.getWidth();\n    if (candidate == null) {\n      return Float.NaN;\n    }\n else {\n      return GO2Utilities.evaluate(expWidth,candidate,Float.class,1f);\n    }\n  }\n  return cachedWidth * coeff;\n}\n",
      "formalParam": [
        "Object",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.awt.Color.getAlpha()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Float.isNaN(float)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "AlphaComposite",
        "Paint",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.awt.Color.getAlpha()",
              "java.lang.Float.floatValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Color.getAlpha()",
              "java.awt.image.BufferedImage.getWidth()",
              "java.awt.image.BufferedImage.getHeight()",
              "java.awt.Rectangle.Rectangle(int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Color.getAlpha()",
              "java.awt.Color.getAlpha()",
              "java.lang.Float.isNaN(float)"
            ]
          }
        ]
      ],
      "returnType": "float",
      "file": "./java_projects/geotoolkit-pending/modules/display/geotk-go2-engine/src/main/java/org/geotoolkit/display2d/style/CachedStrokeSimple.java",
      "classTypes": [
        "int",
        "CachedGraphic",
        "float",
        "Paint",
        "AlphaComposite",
        "float[]",
        "int",
        "float",
        "java.awt.Stroke"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "Object",
          "int",
          "int",
          "float",
          "RenderingHints"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Float"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.awt.Color.getAlpha()",
            "java.lang.Float.isNaN(float)"
          ]
        }
      ],
      "keywords": [
        "alpha",
        "get",
        "na"
      ]
    },
    {
      "method": "OObjectEnumLazySet@47",
      "body": "public OObjectEnumLazySet(final Class<Enum> iEnumClass,final ORecord<?> iSourceRecord,final Set<Object> iRecordSource,final Set<? extends TYPE> iSourceCollection){\n  this.sourceRecord=iSourceRecord;\n  this.underlying=iRecordSource;\n  this.enumClass=iEnumClass;\n  convertAll();\n  addAll(iSourceCollection);\n}\n",
      "formalParam": [
        "Class<Enum>",
        "ORecord<?>",
        "Set<Object>",
        "Set<? extends TYPE>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Enum.valueOf(java.lang.Class,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.Enum.name()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Set<java.lang.Object>.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Set<TYPE>",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Enum.name()",
              "java.util.Set<java.lang.Object>.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Enum.name()",
              "java.util.Set<java.lang.Object>.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Orient/object/src/main/java/com/orientechnologies/orient/object/enumerations/OObjectEnumLazySet.java",
      "classTypes": [
        "boolean",
        "long",
        "Class<Enum>"
      ],
      "sorrformalparam": [
        [],
        [
          "TYPE"
        ],
        [
          "Collection<? extends TYPE>"
        ]
      ],
      "types": [
        "Boolean",
        "Set",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Enum.valueOf(java.lang.Class,java.lang.String)",
            "java.lang.Enum.name()",
            "java.util.Set<java.lang.Object>.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "value",
        "string"
      ]
    },
    {
      "method": "RepositoryMapping@68",
      "body": "/** \n * Construct a  {@link RepositoryMapping} for previouslyunknown project.\n * @param mappedContainer\n * @param gitDir\n */\npublic RepositoryMapping(final IContainer mappedContainer,final File gitDir){\n  final IPath cLoc=mappedContainer.getLocation().removeTrailingSeparator();\n  final IPath gLoc=Path.fromOSString(gitDir.getAbsolutePath()).removeTrailingSeparator();\n  final IPath gLocParent=gLoc.removeLastSegments(1);\n  container=mappedContainer;\n  containerPathString=container.getProjectRelativePath().toPortableString();\n  if (cLoc.isPrefixOf(gLoc)) {\n    int matchingSegments=gLoc.matchingFirstSegments(cLoc);\n    IPath remainder=gLoc.removeFirstSegments(matchingSegments);\n    String device=remainder.getDevice();\n    if (device == null)     gitDirPathString=remainder.toPortableString();\n else     gitDirPathString=remainder.toPortableString().substring(device.length());\n  }\n else   if (gLocParent.isPrefixOf(cLoc)) {\n    int cnt=cLoc.segmentCount() - cLoc.matchingFirstSegments(gLocParent);\n    StringBuilder p=new StringBuilder(\"\");\n    while (cnt-- > 0) {\n      p.append(\"../\");\n    }\n    p.append(gLoc.segment(gLoc.segmentCount() - 1));\n    gitDirPathString=p.toString();\n  }\n else {\n    gitDirPathString=gLoc.toPortableString();\n  }\n}\n",
      "formalParam": [
        "IContainer",
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              },
              {
                "_call": "java.lang.StringBuilder.append(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              },
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "RepositoryMapping"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.util.Properties.getProperty(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.toString()",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/egit/org.eclipse.egit.core/src/org/eclipse/egit/core/project/RepositoryMapping.java",
      "classTypes": [
        "IContainer",
        "String",
        "IPath",
        "IPath",
        "IPath",
        "Repository",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Properties",
          "String"
        ],
        [
          "IPath"
        ]
      ],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getAbsolutePath()",
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        },
        {
          "calls": [
            "java.io.File.getAbsolutePath()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "string",
        "append",
        "length"
      ]
    },
    {
      "method": "setPlayer@106",
      "body": "public void setPlayer(final Player player) throws ConnectorException {\nsynchronized (playingFieldsMutex) {\n    Connector.setInstance(this);\n    Connector.getInstance().connect();\n    if (this.player != null) {\n      clearPlayer();\n    }\n    this.player=player;\n    playingLister=new AbstractConnectorListener(){\n      @Override public void messageSent(      ConnectorMessageEvent event){\n        if (event.getMessage().startsWith(\"PROTOCOL \")) {\n          return;\n        }\nsynchronized (sentMessageFieldsMutex) {\n          while (sentMessage != null) {\n            try {\n              sentMessageFieldsMutex.wait();\n            }\n catch (            InterruptedException e) {\n              Thread.currentThread().interrupt();\n              return;\n            }\n          }\n          sentMessage=event.getMessage();\n          sentMessageFieldsMutex.notify();\n        }\n      }\n    }\n;\n    Connector.getInstance().addConnectorListener(playingLister,false,true);\n    playerThread=new Thread(\"TestConnectorPlayer\"){\n      @Override public void run(){\n        try {\n          player.init();\n          long startTime=System.currentTimeMillis();\n          while (player.hasNextMessage()) {\n            PlayerMessage message=player.getNextMessage();\nswitch (message.getType()) {\ncase SENT:\nsynchronized (sentMessageFieldsMutex) {\n                while (sentMessage == null) {\n                  try {\n                    sentMessageFieldsMutex.wait();\n                  }\n catch (                  InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    return;\n                  }\n                }\n                String sentMessage=TestConnector.this.sentMessage;\n                TestConnector.this.sentMessage=null;\n                sentMessageFieldsMutex.notify();\n                if (!message.getMessage().equals(sentMessage)) {\n                  throw new IllegalStateException(\"The sent message (=\\\"\" + sentMessage + \"\\\")is not equal to the expected message (=\\\"\"+ message.getMessage()+ \"\\\").\");\n                }\n              }\n            break;\ncase RECEIVED:\n          long period=System.currentTimeMillis() - startTime - message.getTime();\n        if (period < 0) {\n          try {\n            Thread.sleep(-period);\n          }\n catch (          InterruptedException e) {\n            Thread.currentThread().interrupt();\n            return;\n          }\n        }\n      fireMessageReceived(message.getMessage());\n    break;\n}\nif (Thread.currentThread().isInterrupted()) {\n  return;\n}\n}\n}\n  finally {\nplayer.destory();\n}\n}\n}\n;\nplayerThread.setDaemon(true);\nplayerThread.start();\n}\n}\n",
      "formalParam": [
        "Player"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.setDaemon(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/vosyana/libs/skype/src/com/skype/connector/test/TestConnector.java",
      "classTypes": [
        "Object",
        "String",
        "Thread",
        "Object"
      ],
      "sorrformalparam": [
        [
          "Recorder"
        ]
      ],
      "types": [
        "Boolean",
        "Thread"
      ],
      "apicalls": [
        "start",
        "setDaemon"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "start",
        "lang",
        "daemon",
        "set"
      ]
    },
    {
      "method": "composeMail@23",
      "body": "/** \n * This method composes the mails and delivers it to the destination address. Note you have to set the mailHost in the system properties before it will work.\n */\npublic void composeMail(String from,String to,String subject,String body) throws SendFailedException, Exception {\n  javax.mail.Session session=javax.mail.Session.getDefaultInstance(System.getProperties(),null);\n  MimeMessage msg=new MimeMessage(session);\n  msg.setFrom(new InternetAddress(from));\n  msg.setRecipients(Message.RecipientType.TO,InternetAddress.parse(to,true));\n  if (subject != null)   msg.setSubject(subject);\n  msg.setText(body);\n  msg.setSentDate(new Date());\n  Transport.send(msg);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Properties"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/wolips/woproject-ant-tasks/tests/wo/frameworks/MailUtilities/src/se/astrakan/ecore/util/MailHandler.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Properties",
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperties()",
            "java.util.Date.Date()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "util",
        "system",
        "date",
        "properties"
      ]
    },
    {
      "method": "saveColorScheme@133",
      "body": "/** \n * Save color scheme to a file\n */\npublic void saveColorScheme(File filename) throws Exception {\n  Element root=new Element(\"nuccolor\");\n  Document doc=new Document(root);\n  for (  Map.Entry<String,Particle> entry : particle.entrySet()) {\n    Element e=new Element(\"coloring\");\n    e.setAttribute(\"name\",entry.getKey());\n    Color cNuc=entry.getValue().overrideNucColor;\n    if (cNuc != null) {\n      e.setAttribute(\"r\",\"\" + cNuc.getRed());\n      e.setAttribute(\"g\",\"\" + cNuc.getGreen());\n      e.setAttribute(\"b\",\"\" + cNuc.getBlue());\n    }\n    Color c=entry.getValue().overrideMeshColor;\n    if (c != null) {\n      e.setAttribute(\"mr\",\"\" + c.getRed());\n      e.setAttribute(\"mg\",\"\" + c.getGreen());\n      e.setAttribute(\"mb\",\"\" + c.getBlue());\n    }\n    MeshRenderMode rm=entry.getValue().overrrideRenderMode;\n    if (rm != null)     e.setAttribute(\"rendermode\",rm.toString());\n    root.addContent(e);\n  }\n  EvXmlUtil.writeXmlData(doc,filename);\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.awt.Color.getRed()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.getGreen()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.getBlue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.getRed()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.getGreen()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Color.getBlue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.TreeSet<java.lang.String>.TreeSet<String>(java.util.SortedSet)",
              "java.util.TreeSet<java.lang.String>.clear()",
              "java.util.TreeSet<java.lang.String>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)",
              "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.awt.Color.Color(int,int,int)",
              "java.awt.Color.Color(int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Endrov/ev/endrov/lineage/Lineage.java",
      "classTypes": [
        "EvDecimal",
        "int",
        "boolean",
        "SortedMap<EvDecimal,String>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "File"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.entrySet()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()",
            "java.awt.Color.getRed()",
            "java.awt.Color.getGreen()",
            "java.awt.Color.getBlue()"
          ]
        }
      ],
      "keywords": [
        "awt",
        "integer",
        "color",
        "blue",
        "entry",
        "green"
      ]
    },
    {
      "method": "releaseConnection@144",
      "body": "/** \n * @see net.jforum.DBConnection#releaseConnection(java.sql.Connection)\n */\npublic void releaseConnection(Connection conn){\n  if (conn == null) {\n    return;\n  }\n  try {\n    conn.close();\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "Connection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.close()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/guj.com.br/src/net/jforum/C3P0PooledConnection.java",
      "classTypes": [
        "ComboPooledDataSource"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "SQLException"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.close()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "print",
        "trace",
        "connection",
        "lang",
        "stack",
        "sql"
      ]
    },
    {
      "method": "createStrippedSplitPane@174",
      "body": "/** \n * Constructs a <code>UIFSplitPane</code>,  i.e. a <code>JSplitPane</code> that has no borders. Also disabled the one touch exandable property.\n * @param orientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> or<code>JSplitPane.VERTICAL_SPLIT</code>\n * @param leftComponent the <code>Component</code> that willappear on the left of a horizontally-split pane,  or at the top of a vertically-split pane\n * @param rightComponent the <code>Component</code> that willappear on the right of a horizontally-split pane,  or at the bottom of a\tvertically-split pane\n * @throws IllegalArgumentException if <code>orientation</code>is not one of: HORIZONTAL_SPLIT or VERTICAL_SPLIT\n */\npublic static UIFSplitPane createStrippedSplitPane(int orientation,Component leftComponent,Component rightComponent){\n  UIFSplitPane split=new UIFSplitPane(orientation,leftComponent,rightComponent);\n  split.setBorder(BorderFactory.createEmptyBorder());\n  split.setOneTouchExpandable(false);\n  return split;\n}\n",
      "formalParam": [
        "int",
        "Component",
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.BorderFactory.createEmptyBorder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.Border"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JSplitPane.setOneTouchExpandable(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Component",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JSplitPane.getUI()",
              "java.awt.Component.setBackground(java.awt.Color)",
              "java.awt.Component.setForeground(java.awt.Color)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JSplitPane.getUI()",
              "javax.swing.BorderFactory.createEmptyBorder()"
            ]
          }
        ]
      ],
      "returnType": "UIFSplitPane",
      "file": "./java_projects/thera-pi-2/TheraPiHilfe/src/therapiHilfe/UIFSplitPane.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "Color"
        ],
        []
      ],
      "types": [
        "JComponent",
        "Border"
      ],
      "apicalls": [
        "setBorder",
        "setOneTouchExpandable"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.BorderFactory.createEmptyBorder()",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "javax.swing.JSplitPane.setOneTouchExpandable(boolean)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "component",
        "create",
        "touch",
        "one",
        "set"
      ]
    },
    {
      "method": "countByG_C_T_S@12349",
      "body": "/** \n * Counts all the message-boards messages where groupId = &#63; and categoryId = &#63; and threadId = &#63; and status = &#63;.\n * @param groupId the group ID to search with\n * @param categoryId the category ID to search with\n * @param threadId the thread ID to search with\n * @param status the status to search with\n * @return the number of matching message-boards messages\n * @throws SystemException if a system exception occurred\n */\npublic int countByG_C_T_S(long groupId,long categoryId,long threadId,int status) throws SystemException {\n  Object[] finderArgs=new Object[]{groupId,categoryId,threadId,status};\n  Long count=(Long)FinderCacheUtil.getResult(FINDER_PATH_COUNT_BY_G_C_T_S,finderArgs,this);\n  if (count == null) {\n    StringBundler query=new StringBundler(5);\n    query.append(_SQL_COUNT_MBMESSAGE_WHERE);\n    query.append(_FINDER_COLUMN_G_C_T_S_GROUPID_2);\n    query.append(_FINDER_COLUMN_G_C_T_S_CATEGORYID_2);\n    query.append(_FINDER_COLUMN_G_C_T_S_THREADID_2);\n    query.append(_FINDER_COLUMN_G_C_T_S_STATUS_2);\n    String sql=query.toString();\n    Session session=null;\n    try {\n      session=openSession();\n      Query q=session.createQuery(sql);\n      QueryPos qPos=QueryPos.getInstance(q);\n      qPos.add(groupId);\n      qPos.add(categoryId);\n      qPos.add(threadId);\n      qPos.add(status);\n      count=(Long)q.uniqueResult();\n    }\n catch (    Exception e) {\n      throw processException(e);\n    }\n finally {\n      if (count == null) {\n        count=Long.valueOf(0);\n      }\n      FinderCacheUtil.putResult(FINDER_PATH_COUNT_BY_G_C_T_S,finderArgs,count);\n      closeSession(session);\n    }\n  }\n  return count.intValue();\n}\n",
      "formalParam": [
        "long",
        "long",
        "long",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.valueOf(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Long"
          },
          {
            "_call": "java.lang.Long.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.Long.intValue()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/liferay-portal-trunk/portal-impl/src/com/liferay/portlet/messageboards/service/persistence/MBMessagePersistenceImpl.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "FinderPath",
        "FinderPath",
        "String",
        "String",
        "String",
        "String",
        "FinderPath"
      ],
      "sorrformalparam": [
        [
          "long",
          "long",
          "long"
        ]
      ],
      "types": [],
      "apicalls": [
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.valueOf(long)",
            "java.lang.Long.intValue()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "setSelectionModel@1868",
      "body": "/** \n * Sets the <code>selectionModel</code> for the list to a non-<code>null</code> <code>ListSelectionModel</code> implementation. The selection model handles the task of making single selections, selections of contiguous ranges, and non-contiguous selections. <p> This is a JavaBeans bound property.\n * @param selectionModel  the <code>ListSelectionModel</code> thatimplements the selections\n * @exception IllegalArgumentException   if <code>selectionModel</code>is <code>null</code>\n * @see #getSelectionModel\n * @beaninfo bound: true description: The selection model, recording which cells are selected.\n */\npublic void setSelectionModel(ListSelectionModel selectionModel){\n  if (selectionModel == null) {\n    throw new IllegalArgumentException(\"selectionModel must be non null\");\n  }\n  if (selectionListener != null) {\n    this.selectionModel.removeListSelectionListener(selectionListener);\n    selectionModel.addListSelectionListener(selectionListener);\n  }\n  ListSelectionModel oldValue=this.selectionModel;\n  this.selectionModel=selectionModel;\n  firePropertyChange(\"selectionModel\",oldValue,selectionModel);\n}\n",
      "formalParam": [
        "ListSelectionModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Accessible",
        "Accessible",
        "boolean",
        "void",
        "void",
        "List<E>",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.ListModel<Tau_E>.getSize()",
              "javax.swing.JList<E>.AccessibleJList.AccessibleJListChild.AccessibleJListChild(javax.swing.JList<E>,int)"
            ]
          },
          {
            "calls": [
              "javax.swing.ListModel<Tau_E>.getSize()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList<E>.AccessibleJList.getAccessibleSelectionCount()",
              "javax.swing.JList<E>.AccessibleJList.getAccessibleChild(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.SwingUtilities.getUnwrappedParent(java.awt.Component)",
              "java.awt.Component.getWidth()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.swing.ListSelectionModel.clearSelection()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.ListSelectionModel.clearSelection()",
              "javax.swing.ListModel<Tau_E>.getSize()",
              "javax.swing.ListSelectionModel.addSelectionInterval(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.ListSelectionModel.getMinSelectionIndex()",
              "javax.swing.ListSelectionModel.getMaxSelectionIndex()",
              "java.util.Collections.emptyList()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "javax.swing.ListSelectionModel.isSelectedIndex(int)"
            ]
          },
          {
            "calls": [
              "javax.swing.ListSelectionModel.getMinSelectionIndex()",
              "javax.swing.ListSelectionModel.getMaxSelectionIndex()",
              "java.util.Collections.emptyList()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "javax.swing.ListSelectionModel.isSelectedIndex(int)",
              "javax.swing.ListModel<Tau_E>.getElementAt(int)",
              "java.util.List<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.ToolTipManager.sharedInstance()",
              "javax.swing.ToolTipManager.registerComponent(javax.swing.JComponent)",
              "javax.swing.JComponent.setAutoscrolls(boolean)",
              "javax.swing.JComponent.setOpaque(boolean)",
              "javax.swing.SwingUtilities.updateComponentTreeUI(java.awt.Component)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/JList.java",
      "classTypes": [
        "Color",
        "DropLocation",
        "int",
        "boolean",
        "int",
        "E",
        "ListModel<E>",
        "ListSelectionModel"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "int"
        ],
        [],
        [
          "E[]"
        ],
        [
          "int[]"
        ],
        [],
        [
          "ListModel<E>"
        ]
      ],
      "types": [
        "String",
        "Object",
        "ListSelectionModel"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.ListSelectionModel.removeListSelectionListener(javax.swing.event.ListSelectionListener)",
            "javax.swing.ListSelectionModel.addListSelectionListener(javax.swing.event.ListSelectionListener)",
            "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "model",
        "string",
        "listener",
        "fire"
      ]
    },
    {
      "method": "toString@98",
      "body": "/** \n * Returns a string representation of this object; useful for testing and debugging.\n * @return A string representation of this object.\n * @see java.lang.Object#toString()\n */\n@Override public String toString(){\n  StringBuilder sb=new StringBuilder();\n  sb.append(\"{\");\n  if (environmentInfo != null)   sb.append(\"EnvironmentInfo: \" + environmentInfo + \", \");\n  sb.append(\"}\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/aws-sdk-for-java/src/main/java/com/amazonaws/services/elasticbeanstalk/model/RetrieveEnvironmentInfoResult.java",
      "classTypes": [
        "java.util.List<EnvironmentInfoDescription>"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "builder",
        "object",
        "append"
      ]
    },
    {
      "method": "Map2StringPrettyPrint@99",
      "body": "public static String Map2StringPrettyPrint(Hashtable m){\n  String retString=\"\";\n  Iterator iter=m.keySet().iterator();\n  while (iter.hasNext()) {\n    String key=(String)iter.next();\n    retString+=key + \" = \" + m.get(key)+ \"\\n\";\n  }\n  return (retString.trim());\n}\n",
      "formalParam": [
        "Hashtable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Integer",
        "ArrayList<ObjectDoublePair>",
        "TObjectDoubleHashMap",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Collections.sort(java.util.List,java.util.Comparator)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.split(java.lang.String)",
              "java.lang.Double.parseDouble(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.Integer(int)",
              "java.lang.String.trim()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/junto/src/main/java/upenn/junto/util/CollectionUtil.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "TObjectDoubleHashMap"
        ],
        [
          "TObjectDoubleHashMap",
          "String"
        ],
        [
          "TObjectDoubleHashMap",
          "RyanAlphabet"
        ]
      ],
      "types": [
        "Iterator",
        "Hashtable"
      ],
      "apicalls": [
        "iterator",
        "keySet",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()",
            "java.lang.String.trim()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "key"
      ]
    },
    {
      "method": "test_ConstructorLjava_lang_String@75",
      "body": "/** \n * @tests java.util.ConcurrentModificationException#ConcurrentModificationException(java.lang.String)\n */\npublic void test_ConstructorLjava_lang_String(){\n  String errorMessage=\"This is an error message\";\n  try {\n    if (true)     throw new ConcurrentModificationException(errorMessage);\n  }\n catch (  ConcurrentModificationException e) {\n    assertTrue(\"Exception thrown without error message\",e.getMessage().equals(errorMessage));\n    return;\n  }\n  fail(\"Failed to throw expected ConcurrentModificationException\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Collection.add(java.lang.Object)",
              "java.util.Collection.remove(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/ConcurrentModificationExceptionTest.java",
      "classTypes": [
        "Collection"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "exists@85",
      "body": "/** \n * Returns true if the file exists.\n */\npublic boolean exists(){\n  ClassLoader loader=Thread.currentThread().getContextClassLoader();\n  return loader.getResource(getPath()) != null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/quercus-gae/src/main/java/com/caucho/vfs/ClasspathPath.java",
      "classTypes": [
        "L10N"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Thread",
        "URL"
      ],
      "apicalls": [
        "getResource",
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "loader",
        "lang",
        "url"
      ]
    },
    {
      "method": "testAbstractResourceExceptions@196",
      "body": "@Test public void testAbstractResourceExceptions() throws Exception {\n  final String name=\"test-resource\";\n  Resource resource=new AbstractResource(){\n    public String getDescription(){\n      return name;\n    }\n    public InputStream getInputStream(){\n      return null;\n    }\n  }\n;\n  try {\n    resource.getURL();\n    fail(\"FileNotFoundException should have been thrown\");\n  }\n catch (  FileNotFoundException ex) {\n    assertTrue(ex.getMessage().indexOf(name) != -1);\n  }\n  try {\n    resource.getFile();\n    fail(\"FileNotFoundException should have been thrown\");\n  }\n catch (  FileNotFoundException ex) {\n    assertTrue(ex.getMessage().indexOf(name) != -1);\n  }\n  try {\n    resource.createRelative(\"/testing\");\n    fail(\"FileNotFoundException should have been thrown\");\n  }\n catch (  FileNotFoundException ex) {\n    assertTrue(ex.getMessage().indexOf(name) != -1);\n  }\n  assertThat(resource.getFilename(),nullValue());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResource(java.lang.String)",
              "java.net.URL.getFile()",
              "java.lang.Class.getResource(java.lang.String)",
              "java.net.URL.getFile()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.lang.String.getBytes()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/bingo-core/core-lang/src/test/java/bingo/lang/resource/ResourceTests.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "index",
        "integer"
      ]
    },
    {
      "method": "addPropertyChangeListener@119",
      "body": "/** \n * Adds a PropertyChangeListener to the list of global listeners. All property change events will be sent to this listener. The listener add is not unique: that is, <em>n</em> adds with the same listener will result in <em>n</em> events being sent to that listener for every property change. Adding a null listener is silently ignored. This method will unwrap a PropertyChangeListenerProxy, registering the underlying delegate to the named property list.\n * @param l the listener to add\n */\npublic synchronized void addPropertyChangeListener(PropertyChangeListener l){\n  if (l == null)   return;\n  if (l instanceof PropertyChangeListenerProxy) {\n    PropertyChangeListenerProxy p=(PropertyChangeListenerProxy)l;\n    addPropertyChangeListener(p.propertyName,(PropertyChangeListener)p.getListener());\n  }\n else {\n    if (listeners == null)     listeners=new Vector();\n    listeners.add(l);\n  }\n}\n",
      "formalParam": [
        "PropertyChangeListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Hashtable.Hashtable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "PropertyChangeListener[]",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.beans.PropertyChangeEvent.PropertyChangeEvent(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.addAll(java.util.Collection)",
              "java.util.Hashtable.size()",
              "java.util.Hashtable.entrySet()",
              "java.util.Set.iterator()",
              "java.util.Vector.size()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable.Hashtable()",
              "java.util.Vector.Vector()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.util.Vector.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Vector.remove(java.lang.Object)",
              "java.util.Vector.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Vector.remove(java.lang.Object)",
              "java.util.Vector.isEmpty()",
              "java.util.Hashtable.remove(java.lang.Object)",
              "java.util.Hashtable.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/java/beans/PropertyChangeSupport.java",
      "classTypes": [
        "long",
        "int",
        "Vector",
        "Object",
        "Hashtable"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object",
          "Object"
        ],
        [
          "String",
          "int",
          "Object",
          "Object"
        ],
        [],
        [
          "String",
          "PropertyChangeListener"
        ],
        [
          "String",
          "PropertyChangeListener"
        ],
        [
          "PropertyChangeEvent"
        ]
      ],
      "types": [],
      "apicalls": [
        "equals",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.Hashtable.Hashtable()",
            "java.util.Vector.Vector()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.util.Vector.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean"
      ]
    },
    {
      "method": "initialize@56",
      "body": "public void initialize(){\n  final PLayer layer=getCanvas().getLayer();\n  final PNode animatedNode=PPath.createRectangle(0,0,100,80);\n  layer.addChild(animatedNode);\n  final GeneralPath path=new GeneralPath();\n  path.moveTo(0,0);\n  path.lineTo(300,300);\n  path.lineTo(300,0);\n  path.append(new Arc2D.Float(0,0,300,300,90,-90,Arc2D.OPEN),true);\n  path.closePath();\n  final PPath ppath=new PPath(path);\n  layer.addChild(ppath);\n  final PPositionPathActivity positionPathActivity=new PPositionPathActivity(5000,0,new PPositionPathActivity.Target(){\n    public void setPosition(    final double x,    final double y){\n      animatedNode.setOffset(x,y);\n    }\n  }\n);\n  positionPathActivity.setPositions(path);\n  positionPathActivity.setLoopCount(Integer.MAX_VALUE);\n  animatedNode.addActivity(positionPathActivity);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.Path2D.append(java.awt.Shape,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.geom.Path2D.closePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/piccolo2d.java/examples/src/main/java/org/piccolo2d/examples/PositionPathActivityExample.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [],
      "types": [
        "Path2D"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.Path2D.append(java.awt.Shape,boolean)",
            "java.awt.geom.Path2D.closePath()"
          ]
        }
      ],
      "keywords": [
        "d",
        "append",
        "close"
      ]
    },
    {
      "method": "hasFileSystem@81",
      "body": "/** \n * Test if the specified target peer has a file system service.\n * @param peer The target peer.\n * @return true if it has a file system service.\n */\npublic boolean hasFileSystem(final IPeerModel peer){\n  if (Protocol.isDispatchThread()) {\n    String services=null;\n    services=peer.getStringProperty(IPeerModelProperties.PROP_REMOTE_SERVICES);\n    if (services != null) {\n      for (      String service : services.split(\",\")) {\n        if (service != null && service.trim().equals(\"FileSystem\")) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  final boolean[] result=new boolean[1];\n  Protocol.invokeAndWait(new Runnable(){\n    @Override public void run(){\n      result[0]=hasFileSystem(peer);\n    }\n  }\n);\n  return result[0];\n}\n",
      "formalParam": [
        "IPeerModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/tcf/target_explorer/plugins/org.eclipse.tcf.te.tcf.filesystem.ui/src/org/eclipse/tcf/te/tcf/filesystem/ui/internal/wizards/NewNodeWizard.java",
      "classTypes": [
        "FSTreeNode",
        "IPeerModel",
        "NewNodeWizardPage"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.split(java.lang.String)",
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "split",
        "object"
      ]
    },
    {
      "method": "alreadyQuoted@270",
      "body": "public static boolean alreadyQuoted(String value){\n  if (value == null || value.length() == 0)   return false;\n  return (value.charAt(0) == '\\\"' && value.charAt(value.length() - 1) == '\\\"');\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/Pitbull/pitbull-servlet/src/main/java/org/jboss/pitbull/servlet/internal/ServerCookie.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "int"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "character",
        "lang",
        "integer"
      ]
    },
    {
      "method": "findByStatus@241",
      "body": "/** \n * Find all collections with the specified status flag \n * @param c\n * @param status see HarvestInstance.STATUS_...\n * @return\n * @throws SQLException\n */\npublic static List<Integer> findByStatus(Context c,int status) throws SQLException {\n  TableRowIterator tri=DatabaseManager.queryTable(c,\"harvested_collection\",\"SELECT * FROM harvested_collection WHERE harvest_status = ?\",status);\n  List<Integer> collectionIds=new ArrayList<Integer>();\n  while (tri.hasNext()) {\n    TableRow row=tri.next();\n    collectionIds.add(row.getIntColumn(\"collection_id\"));\n  }\n  return collectionIds;\n}\n",
      "formalParam": [
        "Context",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "List<Integer>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.util.List<java.lang.Integer>.add(java.lang.Integer)"
            ]
          }
        ]
      ],
      "returnType": "List<Integer>",
      "file": "./java_projects/GSOC--Dspace-testing/dspace-api/src/main/java/org/dspace/harvest/HarvestedCollection.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "Context"
        ]
      ],
      "types": [
        "Boolean",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "java.util.List<java.lang.Integer>.add(java.lang.Integer)"
          ]
        }
      ],
      "keywords": [
        "list",
        "integer",
        "add",
        "boolean"
      ]
    },
    {
      "method": "scanSources@125",
      "body": "/** \n * Scan all source class files for annotations and process them.\n */\npublic List<ClassDescription> scanSources() throws SCRDescriptorException, SCRDescriptorFailureException {\n  final List<ClassDescription> result=new ArrayList<ClassDescription>();\n  for (  final Source src : project.getSources()) {\n    if (src.getFile().getName().equals(\"package-info.java\")) {\n      log.debug(\"Skipping file \" + src.getClassName());\n      continue;\n    }\n    log.debug(\"Scanning class \" + src.getClassName());\n    try {\n      final Class<?> annotatedClass=project.getClassLoader().loadClass(src.getClassName());\n      final ClassDescription desc=this.processClass(annotatedClass,src.getFile().toString());\n      if (desc != null) {\n        this.allDescriptions.put(annotatedClass.getName(),desc);\n        if (desc.getDescriptions(ComponentDescription.class).size() > 0) {\n          result.add(desc);\n          log.debug(\"Found component description \" + desc + \" in \"+ annotatedClass.getName());\n        }\n      }\n else {\n        this.allDescriptions.put(annotatedClass.getName(),new ClassDescription(annotatedClass,GENERATED));\n      }\n    }\n catch (    final ClassNotFoundException cnfe) {\n      throw new SCRDescriptorFailureException(\"Unable to load compiled class: \" + src.getClassName(),cnfe);\n    }\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ]
      ],
      "returnType": "List<ClassDescription>",
      "file": "./java_projects/felix/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/ClassScanner.java",
      "classTypes": [
        "JarFile"
      ],
      "sorrformalparam": [
        [
          "Log",
          "IssueLog",
          "Project",
          "AnnotationProcessor"
        ]
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "array",
        "class"
      ]
    },
    {
      "method": "_lsr@607",
      "body": "/** \n * Wildcard a directory. The lists can contain Instruction that are matched against the given directory ${lsr;<dir>;<list>(;<list>)*} ${lsa;<dir>;<list>(;<list>)*}\n * @author aqute\n */\npublic String _lsr(String args[]){\n  return ls(args,true);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.isAbsolute()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.io.File.isDirectory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.listFiles()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File[]"
          },
          {
            "_call": "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String",
        "Properties",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getAbsoluteFile()",
              "java.io.File.isFile()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.io.File.isAbsolute()",
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.listFiles()",
              "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
              "java.io.File.getName()"
            ]
          },
          {
            "calls": [
              "$NOT$java.io.File.isAbsolute()",
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.listFiles()",
              "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.parseLong(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.util.Date.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.Long.parseLong(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.util.Date.toString()",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
              "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
            ]
          },
          {
            "calls": [
              "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
              "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
              "java.lang.Class<Tau_T>.getFields()",
              "java.util.Arrays.toString(java.lang.Object[])",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getAbsoluteFile()",
              "java.io.File.isDirectory()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/felix/bundleplugin/src/main/java/aQute/libg/sed/ReplacerAdapter.java",
      "classTypes": [
        "Link",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ],
        [
          "String[]"
        ],
        [
          "String[]"
        ],
        [
          "Properties"
        ],
        [
          "String[]"
        ]
      ],
      "types": [
        "Collection",
        "ArrayList"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.isAbsolute()",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.listFiles()",
            "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "java.io.File.getName()"
          ]
        },
        {
          "calls": [
            "$NOT$java.io.File.isAbsolute()",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.listFiles()",
            "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "execute@46",
      "body": "/** \n * @generated\n */\npublic Object execute(ExecutionEvent event) throws ExecutionException {\n  ISelection selection=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().getSelection();\n  if (selection instanceof IStructuredSelection) {\n    IStructuredSelection structuredSelection=(IStructuredSelection)selection;\n    if (structuredSelection.size() != 1) {\n      return null;\n    }\n    if (structuredSelection.getFirstElement() instanceof EditPart && ((EditPart)structuredSelection.getFirstElement()).getModel() instanceof View) {\n      EObject modelElement=((View)((EditPart)structuredSelection.getFirstElement()).getModel()).getElement();\n      List editPolicies=CanonicalEditPolicy.getRegisteredEditPolicies(modelElement);\n      for (Iterator it=editPolicies.iterator(); it.hasNext(); ) {\n        CanonicalEditPolicy nextEditPolicy=(CanonicalEditPolicy)it.next();\n        nextEditPolicy.refresh();\n      }\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "ExecutionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Object",
      "file": "./java_projects/gmf-tooling/examples/org.eclipse.gmf.examples.taipan.gmf.editor.rcp/src/org/eclipse/gmf/examples/taipan/gmf/editor/part/TaiPanDiagramUpdateCommand.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "List",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "iterator",
        "next",
        "util",
        "list"
      ]
    },
    {
      "method": "convertPhredQualByteArrayToFastqString@30",
      "body": "/** \n * @param array\n * @return fastq quality string from phred qual byte array\n */\npublic static String convertPhredQualByteArrayToFastqString(byte[] array){\n  StringBuilder builder=new StringBuilder(array.length);\n  for (  byte b : array) {\n    builder.append((char)(b + 33));\n  }\n  return builder.toString();\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/illumina2bam/src/uk/ac/sanger/npg/bam/util/BamUtils.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "byte[]"
        ]
      ],
      "types": [
        "Integer",
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "append",
        "character",
        "builder"
      ]
    },
    {
      "method": "lineIterator@688",
      "body": "/** \n * Return an Iterator for the lines in an <code>InputStream</code>, using the character encoding specified (or default encoding if null). <p> <code>LineIterator</code> holds a reference to the open <code>InputStream</code> specified here. When you have finished with the iterator you should close the stream to free internal resources. This can be done by closing the stream directly, or by calling {@link LineIterator#close()} or {@link LineIterator#closeQuietly(LineIterator)}. <p> The recommended usage pattern is: <pre> try { LineIterator it = IOUtils.lineIterator(stream, \"UTF-8\"); while (it.hasNext()) { String line = it.nextLine(); /// do something with line } } finally { IOUtils.closeQuietly(stream); } </pre>\n * @param input  the <code>InputStream</code> to read from, not null\n * @param encoding  the encoding to use, null means platform default\n * @return an Iterator of the lines in the reader, never null\n * @throws IllegalArgumentException if the input is null\n * @throws IOException if an I/O error occurs, such as if the encoding is invalid\n * @since Commons IO 1.2\n */\npublic static LineIterator lineIterator(InputStream input,String encoding) throws IOException {\n  Reader reader=null;\n  if (encoding == null) {\n    reader=new InputStreamReader(input);\n  }\n else {\n    reader=new InputStreamReader(input,encoding);\n  }\n  return new LineIterator(reader);\n}\n",
      "formalParam": [
        "InputStream",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "byte[]",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.String(byte[],java.lang.String)",
              "java.io.Writer.write(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.String(byte[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)",
              "java.io.Reader.read(char[])",
              "java.io.Writer.write(char[],int,int)",
              "java.io.Reader.read(char[])",
              "java.io.OutputStreamWriter.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.CharSequence.toString()",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.OutputStream.write(byte[])"
            ]
          },
          {
            "calls": [
              "java.lang.CharSequence.toString()",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Reader.read(char[])",
              "java.io.Writer.write(char[],int,int)",
              "java.io.Reader.read(char[])"
            ]
          }
        ]
      ],
      "returnType": "LineIterator",
      "file": "./java_projects/nebula/widgets/picture/org.eclipse.nebula.widgets.picture/src/org/eclipse/nebula/widgets/picture/internal/IOUtils.java",
      "classTypes": [
        "int",
        "int",
        "char[]",
        "char",
        "byte[]",
        "char",
        "char",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "byte[]",
          "Writer",
          "String"
        ],
        [
          "Reader",
          "OutputStream"
        ],
        [
          "CharSequence",
          "OutputStream",
          "String"
        ],
        [
          "InputStream"
        ],
        [
          "Reader"
        ]
      ],
      "types": [
        "UnsupportedEncodingException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "input",
        "reader",
        "encoding",
        "io",
        "string"
      ]
    },
    {
      "method": "contains@74",
      "body": "public boolean contains(double x,double y){\n  return getShape().contains(x,y);\n}\n",
      "formalParam": [
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Vector.listIterator(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ListIterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.ListIterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.awt.geom.Path2D.closePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Shape.contains(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/alice/core/geometry/PolygonSegment.java",
      "classTypes": [
        "java.util.Vector",
        "Vertex3d[]"
      ],
      "sorrformalparam": [],
      "types": [
        "ListIterator",
        "Double"
      ],
      "apicalls": [
        "listIterator",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.isEmpty()",
            "java.util.Vector.listIterator(int)",
            "java.util.ListIterator.hasNext()",
            "java.util.ListIterator.hasNext()",
            "java.awt.geom.Path2D.closePath()",
            "java.awt.Shape.contains(double,double)"
          ]
        }
      ],
      "keywords": [
        "util",
        "path",
        "next",
        "contains",
        "path2"
      ]
    },
    {
      "method": "spawnAll@146",
      "body": "public void spawnAll() throws InterruptedException {\n  for (int i=0; i < getAmount(); i++) {\n    spawnOne();\n    Thread.sleep(200);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.logging.Logger.warning(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/en/src/l1j/server/server/model/L1UbSpawn.java",
      "classTypes": [
        "int",
        "String",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Thread",
        "InterruptedException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.warning(java.lang.String)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "warning",
        "sleep"
      ]
    },
    {
      "method": "write@96",
      "body": "public void write(byte[] buffer,int offset,int length) throws IOException {\n  log.info(\"random-write(0x\" + Long.toHexString(getFilePointer()) + \",\"+ length+ \")\");\n  _file.write(buffer,offset,length);\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.toHexString(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.logging.Logger.info(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "void",
        "int",
        "int",
        "int",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.finest(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.finest(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toHexString(long)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Quercus/resin/src/main/java/com/caucho/vfs/SpyRandomAccessStream.java",
      "classTypes": [
        "Logger",
        "RandomAccessStream"
      ],
      "sorrformalparam": [
        [
          "char[]",
          "int",
          "int"
        ],
        [
          "int"
        ],
        [],
        [
          "long",
          "byte[]",
          "int",
          "int"
        ],
        [
          "byte[]",
          "int",
          "int"
        ],
        [
          "long",
          "byte[]",
          "int",
          "int"
        ]
      ],
      "types": [
        "Logger",
        "String",
        "Long"
      ],
      "apicalls": [
        "info",
        "toHexString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.toHexString(long)",
            "java.util.logging.Logger.info(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "logger",
        "long",
        "logging",
        "info",
        "string"
      ]
    },
    {
      "method": "readLoadServlet@123",
      "body": "public void readLoadServlet(int paragraphs) throws Exception {\n  int port=WebappManager.getPort();\n  long uniqueId=getReadOperations();\n  URL url=new URL(\"http\",\"localhost\",port,\"/help/loadtest?value=\" + uniqueId + \"&repeat=\"+ paragraphs);\n  InputStream input=url.openStream();\n  int nextChar;\n  long value=0;\n  boolean inFirstComment=true;\n  do {\n    nextChar=input.read();\n    if (inFirstComment) {\n      if (nextChar == '>') {\n        inFirstComment=false;\n      }\n else       if (Character.isDigit((char)nextChar)) {\n        value=value * 10 + (nextChar - '0');\n      }\n    }\n  }\n while (nextChar != '$');\n  input.close();\n  if (uniqueId != value) {\n    throw new UnexpectedValueException(uniqueId,value);\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.lang.String,java.lang.String,int,java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URL.openStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStream.read()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Character.isDigit(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.InputStream.read()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Character.isDigit(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String,java.lang.String,int,java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.InputStream.read()",
              "java.lang.Character.isDigit(char)",
              "java.io.InputStream.read()",
              "java.lang.Character.isDigit(char)",
              "java.io.InputStream.close()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String,java.lang.String,int,java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.InputStream.read()",
              "java.lang.Character.isDigit(char)",
              "java.io.InputStream.read()",
              "java.lang.Character.isDigit(char)",
              "java.io.InputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.ua/org.eclipse.ua.tests/help/org/eclipse/ua/tests/help/webapp/ParallelServerAccessTest.java",
      "classTypes": [
        "long",
        "long",
        "long",
        "Exception",
        "long"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "MalformedURLException",
        "InputStream",
        "URL"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String,java.lang.String,int,java.lang.String)",
            "java.net.URL.openStream()",
            "java.io.InputStream.read()",
            "java.lang.Character.isDigit(char)",
            "java.io.InputStream.read()",
            "java.lang.Character.isDigit(char)",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "lang",
        "input"
      ]
    },
    {
      "method": "toString@165",
      "body": "/** \n * @return String representation.\n */\npublic final String toString(){\n  StringBuffer buf=new StringBuffer(\"\");\n  for (int i=0; i < local_variable_table_length; i++) {\n    buf.append(local_variable_table[i].toString());\n    if (i < local_variable_table_length - 1) {\n      buf.append('\\n');\n    }\n  }\n  return buf.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/lcmc/src/lib/org/apache/bcel/classfile/LocalVariableTable.java",
      "classTypes": [
        "LocalVariable[]",
        "int"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "character"
      ]
    },
    {
      "method": "capitalize@244",
      "body": "/** \n * Capitalize first word of sentence\n * @param content\n * @return\n */\npublic static String capitalize(String content){\n  if (content.length() < 2) {\n    return content;\n  }\n  String first=content.substring(0,1).toUpperCase();\n  return first + content.substring(1);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Map",
        "Set<Player>",
        "String",
        "List",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map.entrySet()",
              "java.util.LinkedList.LinkedList(java.util.Collection)",
              "java.util.Collections.sort(java.util.List,java.util.Comparator)",
              "java.util.LinkedHashMap.LinkedHashMap()",
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.List<java.lang.String>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getStackTrace()",
              "java.lang.StackTraceElement.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/SimpleClans/src/main/java/net/sacredlabyrinth/phaed/simpleclans/Helper.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Map"
        ],
        [
          "Player"
        ],
        [
          "String[]"
        ],
        [
          "String"
        ],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "length",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.toUpperCase()",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "substring",
        "lang",
        "upper",
        "length",
        "case"
      ]
    },
    {
      "method": "handleRefresh@63",
      "body": "public Boolean handleRefresh(String refreshType,String objectId) throws ClassNotFoundException {\n  Object id=null;\n  if (refreshType.equals(\"ApplicationInstallation\"))   id=objectId;\n else   id=Long.valueOf(objectId);\n  @SuppressWarnings(\"unchecked\") Class<ModelEntity> clazz=(Class<ModelEntity>)Class.forName(\"com.openmeap.model.dto.\" + refreshType);\n  ModelEntity entity=(ModelEntity)modelManager.getModelService().findByPrimaryKey(clazz,id);\n  if (entity != null) {\n    modelManager.refresh(entity,null);\n  }\n  return true;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Long.valueOf(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Long"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Long.valueOf(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Boolean",
      "file": "./java_projects/OpenMEAP/server-side/openmeap-shared-serverside/src/com/openmeap/model/event/handler/ModelServiceRefreshHandler.java",
      "classTypes": [
        "ModelManager",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "E"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "equals",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Long.valueOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "equals",
        "string",
        "value",
        "format",
        "long"
      ]
    },
    {
      "method": "getReference@262",
      "body": "/** \n * Required method to support this class as a <CODE>Referenceable</CODE>.\n * @return a Reference to this data source\n * @throws NamingException if a JNDI error occurs\n */\npublic Reference getReference() throws NamingException {\n  String factoryName=\"com.mysql.jdbc.jdbc2.optional.MysqlDataSourceFactory\";\n  Reference ref=new Reference(getClass().getName(),factoryName,null);\n  ref.add(new StringRefAddr(NonRegisteringDriver.USER_PROPERTY_KEY,getUser()));\n  ref.add(new StringRefAddr(NonRegisteringDriver.PASSWORD_PROPERTY_KEY,this.password));\n  ref.add(new StringRefAddr(\"serverName\",getServerName()));\n  ref.add(new StringRefAddr(\"port\",\"\" + getPort()));\n  ref.add(new StringRefAddr(\"databaseName\",getDatabaseName()));\n  ref.add(new StringRefAddr(\"url\",getUrl()));\n  ref.add(new StringRefAddr(\"explicitUrl\",String.valueOf(this.explicitUrl)));\n  try {\n    storeToRef(ref);\n  }\n catch (  SQLException sqlEx) {\n    throw new NamingException(sqlEx.getMessage());\n  }\n  return ref;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.valueOf(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Reference",
      "file": "./java_projects/ChenSun/Phase2/jars/mysql-connector-java-5.1.18/src/com/mysql/jdbc/jdbc2/optional/MysqlDataSource.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.lang.String.valueOf(boolean)"
          ]
        }
      ],
      "keywords": [
        "name",
        "string"
      ]
    },
    {
      "method": "pipe@13",
      "body": "public static void pipe(InputStream read,OutputStream write) throws IOException {\n  byte[] bytes=new byte[1024];\n  int count;\n  while ((count=read.read(bytes)) > 0) {\n    write.write(bytes,0,count);\n  }\n  write.flush();\n  read.close();\n}\n",
      "formalParam": [
        "InputStream",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/pp-rebel/pp-rebel/src/main/java/com/polopoly/javarebel/fs/FSUtil.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "InputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.flush()",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "test_ConstructorLjava_lang_String@34",
      "body": "/** \n * @tests java.lang.RuntimeException#RuntimeException(java.lang.String)\n */\npublic void test_ConstructorLjava_lang_String(){\n  RuntimeException e=new RuntimeException(\"fixture\");\n  assertEquals(\"fixture\",e.getMessage());\n  assertNull(e.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.RuntimeException.RuntimeException(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.RuntimeException.RuntimeException()",
              "java.lang.Throwable.getMessage()",
              "java.lang.Throwable.getLocalizedMessage()",
              "java.lang.Throwable.getCause()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/RuntimeExceptionTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.RuntimeException.RuntimeException(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "string",
        "message",
        "cause"
      ]
    },
    {
      "method": "append@444",
      "body": "public void append(char[] c,int start,int len){\n  if (_inputStart >= 0) {\n    unshare(len);\n  }\n  _resultString=null;\n  _resultArray=null;\n  char[] curr=_currentSegment;\n  int max=curr.length - _currentSize;\n  if (max >= len) {\n    System.arraycopy(c,start,curr,_currentSize,len);\n    _currentSize+=len;\n  }\n else {\n    if (max > 0) {\n      System.arraycopy(c,start,curr,_currentSize,max);\n      start+=max;\n      len-=max;\n    }\n    expand(len);\n    System.arraycopy(c,start,_currentSegment,0,len);\n    _currentSize=len;\n  }\n}\n",
      "formalParam": [
        "char[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.String.getChars(int,int,char[],int)",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.lang.Math.min(int,int)",
              "java.lang.String.getChars(int,int,char[],int)"
            ]
          },
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.String.getChars(int,int,char[],int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/calabash-android/ruby-gem/test-server/instrumentation-backend/src/sh/calaba/org/codehaus/jackson/util/TextBuffer.java",
      "classTypes": [
        "String",
        "int",
        "char[]",
        "int",
        "char[]",
        "int",
        "boolean",
        "int",
        "ArrayList<char[]>",
        "char[]"
      ],
      "sorrformalparam": [
        [
          "String",
          "int",
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Math",
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "java.lang.Math.min(int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "array",
        "boolean"
      ]
    },
    {
      "method": "startServer@187",
      "body": "/** \n * Accepts sync connection form server side.\n */\npublic synchronized void startServer(){\n  long timeout=settings.getTimeout();\n  try {\n    serverSocket.setSoTimeout((int)timeout);\n    logWriter.println(\"[SYNC] Accepting socket connection\");\n    clientSocket=serverSocket.accept();\n    logWriter.println(\"[SYNC] Accepted socket connection\");\n    clientSocket.setSoTimeout((int)timeout);\n    out=new DataOutputStream(clientSocket.getOutputStream());\n    in=new DataInputStream(clientSocket.getInputStream());\n  }\n catch (  IOException e) {\n    throw new TestErrorException(\"[SYNC] Exception in accepting socket sync connection\",e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.ServerSocket.setSoTimeout(int)",
            "_throws": [
              "java.net.SocketException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.ServerSocket.accept()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.Socket"
          },
          {
            "_call": "java.net.Socket.setSoTimeout(int)",
            "_throws": [
              "java.net.SocketException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.Socket.getOutputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.OutputStream"
          },
          {
            "_call": "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.Socket.getInputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "void",
        "void",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.ServerSocket.ServerSocket(int)",
              "java.net.ServerSocket.getLocalPort()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.Socket.Socket(java.lang.String,int)",
              "java.net.Socket.setSoTimeout(int)",
              "java.net.Socket.getOutputStream()",
              "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
              "java.net.Socket.getInputStream()",
              "java.io.DataInputStream.DataInputStream(java.io.InputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeUTF(java.lang.String)",
              "java.io.DataOutputStream.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataInputStream.readUTF()",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FilterOutputStream.close()",
              "java.io.FilterInputStream.close()",
              "java.net.Socket.close()",
              "java.net.ServerSocket.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/jdktools/modules/jpda/src/test/java/org/apache/harmony/jpda/tests/share/JPDADebuggeeSynchronizer.java",
      "classTypes": [
        "TestOptions"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String"
        ],
        [
          "String"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "accept"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.ServerSocket.setSoTimeout(int)",
            "java.net.ServerSocket.accept()",
            "java.net.Socket.setSoTimeout(int)",
            "java.net.Socket.getOutputStream()",
            "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "java.net.Socket.getInputStream()",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "input",
        "socket",
        "server"
      ]
    },
    {
      "method": "writeTo@122",
      "body": "/** \n * Write all rows added to the named file. \n */\npublic void writeTo(File file) throws IOException {\n  OutputStream out=new FileOutputStream(file);\n  try {\n    writeTo(out);\n  }\n  finally {\n    out.close();\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/trevni/java/core/src/main/java/org/apache/trevni/ColumnFileWriter.java",
      "classTypes": [
        "int",
        "byte[]",
        "long",
        "ColumnFileMetaData"
      ],
      "sorrformalparam": [],
      "types": [
        "OutputStream",
        "IOException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "io",
        "output"
      ]
    },
    {
      "method": "getBytes@374",
      "body": "public static byte[] getBytes(String s){\n  try {\n    return s.getBytes(__ISO_8859_1);\n  }\n catch (  Exception e) {\n    LOG.warn(e);\n    return s.getBytes();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.String.getBytes()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.getBytes(java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "byte[]",
        "boolean",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.StringBuilder.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.toCharArray()",
              "java.lang.String.String(char[])"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/jetty.project/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
      "classTypes": [
        "Logger",
        "String",
        "String",
        "char[]",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "char[]",
          "int",
          "int"
        ],
        [
          "StringBuilder",
          "String",
          "int",
          "int"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "UnsupportedEncodingException"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.String.getBytes()"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "lang",
        "bytes",
        "string",
        "get"
      ]
    },
    {
      "method": "testGetCurrentUserRoles@116",
      "body": "/** \n * Test getting current user roles\n */\n@Test public void testGetCurrentUserRoles() throws Exception {\n  System.out.println(\">>> Loading roles for current user.\");\n  UserTransaction tx=getUserTransaction();\n  try {\n    AdminEJBLocal instance=(AdminEJBLocal)getEJBInstance(AdminEJB.class.getSimpleName());\n    tx.begin();\n    List<Role> result=instance.getCurrentUserRoles();\n    tx.commit();\n    assertNotNull(\"List of roles for current user is null.\",result);\n    System.out.println(\">>> Found \" + result.size() + \" roles for current user.\");\n  }\n catch (  Exception e) {\n    tx.rollback();\n    fail(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/services/ejbs/admin/src/test/java/org/sola/services/ejbs/admin/AdminEJBIT.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "PrintStream",
        "Character",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "message",
        "get",
        "println"
      ]
    },
    {
      "method": "testString@21",
      "body": "public void testString() throws Exception {\n  MVELDateCoercion co=new MVELDateCoercion();\n  assertTrue(co.canConvertFrom(Date.class));\n  SimpleDateFormat df=new SimpleDateFormat(\"dd-MMM-yyyy\");\n  String dt=df.format(df.parse(\"10-Jul-1974\"));\n  Date dt_=DateUtils.parseDate(dt);\n  assertEquals(dt_,co.convertFrom(dt));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.parse(java.lang.String)",
            "_throws": [
              "java.text.ParseException"
            ],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0.x/drools-core/src/test/java/org/drools/base/mvel/MVELDateCoercionTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "SimpleDateFormat",
        "String",
        "DateFormat",
        "Date"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)",
            "java.text.DateFormat.format(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "text",
        "format",
        "date",
        "parse",
        "exception"
      ]
    },
    {
      "method": "addPattern@390",
      "body": "public String addPattern(String s,String pattern){\n  if (s == null)   s=\"\";\n else   s=s.trim();\n  if (!s.contains(pattern)) {\n    if (s.length() != 0)     s=s + \"|\";\n    s=s + pattern;\n  }\n  return s;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.contains(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.lang.String.split(java.lang.String)",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jetty-project/jetty-maven-plugin/src/main/java/org/mortbay/jetty/plugin/JettyWebAppContext.java",
      "classTypes": [
        "File",
        "String",
        "String",
        "String",
        "List<File>",
        "Logger",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ]
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "contains",
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.contains(java.lang.CharSequence)"
          ]
        },
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "length",
        "sequence",
        "boolean",
        "trim"
      ]
    },
    {
      "method": "NoteMetadata@210",
      "body": "/** \n * Performs a deep copy on <i>other</i>.\n */\npublic NoteMetadata(NoteMetadata other){\n  System.arraycopy(other.__isset_vector,0,__isset_vector,0,other.__isset_vector.length);\n  if (other.isSetGuid()) {\n    this.guid=other.guid;\n  }\n  if (other.isSetTitle()) {\n    this.title=other.title;\n  }\n  this.contentLength=other.contentLength;\n  this.created=other.created;\n  this.updated=other.updated;\n  this.updateSequenceNum=other.updateSequenceNum;\n  if (other.isSetNotebookGuid()) {\n    this.notebookGuid=other.notebookGuid;\n  }\n  if (other.isSetTagGuids()) {\n    List<String> __this__tagGuids=new ArrayList<String>();\n    for (    String other_element : other.tagGuids) {\n      __this__tagGuids.add(other_element);\n    }\n    this.tagGuids=__this__tagGuids;\n  }\n  if (other.isSetAttributes()) {\n    this.attributes=new com.evernote.edam.type.NoteAttributes(other.attributes);\n  }\n  if (other.isSetLargestResourceMime()) {\n    this.largestResourceMime=other.largestResourceMime;\n  }\n  this.largestResourceSize=other.largestResourceSize;\n}\n",
      "formalParam": [
        "NoteMetadata"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "NoteMetadata"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/evernote-sdk-android/src/com/evernote/edam/notestore/NoteMetadata.java",
      "classTypes": [
        "long",
        "TStruct",
        "TField",
        "TField"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        []
      ],
      "types": [
        "List",
        "System",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "list",
        "arraycopy",
        "lang"
      ]
    },
    {
      "method": "attachSource@86",
      "body": "/** \n * @see IPackageFragmentRoot\n */\npublic void attachSource(IPath sourcePath,IPath rootPath,IProgressMonitor monitor) throws JavaScriptModelException {\n  try {\n    verifyAttachSource(sourcePath);\n    if (monitor != null) {\n      monitor.beginTask(Messages.element_attachingSource,2);\n    }\n    SourceMapper oldMapper=getSourceMapper();\n    IWorkspace workspace=ResourcesPlugin.getWorkspace();\n    boolean rootNeedsToBeClosed=false;\n    if (sourcePath == null) {\n      rootNeedsToBeClosed=true;\n      setSourceMapper(null);\n    }\n else {\n      IPath storedSourcePath=getSourceAttachmentPath();\n      IPath storedRootPath=getSourceAttachmentRootPath();\n      if (monitor != null) {\n        monitor.worked(1);\n      }\n      if (storedSourcePath != null) {\n        if (!(storedSourcePath.equals(sourcePath) && (rootPath != null && rootPath.equals(storedRootPath)) || storedRootPath == null)) {\n          rootNeedsToBeClosed=true;\n        }\n      }\n      Object target=JavaModel.getTarget(workspace.getRoot(),sourcePath,false);\n      if (target == null) {\n        throw new JavaScriptModelException(new JavaModelStatus(IJavaScriptModelStatusConstants.INVALID_PATH,sourcePath));\n      }\n      SourceMapper mapper=createSourceMapper(sourcePath,rootPath);\n      if (rootPath == null && mapper.rootPath != null) {\n        rootPath=new Path(mapper.rootPath);\n      }\n      setSourceMapper(mapper);\n    }\n    if (sourcePath == null) {\n      Util.setSourceAttachmentProperty(getPath(),null);\n    }\n else {\n      Util.setSourceAttachmentProperty(getPath(),sourcePath.toString() + (rootPath == null ? \"\" : (ATTACHMENT_PROPERTY_DELIMITER + rootPath.toString())));\n    }\n    if (rootNeedsToBeClosed) {\n      if (oldMapper != null) {\n        oldMapper.close();\n      }\n      BufferManager manager=BufferManager.getDefaultBufferManager();\n      Enumeration openBuffers=manager.getOpenBuffers();\n      while (openBuffers.hasMoreElements()) {\n        IBuffer buffer=(IBuffer)openBuffers.nextElement();\n        IOpenable possibleMember=buffer.getOwner();\n        if (isAncestorOf((IJavaScriptElement)possibleMember)) {\n          buffer.close();\n        }\n      }\n      if (monitor != null) {\n        monitor.worked(1);\n      }\n    }\n  }\n catch (  JavaScriptModelException e) {\n    Util.setSourceAttachmentProperty(getPath(),null);\n    throw e;\n  }\n finally {\n    if (monitor != null) {\n      monitor.done();\n    }\n  }\n}\n",
      "formalParam": [
        "IPath",
        "IPath",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IPath",
        "IPath"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hifivetools/eclipse/org.eclipse.wst.jsdt.core/src/org/eclipse/wst/jsdt/internal/core/PackageFragmentRoot.java",
      "classTypes": [
        "char",
        "Object",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Enumeration"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "enumeration",
        "boolean"
      ]
    },
    {
      "method": "testGetRegisteredProviders@29",
      "body": "/** \n * Test for SyncFactory.getRegisteredProviders(). Regression for HARMONY-6345.\n * @throws SyncFactoryException\n */\npublic void testGetRegisteredProviders() throws SyncFactoryException {\n  Enumeration<SyncProvider> providers=SyncFactory.getRegisteredProviders();\n  while (providers.hasMoreElements()) {\n    SyncFactory.getInstance(providers.nextElement().getProviderID());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.nextElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.sql.rowset.spi.SyncProvider"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/sql/src/test/java/org/apache/harmony/sql/tests/internal/rowset/SyncFactoryTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Enumeration"
      ],
      "apicalls": [
        "nextElement",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()",
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.nextElement()",
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "element",
        "elements",
        "next"
      ]
    },
    {
      "method": "draw@206",
      "body": "final public void draw(Graphics2D g2){\n  if (isVisible) {\n    button.setSelected(geo.doHighlighting());\n    if (!Application.MAC_OS) {\n      button.setBackground(geo.doHighlighting() ? Color.blue : Color.white);\n    }\n  }\n}\n",
      "formalParam": [
        "Graphics2D"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.setSelected(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setBackground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.awt.event.InputEvent.isMetaDown()",
              "javax.swing.JComponent.getX()",
              "javax.swing.JComponent.getY()",
              "java.awt.event.MouseEvent.translatePoint(int,int)"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.event.InputEvent.isMetaDown()",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getX()",
              "javax.swing.JComponent.getY()",
              "java.awt.event.MouseEvent.translatePoint(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getX()",
              "javax.swing.JComponent.getY()",
              "java.awt.event.MouseEvent.translatePoint(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.JComponent.getX()",
              "javax.swing.JComponent.getY()",
              "java.awt.event.MouseEvent.translatePoint(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getX()",
              "javax.swing.JComponent.getY()",
              "java.awt.event.MouseEvent.translatePoint(int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/euclidian/DrawButton.java",
      "classTypes": [
        "ButtonListener"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ]
      ],
      "types": [],
      "apicalls": [
        "setBackground",
        "setSelected"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.setSelected(boolean)",
            "javax.swing.JComponent.setBackground(java.awt.Color)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "background"
      ]
    },
    {
      "method": "getSequenceTemplate@315",
      "body": "public Mediator getSequenceTemplate(String key){\n  Object o=localEntries.get(key);\n  if (o != null && o instanceof Mediator) {\n    return (Mediator)o;\n  }\n else {\n    Mediator m=getConfiguration().getSequence(key);\n    if (m instanceof TemplateMediator) {\n      TemplateMediator templateMediator=(TemplateMediator)m;\nsynchronized (m) {\n        if (!templateMediator.isInitialized()) {\n          templateMediator.init(synEnv);\n        }\n      }\n    }\n    localEntries.put(key,m);\n    return m;\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "Mediator",
        "Mediator",
        "Endpoint"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Mediator",
      "file": "./java_projects/platform/dependencies/synapse/2.1.0-wso2v6/modules/core/src/test/java/org/apache/synapse/TestMessageContext.java",
      "classTypes": [
        "EndpointReference",
        "Stack<FaultHandler>",
        "Map<String,Object>",
        "SynapseConfiguration",
        "SynapseEnvironment",
        "Map",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Map"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "util",
        "put"
      ]
    },
    {
      "method": "hash_init@225",
      "body": "/** \n * Initialize a hash context.\n */\npublic HashContext hash_init(Env env,String algorithm,@Optional int options,@Optional StringValue keyString){\n  try {\n    algorithm=getAlgorithm(algorithm);\n    if (options == HASH_HMAC) {\n      algorithm=\"Hmac\" + algorithm;\n      Mac mac=Mac.getInstance(algorithm);\n      int keySize=64;\n      if (keyString != null) {\n        keySize=keyString.length();\n      }\n      byte[] keyBytes=new byte[keySize];\n      for (int i=0; i < keyString.length(); i++) {\n        keyBytes[i]=(byte)keyString.charAt(i);\n      }\n      Key key=new SecretKeySpec(keyBytes,\"dsa\");\n      mac.init(key);\n      return new HashMacContext(mac);\n    }\n else {\n      MessageDigest md=MessageDigest.getInstance(algorithm);\n      return new HashDigestContext(md);\n    }\n  }\n catch (  Exception e) {\n    env.error(L.l(\"hash_init: '{0}' is an unknown algorithm\",algorithm));\n    return null;\n  }\n}\n",
      "formalParam": [
        "Env",
        "String",
        "int",
        "StringValue"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.security.MessageDigest.getInstance(java.lang.String)",
                "_throws": [
                  "java.security.NoSuchAlgorithmException"
                ],
                "node": "DAPICall",
                "_returns": "java.security.MessageDigest"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.crypto.Mac.getInstance(java.lang.String)",
                "_throws": [
                  "java.security.NoSuchAlgorithmException"
                ],
                "node": "DAPICall",
                "_returns": "javax.crypto.Mac"
              },
              {
                "_call": "javax.crypto.Mac.init(java.security.Key)",
                "_throws": [
                  "java.security.InvalidKeyException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Value",
        "Value",
        "int",
        "Value",
        "Value"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.update(byte[],int,int)",
              "java.security.MessageDigest.digest()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.update(byte)",
              "java.security.MessageDigest.digest()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.io.InputStream.read(byte[],int,int)",
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.keySet()",
              "java.util.HashMap<java.lang.String,java.lang.String>.values()",
              "java.security.Security.getAlgorithms(java.lang.String)",
              "$NOT$java.util.Collection<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ]
      ],
      "returnType": "HashContext",
      "file": "./java_projects/Bianca/bianca/src/main/java/com/clevercloud/bianca/lib/HashModule.java",
      "classTypes": [
        "L10N"
      ],
      "sorrformalparam": [
        [
          "Env",
          "String",
          "Path",
          "boolean"
        ],
        [
          "Env",
          "String",
          "StringValue",
          "boolean"
        ],
        [
          "Env",
          "HashContext",
          "InputStream",
          "int"
        ],
        [
          "Env"
        ],
        [
          "Env",
          "HashContext",
          "Path"
        ]
      ],
      "types": [
        "InvalidKeyException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "javax.crypto.Mac.getInstance(java.lang.String)",
            "javax.crypto.Mac.init(java.security.Key)"
          ]
        },
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.security.MessageDigest.getInstance(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "crypto",
        "mac"
      ]
    },
    {
      "method": "test_applyFilterOnComboGroup@12",
      "body": "public void test_applyFilterOnComboGroup(){\n  TableModel model=new DefaultTableModel(new String[][]{{\"1\",\"A\"},{\"2\",\"B\"},{\"3\",\"C\"},{\"1\",\"A\"}},new String[]{\"colA\",\"colB\"});\n  JTable jTable=new JTable(model);\n  Table table=new Table(jTable);\n  TableFilter tableFilter=new TableFilter(model);\n  jTable.setModel(tableFilter);\n  TableFilterCombo comboColA=new TableFilterCombo(tableFilter,0);\n  TableFilterCombo comboColB=new TableFilterCombo(tableFilter,1);\n  comboColA.setAutoApplyFilter(false);\n  comboColB.setAutoApplyFilter(false);\n  TableFilterComboGroup group=new TableFilterComboGroup();\n  group.add(comboColA);\n  group.add(comboColB);\n  assertTrue(table.contentEquals(new String[][]{{\"1\",\"A\"},{\"2\",\"B\"},{\"3\",\"C\"},{\"1\",\"A\"}}));\n  comboColA.setSelectedItem(\"1\");\n  comboColB.setSelectedItem(\"A\");\n  group.applyFilter();\n  assertTrue(table.contentEquals(new String[][]{{\"1\",\"A\"},{\"1\",\"A\"}}));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTable.JTable(javax.swing.table.TableModel)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JTable.setModel(javax.swing.table.TableModel)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/codjo-gui-toolkit/src/test/java/net/codjo/gui/toolkit/table/TableFilterComboGroupTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "TableModel"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTable.JTable(javax.swing.table.TableModel)",
            "javax.swing.JTable.setModel(javax.swing.table.TableModel)"
          ]
        }
      ],
      "keywords": [
        "set"
      ]
    },
    {
      "method": "get@57",
      "body": "public Context get(String params){\n  return get(new Scanner(params));\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Scanner.Scanner(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Scanner.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Scanner.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_V"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Iterable<Context>",
        "None",
        "Context"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.values()",
              "java.util.Collections.unmodifiableCollection(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Scanner.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Scanner.hasNext()",
              "java.util.Scanner.next()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Context",
      "file": "./java_projects/mpd-2012-i41N/aula12-command-shell-args-and-contexts-dyn/src/main/java/cmdsh/core/Context.java",
      "classTypes": [
        "String",
        "Map<String,Context>",
        "ICommand"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "Object"
        ],
        [
          "Scanner"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Scanner.Scanner(java.lang.String)",
            "java.util.Scanner.hasNext()",
            "java.util.Scanner.next()",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Scanner.Scanner(java.lang.String)",
            "java.util.Scanner.hasNext()"
          ]
        }
      ],
      "keywords": [
        "object",
        "get"
      ]
    },
    {
      "method": "setToDefault@1177",
      "body": "/** \n * Sets the current value of the property with the given name back to its default value. Has no effect if the property does not have its own current value. The given name must not be <code>null</code>. <p> Note that the recommended way of re-initializing a property to the appropriate default value is to call <code>setToDefault</code>. This is implemented by removing the named value from the object,  thereby exposing the default value. </p> <p> A property change event is always reported. In the event object, the property name is the name of the property, and the old and new values are either strings, or <code>null</code>  indicating the default-default value. </p>\n * @param name the name of the property\n */\npublic void setToDefault(String name){\n  Object oldPropertyValue=properties.remove(name);\n  if (oldPropertyValue != null) {\n    dirty=true;\n  }\n  String newValue=defaultProperties.getProperty(name,null);\n  firePropertyChangeEvent(name,oldPropertyValue,newValue);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable<java.lang.Object,java.lang.Object>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "float"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.Float.parseFloat(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.runtime/bundles/org.eclipse.core.runtime/src/org/eclipse/core/runtime/Preferences.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Object",
        "Properties"
      ],
      "apicalls": [
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable<java.lang.Object,java.lang.Object>.remove(java.lang.Object)",
            "java.util.Properties.getProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "object",
        "properties",
        "util"
      ]
    },
    {
      "method": "pass@183",
      "body": "public static synchronized void pass(){\n  Sysout.println(\"The test passed.\");\n  Sysout.println(\"The test is over, hit  Ctl-C to stop Java VM\");\n  if (mainThread == Thread.currentThread()) {\n    theTestPassed=true;\n    throw new TestPassedException();\n  }\n  theTestPassed=true;\n  testGeneratedInterrupt=true;\n  mainThread.interrupt();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "None",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.setVisible(boolean)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.TextArea.TextArea(java.lang.String,int,int,int)",
              "java.awt.Container.add(java.lang.String,java.awt.Component)",
              "java.awt.TextArea.TextArea(java.lang.String,int,int,int)",
              "java.awt.Container.add(java.lang.String,java.awt.Component)",
              "java.awt.Window.pack()",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.TextArea.append(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.setVisible(boolean)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/awt/Frame/UnfocusableMaximizedFrameResizablity/UnfocusableMaximizedFrameResizablity.java",
      "classTypes": [
        "boolean",
        "Thread",
        "boolean",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ],
        [
          "String"
        ],
        [
          "Frame",
          "String"
        ],
        [],
        [
          "String"
        ],
        []
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "current"
      ]
    },
    {
      "method": "ConfigManager@25",
      "body": "public ConfigManager(MobLoot plugin){\n  _plugin=plugin;\n  _configFile=new File(_plugin.getDataFolder() + File.separator + \"General.yml\");\n  _worldDropTable=new HashMap<String,HashMap<CreatureID,ArrayList<ItemInfo>>>();\n  loadConfig();\n}\n",
      "formalParam": [
        "MobLoot"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.exists()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.io.File.exists()",
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/MobLoot/src/com/stevenmattera/MobLoot/ConfigManager.java",
      "classTypes": [
        "FileConfiguration",
        "MobLoot",
        "File"
      ],
      "sorrformalparam": [
        [
          "String",
          "CreatureID",
          "String[]"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.io.File.exists()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.io.File.exists()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "exists"
      ]
    },
    {
      "method": "addIngredient@149",
      "body": "public void addIngredient(){\n  String IngredientString=null;\n  String AmountString=null;\n  Boolean firstStep=true;\n  if ((counterIngredient - (int)getItemId(R.id.IngredientBox0)) / 25 <= (counterDelete - 1)) {\n    IngredientString=\" \";\n    AmountString=\" \";\n    firstStep=false;\n  }\n else {\n    EditText Ingredient=(EditText)getActivity().findViewById(counterIngredient);\n    EditText Amount=(EditText)getActivity().findViewById(counterAmount);\n    if (Ingredient != null && Amount != null) {\n      IngredientString=Ingredient.getText().toString();\n      AmountString=Amount.getText().toString();\n    }\n else {\n      IngredientString=\" \";\n      AmountString=\" \";\n    }\n  }\n  if ((IngredientString != null) && (IngredientString.length() > 0)) {\n    if ((AmountString != null) && (AmountString.length() > 0)) {\n      if (firstStep) {\n        IngredientString=null;\n        AmountString=null;\n        EditText IngredientED=(EditText)getActivity().findViewById(counterIngredient);\n        EditText AmountED=(EditText)getActivity().findViewById(counterAmount);\n        Spinner MeasurementS=(Spinner)getActivity().findViewById(counterMeasurement);\n        Button ButtonEdit=(Button)getActivity().findViewById(counterEdit);\n        Button ButtonRemove=(Button)getActivity().findViewById(counterRemove);\n        IngredientED.setFocusable(false);\n        AmountED.setFocusable(false);\n        MeasurementS.setFocusable(false);\n        MeasurementS.setEnabled(false);\n        IngredientED.setTextColor(Color.LTGRAY);\n        AmountED.setTextColor(Color.LTGRAY);\n        ButtonEdit.setVisibility(View.VISIBLE);\n        ButtonEdit.setOnClickListener(listenerOfEditButton);\n        ButtonRemove.setVisibility(View.VISIBLE);\n        ButtonRemove.setOnClickListener(listenerOfRemoveButton);\n      }\n      counterIngredient+=25;\n      counterAmount+=25;\n      counterMeasurement+=25;\n      counterEdit+=25;\n      counterRow+=25;\n      counterRemove+=25;\n      TableLayout table=(TableLayout)getActivity().findViewById(R.id.IngredientsTable);\n      TableRow rowIngredient=new TableRow(getActivity());\n      EditText tIngredient=new EditText(getActivity());\n      tIngredient.setHint(\"Ingredient\");\n      tIngredient.setInputType(InputType.TYPE_CLASS_TEXT);\n      tIngredient.setId(counterIngredient);\n      Button removeButton=new Button(getActivity());\n      removeButton.setText(R.string.Remove);\n      removeButton.setId(counterRemove);\n      removeButton.setOnClickListener(listenerOfRemoveButton);\n      rowIngredient.setId(counterRow);\n      rowIngredient.addView(tIngredient);\n      rowIngredient.addView(removeButton);\n      table.addView(rowIngredient,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n      TableRow rowAmount=new TableRow(getActivity());\n      EditText tAmount=new EditText(getActivity());\n      tAmount.setHint(\"Quantity (weight, volume etc)\");\n      tAmount.setId(counterAmount);\n      Button editButton=new Button(getActivity());\n      editButton.setVisibility(View.INVISIBLE);\n      editButton.setText(R.string.Edit);\n      editButton.setId(counterEdit);\n      editButton.setOnClickListener(listenerOfEditButton);\n      rowAmount.setId(counterRow + remember);\n      rowAmount.addView(tAmount);\n      rowAmount.addView(editButton);\n      table.addView(rowAmount,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n      TableRow rowMeasurement=new TableRow(getActivity());\n      Spinner tMeasurement=new Spinner(getActivity());\n      tMeasurement.setPrompt(\"Measurement\");\n      ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.WeightMeasurement,android.R.layout.simple_spinner_item);\n      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n      tMeasurement.setAdapter(adapter);\n      tMeasurement.setId(counterMeasurement);\n      rowMeasurement.setId(counterRow + remember + 1);\n      rowMeasurement.addView(tMeasurement);\n      table.addView(rowMeasurement,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n    }\n else {\n      IngredientString=null;\n      AmountString=null;\n      new AlertDialog.Builder(getActivity()).setTitle(\"Fill in all fields\").setMessage(\"Please enter an amount\").setPositiveButton(\"Yes\",new DialogInterface.OnClickListener(){\n        public void onClick(        DialogInterface dialog,        int which){\n          dialog.dismiss();\n        }\n      }\n).show();\n    }\n  }\n else {\n    IngredientString=null;\n    AmountString=null;\n    new AlertDialog.Builder(getActivity()).setTitle(\"Fill in all fields\").setMessage(\"Please enter an ingredient\").setPositiveButton(\"Ok\",new DialogInterface.OnClickListener(){\n      public void onClick(      DialogInterface dialog,      int which){\n        dialog.dismiss();\n      }\n    }\n).show();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Cookbook/Cookbook/src/com/cookbook/activity/AddRecipeActivity.java",
      "classTypes": [
        "int",
        "OnClickListener",
        "int",
        "int",
        "OnClickListener",
        "OnClickListener",
        "int"
      ],
      "sorrformalparam": [
        [
          "Bundle"
        ]
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "lang",
        "length"
      ]
    },
    {
      "method": "getAudioInputStream@722",
      "body": "public static AudioInputStream getAudioInputStream(AudioFormat targetFormat,AudioInputStream sourceStream){\n  return getAudioInputStreamImpl(targetFormat,sourceStream);\n}\n",
      "formalParam": [
        "AudioFormat",
        "AudioInputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "AudioInputStream",
        "AudioFileFormat.Type[]",
        "AudioFormat.Encoding[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collection<javax.sound.sampled.AudioFormat.Encoding>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<javax.sound.sampled.AudioFileFormat.Type>.HashSet<Type>()",
              "java.util.Iterator.hasNext()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.add(javax.sound.sampled.AudioFileFormat.Type)",
              "java.util.Iterator.hasNext()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.size()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()",
              "java.util.Collection<javax.sound.sampled.AudioFormat.Encoding>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "AudioInputStream",
      "file": "./java_projects/Konsolenradio/src/main/resources/tritonus/src/classes/javax/sound/sampled/AudioSystem.java",
      "classTypes": [
        "Object",
        "Collection<AudioFormat.Encoding>",
        "Set<Line.Info>",
        "AudioFormat",
        "Set<Line.Info>"
      ],
      "sorrformalparam": [
        [
          "FormatConversionProvider"
        ],
        [
          "AudioFileFormat.Type"
        ],
        [
          "AudioFormat.Encoding",
          "AudioInputStream"
        ],
        [
          "AudioInputStream"
        ],
        [
          "AudioFormat"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "boolean"
      ]
    },
    {
      "method": "acceptsEvent@82",
      "body": "public boolean acceptsEvent(String type,Object event){\n  if (\"message\".equals(type)) {\n    String[] message=(String[])event;\n    return partnerLink.equals(message[0]) && portType.equals(message[1]) && operation.equals(message[2]);\n  }\n  return false;\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0.x/drools-process/drools-bpel/src/main/java/org/drools/bpel/core/BPELReceive.java",
      "classTypes": [
        "String",
        "TargetLink[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "isLinux@1278",
      "body": "/** \n * true if running on linux.\n */\nstatic public boolean isLinux(){\n  return System.getProperty(\"os.name\").indexOf(\"Linux\") != -1;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "File",
        "int",
        "void",
        "File",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getScreenSize()",
              "java.io.File.getAbsolutePath()",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getScreenSize()",
              "java.io.File.getAbsolutePath()",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.createImage(java.lang.String)",
              "java.awt.Frame.setIconImage(java.awt.Image)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)",
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getMenuShortcutKeyMask()",
              "javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/maple-ide/app/src/processing/app/Base.java",
      "classTypes": [
        "boolean",
        "File",
        "File",
        "Editor",
        "HashSet<File>",
        "HashMap<String,Target>",
        "String",
        "File"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String"
        ],
        [
          "Frame"
        ],
        [],
        [
          "JRootPane",
          "ActionListener"
        ],
        []
      ],
      "types": [
        "System",
        "Integer",
        "String"
      ],
      "apicalls": [
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "system",
        "string",
        "lang",
        "integer"
      ]
    },
    {
      "method": "compare@30",
      "body": "@SuppressWarnings(\"unchecked\") public int compare(final Object objectOne,final Object objectTwo){\n  if (objectOne instanceof Comparable)   return ((Comparable<Object>)objectOne).compareTo(objectTwo);\n  final Comparator<?> comparator=OComparatorFactory.INSTANCE.getComparator(objectOne.getClass());\n  if (comparator != null)   return ((Comparator<Object>)comparator).compare(objectOne,objectTwo);\n  throw new IllegalStateException(\"Object of class\" + objectOne.getClass().getName() + \" can not be compared\");\n}\n",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Comparable<java.lang.Object>.compareTo(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "int",
      "file": "./java_projects/Orient/commons/src/main/java/com/orientechnologies/common/comparator/ODefaultComparator.java",
      "classTypes": [
        "ODefaultComparator"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Comparable<java.lang.Object>.compareTo(java.lang.Object)",
            "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "stateChanged@1071",
      "body": "public void stateChanged(DownloadManagerState state,DownloadManagerStateEvent event){\n  final int type=event.getType();\n  if (type == DownloadManagerStateEvent.ET_ATTRIBUTE_WRITTEN || type == DownloadManagerStateEvent.ET_ATTRIBUTE_WILL_BE_READ) {\n    String name=(String)event.getData();\n    List property_listeners_ref=property_listeners;\n    final TorrentAttribute attr=convertAttribute(name);\n    if (attr != null) {\n      for (int i=0; i < property_listeners_ref.size(); i++) {\n        try {\n          ((DownloadPropertyListener)property_listeners_ref.get(i)).propertyChanged(this,new DownloadPropertyEvent(){\n            public int getType(){\n              return (type == DownloadManagerStateEvent.ET_ATTRIBUTE_WRITTEN ? DownloadPropertyEvent.PT_TORRENT_ATTRIBUTE_WRITTEN : DownloadPropertyEvent.PT_TORRENT_ATTRIBUTE_WILL_BE_READ);\n            }\n            public Object getData(){\n              return (attr);\n            }\n          }\n);\n        }\n catch (        Throwable e) {\n          Debug.printStackTrace(e);\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "DownloadManagerState",
        "DownloadManagerStateEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "boolean",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.io.PrintStream.println(char[])",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/OneSwarm/az_src/src/org/gudy/azureus2/pluginsimpl/local/download/DownloadImpl.java",
      "classTypes": [
        "int",
        "AEMonitor",
        "DownloadActivationEvent",
        "AEMonitor",
        "AEMonitor",
        "TorrentImpl"
      ],
      "sorrformalparam": [
        [
          "TRTrackerScraperResponse"
        ],
        [
          "DownloadPeerListener"
        ],
        [
          "Download",
          "DownloadPropertyEvent"
        ],
        [
          "DownloadTrackerListener",
          "boolean"
        ],
        [
          "DownloadManager",
          "int"
        ],
        [
          "int"
        ],
        [
          "TRTrackerAnnouncerResponse"
        ],
        [
          "DownloadPropertyListener"
        ],
        [
          "DownloadAttributeListener",
          "TorrentAttribute",
          "int"
        ],
        [
          "DownloadWillBeRemovedListener"
        ]
      ],
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "list",
        "size"
      ]
    },
    {
      "method": "run@33",
      "body": "@Override public void run(){\n  StrategyParams params;\n  try {\n    while (true) {\nsynchronized (tasks) {\n        if (tasks.isEmpty())         break;\n        params=tasks.removeFirst();\n      }\n      Strategy strategy=(Strategy)strategyConstructor.newInstance(params);\n      setStrategy(strategy);\n      backTest();\n      PositionManager positionManager=strategy.getPositionManager();\n      int trades=positionManager.getTrades();\n      if (trades >= minTrades) {\n        double totalPL=positionManager.getTotalProfitAndLoss();\n        double profitFactor=positionManager.getProfitFactor();\n        double maxDrawdown=positionManager.getMaxDrawdown();\n        double kelly=positionManager.getKelly();\n        String tradeDistribution=strategy.getTradeDistribution();\n        Result result=new Result(params,totalPL,maxDrawdown,trades,profitFactor,kelly,tradeDistribution);\nsynchronized (results) {\n          results.add(result);\n        }\n      }\nsynchronized (remainingTasks) {\n        remainingTasks.countDown();\n      }\n    }\n  }\n catch (  Exception t) {\n    eventReport.report(t);\n    String msg=\"Encountered unexpected error while running strategy optimizer: \" + t.getMessage();\n    AppUtil.showError(t);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.CountDownLatch.countDown()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/trademaker/src/org/lifeform/optimizer/OptimizerWorker.java",
      "classTypes": [
        "LinkedList<StrategyParams>",
        "Constructor<?>",
        "CountDownLatch",
        "int",
        "List<Result>"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.countDown()"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.countDown()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "util",
        "throwable"
      ]
    },
    {
      "method": "hashCode@81",
      "body": "/** \n * HashTable code based on identifier hash codes.\n * @return hash value.\n */\npublic int hashCode(){\n  return id == null ? System.identityHashCode(this) : id.hashCode();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.hashCode()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.identityHashCode(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "int",
      "file": "./java_projects/InformationSystem/generators/hibernate/tests/org.obeonetwork.dsl.entity.gen.java.hibernate.tests/src/inheritance_associations_package/org/obeonetwork/sample/inheritanceassociations/Class101Sub.java",
      "classTypes": [
        "String",
        "String",
        "long"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.hashCode()"
          ]
        },
        {
          "calls": [
            "java.lang.System.identityHashCode(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "code"
      ]
    },
    {
      "method": "play@321",
      "body": "public static void play(final Resource clip){\n  queue(new Runnable(){\n    @Override public void run(){\n      if (clip.loading)       queue.add(this);\n else       playres(clip);\n    }\n  }\n);\n}\n",
      "formalParam": [
        "Resource"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.Runnable>.add(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Collection<Tau_E>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "DataClip",
        "DataClip",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collection<java.lang.Runnable>.add(java.lang.Runnable)",
              "java.util.Collection<Tau_E>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<Tau_E>.add(Tau_E)",
              "java.util.Collection<Tau_E>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<Tau_E>.add(Tau_E)",
              "java.util.Collection<Tau_E>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<Tau_E>.add(Tau_E)",
              "java.util.Collection<Tau_E>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.lang.Runnable>.add(java.lang.Runnable)",
              "java.util.Collection<Tau_E>.clear()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/salem/src/haven/Audio.java",
      "classTypes": [
        "Collection<Runnable>",
        "int",
        "AudioFormat",
        "Player",
        "Collection<CS>",
        "double"
      ],
      "sorrformalparam": [
        [
          "Indir<Resource>"
        ],
        [
          "CS"
        ],
        [
          "InputStream",
          "double",
          "double"
        ],
        [
          "Resource"
        ],
        [
          "Runnable"
        ]
      ],
      "types": [
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.Runnable>.add(java.lang.Runnable)",
            "java.util.Collection<Tau_E>.clear()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "openDataStore@42",
      "body": "/** \n * Returns an  {@link LocalDiskDataStore} that uses the given directory forstoring/loading tablets.\n */\npublic static LocalDiskDataStore openDataStore(File directory) throws IOException {\n  if (!directory.exists() || !directory.isDirectory()) {\n    throw new IOException(\"Directory given in openDataStore does not exist or is not a directory.\");\n  }\n  LocalDiskDataStore store=new LocalDiskDataStore(directory);\n  store.openTablets();\n  return store;\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.io.File.isDirectory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.listFiles()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File[]"
          },
          {
            "_call": "$NOT$java.io.File.isDirectory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "LocalDiskDataStore"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.exists()",
              "java.io.File.mkdirs()"
            ]
          }
        ]
      ],
      "returnType": "LocalDiskDataStore",
      "file": "./java_projects/presslufthammer/src/main/java/de/tuberlin/dima/presslufthammer/data/columnar/local/LocalDiskDataStore.java",
      "classTypes": [
        "Map<TabletKey,LocalDiskTablet>",
        "File",
        "Logger",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [
          "File"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.listFiles()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.getName()",
            "java.lang.String.split(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "split",
        "list",
        "files",
        "int",
        "directory",
        "string"
      ]
    },
    {
      "method": "reset@155",
      "body": "/** \n * Resets the stream to its beginning so it can be read again.\n * @exception IOException if there is an I/O error\n */\npublic void reset() throws IOException {\n  if (file == null) {\n    ((ByteArrayInputStream)is).reset();\n  }\n else {\n    if (fos != null) {\n      while (skip(4096) > 0)       ;\n      fos.close();\n      fos=null;\n      if (length == -1) {\n        length=totalBytesRead;\n      }\n    }\n    is.close();\n    is=new FileInputStream(file);\n  }\n  totalBytesRead=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.io.InputStream.skip(long)",
                    "_throws": [
                      "java.io.IOException"
                    ],
                    "node": "DAPICall",
                    "_returns": "long"
                  }
                ]
              },
              {
                "_call": "java.io.FileOutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.ByteArrayInputStream.reset()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStream.read()",
              "java.io.FileOutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-eclipse/org.eclipse.webdav/src/client/org/eclipse/webdav/http/client/RequestInputStream.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "InputStream",
          "long"
        ]
      ],
      "types": [
        "IOException",
        "FileOutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.reset()"
          ]
        },
        {
          "calls": [
            "java.io.InputStream.skip(long)",
            "java.io.InputStream.skip(long)",
            "java.io.FileOutputStream.close()",
            "java.io.InputStream.close()",
            "java.io.FileInputStream.FileInputStream(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "close",
        "long"
      ]
    },
    {
      "method": "test0772@24044",
      "body": "public void test0772() throws Exception {\n  this.runConformTest(new String[]{\"X.java\",\"interface Foo<T> {\\n\" + \"  public T getIt();\\n\" + \"}\\n\"+ \"\\n\"+ \"class FooImpl implements Foo {\\n\"+ \"  public String getIt() {\\n\"+ \"    return null;\\n\"+ \"  }\\n\"+ \"}\\n\"+ \"public class X {\\n\"+ \"  public void doIt() {\\n\"+ \"    Object s = new FooImpl().getIt();\\n\"+ \"  }\\n\"+ \"}\\n\"},\"\");\n  this.runConformTest(new String[]{\"X.java\",\"public class X {\\n\" + \"  public void doIt() {\\n\" + \"    Object s = new FooImpl().getIt();\\n\"+ \"  }\\n\"+ \"}\\n\"},\"\",null,false,null);\n  String expectedOutput=\"  // Method descriptor #18 ()Ljava/lang/Object;\\n\" + \"  // Stack: 1, Locals: 1\\n\" + \"  public bridge synthetic java.lang.Object getIt();\\n\"+ \"    0  aload_0\\n\"+ \"    1  invokevirtual FooImpl.getIt() : java.lang.String [19]\\n\"+ \"    4  areturn\\n\"+ \"      Line numbers:\\n\"+ \"        [pc: 0, line: 1]\\n\";\n  File f=new File(OUTPUT_DIR + File.separator + \"FooImpl.class\");\n  byte[] classFileBytes=org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);\n  ClassFileBytesDisassembler disassembler=ToolFactory.createDefaultClassFileBytesDisassembler();\n  String result=disassembler.disassemble(classFileBytes,\"\\n\",ClassFileBytesDisassembler.DETAILED);\n  int index=result.indexOf(expectedOutput);\n  if (index == -1 || expectedOutput.length() == 0) {\n    System.out.println(Util.displayString(result,3));\n  }\n  if (index == -1) {\n    assertEquals(\"Wrong contents\",expectedOutput,result);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "print"
      ]
    },
    {
      "method": "read@235",
      "body": "@Override public void read(int pos,byte[] dst) throws IOException {\n  if (isReadOnly()) {\n    ByteBuffer bb=ByteBuffer.wrap(dst);\n    _channel.read(bb,pos);\n  }\n else {\n    System.arraycopy(_buffer.array(),pos,dst,0,dst.length);\n  }\n}\n",
      "formalParam": [
        "int",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.nio.ByteBuffer.array()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.nio.ByteBuffer.wrap(byte[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.nio.ByteBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "short",
        "void",
        "void",
        "void",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.getShort(int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.getShort(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.lang.System.currentTimeMillis()",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.putLong(long)",
              "java.nio.Buffer.flip()",
              "java.util.Queue<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.lang.System.currentTimeMillis()",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.putLong(long)",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.array()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.nio.Buffer.position()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.getInt(int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.getInt(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/krati/krati-main/src/main/java/krati/core/segment/WriteBufferSegment.java",
      "classTypes": [
        "Queue<ByteBuffer>"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [],
        [
          "int",
          "byte[]",
          "int",
          "int"
        ],
        [
          "int",
          "int",
          "WritableByteChannel"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Object",
        "Byte"
      ],
      "apicalls": [
        "array"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])"
          ]
        },
        {
          "calls": [
            "java.nio.ByteBuffer.array()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "testHostsFile@382",
      "body": "/** \n * Test host/include file functionality. Only datanodes in the include file are allowed to connect to the namenode in a non federated cluster.\n */\n@Test public void testHostsFile() throws IOException, InterruptedException {\n  testHostsFile(1);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hadoop-hdfs/src/test/hdfs/org/apache/hadoop/hdfs/TestDecommission.java",
      "classTypes": [
        "int",
        "int",
        "Path",
        "Log",
        "MiniDFSCluster",
        "int"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "util"
      ]
    },
    {
      "method": "setOutput@254",
      "body": "/** \n * Sets the output stream for printing. \n */\npublic void setOutput(OutputStream stream,String encoding) throws UnsupportedEncodingException {\n  if (encoding == null) {\n    encoding=\"UTF8\";\n  }\n  java.io.Writer writer=new OutputStreamWriter(stream,encoding);\n  fOut=new PrintWriter(writer);\n}\n",
      "formalParam": [
        "OutputStream",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintWriter.print(char)",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(char)",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.flush()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/litle-sdk-for-java/lib/xerces-2_11_0/samples/jaxp/TypeInfoWriter.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "OutputStream",
        "Writer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)"
          ]
        }
      ],
      "keywords": [
        "print",
        "unsupported",
        "stream",
        "string"
      ]
    },
    {
      "method": "mousePressed@75",
      "body": "public void mousePressed(MouseEvent e){\n  recordRightClick(e);\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.event.MouseEvent.isPopupTrigger()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.awt.Component.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.awt.event.MouseEvent.getPoint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Point"
              },
              {
                "_call": "javax.swing.JList.locationToIndex(java.awt.Point)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()",
              "java.awt.Component.getName()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JList.locationToIndex(java.awt.Point)"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frankenstein/src/com/thoughtworks/frankenstein/recorders/ListRecorder.java",
      "classTypes": [
        "MouseListener"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "MouseEvent"
      ],
      "apicalls": [
        "isPopupTrigger",
        "locationToIndex"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.isPopupTrigger()",
            "java.awt.Component.getName()",
            "java.awt.event.MouseEvent.getPoint()",
            "javax.swing.JList.locationToIndex(java.awt.Point)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.isPopupTrigger()"
          ]
        }
      ],
      "keywords": [
        "index",
        "event",
        "string",
        "component"
      ]
    },
    {
      "method": "setNetworkTrafficGenericSrcHost@1941",
      "body": "public void setNetworkTrafficGenericSrcHost(String networkTrafficGenericSrcHost){\n  addPair(NETWORK_TRAFFIC_GENERIC_SRC_HOST,networkTrafficGenericSrcHost);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-integration-extensions/spring-integration-splunk/src/main/java/org/springframework/integration/splunk/entity/SplunkData.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Character",
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "character",
        "buffer",
        "string",
        "append",
        "lang"
      ]
    },
    {
      "method": "trace@235",
      "body": "public void trace(Object parm1,Throwable parm2){\n  if (logLevel <= TRACE)   log(\"[TRACE] \",parm1,parm2);\n}\n",
      "formalParam": [
        "Object",
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.format(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "String",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.PrintWriter.PrintWriter(java.io.Writer)",
              "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
              "java.io.PrintWriter.close()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.util.List.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.util.Date.getTime()",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/helma/src/helma/util/Logger.java",
      "classTypes": [
        "List",
        "long",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Object",
          "Throwable"
        ],
        [
          "Object"
        ],
        [
          "Object",
          "Throwable"
        ],
        [
          "Throwable"
        ],
        [
          "Object"
        ],
        [
          "Object",
          "Throwable"
        ],
        [
          "Object",
          "Throwable"
        ],
        [
          "Object",
          "Throwable"
        ]
      ],
      "types": [
        "Object",
        "Integer"
      ],
      "apicalls": [
        "format",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Date.Date()",
            "java.text.DateFormat.format(java.util.Date)",
            "java.util.Date.getTime()",
            "java.util.List.size()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getName()",
            "java.util.List.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Date.Date()",
            "java.text.DateFormat.format(java.util.Date)",
            "java.util.Date.getTime()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "current",
        "string",
        "util",
        "format"
      ]
    },
    {
      "method": "isGlobalised@45",
      "body": "public static boolean isGlobalised(final String name){\n  if (name == null) {\n    return false;\n  }\n  char[] chars=name.toCharArray();\n  boolean allowedSpaceOrSeparator=false;\n  int numberOfSeparators=1;\n  if (chars[0] != SPACE_SEPARATOR) {\n    return false;\n  }\n  for (int i=1; i < chars.length; i++) {\n    if (chars[i] == ' ' || chars[i] == SPACE_SEPARATOR) {\n      if (chars[i] == SPACE_SEPARATOR) {\n        numberOfSeparators++;\n      }\n      if (!allowedSpaceOrSeparator) {\n        return false;\n      }\n else {\n        allowedSpaceOrSeparator=false;\n      }\n    }\n else     if (Character.isWhitespace(chars[i])) {\n      return false;\n    }\n else     if (Character.isUpperCase(chars[i]) && numberOfSeparators < 3) {\n      return false;\n    }\n else {\n      allowedSpaceOrSeparator=true;\n    }\n  }\n  return allowedSpaceOrSeparator;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Character.isUpperCase(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Character.isWhitespace(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.List.isEmpty()",
              "$NOT$java.util.List.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/Fudan-Sakai/rwiki/rwiki-util/util/src/java/uk/ac/cam/caret/sakai/rwiki/utils/NameHelper.java",
      "classTypes": [
        "String",
        "char",
        "Log"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "isUpperCase",
        "toCharArray",
        "isWhitespace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace(char)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace(char)",
            "java.lang.Character.isUpperCase(char)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "char",
        "whitespace",
        "case",
        "string"
      ]
    },
    {
      "method": "testHighestZxidJoinLate@213",
      "body": "/** \n * Test the case of server with highest zxid not present at leader election and joining later. This test case is for reproducing the issue and fixing the bug mentioned in  ZOOKEEPER-1154 and ZOOKEEPER-1156.\n */\n@Test public void testHighestZxidJoinLate() throws Exception {\n  int numServers=3;\n  Servers svrs=LaunchServers(numServers);\n  String path=\"/hzxidtest\";\n  int leader=-1;\n  for (int i=0; i < numServers; i++) {\n    if (svrs.mt[i].main.quorumPeer.leader != null) {\n      leader=i;\n    }\n  }\n  Assert.assertTrue(\"There should be a leader\",leader >= 0);\n  int nonleader=(leader + 1) % numServers;\n  byte[] input=new byte[1];\n  input[0]=1;\n  byte[] output;\n  svrs.zk[leader].create(path + leader,input,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  svrs.zk[leader].create(path + nonleader,input,Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);\n  output=svrs.zk[leader].getData(path + nonleader,false,null);\n  for (int i=0; i < numServers; i++) {\n    if (i != leader) {\n      svrs.mt[i].shutdown();\n    }\n  }\n  input[0]=2;\n  svrs.zk[leader].setData(path + leader,input,-1,null,null);\n  Thread.sleep(500);\n  svrs.mt[leader].shutdown();\n  System.gc();\n  waitForAll(svrs.zk,States.CONNECTING);\n  for (int i=0; i < numServers; i++) {\n    if (i != leader) {\n      svrs.mt[i].start();\n    }\n  }\n  waitForOne(svrs.zk[nonleader],States.CONNECTED);\n  output=svrs.zk[nonleader].getData(path + leader,false,null);\n  Assert.assertEquals(\"Expecting old value 1 since 2 isn't committed yet\",output[0],1);\n  svrs.zk[nonleader].setData(path + nonleader,input,-1);\n  svrs.mt[leader].start();\n  waitForOne(svrs.zk[leader],States.CONNECTED);\n  output=svrs.zk[leader].getData(path + leader,false,null);\n  Assert.assertEquals(\"Validating that the deposed leader has rolled back that change it had written\",output[0],1);\n  output=svrs.zk[leader].getData(path + nonleader,false,null);\n  Assert.assertEquals(\"Validating that the deposed leader caught up on changes it missed\",output[0],2);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.gc()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toString()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.getBytes()",
              "java.lang.Thread.sleep(long)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.close()",
              "java.io.ByteArrayOutputStream.toString()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.regex.Pattern.compile(java.lang.String)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/clients_1/projects-for-testing/zookeeper/src/java/test/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java",
      "classTypes": [
        "MainThread",
        "ZooKeeper"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()",
            "java.lang.Thread.sleep(long)",
            "java.lang.System.gc()"
          ]
        }
      ],
      "keywords": [
        "gc",
        "interrupted",
        "exception",
        "long"
      ]
    },
    {
      "method": "addPropertyChangeListener@119",
      "body": "/** \n * Adds a PropertyChangeListener to the list of global listeners. All property change events will be sent to this listener. The listener add is not unique: that is, <em>n</em> adds with the same listener will result in <em>n</em> events being sent to that listener for every property change. Adding a null listener is silently ignored. This method will unwrap a PropertyChangeListenerProxy, registering the underlying delegate to the named property list.\n * @param l the listener to add\n */\npublic synchronized void addPropertyChangeListener(PropertyChangeListener l){\n  if (l == null)   return;\n  if (l instanceof PropertyChangeListenerProxy) {\n    PropertyChangeListenerProxy p=(PropertyChangeListenerProxy)l;\n    addPropertyChangeListener(p.propertyName,(PropertyChangeListener)p.getListener());\n  }\n else {\n    if (listeners == null)     listeners=new Vector();\n    listeners.add(l);\n  }\n}\n",
      "formalParam": [
        "PropertyChangeListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Hashtable.Hashtable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "PropertyChangeListener[]",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.beans.PropertyChangeEvent.PropertyChangeEvent(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.addAll(java.util.Collection)",
              "java.util.Hashtable.size()",
              "java.util.Hashtable.entrySet()",
              "java.util.Set.iterator()",
              "java.util.Vector.size()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable.Hashtable()",
              "java.util.Vector.Vector()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.util.Vector.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Vector.remove(java.lang.Object)",
              "java.util.Vector.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Vector.remove(java.lang.Object)",
              "java.util.Vector.isEmpty()",
              "java.util.Hashtable.remove(java.lang.Object)",
              "java.util.Hashtable.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)",
              "java.util.Vector.size()",
              "java.beans.PropertyChangeListener.propertyChange(java.beans.PropertyChangeEvent)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/java/beans/PropertyChangeSupport.java",
      "classTypes": [
        "long",
        "int",
        "Vector",
        "Object",
        "Hashtable"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object",
          "Object"
        ],
        [
          "String",
          "int",
          "Object",
          "Object"
        ],
        [],
        [
          "String",
          "PropertyChangeListener"
        ],
        [
          "String",
          "PropertyChangeListener"
        ],
        [
          "PropertyChangeEvent"
        ]
      ],
      "types": [],
      "apicalls": [
        "equals",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.Hashtable.Hashtable()",
            "java.util.Vector.Vector()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.util.Vector.add(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean"
      ]
    },
    {
      "method": "write@401",
      "body": "public static boolean write(RenderedImage im,String formatName,OutputStream output) throws IOException {\n  if (output == null) {\n    throw new IllegalArgumentException(Messages.getString(\"imageio.54\"));\n  }\n  ImageOutputStream ios=createImageOutputStream(output);\n  boolean rt=write(im,formatName,ios);\n  ios.close();\n  return rt;\n}\n",
      "formalParam": [
        "RenderedImage",
        "String",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.spi.ImageOutputStreamSpi"
              },
              {
                "_call": "java.lang.Class.isInstance(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.ImageWriter"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "ImageInputStream",
        "ImageWriter",
        "boolean",
        "BufferedImage",
        "String[]",
        "ImageReader",
        "ImageWriter",
        "String[]",
        "String[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageWriter>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.openStream()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "$NOT$java.util.Iterator<javax.imageio.ImageReader>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageReader>.next()",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/harmony_1/classlib/modules/imageio/src/main/java/javax/imageio/ImageIO.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "RenderedImage",
          "String",
          "ImageOutputStream"
        ],
        [
          "Object"
        ],
        [],
        [
          "Object"
        ],
        [
          "URL"
        ],
        [],
        [
          "ImageWriter"
        ],
        [
          "ImageReader"
        ],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.next()"
          ]
        },
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "image"
      ]
    },
    {
      "method": "getEntryNames@100",
      "body": "public static List<String> getEntryNames(Iterator<? extends FSEntry> it){\n  List<String> names=new ArrayList<String>();\n  while (it.hasNext()) {\n    FSEntry entry=it.next();\n    names.add((entry == null) ? null : entry.getName());\n  }\n  return names;\n}\n",
      "formalParam": [
        "Iterator<? extends FSEntry>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "String",
        "File",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.forName(java.lang.String)",
              "java.lang.Class<Tau_T>.newInstance()",
              "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.FileInputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.write(byte[])",
              "java.io.FileOutputStream.write(byte[],int,int)",
              "java.io.OutputStream.flush()",
              "java.io.FileOutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[])",
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "List<String>",
      "file": "./java_projects/jnode/fs/src/test/org/jnode/test/support/TestUtils.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [
          "String",
          "Class<?>"
        ],
        [
          "String",
          "int",
          "int"
        ],
        [
          "String",
          "long"
        ],
        [
          "InputStream",
          "Device"
        ],
        [
          "Iterator<? extends FSEntry>"
        ]
      ],
      "types": [
        "ArrayList",
        "Iterator"
      ],
      "apicalls": [
        "hasNext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "add",
        "boolean",
        "string"
      ]
    },
    {
      "method": "getAntlrTokenFile@11",
      "body": "public InputStream getAntlrTokenFile(){\n  ClassLoader classLoader=getClass().getClassLoader();\n  return classLoader.getResourceAsStream(\"org/eclipse/xtext/ui/tests/editor/contentassist/parser/antlr/internal/InternalBacktrackingContentAssistTestLanguage.tokens\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "InputStream",
      "file": "./java_projects/xtext/tests/org.eclipse.xtext.ui.tests/src-gen/org/eclipse/xtext/ui/tests/editor/contentassist/parser/antlr/BacktrackingContentAssistTestLanguageAntlrTokenFileProvider.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String",
        "ClassLoader"
      ],
      "apicalls": [
        "getResourceAsStream",
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "class",
        "lang",
        "resource",
        "loader",
        "stream"
      ]
    },
    {
      "method": "log@35",
      "body": "public static void log(int level,String message,Exception e){\n  if (logServices.isEmpty()) {\n    e.printStackTrace();\n    return;\n  }\n  for (  LogService ls : logServices) {\n    ls.log(DiscoveryActivator.getContext().getServiceReference(DiscoveryContainer.class.getName()),level,message,e);\n  }\n}\n",
      "formalParam": [
        "int",
        "String",
        "Exception"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Android_1/org.eclipse.ecf.provider.zookeeper/src/org/eclipse/ecf/provider/zookeeper/util/Logger.java",
      "classTypes": [
        "Set<LogService>"
      ],
      "sorrformalparam": [
        [
          "int",
          "String",
          "Throwable"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "getName",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "print",
        "name",
        "class",
        "throwable",
        "stack",
        "lang"
      ]
    },
    {
      "method": "addVertex@166",
      "body": "/** \n * Defines a new vertex with the given id. The depth-first search is performed in the relative order in which vertexes were added to the graph.\n * @param id the id of the vertex\n * @exception IllegalArgumentException if the vertex id isalready defined or if the graph is frozen\n */\npublic void addVertex(Object id) throws IllegalArgumentException {\n  if (initialized) {\n    throw new IllegalArgumentException();\n  }\n  Vertex vertex=new Vertex(id);\n  Object existing=vertexMap.put(id,vertex);\n  if (existing != null) {\n    throw new IllegalArgumentException();\n  }\n  vertexList.add(vertex);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "List<Object>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.iterator()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/rt.equinox.framework/bundles/org.eclipse.osgi/resolver/src/org/eclipse/osgi/internal/resolver/ComputeNodeOrder.java",
      "classTypes": [
        "boolean",
        "int",
        "Map<Object,Vertex>",
        "List<Vertex>"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ]
      ],
      "types": [
        "List",
        "Map",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "add",
        "list",
        "put",
        "util",
        "map",
        "boolean"
      ]
    },
    {
      "method": "updateShort@1018",
      "body": "public void updateShort(int colIndex,short b) throws SQLException {\n  isUpdatable();\n  if (tr == null || colIndex < 1 || colIndex > tr.ncolumns) {\n    throw new SQLException(\"column \" + colIndex + \" not found\");\n  }\n  fillRowbuf();\n  rowbuf[colIndex - 1]=Short.toString(b);\n}\n",
      "formalParam": [
        "int",
        "short"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.toString(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "void",
        "void",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.HashSet<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.HashSet<java.lang.String>.size()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.HashSet<java.lang.String>.size()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.HashSet<java.lang.String>.size()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.HashSet<java.lang.String>.size()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.valueOf(java.lang.String)",
              "java.lang.Integer.intValue()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_libcore/sqlite-jdbc/src/main/java/SQLite/JDBC2z/JDBCResultSet.java",
      "classTypes": [
        "boolean",
        "int",
        "JDBCResultSetMetaData",
        "int",
        "SQLite.TableResult",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "String"
        ],
        [
          "String",
          "java.sql.Time"
        ],
        [
          "int",
          "java.sql.Date"
        ],
        [
          "String",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "size",
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.HashSet<java.lang.String>.add(java.lang.String)",
            "java.util.HashSet<java.lang.String>.size()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.Short.toString(short)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "arraycopy",
        "size"
      ]
    },
    {
      "method": "getEnabledACs@514",
      "body": "public List<NestedApplCond> getEnabledACs(){\n  final List<NestedApplCond> vars=new Vector<NestedApplCond>();\n  for (int i=0; i < this.itsACs.size(); i++) {\n    NestedApplCond ac=this.itsACs.get(i);\n    if (ac.isEnabled())     vars.add(ac);\n  }\n  return vars;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "java.util.List<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "List<String>",
        "List<NestedApplCond>",
        "void",
        "boolean",
        "NestedApplCond"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<java.lang.String>.Vector<String>()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.Vector()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.add(Tau_E)",
              "java.util.List<Tau_E>.addAll(java.util.Collection)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()"
            ]
          }
        ]
      ],
      "returnType": "List<NestedApplCond>",
      "file": "./java_projects/Henshin-Editor/de.tub.tfs.agg/src/agg/xt_basis/NestedApplCond.java",
      "classTypes": [
        "String",
        "OrdinaryMorphism",
        "NestedApplCond",
        "Formula",
        "boolean",
        "List<NestedApplCond>",
        "boolean",
        "String"
      ],
      "sorrformalparam": [
        [
          "Graph"
        ],
        [],
        [],
        [],
        [],
        [
          "int"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "add",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.Vector()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.add(Tau_E)",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "integer"
      ]
    },
    {
      "method": "equals@41",
      "body": "/** \n * Compares two objects for equality. Returns a boolean that indicates whether this object is equivalent to the specified object. This method is often used when an object is stored in a hashtable, using a StringKey as the map's key.\n * @param obj the Object to compare with\n * @return true if these Objects are equal; false otherwise.\n * @see java.util.Hashtable\n */\npublic boolean equals(Object obj){\n  if (this == obj)   return true;\n else   if (obj == null || !StringKey.class.isInstance(obj))   return false;\n  StringKey other=(StringKey)obj;\n  return (value.equals(other.value));\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/dawn-isencia/com.isencia.passerelle.commons/src/main/java/com/isencia/util/StringKey.java",
      "classTypes": [
        "String",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Class",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "class",
        "equals",
        "instance",
        "lang"
      ]
    },
    {
      "method": "internalTypeFromArrayType@369",
      "body": "/** \n * Returns the internal element type of a given internal array type.\n * @param internalArrayType the internal array type,e.g. \"<code>[[Ljava/lang/Object;</code>\" or \"<code>[I</code>\".\n * @return the internal type of the array elements,e.g. \"<code>Ljava/lang/Object;</code>\" or \"<code>I</code>\".\n */\npublic static String internalTypeFromArrayType(String internalArrayType){\n  int index=internalArrayType.lastIndexOf(ClassConstants.INTERNAL_TYPE_ARRAY);\n  return internalArrayType.substring(index + 1);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "String",
        "int",
        "String",
        "String",
        "int",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.regionMatches(int,java.lang.String,int,int)",
              "java.lang.String.regionMatches(int,java.lang.String,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.lastIndexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.lastIndexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.String.charAt(int)",
              "java.lang.String.substring(int)",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/proguard/src/proguard/classfile/util/ClassUtil.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "last",
        "index",
        "integer",
        "lang"
      ]
    },
    {
      "method": "hashCode@693",
      "body": "public int hashCode(){\n  int hash=mHash;\n  return hash == 0 ? mHash=KeyFactory.hashCode(mArray) : hash;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.Class.isArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Double.doubleToLongBits(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Float.floatToIntBits(float)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Double.compare(double,double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Float.compare(float,float)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/indextank-engine/cojen-2.2.1-sources/org/cojen/util/KeyFactory.java",
      "classTypes": [
        "int",
        "float[]",
        "short[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Float",
        "Boolean",
        "Long"
      ],
      "apicalls": [
        "doubleToLongBits"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Class.isArray()",
            "java.lang.Float.floatToIntBits(float)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.Class.isArray()",
            "java.lang.Double.doubleToLongBits(double)"
          ]
        }
      ],
      "keywords": [
        "int",
        "class",
        "boolean",
        "double",
        "long",
        "integer"
      ]
    },
    {
      "method": "get@16",
      "body": "@Override public S get(){\n  if (implValue != null)   return implValue;\n  Constructor<?>[] ctors=impl.getConstructors();\n  Constructor<?> target=null;\n  Class<?>[] paramsClasses=null;\n  for (  Constructor<?> c : ctors) {\n    paramsClasses=c.getParameterTypes();\n    int count=0;\n    for (    Class<?> p : paramsClasses) {\n      if (!inj.contains(p)) {\n        break;\n      }\n      count++;\n    }\n    if (count == paramsClasses.length) {\n      target=c;\n      break;\n    }\n  }\n  if (target == null)   throw new MissingInjectionsException(\"There are missing injections for class: \" + impl.getName());\n  Object[] params=new Object[paramsClasses.length];\n  for (int i=0; i < params.length; i++) {\n    params[i]=inj.getInstance(paramsClasses[i]);\n  }\n  try {\n    implValue=(S)target.newInstance(params);\n    return implValue;\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getConstructors()",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor[]"
          },
          {
            "_call": "java.lang.reflect.Constructor<Tau_T>.getParameterTypes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Class[]"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "S",
      "file": "./java_projects/mpd-2012-i41d/aula26-ioc-di/src/main/java/cntdi/ProviderSingleton.java",
      "classTypes": [
        "Class<S>"
      ],
      "sorrformalparam": [],
      "types": [
        "Class",
        "SecurityException"
      ],
      "apicalls": [
        "getConstructors"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getConstructors()",
            "java.lang.reflect.Constructor<Tau_T>.getParameterTypes()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "reflect",
        "types",
        "constructor",
        "lang",
        "class"
      ]
    },
    {
      "method": "toProperCase@56",
      "body": "/** \n * Proper case.\n * @param str the str\n * @return the string\n */\npublic static String toProperCase(String str){\n  return (str.substring(0,1).toUpperCase() + str.substring(1).toLowerCase());\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toUpperCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "String",
        "int",
        "double",
        "long",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.StringBuffer.StringBuffer(int)",
              "java.lang.String.charAt(int)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.pow(double,double)",
              "java.lang.Math.floor(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.pow(double,double)",
              "java.lang.Math.floor(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.SecureRandom.SecureRandom()",
              "java.util.Random.nextInt()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/osiris/src/osiris/util/Utilities.java",
      "classTypes": [
        "int[]",
        "int[]",
        "char[]",
        "byte[]"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "String"
        ],
        [
          "double"
        ],
        [
          "int"
        ],
        [
          "String"
        ],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int,int)",
            "java.lang.String.toUpperCase()",
            "java.lang.String.substring(int)",
            "java.lang.String.toLowerCase()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "displayInfo@84",
      "body": "public void displayInfo(String station,long timestamp){\n  if (timestamp != 0)   this.timestamp=timestamp;\n else   this.timestamp=System.currentTimeMillis();\n  this.stationString=station;\n  searchThread();\n}\n",
      "formalParam": [
        "String",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/BeTrains-for-Android/src/tof/cv/mpp/InfoStationFragment.java",
      "classTypes": [
        "TextView",
        "ProgressDialog",
        "Runnable",
        "String",
        "long"
      ],
      "sorrformalparam": [],
      "types": [
        "ThreadGroup",
        "Long",
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.lang.Thread.Thread(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "thread",
        "long"
      ]
    },
    {
      "method": "suite@22",
      "body": "public static Test suite(){\n  TestSuite suite=new ExtendedTestSuite(\"Tests in \" + TestAll.class.getPackage().getName());\n  suite.addTest(com.google.dart.engine.internal.builder.TestAll.suite());\n  suite.addTest(com.google.dart.engine.internal.element.TestAll.suite());\n  suite.addTest(com.google.dart.engine.internal.sdk.TestAll.suite());\n  suite.addTest(com.google.dart.engine.internal.type.TestAll.suite());\n  return suite;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getPackage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Package"
          },
          {
            "_call": "java.lang.Package.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Test",
      "file": "./java_projects/bleeding_edge/dart/editor/tools/plugins/com.google.dart.engine_test/src/com/google/dart/engine/internal/TestAll.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Class",
        "String",
        "Package"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getPackage()",
            "java.lang.Package.getName()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "get",
        "class",
        "package",
        "name",
        "string"
      ]
    },
    {
      "method": "getFileName@168",
      "body": "/** \n * @param req desired  {@link RequestStatus}\n * @return file name of request (can also be none)\n */\npublic static String getFileName(RequestStatus req){\n  File file=null;\n  String result=null;\n  if (req instanceof DownloadRequestStatus) {\n    file=((DownloadRequestStatus)req).getDestFilename();\n  }\n else   if (req instanceof UploadFileRequestStatus) {\n    file=((UploadFileRequestStatus)req).getOrigFilename();\n  }\n  if (file == null) {\n    result=Localizer.get().getString(L10N_NONE,null,L10N_NONE);\n  }\n else {\n    result=file.toString();\n  }\n  logger.trace(String.format(\"File name for RequestStatus (%s) : %s\",req.hashCode(),result));\n  return result;\n}\n",
      "formalParam": [
        "RequestStatus"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
              "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
              "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/Winterface/src/main/java/freenet/winterface/core/RequestStatusUtil.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "RequestStatus"
        ]
      ],
      "types": [
        "Locale",
        "File"
      ],
      "apicalls": [
        "toString",
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.toString()",
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "object",
        "io",
        "format"
      ]
    },
    {
      "method": "update@1655",
      "body": "public JPanel update(Object[] geos){\n  this.geos=geos;\n  if (!checkGeos(geos))   return null;\n  showAnimatingCB.removeItemListener(this);\n  GeoElement temp, geo0=(GeoElement)geos[0];\n  boolean equalAnimating=true;\n  for (int i=1; i < geos.length; i++) {\n    temp=(GeoElement)geos[i];\n    if (geo0.isAnimating() != temp.isAnimating())     equalAnimating=false;\n  }\n  if (equalAnimating)   showAnimatingCB.setSelected(geo0.isAnimating());\n else   showAnimatingCB.setSelected(false);\n  showAnimatingCB.addItemListener(this);\n  return this;\n}\n",
      "formalParam": [
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.AbstractButton.setSelected(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.AbstractButton.setSelected(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          },
          {
            "_call": "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ]
      ],
      "returnType": "JPanel",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "NamePanel",
        "TabPanel",
        "long",
        "JTextField",
        "JComboBox",
        "Object[]",
        "TabPanel"
      ],
      "sorrformalparam": [
        [
          "Object[]"
        ]
      ],
      "types": [
        "ItemListener"
      ],
      "apicalls": [
        "removeItemListener"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
            "javax.swing.AbstractButton.setSelected(boolean)",
            "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
          ]
        }
      ],
      "keywords": [
        "listener",
        "set"
      ]
    },
    {
      "method": "unbox@124",
      "body": "public void unbox(ClassNode type){\n  if (type.isPrimaryClassNode())   return;\n  if (type.isPrimitive())   unbox(type.getTypeClass());\n}\n",
      "formalParam": [
        "ClassNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class.isPrimitive()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(char,char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.Class.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base/org.codehaus.groovy/src/org/codehaus/groovy/classgen/BytecodeHelper.java",
      "classTypes": [
        "MethodVisitor"
      ],
      "sorrformalparam": [
        [
          "Class"
        ],
        [
          "ClassNode"
        ],
        [
          "ClassNode"
        ],
        [
          "Class"
        ],
        [
          "Variable",
          "boolean"
        ]
      ],
      "types": [
        "Character",
        "Class"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.isPrimitive()"
          ]
        },
        {
          "calls": [
            "java.lang.Class.isPrimitive()",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.replace(char,char)",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "character",
        "name",
        "get",
        "boolean",
        "string",
        "replace",
        "class"
      ]
    },
    {
      "method": "addExtended@186",
      "body": "public CppClass addExtended(long vis,String... extendeds) throws CppDuplicateException {\n  for (  String e : extendeds) {\n    String tmp=Cpp.toString(vis) + \" \" + e;\n    if (this.extendeds_string.contains(tmp)) {\n      throw new CppDuplicateException(\"Extended class \" + tmp + \" already contained\");\n    }\n    for (    VisElem ex : this.extendeds) {\n      if (ex.elem instanceof CppClass) {\n        CppClass clazz=(CppClass)ex.elem;\n        if (clazz.getName().equals(e)) {\n          throw new CppDuplicateException(\"Extended class \" + clazz.getName() + \" already contained\");\n        }\n      }\n    }\n    this.extendeds_string.add(tmp);\n  }\n  return this;\n}\n",
      "formalParam": [
        "long",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "CppClass"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.addAll(java.util.Collection)",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "CppClass",
      "file": "./java_projects/fabric/codegeneration/src/main/java/de/uniluebeck/sourcegen/c/CppClassImpl.java",
      "classTypes": [
        "List<String>",
        "List<VisElem>",
        "List<VisElem>",
        "List<VisElem>",
        "String",
        "List<String>"
      ],
      "sorrformalparam": [
        [],
        [
          "List<String>",
          "String"
        ]
      ],
      "types": [
        "List",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.contains(java.lang.Object)",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "add",
        "contains"
      ]
    },
    {
      "method": "addFetchInnerJoins@447",
      "body": "public JDBCFetchConfiguration addFetchInnerJoins(Collection<String> joins){\n  if (joins == null || joins.isEmpty())   return this;\n  for (Iterator<String> itr=joins.iterator(); itr.hasNext(); )   addFetchInnerJoin((String)itr.next());\n  return this;\n}\n",
      "formalParam": [
        "Collection<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "JDBCFetchConfiguration",
        "JDBCFetchConfiguration",
        "JDBCFetchConfiguration"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.lang.String>.isEmpty()",
              "java.util.Collection<java.lang.String>.iterator()",
              "java.util.Iterator<java.lang.String>.hasNext()",
              "java.util.Iterator<java.lang.String>.next()",
              "java.util.Iterator<java.lang.String>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "JDBCFetchConfiguration",
      "file": "./java_projects/openjpa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java",
      "classTypes": [
        "Set<String>",
        "int",
        "Set<String>",
        "int",
        "JDBCConfigurationState",
        "int",
        "int",
        "Localizer"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Collection<String>"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.isEmpty()",
            "java.util.Collection<java.lang.String>.iterator()",
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next"
      ]
    },
    {
      "method": "test_statService_getDataSourceList@156",
      "body": "@Test public void test_statService_getDataSourceList() throws Exception {\n  String result=DruidStatService.getInstance().service(\"/datasource.json\");\n  Map<String,Object> resultMap=(Map<String,Object>)JSONUtils.parse(result);\n  List<Map<String,Object>> dataSourceList=(List<Map<String,Object>>)resultMap.get(\"Content\");\n  assertThat(dataSourceList.size(),equalTo(2));\n  Map<String,Object> dataSourceStat=dataSourceList.get(0);\n  assertThat((Integer)dataSourceStat.get(\"PoolingCount\"),equalTo(0));\n  assertThat((Integer)dataSourceStat.get(\"ActiveCount\"),equalTo(0));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.Object>"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/druid/src/test/java/com/alibaba/druid/bvt/stat/DruidStatServiceTest2.java",
      "classTypes": [
        "DruidDataSource",
        "DruidDataSource"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "Integer",
        "List",
        "Map"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.size()",
            "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.get(int)"
          ]
        }
      ],
      "keywords": [
        "map",
        "list"
      ]
    },
    {
      "method": "test_0@47",
      "body": "public void test_0() throws Exception {\n  String sql=\"select benchmark( 1, sha1( 'test' ) )\";\n  Statement stmt=conn.createStatement();\n  ResultSet rs=stmt.executeQuery(sql);\n  JdbcUtils.printResultSet(rs);\n  stmt.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Statement"
          },
          {
            "_call": "java.sql.Statement.executeQuery(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.forName(java.lang.String)",
              "java.sql.DriverManager.getConnection(java.lang.String,java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/druid/src/test/java/com/alibaba/druid/sql/TestOnlineSQLTest3.java",
      "classTypes": [
        "String",
        "String",
        "Connection",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "SQLException",
        "Connection",
        "Statement"
      ],
      "apicalls": [
        "createStatement"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "exception"
      ]
    },
    {
      "method": "getName@87",
      "body": "/** \n * Returns the name of a resource without the path information.<p> The resource name of a file is the name of the file. The resource name of a folder is the folder name with trailing \"/\". The resource name of the root folder is <code>/</code>.<p> Example: <code>/system/workplace/</code> has the resource name <code>workplace/</code>.\n * @param resource the resource to get the name for\n * @return the name of a resource without the path information\n */\npublic static String getName(String resource){\n  if (\"/\".equals(resource)) {\n    return \"/\";\n  }\n  String parent=(resource.substring(0,resource.length() - 1));\n  return resource.substring(parent.lastIndexOf('/') + 1);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.lastIndexOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/opencms-core/src-gwt/org/opencms/gwt/client/super_src/org/opencms/file/CmsResource.java",
      "classTypes": [
        "CmsResourceState",
        "CmsResourceState",
        "String",
        "CmsResourceState",
        "CmsResourceState"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string"
      ]
    },
    {
      "method": "keysToLongArray@2373",
      "body": "/** \n * Helper function to reduce a Map with Long keys to a long array. <p> The map keys are sorted according to the native formats preference order.\n */\npublic static long[] keysToLongArray(SortedMap map){\n  Set keySet=map.keySet();\n  long[] retval=new long[keySet.size()];\n  int i=0;\n  for (Iterator iter=keySet.iterator(); iter.hasNext(); i++) {\n    retval[i]=((Long)iter.next()).longValue();\n  }\n  return retval;\n}\n",
      "formalParam": [
        "SortedMap"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.SortedMap.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.Long.longValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "String",
        "DataFlavor[]",
        "boolean",
        "DataFlavor[]",
        "None",
        "DataFlavor[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.charset.Charset.forName(java.lang.String)",
              "java.nio.charset.Charset.name()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.datatransfer.DataFlavor.getPrimaryType()",
              "java.lang.String.equals(java.lang.Object)",
              "java.awt.datatransfer.DataFlavor.getSubType()",
              "java.util.Map.get(java.lang.Object)",
              "java.awt.datatransfer.DataFlavor.getParameter(java.lang.String)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.charset.Charset.defaultCharset()",
              "java.nio.charset.Charset.name()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.toArray(java.lang.Object[])",
              "java.util.Arrays.sort(T[],java.util.Comparator)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.get(java.lang.Object)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.keySet()",
              "java.util.Set.toArray(java.lang.Object[])",
              "java.util.Map.size()",
              "java.util.HashMap.HashMap(int)",
              "java.util.HashMap.putAll(java.util.Map)",
              "java.util.Collections.unmodifiableMap(java.util.Map)",
              "java.util.Arrays.sort(T[],java.util.Comparator)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.size()",
              "java.util.HashMap.HashMap(int)",
              "java.util.HashMap.putAll(java.util.Map)",
              "java.util.Collections.unmodifiableMap(java.util.Map)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.toArray(java.lang.Object[])",
              "java.util.Map.size()",
              "java.util.HashMap.HashMap(int)",
              "java.util.HashMap.putAll(java.util.Map)",
              "java.util.Collections.unmodifiableMap(java.util.Map)",
              "java.util.Arrays.sort(T[],java.util.Comparator)"
            ]
          }
        ]
      ],
      "returnType": "long[]",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/sun/awt/datatransfer/DataTransferer.java",
      "classTypes": [
        "Map",
        "DataFlavor",
        "boolean",
        "Map",
        "Map"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "DataFlavor"
        ],
        [],
        [
          "Set"
        ],
        [
          "String",
          "String"
        ],
        [
          "Map"
        ],
        [
          "Map",
          "boolean"
        ],
        [
          "Set",
          "Map"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.SortedMap.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.Long.longValue()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "value"
      ]
    },
    {
      "method": "TestFrame@238",
      "body": "public TestFrame(Rectangle worldRectangle,List<View> views){\n  super();\n  _views.addAll(views);\n  _worldRectangle=worldRectangle;\n  ActionMap amap=this.getActionMap();\n  amap.put(\"zoom\",ACTION_ZOOM);\n  amap.put(\"unzoom\",ACTION_UNZOOM);\n  amap.put(\"left\",ACTION_LEFT);\n  amap.put(\"right\",ACTION_RIGHT);\n  amap.put(\"up\",ACTION_UP);\n  amap.put(\"down\",ACTION_DOWN);\n  InputMap imap=this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_LEFT,0,false),\"left\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_RIGHT,0,false),\"right\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z,0,false),\"zoom\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X,0,false),\"unzoom\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_UP,0,false),\"up\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DOWN,0,false),\"down\");\n  imap.put(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I,0,false),\"setinterval\");\n}\n",
      "formalParam": [
        "Rectangle",
        "List<View>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.swing.JComponent.getActionMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.ActionMap"
          },
          {
            "_call": "javax.swing.JComponent.getInputMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.InputMap"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/blink/src/drawing/View.java",
      "classTypes": [
        "Rectangle",
        "Action",
        "Action",
        "Action"
      ],
      "sorrformalparam": [],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "getActionMap"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.addAll(java.util.Collection)",
            "javax.swing.JComponent.getActionMap()",
            "javax.swing.JComponent.getInputMap(int)"
          ]
        }
      ],
      "keywords": [
        "array",
        "collection",
        "integer",
        "input"
      ]
    },
    {
      "method": "preSave@297",
      "body": "/** \n * {@inheritDoc} \n */\npublic String preSave(WikiContext context,String content) throws RedirectException {\n  cleanBanList();\n  refreshBlacklists(context);\n  Change change=getChange(context,content);\n  if (!ignoreThisUser(context)) {\n    checkBanList(context,change);\n    checkSinglePageChange(context,content,change);\n    checkPatternList(context,content,change);\n  }\n  if (!m_stopAtFirstMatch) {\n    Integer score=(Integer)context.getVariable(ATTR_SPAMFILTER_SCORE);\n    if (score != null && score.intValue() >= m_scoreLimit) {\n      throw new RedirectException(\"Herb says you got too many points\",getRedirectPage(context));\n    }\n  }\n  log(context,ACCEPT,\"-\",change.toString());\n  return content;\n}\n",
      "formalParam": [
        "WikiContext",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Vector<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.remove()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.lang.StringBuffer.StringBuffer()",
              "java.util.Random.Random()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.lang.String.toLowerCase()",
              "java.lang.System.currentTimeMillis()"
            ]
          },
          {
            "calls": [
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jspwiki/src/org/apache/wiki/filters/SpamFilter.java",
      "classTypes": [
        "int",
        "long",
        "String",
        "String",
        "long",
        "int"
      ],
      "sorrformalparam": [
        [
          "HttpServletRequest"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Vector<Tau_E>.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.remove()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "iterator"
      ]
    },
    {
      "method": "getCenter@57",
      "body": "/** \n * Returns a point set to the average of the min and max values. May return null if no points have been added.\n */\npublic Point2D getCenter(){\n  if (min != null) {\n    double minx=min.getX();\n    double miny=min.getY();\n    double maxx=max.getX();\n    double maxy=max.getY();\n    return new Point2D.Double((minx + maxx) / 2,(miny + maxy) / 2);\n  }\n else   return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.Point2D.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.Point2D.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.Point2D.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.Point2D.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getY()",
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.geom.Point2D.getX()"
            ]
          }
        ]
      ],
      "returnType": "Point2D",
      "file": "./java_projects/openmap/src/openmap/com/bbn/openmap/util/DataBounds.java",
      "classTypes": [
        "DataBounds",
        "Point2D",
        "boolean",
        "Point2D"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.Point2D.getX()",
            "java.awt.geom.Point2D.getY()",
            "java.awt.geom.Point2D.getX()",
            "java.awt.geom.Point2D.getY()"
          ]
        }
      ],
      "keywords": [
        "awt"
      ]
    },
    {
      "method": "getProperty@212",
      "body": "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\n  if (DECLARATION_HANDLER_PROPERTY.equals(name)) {\n    return null;\n  }\n else   if (LEXICAL_HANDLER_PROPERTY.equals(name)) {\n    return null;\n  }\n else {\n    return pp.getProperty(name);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/plexus-containers/plexus-component-metadata/src/main/java/org/codehaus/plexus/metadata/merge/Driver.java",
      "classTypes": [
        "String",
        "String",
        "ErrorHandler",
        "String",
        "String",
        "ContentHandler"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "InputSource"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "object",
        "string",
        "equals"
      ]
    },
    {
      "method": "mergeTargets@96",
      "body": "public static ArrayList<URLTarget> mergeTargets(List<URLTarget> targets){\n  HashMap<String,URLTarget> targetMap=new HashMap<String,URLTarget>();\n  for (  URLTarget target : targets) {\n    if (targetMap.containsKey(target.page)) {\n      URLTarget existing=targetMap.get(target.page);\n      existing.samplePages.addAll(target.samplePages);\n      existing.getArgs.addAll(target.getArgs);\n      existing.postArgs.addAll(target.postArgs);\n      existing.sampleValues.putAll(target.sampleValues);\n      if (existing.originalContent.isEmpty() && !target.originalContent.isEmpty()) {\n        existing.originalContent=target.originalContent;\n      }\n    }\n else {\n      targetMap.put(target.page,target);\n    }\n  }\n  return new ArrayList<URLTarget>(targetMap.values());\n}\n",
      "formalParam": [
        "List<URLTarget>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "ArrayList<URLTarget>",
        "ArrayList<URLTarget>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.String.isEmpty()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "$NOT$java.lang.String.isEmpty()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.String.isEmpty()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "$NOT$java.lang.String.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ]
      ],
      "returnType": "ArrayList<URLTarget>",
      "file": "./java_projects/Fuzzer/ExampleFuzzer/src/com/fuzzer/links/URLFinder.java",
      "classTypes": [
        "WebClient"
      ],
      "sorrformalparam": [
        [
          "HtmlPage"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "HashMap",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "list",
        "hash",
        "map",
        "util",
        "array",
        "collection"
      ]
    },
    {
      "method": "write@1252",
      "body": "/** \n * Write this ICC_Profile to a file.\n * @param fileName The file to write the profile data to.\n * @exception IOException If the file cannot be opened for writingor an I/O error occurs while writing to the file.\n */\npublic void write(String fileName) throws IOException {\n  FileOutputStream outputFile;\n  byte profileData[];\n  profileData=getData();\n  outputFile=new FileOutputStream(fileName);\n  outputFile.write(profileData);\n  outputFile.close();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "ICC_Profile"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[],int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.io.InputStream.read(byte[],int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/java/awt/color/ICC_Profile.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int",
        "ICC_Profile",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "InputStream"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.FileOutputStream.write(byte[])",
            "java.io.FileOutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "io"
      ]
    },
    {
      "method": "keyTyped@83",
      "body": "public void keyTyped(KeyEvent event){\n  char keyChar=event.getKeyChar();\n  if (keyChar == t) {\n    ((Component)event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n    graphMouse.setMode(Mode.TRANSFORMING);\n  }\n else   if (keyChar == p) {\n    ((Component)event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n    graphMouse.setMode(Mode.PICKING);\n  }\n}\n",
      "formalParam": [
        "KeyEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.KeyEvent.getKeyChar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Component.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Component.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/lcmc/src/lib/edu/uci/ics/jung/visualization/control/ModalLensGraphMouse.java",
      "classTypes": [
        "char",
        "LensMagnificationGraphMousePlugin",
        "char",
        "ModalGraphMouse"
      ],
      "sorrformalparam": [],
      "types": [
        "Character",
        "KeyEvent"
      ],
      "apicalls": [
        "getKeyChar",
        "setCursor"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.KeyEvent.getKeyChar()",
            "java.awt.Cursor.getPredefinedCursor(int)",
            "java.awt.Component.setCursor(java.awt.Cursor)"
          ]
        }
      ],
      "keywords": [
        "set"
      ]
    },
    {
      "method": "formatDecimal@905",
      "body": "/** \n * Format a real number\n * @param value real number to format\n * @param precision max # of digits after the decimal place\n * @param bTruncateZeros remove any trailing zeros after decimal place\n * @param bRound Whether the number will be rounded to the precision, ortruncated off.\n * @return formatted string\n */\npublic static String formatDecimal(double value,int precision,boolean bTruncateZeros,boolean bRound){\n  if (Double.isNaN(value) || Double.isInfinite(value)) {\n    return Constants.INFINITY_STRING;\n  }\n  double tValue;\n  if (bRound) {\n    tValue=value;\n  }\n else {\n    if (precision == 0) {\n      tValue=(long)value;\n    }\n else {\n      double shift=Math.pow(10,precision);\n      tValue=((long)(value * shift)) / shift;\n    }\n  }\n  int cache_index=(precision << 2) + ((bTruncateZeros ? 1 : 0) << 1) + (bRound ? 1 : 0);\n  NumberFormat nf=null;\n  if (cache_index < cached_number_formats.length) {\n    nf=cached_number_formats[cache_index];\n  }\n  if (nf == null) {\n    nf=NumberFormat.getNumberInstance();\n    nf.setGroupingUsed(false);\n    if (!bTruncateZeros) {\n      nf.setMinimumFractionDigits(precision);\n    }\n    if (bRound) {\n      nf.setMaximumFractionDigits(precision);\n    }\n    if (cache_index < cached_number_formats.length) {\n      cached_number_formats[cache_index]=nf;\n    }\n  }\n  return nf.format(tValue);\n}\n",
      "formalParam": [
        "double",
        "int",
        "boolean",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Double.isNaN(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Double.isInfinite(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Math.pow(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.text.NumberFormat.getNumberInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.text.NumberFormat"
          },
          {
            "_call": "java.text.NumberFormat.setGroupingUsed(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.NumberFormat.setMinimumFractionDigits(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.NumberFormat.format(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.isNaN(double)",
              "java.lang.Double.isInfinite(double)",
              "java.lang.Math.pow(double,double)",
              "java.text.NumberFormat.getNumberInstance()",
              "java.text.NumberFormat.setGroupingUsed(boolean)",
              "java.text.NumberFormat.setMinimumFractionDigits(int)",
              "java.text.NumberFormat.setMaximumFractionDigits(int)",
              "java.text.NumberFormat.format(double)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/frostwire-android/src/azureus/org/gudy/azureus2/core3/util/DisplayFormatters.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "long"
        ],
        [
          "int"
        ],
        [
          "long",
          "boolean"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "long"
        ],
        [
          "int"
        ],
        [
          "long",
          "boolean",
          "boolean",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "format",
        "getNumberInstance",
        "setMinimumFractionDigits",
        "isInfinite"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.isNaN(double)",
            "java.lang.Double.isInfinite(double)",
            "java.lang.Math.pow(double,double)",
            "java.text.NumberFormat.getNumberInstance()",
            "java.text.NumberFormat.setGroupingUsed(boolean)",
            "java.text.NumberFormat.setMinimumFractionDigits(int)",
            "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "java.text.NumberFormat.format(double)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "setParameters@204",
      "body": "/** \n * @see com.amazonaws.Request#setParameters(java.util.Map)\n */\npublic void setParameters(Map<String,String> parameters){\n  this.parameters.clear();\n  this.parameters.putAll(parameters);\n}\n",
      "formalParam": [
        "Map<String,String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.putAll(java.util.Map)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.clear()",
              "java.util.Map<java.lang.String,java.lang.String>.putAll(java.util.Map)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/aws-sdk-for-android/src/com/amazonaws/DefaultRequest.java",
      "classTypes": [
        "AmazonWebServiceRequest",
        "Map<String,String>"
      ],
      "sorrformalparam": [
        [
          "Map<String,String>"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "putAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.clear()",
            "java.util.Map<java.lang.String,java.lang.String>.putAll(java.util.Map)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "clearModel@238",
      "body": "public void clearModel(){\n  setStageTableName(null);\n  getFileInfo().clear();\n  setColumns(null);\n  setData(null);\n  validate();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "boolean",
        "int",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Arrays.equals(long[],long[])",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.hashCode(long[])",
              "java.lang.String.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/data-access/src/org/pentaho/platform/dataaccess/datasource/wizard/models/ModelInfo.java",
      "classTypes": [
        "long",
        "String",
        "ColumnInfo",
        "FileTransformStats",
        "ColumnInfoCollection",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "CsvFileInfo"
        ],
        [
          "String"
        ],
        [],
        [
          "Object"
        ],
        [],
        [
          "ColumnInfo[]"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "testRehash@73",
      "body": "public void testRehash() throws IOException, InterruptedException {\n  EmbeddedCacheManager cacheManager=buildCacheManager();\n  cacheManagers.addLast(cacheManager);\n  cacheManager.getCache(\"serviceGroup\");\n  new AddNodeTask().run();\n  new AddNodeTask().run();\n  new AddNodeTask().run();\n  Thread.sleep(3000);\n  log.info(\"Start testing\");\n  ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors.newFixedThreadPool(TEST_THREADS);\n  executor.prestartAllCoreThreads();\n  for (int i=0; i < TEST_LOOPS; i++) {\n    executor.submit(new SimulateTask());\n  }\n  for (int i=0; i < 10; i++) {\n    try {\n      Thread.sleep(3000);\n      if (i != 1) {\n        new AddNodeTask().run();\n      }\n else {\n        new RemoveNodeTask().run();\n      }\n    }\n catch (    RuntimeException e) {\n      log.warn(\"Error during add/remove node\",e);\n    }\n  }\n  log.info(\"Rehash phase is completed...\");\n  executor.shutdown();\n  executor.awaitTermination(1,TimeUnit.DAYS);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.shutdown()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/infinispan/core/src/test/java/org/infinispan/distribution/rehash/RehashStressTest.java",
      "classTypes": [
        "TestKey",
        "int",
        "int",
        "int",
        "Cache",
        "Logger",
        "LinkedList<EmbeddedCacheManager>"
      ],
      "sorrformalparam": [],
      "types": [
        "Long"
      ],
      "apicalls": [
        "prestartAllCoreThreads",
        "nextInt",
        "awaitTermination"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.sleep(long)",
            "java.util.concurrent.ThreadPoolExecutor.prestartAllCoreThreads()",
            "java.lang.Thread.sleep(long)",
            "java.util.Random.nextInt(int)",
            "java.util.concurrent.ThreadPoolExecutor.shutdown()",
            "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "long"
      ]
    },
    {
      "method": "createErrorFigure@30",
      "body": "public static IFigure createErrorFigure(final Throwable e){\n  final Label label=new Label();\n  label.setText(formatException(e));\n  return label;\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.close()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "IFigure",
      "file": "./java_projects/org.openscada.dakara/org.openscada.vi.ui.draw2d/src/org/openscada/vi/ui/draw2d/Helper.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "PrintWriter",
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "java.lang.Throwable.printStackTrace(java.io.PrintWriter)",
            "java.io.PrintWriter.close()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "throwable",
        "print",
        "io"
      ]
    },
    {
      "method": "main@3",
      "body": "public static void main(String[] args){\n  int i;\n  int[] list=new int[4];\n  for (i=0; i < list.length; i++)   list[i]=(int)(Math.random() * 10);\n  print(list,0);\n  System.out.println();\n  System.out.println(recurse(list,0));\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/COMP-1020---Winter-2012/08_Recursion/Recurse.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "PrintStream",
        "Integer",
        "String"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.println()",
            "java.io.PrintStream.println(int)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "integer",
        "println",
        "string",
        "io"
      ]
    },
    {
      "method": "getText@102",
      "body": "/** \n * Get and format message string from resource\n * @param key selects message from resource\n * @param a1 first argument to be replaced in the message.\n * @param a2 second argument to be replaced in the message.\n */\npublic String getText(String key,String a1,String a2){\n  return getText(key,a1,a2,null);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ResourceBundle.getBundle(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ResourceBundle"
          },
          {
            "_call": "java.util.ResourceBundle.getString(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ResourceBundle.getBundle(java.lang.String)",
              "java.util.ResourceBundle.getString(java.lang.String)",
              "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ResourceBundle.getBundle(java.lang.String)",
              "java.util.ResourceBundle.getString(java.lang.String)",
              "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ResourceBundle.getBundle(java.lang.String)",
              "java.util.ResourceBundle.getString(java.lang.String)",
              "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ResourceBundle.getBundle(java.lang.String)",
              "java.util.ResourceBundle.getString(java.lang.String)",
              "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/DPJ/Implementation/Compiler/src/share/classes/com/sun/tools/doclets/internal/toolkit/util/MessageRetriever.java",
      "classTypes": [
        "String",
        "Configuration",
        "ResourceBundle"
      ],
      "sorrformalparam": [
        [
          "SourcePosition",
          "String"
        ],
        [
          "String"
        ],
        [
          "SourcePosition",
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "MessageFormat",
        "String",
        "ResourceBundle",
        "Object"
      ],
      "apicalls": [
        "format",
        "getBundle"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ResourceBundle.getBundle(java.lang.String)",
            "java.util.ResourceBundle.getString(java.lang.String)",
            "java.text.MessageFormat.format(java.lang.String,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "text"
      ]
    },
    {
      "method": "getImage@148",
      "body": "/** \n * Returns an  {@link Image} stored in the file at the specified path relative to the specified class.\n * @param clazz the  {@link Class} relative to which to find the image\n * @param path the path to the image file, if starts with <code>'/'</code>\n * @return the {@link Image} stored in the file at the specified path\n */\npublic static Image getImage(Class<?> clazz,String path){\n  String key=clazz.getName() + '|' + path;\n  Image image=m_imageMap.get(key);\n  if (image == null) {\n    try {\n      image=getImage(clazz.getResourceAsStream(path));\n      m_imageMap.put(key,image);\n    }\n catch (    Exception e) {\n      image=getMissingImage();\n      m_imageMap.put(key,image);\n    }\n  }\n  return image;\n}\n",
      "formalParam": [
        "Class<?>",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Image",
      "file": "./java_projects/p2-browser/com.ifedorenko.p2browser/src/org/eclipse/wb/swt/SWTResourceManager.java",
      "classTypes": [
        "Map<Integer,Cursor>",
        "int",
        "Map<RGB,Color>",
        "int",
        "int",
        "Map<String,Image>",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "InputStream",
        "String"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "class",
        "stream",
        "get",
        "name",
        "resource"
      ]
    },
    {
      "method": "dropObject@140",
      "body": "/** \n * <p> Execute a DDL statement to drop an object if it exists. Swallow exceptions. </p>\n */\npublic static void dropObject(String objectType,String objectName,boolean objectIfMissing) throws SQLException {\n  String dropDDL=\"drop \" + objectType + \" \"+ objectName;\n  Connection conn=getLocalConnection();\n  print(dropDDL);\n  try {\n    PreparedStatement dropStatement=conn.prepareStatement(dropDDL);\n    dropStatement.execute();\n    dropStatement.close();\n  }\n catch (  SQLException s) {\n    if (objectIfMissing) {\n      throw s;\n    }\n  }\n}\n",
      "formalParam": [
        "String",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.DriverManager.getConnection(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Connection"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.Connection.prepareStatement(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.PreparedStatement"
          },
          {
            "_call": "java.sql.PreparedStatement.execute()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.reflect.Method.getName()",
              "java.sql.DriverManager.getConnection(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.DriverManager.getConnection(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()",
              "java.sql.SQLException.SQLException(java.lang.String)",
              "java.sql.SQLException.setNextException(java.sql.SQLException)"
            ]
          },
          {
            "calls": [
              "java.sql.DriverManager.getConnection(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Cooking-to-Goal/lib/db-derby-10.7.1.1-bin/demo/programs/vtis/java/org/apache/derbyDemo/vtis/core/VTIHelper.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Method"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [
        "getConnection",
        "println",
        "execute"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.DriverManager.getConnection(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.sql.Connection.prepareStatement(java.lang.String)",
            "java.sql.PreparedStatement.execute()",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "prepare"
      ]
    },
    {
      "method": "setDataQualified@161",
      "body": "/** \n * Similar to setData except that if the key is prefixed by \"parent.\"  set the data in the parent.\n * @param qualifiedKey A key which may be prefixed by parent.\n * @param data The value to set\n */\npublic void setDataQualified(String qualifiedKey,String data){\n  if (qualifiedKey == null) {\n    throw new IllegalArgumentException();\n  }\n  if (qualifiedKey.startsWith(PARENT_PREFIX) && parent != null) {\n    parent.setData(qualifiedKey.substring(PARENT_PREFIX.length()),data);\n  }\n else {\n    setData(qualifiedKey,data);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Hashtable.Hashtable(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.startsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "Set",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.keySet()"
            ]
          },
          {
            "calls": [
              "java.util.HashSet.HashSet()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.remove(java.lang.Object)",
              "java.util.Hashtable.Hashtable(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.ua/org.eclipse.ui.cheatsheets/src/org/eclipse/ui/internal/cheatsheets/views/CheatSheetManager.java",
      "classTypes": [
        "ICheatSheetManager"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String",
          "String"
        ],
        [
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.startsWith(java.lang.String)",
            "java.util.Map.remove(java.lang.Object)",
            "java.util.Hashtable.Hashtable(int)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "removeMessageHandler@549",
      "body": "public void removeMessageHandler(MessageHandler mh,int low,int high){\nsynchronized (messageHandlers) {\n    for (int i=0; i < messageHandlers.size(); i++) {\n      HandlerEntry he=messageHandlers.get(i);\n      if ((he.mh == mh) && (he.low == low) && (he.high == high)) {\n        messageHandlers.remove(i);\n        break;\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "MessageHandler",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "java.util.List<Tau_E>.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.Socket.close()",
              "java.lang.Throwable.getMessage()",
              "java.net.Socket.close()",
              "java.util.Vector<Tau_E>.Vector()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.Socket.getInputStream()",
              "java.net.Socket.getOutputStream()",
              "java.net.Socket.getInputStream()",
              "java.net.Socket.getOutputStream()",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.setDaemon(boolean)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.Socket.close()",
              "java.lang.Throwable.getMessage()",
              "java.net.Socket.close()",
              "java.util.Vector<Tau_E>.Vector()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ganymed-ssh-2/src/main/java/ch/ethz/ssh2/transport/TransportManager.java",
      "classTypes": [
        "KexManager",
        "Throwable",
        "MessageHandler",
        "Logger",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "byte[]"
        ],
        [
          "String",
          "CryptoWishList",
          "ServerHostKeyVerifier",
          "DHGexParameters",
          "int",
          "SecureRandom",
          "ProxyData"
        ],
        [
          "Throwable",
          "boolean"
        ]
      ],
      "types": [],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.remove(int)",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "main@33",
      "body": "public static void main(String[] args) throws Exception {\n  if (args.length < 1) {\n    System.err.println(\"Need to give a filename\");\n    System.exit(1);\n  }\n  HSLFSlideShow ss=new HSLFSlideShow(args[0]);\n  Record[] records=ss.getRecords();\n  for (int i=0; i < records.length; i++) {\n    if (records[i].getRecordType() == 1000l) {\n      Record docRecord=records[i];\n      Record[] docChildren=docRecord.getChildRecords();\n      for (int j=0; j < docChildren.length; j++) {\n        if (docChildren[j] instanceof SlideListWithText) {\n          Record[] slwtChildren=docChildren[j].getChildRecords();\n          int lastTextLen=-1;\n          for (int k=0; k < slwtChildren.length; k++) {\n            if (slwtChildren[k] instanceof TextCharsAtom) {\n              lastTextLen=((TextCharsAtom)slwtChildren[k]).getText().length();\n            }\n            if (slwtChildren[k] instanceof TextBytesAtom) {\n              lastTextLen=((TextBytesAtom)slwtChildren[k]).getText().length();\n            }\n            if (slwtChildren[k] instanceof StyleTextPropAtom) {\n              StyleTextPropAtom stpa=(StyleTextPropAtom)slwtChildren[k];\n              stpa.setParentTextSize(lastTextLen);\n              showStyleTextPropAtom(stpa);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/poi/src/scratchpad/src/org/apache/poi/hslf/dev/TextStyleListing.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "System"
      ],
      "apicalls": [
        "println",
        "exit"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "print",
        "stream",
        "io",
        "println",
        "exit",
        "string",
        "integer"
      ]
    },
    {
      "method": "setViewHeight@859",
      "body": "public void setViewHeight(int viewId,int value){\n  addAction(new SetLayoutSize(viewId,SetLayoutSize.HEIGHT,value));\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/RA_Launcher/src/mobi/intuitit/android/widget/SimpleRemoteViews.java",
      "classTypes": [
        "Parcelable.Creator<SimpleRemoteViews>",
        "Object",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "int",
          "String",
          "CharSequence"
        ],
        [
          "Parcel"
        ],
        [
          "int",
          "String",
          "Uri"
        ],
        [
          "int",
          "String",
          "float"
        ],
        [
          "View"
        ],
        [
          "int",
          "String",
          "long"
        ],
        [
          "int",
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "int",
          "String",
          "Bitmap"
        ],
        [
          "int",
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "add"
      ]
    },
    {
      "method": "split@435",
      "body": "/** \n * <p>Split a string into one or more strings, based on a set of delimiter. This method is intended to be reminiscent of the corresponding perl or awk <i>split()</i> function, though without regular expression support.</p> <p>Note that the 1.4 JDK introduces a regular expression-based <tt>split()</tt> method in the <tt>java.lang.String</tt> class. This method does not use regular expressions.</p>\n * @param s                   the string to split\n * @param delimSet            set of delimiters, or null to use white space\n * @param preserveEmptyFields Whether to parse through empty tokens orpreserve them. For example, given the string string \"a:b::c\" and a delimiter of \":\", if <tt>preserveEmptyStrings</tt> is <tt>true</tt>, then this method will return four strings, \"a\", \"b\", \"\", \"c\". If <tt>preserveEmptyStrings</tt> is <tt>false</tt>, then this method will return three strings, \"a\", \"b\", \"c\" (since the two adjacent \":\" characters are treated as one delimiter.)\n * @return an array of <tt>String</tt> objects\n * @see #split(String,String)\n * @see #split(String)\n * @see #split(String,char)\n * @see #split(String,Collection)\n * @see #split(String,char,Collection)\n * @see #split(String,String,Collection)\n */\npublic static String[] split(String s,String delimSet,boolean preserveEmptyFields){\n  String[] result=null;\n  StringTokenizer tok;\n  Collection<String> temp=new ArrayList<String>();\n  if (delimSet == null)   delimSet=\" \\t\\n\\r\";\n  tok=new StringTokenizer(s,delimSet,preserveEmptyFields);\n  boolean lastWasDelim=true;\n  while (tok.hasMoreTokens()) {\n    String token=tok.nextToken();\n    if (preserveEmptyFields && (token.length() == 1) && (delimSet.indexOf(token.charAt(0)) != -1)) {\n      if (lastWasDelim)       token=\"\";\n else {\n        lastWasDelim=true;\n        continue;\n      }\n    }\n else {\n      lastWasDelim=false;\n    }\n    temp.add(token);\n  }\n  result=new String[temp.size()];\n  temp.toArray(result);\n  return result;\n}\n",
      "formalParam": [
        "String",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.Collection<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.util.Collection<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "String[]",
        "String",
        "String",
        "String[]",
        "String[]",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.Integer.toHexString(int)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String[]",
      "file": "./java_projects/javautil/src/main/java/org/clapper/util/text/TextUtil.java",
      "classTypes": [
        "RomanNumberTableEntry[]",
        "String",
        "char[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "String",
          "char"
        ],
        [
          "int"
        ],
        [
          "char"
        ],
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "int",
          "char"
        ],
        [
          "String",
          "int",
          "char"
        ],
        [
          "int"
        ],
        [
          "String",
          "int"
        ],
        [
          "short"
        ]
      ],
      "types": [],
      "apicalls": [
        "hasMoreTokens"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.String.length()",
            "java.util.Collection<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.Collection<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "tokens"
      ]
    },
    {
      "method": "main@257",
      "body": "public static void main(String args[]){\n  DemoBinaryImageLabelOpsApp app=new DemoBinaryImageLabelOpsApp(ImageFloat32.class);\n  List<PathLabel> inputs=new ArrayList<PathLabel>();\n  inputs.add(new PathLabel(\"particles\",\"../data/evaluation/particles01.jpg\"));\n  inputs.add(new PathLabel(\"shapes\",\"../data/evaluation/shapes01.png\"));\n  app.setInputList(inputs);\n  while (!app.getHasProcessedImage()) {\n    Thread.yield();\n  }\n  ShowImages.showWindow(app,\"Label Binary Blobs\");\n  System.out.println(\"Done\");\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.yield()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.EventObject.getSource()"
            ]
          },
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/BoofCV/evaluation/visualization/src/boofcv/alg/binary/DemoBinaryImageLabelOpsApp.java",
      "classTypes": [
        "ImageUInt8",
        "FilterLabelBlobs",
        "ImageUInt8",
        "ImagePanel",
        "int",
        "T"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Thread.yield()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io"
      ]
    },
    {
      "method": "getGlobal@632",
      "body": "public Object getGlobal(final String identifier){\n  try {\n    this.lock.lock();\n    return this.globalResolver.resolveGlobal(identifier);\n  }\n  finally {\n    this.lock.unlock();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "List",
        "void",
        "WorkItemManager",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicLong.getAndIncrement()"
            ]
          },
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicLong.getAndIncrement()",
              "java.util.concurrent.atomic.AtomicLong.set(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicLong.decrementAndGet()",
              "java.util.concurrent.atomic.AtomicLong.set(long)"
            ]
          },
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicLong.decrementAndGet()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/common/AbstractWorkingMemory.java",
      "classTypes": [
        "Map<String,ExitPoint>"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [
          "GlobalResolver"
        ]
      ],
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "locks"
      ]
    },
    {
      "method": "outputNodePop@93",
      "body": "/** \n * Pop a frame for visible namespace.\n */\npublic void outputNodePop(){\n  nameSpaces--;\n  pop();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.List.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "Attr",
        "void",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.remove(int)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Collection.add(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.util.List.size()",
              "java.util.List.remove(int)",
              "java.util.List.add(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.remove(int)",
              "java.util.List.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/com/sun/org/apache/xml/internal/security/c14n/implementations/NameSpaceSymbTable.java",
      "classTypes": [
        "String",
        "boolean",
        "SymbMap",
        "int",
        "List"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Collection"
        ],
        [
          "String",
          "String",
          "Attr"
        ],
        []
      ],
      "types": [
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.remove(int)",
            "java.util.List.get(int)"
          ]
        }
      ],
      "keywords": [
        "util",
        "get"
      ]
    },
    {
      "method": "concurrent_data_load@57",
      "body": "@Test public void concurrent_data_load() throws InterruptedException {\n  final int NUM_THREADS=5;\n  final int NUM_OBJECTS=200;\n  final Thread[] threads=new Thread[NUM_THREADS];\n  final AtomicInteger idx=new AtomicInteger(0);\n  for (int i=0; i < threads.length; i++) {\n    threads[i]=new Thread(new Runnable(){\n      public void run(){\n        RiakClient riak=new RiakClient(RIAK_URL);\n        Random rnd=new Random();\n        for (int i=0; i < NUM_OBJECTS / NUM_THREADS; i++) {\n          String key=\"data-load-\" + idx.getAndIncrement();\n          String value=CharsetUtils.asUTF8String(data[rnd.nextInt(NUM_VALUES)]);\n          RiakObject o=riak.fetch(BUCKET,key).getObject();\n          if (o == null) {\n            o=new RiakObject(riak,BUCKET,key,CharsetUtils.utf8StringToBytes(value));\n          }\n else {\n            o.setValue(value);\n          }\n          Utils.assertSuccess(o.store());\n        }\n      }\n    }\n);\n    threads[i].start();\n  }\n  for (  Thread thread : threads) {\n    thread.join();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextBytes(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "java.util.Random.Random()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/riak-java-client/src/test/java/com/basho/riak/client/http/itest/ITestDataLoad.java",
      "classTypes": [
        "int",
        "String",
        "int",
        "byte"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "InterruptedException",
        "Integer",
        "Thread"
      ],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "runnable",
        "thread",
        "atomic",
        "concurrent",
        "integer"
      ]
    },
    {
      "method": "appendFile@150",
      "body": "/** \n * Append text after an existing file\n * @param file\n * @param text\n * @throws IOException\n */\npublic static void appendFile(File file,List<String> text) throws IOException {\n  String str=\"\";\n  if (text != null) {\n    if (text.size() > 0) {\n      for (      String s : text) {\n        str+=s + \"\\n\";\n      }\n    }\n  }\n  appendFile(file,str);\n}\n",
      "formalParam": [
        "File",
        "List<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.FileWriter.FileWriter(java.io.File)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.Writer.append(java.lang.CharSequence)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.Writer"
          },
          {
            "_call": "java.io.OutputStreamWriter.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "boolean",
        "boolean",
        "String",
        "List<String>",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.size()",
              "java.io.FileWriter.FileWriter(java.io.File)",
              "java.io.Writer.write(java.lang.String)",
              "java.io.OutputStreamWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileWriter.FileWriter(java.io.File)",
              "java.io.Writer.append(java.lang.CharSequence)",
              "java.io.OutputStreamWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.delete()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "$NOT$java.io.File.exists()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "$NOT$java.io.File.exists()",
              "java.io.File.mkdirs()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.InputStream.read(byte[])",
              "java.io.ByteArrayOutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.InputStream.close()",
              "java.io.ByteArrayOutputStream.close()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.lang.String.String(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileReader.FileReader(java.io.File)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.io.BufferedReader.readLine()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.io.BufferedReader.readLine()",
              "java.io.BufferedReader.close()",
              "java.io.InputStreamReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream)",
              "java.io.Writer.write(java.lang.String)",
              "java.io.OutputStreamWriter.close()",
              "java.io.OutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileWriter.FileWriter(java.io.File)",
              "java.io.Writer.write(java.lang.String)",
              "java.io.OutputStreamWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileWriter.FileWriter(java.io.File)",
              "java.io.Writer.append(java.lang.CharSequence)",
              "java.io.OutputStreamWriter.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/root-tools/FindAroundHD/src/com/rarnu/findaround/common/FileUtils.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "File",
          "List<String>"
        ],
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "Context",
          "String"
        ],
        [
          "File"
        ],
        [
          "Context",
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "File",
          "String"
        ]
      ],
      "types": [
        "OutputStreamWriter"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.io.FileWriter.FileWriter(java.io.File)",
            "java.io.Writer.append(java.lang.CharSequence)",
            "java.io.OutputStreamWriter.close()"
          ]
        }
      ],
      "keywords": [
        "list",
        "append",
        "util",
        "size",
        "writer",
        "sequence",
        "output",
        "exception"
      ]
    },
    {
      "method": "removePropertyChangeListener@200",
      "body": "public void removePropertyChangeListener(IPropertyChangeListener listener){\n  if (fPropertyListeners.containsKey(listener)) {\n    fPropertyListeners.remove(listener);\n  }\n}\n",
      "formalParam": [
        "IPropertyChangeListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Hashtable.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Hashtable.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Hashtable.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.toString(int)",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.debug/org.eclipse.debug.ui/ui/org/eclipse/debug/internal/ui/views/memory/MemoryViewSynchronizationService.java",
      "classTypes": [
        "int",
        "IMemoryRendering",
        "IPropertyChangeListener",
        "IMemoryRendering",
        "Hashtable"
      ],
      "sorrformalparam": [
        [],
        [
          "PropertyChangeEvent"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.remove(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key"
      ]
    },
    {
      "method": "getSystemIcon@205",
      "body": "/** \n * Icon for a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"M:\\\" directory displays a CD-ROM icon. The default implementation gets information from the ShellFolder class.\n * @param f a <code>File</code> object\n * @return an icon as it would be displayed by a native file chooser\n * @see JFileChooser#getIcon\n * @since 1.4\n */\npublic Icon getSystemIcon(File f){\n  if (f != null) {\n    ShellFolder sf=getShellFolder(f);\n    Image img=sf.getIcon(false);\n    if (img != null) {\n      return new ImageIcon(img,sf.getFolderType());\n    }\n else {\n      return UIManager.getIcon(f.isDirectory() ? \"FileView.directoryIcon\" : \"FileView.fileIcon\");\n    }\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.isDirectory()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "javax.swing.UIManager.getIcon(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.Icon"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.awt.Image,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "FileSystemView",
        "File[]",
        "Boolean",
        "boolean",
        "boolean",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.UIManager.getDefaults()",
              "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()"
            ]
          },
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()",
              "java.util.Vector.addElement(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.isDirectory()",
              "java.lang.Boolean.valueOf(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getAbsolutePath()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getParent()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "Icon",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/filechooser/FileSystemView.java",
      "classTypes": [
        "String",
        "boolean",
        "String",
        "String",
        "FileSystemView",
        "FileSystemView",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "File",
          "boolean"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "javax.swing.ImageIcon.ImageIcon(java.awt.Image,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "java.io.File.isDirectory()",
            "javax.swing.UIManager.getIcon(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "trace",
        "image",
        "boolean",
        "swing",
        "string",
        "stack"
      ]
    },
    {
      "method": "PageContext@45",
      "body": "public PageContext(){\n  previousPageMap=getOrCreateAttributeMap();\n  nextPageMap=new HashMap<String,Object>();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.putAll(java.util.Map)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Seam_2_3/jboss-seam/src/main/java/org/jboss/seam/contexts/PageContext.java",
      "classTypes": [
        "Map<String,Object>"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "HashMap",
        "Object",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()"
          ]
        }
      ],
      "keywords": [
        "util",
        "object",
        "map",
        "hash",
        "string"
      ]
    },
    {
      "method": "getAntlrTokenFile@11",
      "body": "public InputStream getAntlrTokenFile(){\n  ClassLoader classLoader=getClass().getClassLoader();\n  return classLoader.getResourceAsStream(\"org/eclipse/xtext/builder/tests/parser/antlr/internal/InternalBuilderTestLanguage.tokens\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "InputStream",
      "file": "./java_projects/xtext/tests/org.eclipse.xtext.builder.tests/src-gen/org/eclipse/xtext/builder/tests/parser/antlr/BuilderTestLanguageAntlrTokenFileProvider.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "InputStream",
        "String"
      ],
      "apicalls": [
        "getResourceAsStream",
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "loader",
        "input",
        "class",
        "stream",
        "lang",
        "get"
      ]
    },
    {
      "method": "resetDefaultForeignSource@103",
      "body": "/** \n * <p>resetDefaultForeignSource</p>\n * @throws org.opennms.netmgt.provision.persist.ForeignSourceRepositoryException if any.\n */\npublic void resetDefaultForeignSource() throws ForeignSourceRepositoryException {\n  final File deleteFile=new File(ConfigFileConstants.getFilePathString() + \"default-foreign-source.xml\");\n  if (!deleteFile.exists()) {\n    return;\n  }\n  if (!deleteFile.delete()) {\n    LogUtils.warnf(this,\"unable to remove %s\",deleteFile.getPath());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.delete()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/opennms_dashboard/opennms-provision/opennms-provision-persistence/src/main/java/org/opennms/netmgt/provision/persist/AbstractForeignSourceRepository.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "ForeignSource"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.delete()",
            "java.io.File.getPath()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "path"
      ]
    },
    {
      "method": "assertNoMatch@59",
      "body": "static public void assertNoMatch(String actual,String regex,String where,String msg){\n  if (msg == null)   msg=String.format(\"%s'%s' does NOT match regex '%s'\",where + \" \",actual,regex);\n  Pattern p=Pattern.compile(regex,Pattern.MULTILINE | Pattern.DOTALL);\n  assertFalse(p.matcher(actual).matches(),msg);\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Boolean.valueOf(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
              "java.util.regex.Pattern.compile(java.lang.String,int)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()",
              "java.lang.Boolean.valueOf(boolean)"
            ]
          },
          {
            "calls": [
              "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
              "java.util.regex.Pattern.compile(java.lang.String,int)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.find()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Comparator<java.lang.Object>.compare(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/webui-framework/src/com/redhat/qe/auto/testng/Assert.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [
          "Object",
          "Object",
          "Comparator<Object>",
          "String"
        ],
        [
          "String",
          "String",
          "String"
        ],
        [
          "Object",
          "Object",
          "Comparator<Object>",
          "String"
        ]
      ],
      "types": [
        "CharSequence"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "java.util.regex.Pattern.compile(java.lang.String,int)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()",
            "java.lang.Boolean.valueOf(boolean)"
          ]
        },
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "java.util.regex.Pattern.compile(java.lang.String,int)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "log",
        "format"
      ]
    },
    {
      "method": "ReferenceSourcePersistenceTest@70",
      "body": "public ReferenceSourcePersistenceTest() throws Exception {\n  super();\n  persister=new ReferenceSourcePersister(DaoFactory.getInstance(entityManager),new Timestamp(System.currentTimeMillis()));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.sql.Timestamp.Timestamp(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/BioInvIndex/model/src/test/java/uk/ac/ebi/bioinvindex/persistence/ReferenceSourcePersistenceTest.java",
      "classTypes": [
        "ReferenceSourcePersister"
      ],
      "sorrformalparam": [],
      "types": [
        "Long",
        "System"
      ],
      "apicalls": [
        "currentTimeMillis"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.sql.Timestamp.Timestamp(long)"
          ]
        }
      ],
      "keywords": [
        "long",
        "sql",
        "millis",
        "time",
        "lang",
        "system",
        "timestamp"
      ]
    },
    {
      "method": "testPersistRepository@122",
      "body": "@Test public void testPersistRepository() throws Exception {\n  File repoDir=tempManager.newFolder(\"targetDir\");\n  subject=ModuleArtifactRepository.createInstance(null,repoDir);\n  OutputStream outputStream=subject.getOutputStream(newDescriptor(BINARY_ARTIFACT_KEY));\n  writeAndClose(outputStream,BINARY_ARTIFACT_SIZE);\n  IArtifactRepository result=reloadRepository(repoDir);\n  assertThat(artifactSizeOf(BINARY_ARTIFACT_KEY,result),is(BINARY_ARTIFACT_SIZE));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.fill(byte[],byte)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.fill(byte[],byte)",
              "java.io.OutputStream.write(byte[])",
              "java.io.OutputStream.flush()",
              "java.io.OutputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tycho/tycho-bundles/org.eclipse.tycho.p2.maven.repository.tests/src/test/java/org/eclipse/tycho/repository/module/ModuleArtifactRepositoryTest.java",
      "classTypes": [
        "int",
        "File",
        "ArtifactKey",
        "TemporaryFolder",
        "int",
        "IArtifactKey"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "fill"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.fill(byte[],byte)",
            "java.io.OutputStream.write(byte[])",
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "fill",
        "arrays",
        "io"
      ]
    },
    {
      "method": "removeNatureFromProject@101",
      "body": "public static void removeNatureFromProject(String id,IProject project,IProgressMonitor monitor) throws CoreException {\n  IProjectNature nature=project.getNature(id);\n  if (nature != null) {\n    IProjectDescription description=project.getDescription();\n    List<String> naturesList=new ArrayList<String>(Arrays.asList(description.getNatureIds()));\n    naturesList.remove(id);\n    description.setNatureIds(naturesList.toArray(new String[naturesList.size()]));\n    project.setDescription(description,monitor);\n  }\n}\n",
      "formalParam": [
        "String",
        "IProject",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.remove(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/wolips/wolips/core/plugins/org.objectstyle.wolips.baseforplugins/java/org/objectstyle/wolips/baseforplugins/util/WOLipsNatureUtils.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "IProject",
          "IProgressMonitor"
        ]
      ],
      "types": [
        "Object",
        "Arrays",
        "String",
        "List",
        "Collection"
      ],
      "apicalls": [
        "toArray",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
            "java.util.List<java.lang.String>.remove(java.lang.Object)",
            "java.util.List<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "array",
        "list"
      ]
    },
    {
      "method": "add@31",
      "body": "public void add(String attribute,Object value){\n  Object logoValue=netStreamToLogo(value);\n  if (logoValue == null)   return;\n  LogoListBuilder builder=map.get(attribute);\n  if (builder == null) {\n    builder=new LogoListBuilder();\n    map.put(attribute,builder);\n  }\n  builder.add(logoValue);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Number.doubleValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.Double(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.lang.Class.isArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Number.doubleValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.Double(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/gs-netlogo/src/org/graphstream/netlogo/extension/receiver/Attributes.java",
      "classTypes": [
        "Map<String,LogoListBuilder>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Number",
        "Class"
      ],
      "apicalls": [
        "doubleValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Number.doubleValue()",
            "java.lang.Double.Double(double)",
            "$NOT$java.lang.Class.isArray()",
            "java.lang.Number.doubleValue()",
            "java.lang.Double.Double(double)"
          ]
        }
      ],
      "keywords": [
        "number",
        "array",
        "value",
        "class",
        "boolean",
        "double"
      ]
    },
    {
      "method": "evaluate@131",
      "body": "/** \n * org.apache.activemq.filter.Expression#evaluate(MessageEvaluationContext)\n */\npublic Object evaluate(AbstractJMSMessage message) throws AMQInternalException {\n  Object rv=this.getRight().evaluate(message);\n  if (rv == null) {\n    return null;\n  }\n  if (!(rv instanceof String)) {\n    return Boolean.FALSE;\n  }\n  return likePattern.matcher((String)rv).matches() ? Boolean.TRUE : Boolean.FALSE;\n}\n",
      "formalParam": [
        "AbstractJMSMessage"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "_call": "java.util.regex.Matcher.matches()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "BooleanExpression"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/platform/dependencies/andes/java/client/src/main/java/org/wso2/andes/filter/ComparisonExpression.java",
      "classTypes": [
        "HashSet",
        "Pattern"
      ],
      "sorrformalparam": [
        [
          "Expression",
          "String",
          "String"
        ]
      ],
      "types": [
        "Matcher",
        "CharSequence",
        "Boolean"
      ],
      "apicalls": [
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "matcher",
        "util",
        "sequence",
        "regex",
        "char",
        "matches"
      ]
    },
    {
      "method": "type@14551",
      "body": "/** \n * Add option -type to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps type(String type){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-type\");\n  if (type != null) {\n    buf.append(type.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.String.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.String.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Double"
        ],
        [],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.String.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "length"
      ]
    },
    {
      "method": "writeWord@18",
      "body": "public void writeWord(int word) throws IOException {\n  if ((word & 0xffff) != word) {\n    throw new IllegalArgumentException(\"Argument is not a 16 bit word: \" + word);\n  }\n  if (littleEndian) {\n    out.write(word & 0x00ff);\n    out.write((word & 0xff00) >> 8);\n  }\n else {\n    out.write((word & 0xff00) >> 8);\n    out.write(word & 0x00ff);\n  }\n  wordsWritten++;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/DCPU-16-Assembler/src/main/java/com/minesnap/dcpu/assembler/WordWriter.java",
      "classTypes": [
        "boolean",
        "long",
        "OutputStream"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(int)",
            "java.io.OutputStream.write(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "output",
        "exception",
        "write",
        "io"
      ]
    },
    {
      "method": "clearData@66",
      "body": "@Before public void clearData() throws Exception {\n  getMessages(false);\n  convertAndSend(\"foo\");\n  convertAndSend(\"bar\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/activemq/activemq-core/src/test/java/org/apache/activemq/bugs/RawRollbackSharedConsumerTests.java",
      "classTypes": [
        "ConnectionFactory",
        "BrokerService",
        "Destination"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Boolean",
        "String",
        "ArrayList",
        "List"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "boolean",
        "list",
        "array",
        "add"
      ]
    },
    {
      "method": "run@185",
      "body": "@Override public void run(){\n  try {\n    float[] p1=new float[3];\n    float[] p2=new float[3];\n    p1[0]=start_x_image;\n    p1[1]=start_y_image;\n    p1[2]=start_z_image;\n    p2[0]=end_x_image;\n    p2[1]=end_y_image;\n    p2[2]=end_z_image;\n    temporaryPathResult=new PathResult();\n    ClassLoader loader=IJ.getClassLoader();\n    if (loader == null)     throw new RuntimeException(\"IJ.getClassLoader() failed (!)\");\n    try {\n      Class<?> c=loader.loadClass(\"FijiITKInterface.TubularGeodesics\");\n      Object newInstance=c.newInstance();\n      Class[] parameterTypes={String.class,float[].class,float[].class,PathResult.class,TubularGeodesicsTracer.class};\n      Method m=c.getMethod(\"startSearch\",parameterTypes);\n      Object[] parameters=new Object[5];\n      parameters[0]=oofFile.getAbsolutePath();\n      parameters[1]=p1;\n      parameters[2]=p2;\n      parameters[3]=temporaryPathResult;\n      parameters[4]=this;\n      m.invoke(newInstance,parameters);\n    }\n catch (    IllegalArgumentException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"There was an illegal argument when trying to invoke startSearch: \" + e);\n    }\ncatch (    InvocationTargetException e) {\n      reportFinished(false);\n      Throwable realException=e.getTargetException();\n      throw new RuntimeException(\"There was an exception thrown by startSearch: \" + realException);\n    }\ncatch (    ClassNotFoundException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"The FijiITKInterface.TubularGeodesics class was not found: \" + e);\n    }\ncatch (    InstantiationException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"Failed to instantiate the FijiITKInterface.TubularGeodesics object: \" + e);\n    }\ncatch (    IllegalAccessException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"IllegalAccessException when trying to create an instance of FijiITKInterface.TubularGeodesics: \" + e);\n    }\ncatch (    NoSuchMethodException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"There was a NoSuchMethodException when trying to invoke startSearch: \" + e);\n    }\ncatch (    SecurityException e) {\n      reportFinished(false);\n      throw new RuntimeException(\"There was a SecurityException when trying to invoke startSearch: \" + e);\n    }\n  }\n catch (  Throwable t) {\n    System.out.println(\"Got an exception from call to ITK code: \" + t);\n    t.printStackTrace();\n    IJ.error(\"There was an error in calling to ITK code: \" + t);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Class"
              },
              {
                "_call": "java.lang.Class<Tau_T>.newInstance()",
                "_throws": [
                  "java.lang.InstantiationException",
                  "java.lang.IllegalAccessException"
                ],
                "node": "DAPICall",
                "_returns": "Tau_T"
              },
              {
                "_call": "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
                "_throws": [
                  "java.lang.NoSuchMethodException",
                  "java.lang.SecurityException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.reflect.Method"
              },
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ClassLoader.loadClass(java.lang.String)",
              "java.lang.Class<Tau_T>.newInstance()",
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.lang.ClassLoader.loadClass(java.lang.String)",
              "java.lang.Class<Tau_T>.newInstance()",
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/fiji/src-plugins/Simple_Neurite_Tracer/src/main/java/tracing/TubularGeodesicsTracer.java",
      "classTypes": [
        "float"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "loadClass"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.lang.Class<Tau_T>.newInstance()",
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.io.File.getAbsolutePath()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.lang.Class<Tau_T>.newInstance()",
            "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
            "java.io.File.getAbsolutePath()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "throwable",
        "get",
        "illegal",
        "io"
      ]
    },
    {
      "method": "onPackageFilterChanged@567",
      "body": "public void onPackageFilterChanged(String filter){\n  packageFilter_=filter.toLowerCase();\n  setViewPackageList();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/rstudio/src/gwt/src/org/rstudio/studio/client/workbench/views/packages/Packages.java",
      "classTypes": [
        "DefaultCRANMirror",
        "PackageInstallOptions"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.length()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "lower",
        "util",
        "length"
      ]
    },
    {
      "method": "marshallingTest@152",
      "body": "@Test public void marshallingTest() throws JAXBException {\n  WFSCapabilitiesType capa=new WFSCapabilitiesType();\n  List<FeatureTypeType> featList=new ArrayList<FeatureTypeType>();\n  List<String> otherSRS=Arrays.asList(\"urn:ogc:def:crs\",\"crs:EPSG::32615\",\"crs:EPSG::5773\");\n  WGS84BoundingBoxType bbox=new WGS84BoundingBoxType(29.8,-90.1,30,-89.9);\n  FeatureTypeType ft1=new FeatureTypeType(new QName(\"http://www.opengis.net/ows-6/utds/0.3\",\"Building\",\"utds\"),\"\",\"urn:ogc:def:crs:EPSG::4979\",otherSRS,Arrays.asList(bbox));\n  featList.add(ft1);\n  FeatureTypeListType featureList=new FeatureTypeListType(null,featList);\n  capa.setFeatureTypeList(featureList);\n  StringWriter sw=new StringWriter();\n  marshaller.marshal(capa,sw);\n  DeleteElementType del=null;\n  TransactionType transac=new TransactionType(\"WFS\",\"1.1.0\",null,AllSomeType.ALL,del);\n  PropertyIsLikeType pis=new PropertyIsLikeType(\"NAME\",\"Ashton\",\"*\",\"?\",\"\\\\\");\n  FilterType filter=new FilterType(pis);\n  DirectPositionType dp=new DirectPositionType(21400.0,2001368.0);\n  PointType pt=new PointType(null,dp);\n  pt.setSrsName(\"urn:ogc:def:crs:epsg:7.4:27582\");\n  PropertyType property=new PropertyType(new QName(\"the_geom\"),new ValueType(pt));\n  UpdateElementType update=new UpdateElementType(Arrays.asList(property),filter,new QName(\"http://www.opengis.net/gml\",\"NamedPlaces\"),null);\n  transac.getInsertOrUpdateOrDelete().add(update);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.namespace.QName.QName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/geotoolkit-pending/modules/jaxb-xml-binding/geotk-xml-wfs/src/test/java/org/geotoolkit/wfs/xml/v110/WfsXMLBindingTest.java",
      "classTypes": [
        "Marshaller",
        "Unmarshaller",
        "MarshallerPool"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String,java.lang.String)",
            "java.util.Arrays.asList(T[])",
            "java.io.StringWriter.StringWriter()",
            "javax.xml.namespace.QName.QName(java.lang.String)",
            "java.util.Arrays.asList(T[])",
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "test0772@24044",
      "body": "public void test0772() throws Exception {\n  this.runConformTest(new String[]{\"X.java\",\"interface Foo<T> {\\n\" + \"  public T getIt();\\n\" + \"}\\n\"+ \"\\n\"+ \"class FooImpl implements Foo {\\n\"+ \"  public String getIt() {\\n\"+ \"    return null;\\n\"+ \"  }\\n\"+ \"}\\n\"+ \"public class X {\\n\"+ \"  public void doIt() {\\n\"+ \"    Object s = new FooImpl().getIt();\\n\"+ \"  }\\n\"+ \"}\\n\"},\"\");\n  this.runConformTest(new String[]{\"X.java\",\"public class X {\\n\" + \"  public void doIt() {\\n\" + \"    Object s = new FooImpl().getIt();\\n\"+ \"  }\\n\"+ \"}\\n\"},\"\",null,false,null);\n  String expectedOutput=\"  // Method descriptor #18 ()Ljava/lang/Object;\\n\" + \"  // Stack: 1, Locals: 1\\n\" + \"  public bridge synthetic java.lang.Object getIt();\\n\"+ \"    0  aload_0\\n\"+ \"    1  invokevirtual FooImpl.getIt() : java.lang.String [19]\\n\"+ \"    4  areturn\\n\"+ \"      Line numbers:\\n\"+ \"        [pc: 0, line: 1]\\n\";\n  File f=new File(OUTPUT_DIR + File.separator + \"FooImpl.class\");\n  byte[] classFileBytes=org.eclipse.jdt.internal.compiler.util.Util.getFileByteContent(f);\n  ClassFileBytesDisassembler disassembler=ToolFactory.createDefaultClassFileBytesDisassembler();\n  String result=disassembler.disassemble(classFileBytes,\"\\n\",ClassFileBytesDisassembler.DETAILED);\n  int index=result.indexOf(expectedOutput);\n  if (index == -1 || expectedOutput.length() == 0) {\n    System.out.println(Util.displayString(result,3));\n  }\n  if (index == -1) {\n    assertEquals(\"Wrong contents\",expectedOutput,result);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "print"
      ]
    },
    {
      "method": "go@36",
      "body": "public void go() throws IOException {\n  TypedBytesInput tbinput=new TypedBytesInput(new DataInputStream(System.in));\n  TypedBytesOutput tboutput=new TypedBytesOutput(new DataOutputStream(System.out));\n  Object key=tbinput.readRaw();\n  while (key != null) {\n    Object value=tbinput.read();\n    for (    String part : value.toString().split(find)) {\n      tboutput.write(part);\n      tboutput.write(1);\n    }\n    System.err.println(\"reporter:counter:UserCounters,InputLines,1\");\n    key=tbinput.readRaw();\n  }\n  System.out.flush();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
              "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
              "java.lang.String.split(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.flush()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hadoop-common/hadoop-tools/hadoop-streaming/src/test/java/org/apache/hadoop/streaming/TypedBytesMapApp.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ]
      ],
      "types": [
        "OutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
            "java.lang.String.split(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.flush()"
          ]
        }
      ],
      "keywords": [
        "split",
        "flush"
      ]
    },
    {
      "method": "createStore@110",
      "body": "@Before public void createStore() throws Exception {\n  wkdir=File.createTempFile(getClass().getSimpleName(),\"db\");\n  wkdir.delete();\n  wkdir=new File(wkdir.getParentFile(),getClass().getSimpleName());\n  wkdir.mkdirs();\n  store=new AvlPartition(schemaManager);\n  ((Partition)store).setId(\"example\");\n  store.setCacheSize(10);\n  store.setPartitionPath(wkdir.toURI());\n  store.setSyncOnWrite(false);\n  store.addIndex(new AvlIndex(SchemaConstants.OU_AT_OID));\n  store.addIndex(new AvlIndex(SchemaConstants.CN_AT_OID));\n  ((Partition)store).setSuffixDn(new Dn(schemaManager,\"o=Good Times Co.\"));\n  ((Partition)store).initialize();\n  ((Partition)store).initialize();\n  StoreUtils.loadExampleData(store,schemaManager);\n  LOG.debug(\"Created new store\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getSimpleName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.delete()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.getParentFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.lang.Class.getSimpleName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.mkdirs()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.toURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.Class<Tau_T>.getResource(java.lang.String)",
              "java.net.URL.getPath()",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int,int)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/directory-server/xdbm-partition/src/test/java/org/apache/directory/server/xdbm/search/impl/PresenceTest.java",
      "classTypes": [
        "SchemaManager"
      ],
      "sorrformalparam": [
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Class",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getSimpleName()",
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.delete()",
            "java.io.File.getParentFile()",
            "java.lang.Class.getSimpleName()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.mkdirs()",
            "java.io.File.toURI()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "simple"
      ]
    },
    {
      "method": "getCallerPrincipal@247",
      "body": "@Override public Principal getCallerPrincipal(){\n  final ThreadContext threadContext=ThreadContext.getThreadContext();\n  final SecurityContext securityContext=threadContext.get(SecurityContext.class);\n  final Set<Principal> principals=securityContext.subject.getPrincipals();\n  if (!principals.isEmpty()) {\n    for (    final Principal principal : principals) {\n      if (principal.getClass().isAnnotationPresent(CallerPrincipal.class)) {\n        return principal;\n      }\n    }\n    return principals.iterator().next();\n  }\n  return null;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.security.auth.Subject.getPrincipals()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Set<java.security.Principal>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class.isAnnotationPresent(java.lang.Class)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Set<java.security.Principal>.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              },
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ThreadLocal<Tau_T>.get()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.lang.ThreadLocal<Tau_T>.set(Tau_T)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>(int)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>(int)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Principal",
      "file": "./java_projects/openejb/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/security/AbstractSecurityService.java",
      "classTypes": [
        "String",
        "ThreadLocal<Identity>",
        "String",
        "SecurityContext",
        "Map<Object,Identity>",
        "List<Principal>"
      ],
      "sorrformalparam": [
        [
          "UUID"
        ],
        [
          "Principal[]",
          "Set<String>"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "isAnnotationPresent"
      ],
      "sequences": [
        {
          "calls": [
            "javax.security.auth.Subject.getPrincipals()",
            "$NOT$java.util.Set<java.security.Principal>.isEmpty()",
            "java.lang.Class.isAnnotationPresent(java.lang.Class)",
            "java.util.Set<java.security.Principal>.iterator()",
            "java.util.Iterator.next()"
          ]
        },
        {
          "calls": [
            "javax.security.auth.Subject.getPrincipals()",
            "$NOT$java.util.Set<java.security.Principal>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "security",
        "principals",
        "annotation"
      ]
    },
    {
      "method": "mousePressed@75",
      "body": "public void mousePressed(MouseEvent e){\n  recordRightClick(e);\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.event.MouseEvent.isPopupTrigger()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.awt.Component.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.awt.event.MouseEvent.getPoint()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Point"
              },
              {
                "_call": "javax.swing.JList.locationToIndex(java.awt.Point)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()",
              "java.awt.Component.getName()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JList.locationToIndex(java.awt.Point)"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frankenstein/src/com/thoughtworks/frankenstein/recorders/ListRecorder.java",
      "classTypes": [
        "MouseListener"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "MouseEvent"
      ],
      "apicalls": [
        "isPopupTrigger",
        "locationToIndex"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.isPopupTrigger()",
            "java.awt.Component.getName()",
            "java.awt.event.MouseEvent.getPoint()",
            "javax.swing.JList.locationToIndex(java.awt.Point)"
          ]
        },
        {
          "calls": [
            "java.awt.event.MouseEvent.isPopupTrigger()"
          ]
        }
      ],
      "keywords": [
        "index",
        "event",
        "string",
        "component"
      ]
    },
    {
      "method": "getLongAttributeValue@391",
      "body": "@Override public long getLongAttributeValue(final int index) throws XMLStreamException {\n  try {\n    return Long.parseLong(getAttributeValue(index));\n  }\n catch (  NumberFormatException e) {\n    throw intParseException(e,getLocation());\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.XMLStreamReader.getAttributeValue(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Long.parseLong(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "long[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.stream.XMLStreamReader.getAttributeValue(int)",
              "java.util.Iterator<java.lang.String>.hasNext()",
              "java.util.Iterator<java.lang.String>.next()",
              "java.lang.Long.parseLong(java.lang.String)"
            ]
          },
          {
            "calls": [
              "javax.xml.stream.XMLStreamReader.getAttributeValue(int)",
              "java.util.Iterator<java.lang.String>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "long",
      "file": "./java_projects/staxmapper/src/main/java/org/jboss/staxmapper/XMLExtendedStreamReaderImpl.java",
      "classTypes": [
        "XMLMapperImpl",
        "long[]",
        "String[]",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [
        "Long",
        "XMLStreamReader",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.XMLStreamReader.getAttributeValue(int)",
            "java.lang.Long.parseLong(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "number",
        "value",
        "stream",
        "get",
        "long",
        "reader"
      ]
    },
    {
      "method": "main@5",
      "body": "/** \n * @param args\n */\npublic static void main(String[] args) throws FaculteitException {\n  try {\n    System.out.println(\"Waarde:\" + faculteit(Integer.parseInt(args[0])));\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Gebruik: week1.getallen.Faculteit <parameter>\");\n  }\ncatch (  NumberFormatException e) {\n    System.out.println(\"Parameter onjuist geformatteerd\");\n  }\ncatch (  FaculteitException e) {\n    System.out.println(e.stringFoutmelding);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/P2-Practicum/P2/src/week1/getallen/Faculteit.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "io",
        "parse",
        "number",
        "int",
        "stream"
      ]
    },
    {
      "method": "toArray@69",
      "body": "public Object[] toArray(){\n  return this.toArray(new Object[this.size()]);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "Object[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.remove(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(int,java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.Collection.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "Object[]",
      "file": "./java_projects/mchange-commons-java/src/java/com/mchange/v1/identicator/IdList.java",
      "classTypes": [
        "List",
        "Identicator"
      ],
      "sorrformalparam": [
        [
          "Collection"
        ],
        [
          "int",
          "Collection"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Iterator",
        "List"
      ],
      "apicalls": [
        "iterator",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "size",
        "iterator",
        "integer",
        "list"
      ]
    },
    {
      "method": "toString@3477",
      "body": "/** \n * Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (<tt>\"[]\"</tt>).  Adjacent elements are separated by the characters <tt>\", \"</tt> (a comma followed by a space).  Elements are converted to strings as by <tt>String.valueOf(float)</tt>.  Returns <tt>\"null\"</tt> if <tt>a</tt> is <tt>null</tt>.\n * @param a the array whose string representation to return\n * @return a string representation of <tt>a</tt>\n * @since 1.5\n */\npublic static String toString(float[] a){\n  if (a == null)   return \"null\";\n  int iMax=a.length - 1;\n  if (iMax == -1)   return \"[]\";\n  StringBuilder b=new StringBuilder();\n  b.append('[');\n  for (int i=0; ; i++) {\n    b.append(a[i]);\n    if (i == iMax)     return b.append(']').toString();\n    b.append(\", \");\n  }\n}\n",
      "formalParam": [
        "float[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(float)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "sorrreturntype": [
        "double[]",
        "double[]",
        "int",
        "int[]",
        "String",
        "boolean[]",
        "long[]",
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Comparable.compareTo(java.lang.Object)",
              "java.util.Comparator<Tau_T>.compare(Tau_T,Tau_T)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(long)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.StringBuilder.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/java/util/Arrays.java",
      "classTypes": [
        "boolean",
        "E[]",
        "long",
        "int"
      ],
      "sorrformalparam": [
        [
          "double[]",
          "int",
          "int"
        ],
        [
          "double[]",
          "int"
        ],
        [
          "T[]",
          "T",
          "Comparator<? super T>"
        ],
        [
          "int[]",
          "int",
          "int"
        ],
        [
          "long[]"
        ],
        [
          "boolean[]",
          "int",
          "int"
        ],
        [
          "long[]",
          "int"
        ],
        [
          "byte[]",
          "int",
          "int"
        ]
      ],
      "types": [
        "Character",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(float)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()",
            "java.lang.StringBuilder.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "append",
        "character",
        "string"
      ]
    },
    {
      "method": "getLongProperty@202",
      "body": "/** \n * Returns the specified long property from the specified section.\n * @param pstrSection the INI section name.\n * @param pstrProp the property to be retrieved.\n * @return the long property value.\n */\npublic Long getLongProperty(String pstrSection,String pstrProp){\n  Long lngRet=null;\n  String strVal=null;\n  INIProperty objProp=null;\n  INISection objSec=null;\n  objSec=(INISection)this.mhmapSections.get(pstrSection);\n  if (objSec != null) {\n    objProp=objSec.getProperty(pstrProp);\n    try {\n      if (objProp != null) {\n        strVal=objProp.getPropValue();\n        if (strVal != null)         lngRet=new Long(strVal);\n      }\n    }\n catch (    NumberFormatException NFExIgnore) {\n    }\n finally {\n      if (objProp != null)       objProp=null;\n    }\n    objSec=null;\n  }\n  return lngRet;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Long.Long(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String[]",
        "String",
        "void",
        "Double"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.util.HashMap.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashMap.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.size()",
              "java.util.LinkedHashMap.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.HashMap.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.util.HashMap.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashMap.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.indexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.substring(int,int)",
              "java.lang.Double.Double(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Long",
      "file": "./java_projects/thera-pi-2/RehaSql/src/Tools/INIFile.java",
      "classTypes": [
        "LinkedHashMap",
        "Properties"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [],
        [],
        [
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.containsKey(java.lang.Object)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String,int)",
            "java.lang.String.substring(int,int)",
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "java.lang.Long.Long(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "number"
      ]
    },
    {
      "method": "getCriticalExtensionOIDs@401",
      "body": "public Set<String> getCriticalExtensionOIDs(){\n  HashSet<String> s=new HashSet<String>();\n  for (  Extension e : extensions.values()) {\n    if (e.isCritical())     s.add(e.getOid().toString());\n  }\n  return Collections.unmodifiableSet(s);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Collections.unmodifiableSet(java.util.Set)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "sorrreturntype": [
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)",
              "java.util.Collections.unmodifiableSet(java.util.Set)"
            ]
          }
        ]
      ],
      "returnType": "Set<String>",
      "file": "./java_projects/classpath/gnu/java/security/x509/X509Certificate.java",
      "classTypes": [
        "Map<OID,Extension>",
        "Date",
        "OID",
        "BitString"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.HashSet<java.lang.String>.add(java.lang.String)",
            "java.util.Collections.unmodifiableSet(java.util.Set)"
          ]
        }
      ],
      "keywords": [
        "string",
        "collections"
      ]
    },
    {
      "method": "testGetContents@60",
      "body": "public void testGetContents() throws Exception {\n  final ResourceScriptProvider provider=new ResourceScriptProvider(\"name\",\"/com/soartech/simjr/scripting/ResourceScriptProviderTest_testGetContents.txt\",getClass().getClassLoader());\n  final InputStream is=provider.getContents();\n  final ByteArrayOutputStream os=new ByteArrayOutputStream();\n  FileTools.copy(is,os);\n  final String contents=new String(os.toByteArray());\n  assertEquals(\"The contents of this file are loaded by the provider\",contents);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.String.String(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/simjr/com.soartech.simjr.core.test/test/com/soartech/simjr/scripting/ResourceScriptProviderTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Byte",
        "ClassLoader",
        "Class"
      ],
      "apicalls": [
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.lang.String.String(byte[])"
          ]
        }
      ],
      "keywords": [
        "io",
        "string",
        "output",
        "loader",
        "get"
      ]
    },
    {
      "method": "convert@121",
      "body": "/** \n * convert a single long array into an array of DocumentBlock instances\n * @param array the byte array to be converted\n * @param size the intended size of the array (which may be smaller)\n * @return an array of DocumentBlock instances, filled from theinput array\n */\npublic static DocumentBlock[] convert(final byte[] array,final int size){\n  DocumentBlock[] rval=new DocumentBlock[(size + POIFSConstants.BIG_BLOCK_SIZE - 1) / POIFSConstants.BIG_BLOCK_SIZE];\n  int offset=0;\n  for (int k=0; k < rval.length; k++) {\n    rval[k]=new DocumentBlock();\n    if (offset < array.length) {\n      int length=Math.min(POIFSConstants.BIG_BLOCK_SIZE,array.length - offset);\n      System.arraycopy(array,offset,rval[k]._data,0,length);\n      if (length != POIFSConstants.BIG_BLOCK_SIZE) {\n        Arrays.fill(rval[k]._data,length,POIFSConstants.BIG_BLOCK_SIZE,_default_value);\n      }\n    }\n else {\n      Arrays.fill(rval[k]._data,_default_value);\n    }\n    offset+=POIFSConstants.BIG_BLOCK_SIZE;\n  }\n  return rval;\n}\n",
      "formalParam": [
        "byte[]",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.fill(byte[],byte)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Arrays.fill(byte[],byte)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Arrays.fill(byte[],int,int,byte)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ]
      ],
      "returnType": "DocumentBlock[]",
      "file": "./java_projects/jubula.core/org.apache.poi/src/java/org/apache/poi/poifs/storage/DocumentBlock.java",
      "classTypes": [
        "byte",
        "byte[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "DocumentBlock[]",
          "byte[]",
          "int"
        ]
      ],
      "types": [
        "Byte",
        "Math"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.fill(byte[],byte)",
            "java.lang.Math.min(int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.util.Arrays.fill(byte[],int,int,byte)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.fill(byte[],byte)",
            "java.util.Arrays.fill(byte[],byte)"
          ]
        }
      ],
      "keywords": [
        "arraycopy",
        "fill",
        "lang"
      ]
    },
    {
      "method": "warn@93",
      "body": "/** \n * Warn the user of a problem.\n * @param msg Message text to issue\n * @param args Arguments to pass to the message\n * @throws XSLProcessorException thrown if the active ProblemListener and XPathContext decidethe error condition is severe enough to halt processing.\n * @throws TransformerException\n * @xsl.usage internal\n */\npublic void warn(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {\n  warn(srcLctr,null,null,msg,args);\n}\n",
      "formalParam": [
        "SourceLocator",
        "String",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/lcmc/src/lib/org/apache/xalan/transformer/MsgMgr.java",
      "classTypes": [
        "TransformerImpl"
      ],
      "sorrformalparam": [
        [
          "SourceLocator",
          "Node",
          "Node",
          "String",
          "Object[]"
        ],
        [
          "SourceLocator",
          "String"
        ]
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.transform.TransformerException.TransformerException(java.lang.String,javax.xml.transform.SourceLocator)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "transform",
        "locator"
      ]
    },
    {
      "method": "postCreateFeatureType@355",
      "body": "@Override public void postCreateFeatureType(SimpleFeatureType featureType,DatabaseMetaData metadata,String schemaName,Connection cx) throws SQLException {\n  for (  AttributeDescriptor ad : featureType.getAttributeDescriptors()) {\n    if (!(ad instanceof GeometryDescriptor)) {\n      continue;\n    }\n    GeometryDescriptor gd=(GeometryDescriptor)ad;\n    String idxTableName=\"idx_\" + featureType.getTypeName() + \"_\"+ gd.getLocalName();\n    ResultSet rs=metadata.getTables(null,schemaName,idxTableName,new String[]{\"TABLE\"});\n    try {\n      if (rs.next()) {\n        gd.getUserData().put(SPATIALITE_SPATIAL_INDEX,idxTableName);\n      }\n    }\n  finally {\n      dataStore.closeSafe(rs);\n    }\n  }\n}\n",
      "formalParam": [
        "SimpleFeatureType",
        "DatabaseMetaData",
        "String",
        "Connection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "java.sql.ResultSet.next()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Integer"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.lang.Integer.valueOf(int)"
            ]
          },
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geotools/modules/plugin/jdbc/jdbc-spatialite/src/main/java/org/geotools/data/spatialite/SpatiaLiteDialect.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String",
          "Connection"
        ]
      ],
      "types": [
        "Boolean",
        "String",
        "DatabaseMetaData"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.DatabaseMetaData.getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "java.sql.ResultSet.next()"
          ]
        }
      ],
      "keywords": [
        "database",
        "next",
        "sql",
        "exception",
        "meta"
      ]
    },
    {
      "method": "stateChanged@3902",
      "body": "/** \n * change listener implementation for slider\n */\npublic void stateChanged(ChangeEvent e){\n  if (!slider.getValueIsAdjusting()) {\n    int size=slider.getValue();\n    GeoNumeric num;\n    for (int i=0; i < geos.length; i++) {\n      num=(GeoNumeric)geos[i];\n      num.setSlopeTriangleSize(size);\n      num.updateRepaint();\n    }\n  }\n}\n",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JSlider.getValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "JPanel",
        "void",
        "JPanel",
        "void",
        "void",
        "void",
        "JPanel",
        "JPanel",
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.setValue(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          },
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()",
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.getValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedItem(java.lang.Object)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "Object[]",
        "DecoAnglePanel",
        "Application",
        "SelectionAllowedPanel",
        "JLabel",
        "JToggleButton",
        "ConicEqnPanel"
      ],
      "sorrformalparam": [
        [
          "ChangeEvent"
        ],
        [
          "Object[]"
        ],
        [],
        [
          "Object[]"
        ],
        [
          "ActionEvent"
        ],
        [
          "ActionEvent"
        ],
        [
          "ChangeEvent"
        ],
        [
          "Object[]"
        ],
        [
          "Object[]"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "getValue"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
            "javax.swing.JSlider.getValue()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
          ]
        }
      ],
      "keywords": [
        "adjusting",
        "swing",
        "get",
        "boolean",
        "j",
        "slider",
        "value"
      ]
    },
    {
      "method": "isWithinRange@298",
      "body": "/** \n * Method to test if a date is within a certain range. It works even if testDate was exactly equal to one of the  end cases.\n * @param dateRange\n * @param testDate\n * @return\n */\npublic static boolean isWithinRange(Date[] dateRange,Date testDate){\n  Date startDate=dateRange[0];\n  Date endDate=dateRange[1];\n  return !(testDate.before(startDate) || testDate.after(endDate));\n}\n",
      "formalParam": [
        "Date[]",
        "Date"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.before(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Date.after(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.getText()",
              "java.text.DateFormat.parse(java.lang.String)",
              "java.text.DateFormat.format(java.util.Date)",
              "javax.swing.text.JTextComponent.getText()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.matches(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.matches(java.lang.String)",
              "java.lang.String.matches(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/ATReference/src/org/archiviststoolkit/util/ATDateUtils.java",
      "classTypes": [
        "long",
        "long"
      ],
      "sorrformalparam": [
        [
          "JTextField"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Date"
      ],
      "apicalls": [
        "before"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.before(java.util.Date)",
            "java.util.Date.after(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "util",
        "date"
      ]
    },
    {
      "method": "readFields@216",
      "body": "@Override public void readFields(DataInput input) throws IOException {\n  setThreadCount(input.readInt());\n  int n=input.readInt();\n  population=Lists.newArrayList();\n  for (int i=0; i < n; i++) {\n    State<T,U> state=PolymorphicWritable.read(input,State.class);\n    population.add(state);\n  }\n}\n",
      "formalParam": [
        "DataInput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.DataInput.readInt()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.Executors.newFixedThreadPool(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.ExecutorService"
          },
          {
            "_call": "java.io.DataInput.readInt()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "State<T,U>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.ExecutorService.invokeAll(java.util.Collection)",
              "$NOT$java.lang.Double.isNaN(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ExecutorService.shutdownNow()",
              "$NOT$java.util.List<java.lang.Runnable>.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/LatentFactorLogLinear/core/src/main/java/org/apache/mahout/ep/EvolutionaryProcess.java",
      "classTypes": [
        "int",
        "List<State<T,U>>",
        "int",
        "ExecutorService"
      ],
      "sorrformalparam": [
        [
          "Function<Payload<U>>"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.DataInput.readInt()",
            "java.util.concurrent.Executors.newFixedThreadPool(int)",
            "java.io.DataInput.readInt()"
          ]
        }
      ],
      "keywords": [
        "util",
        "service"
      ]
    },
    {
      "method": "testUseAppContextMemoryCache1@427",
      "body": "/** \n * @throws BirtException\n */\npublic void testUseAppContextMemoryCache1() throws BirtException, Exception {\n  this.dataSet.setCacheRowCount(7);\n  DataEngineContext dec=DataEngineContext.newInstance(DataEngineContext.DIRECT_PRESENTATION,null,null,null);\n  dec.setCacheOption(DataEngineContext.CACHE_USE_ALWAYS,100);\n  dec.setTmpdir(this.getTempDir());\n  myDataEngine=(DataEngineImpl)DataEngine.newDataEngine(dec);\n  myDataEngine.defineDataSource(this.dataSource);\n  myDataEngine.defineDataSet(this.dataSet);\n  this.appContextMap.put(DataEngine.MEMORY_DATA_SET_CACHE,new Integer(7));\n  this.testUseCache1();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/birt/data/org.eclipse.birt.data.tests/test/org/eclipse/birt/data/engine/binding/DataSetCacheTest.java",
      "classTypes": [
        "Map",
        "List",
        "String[]"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "util",
        "put"
      ]
    },
    {
      "method": "dumpNativeStoreToRDFDocument@424",
      "body": "public static void dumpNativeStoreToRDFDocument(final File nativeStoreDirectory,final File dumpFile,final RDFFormat format,final Resource... contexts) throws SailException, RepositoryException, IOException, RDFHandlerException {\n  System.out.println(\"dumping store at \" + nativeStoreDirectory + \" to file \"+ dumpFile);\n  Sail sail=new NativeStore(nativeStoreDirectory);\n  sail.initialize();\n  try {\n    Repository repo=new SailRepository(sail);\n    RepositoryConnection rc=repo.getConnection();\n    try {\n      OutputStream out=new FileOutputStream(dumpFile);\n      try {\n        RDFHandler h=Rio.createWriter(format,out);\n        rc.export(h,contexts);\n      }\n  finally {\n        out.close();\n      }\n    }\n  finally {\n      rc.close();\n    }\n  }\n  finally {\n    sail.shutDown();\n  }\n}\n",
      "formalParam": [
        "File",
        "File",
        "RDFFormat",
        "Resource"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/sesametools/sesamize/src/main/java/net/fortytwo/sesametools/sesamize/Sesamize.java",
      "classTypes": [
        "String",
        "String",
        "enum",
        "String",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "File",
          "OutputStream",
          "RDFFormat",
          "RDFFormat",
          "String"
        ],
        [
          "String",
          "File",
          "OutputStream",
          "RDFFormat",
          "SparqlResultFormat",
          "String"
        ]
      ],
      "types": [
        "IOException",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "wildcardToJavaRegex@223",
      "body": "public static String wildcardToJavaRegex(String expr){\n  if (expr == null) {\n    throw new IllegalArgumentException(\"expr is null\");\n  }\n  final StringBuilder buf=new StringBuilder();\n  for (int i=0; i < expr.length(); ++i) {\n    final char ch=expr.charAt(i);\n    if (ch == '*') {\n      buf.append('.');\n    }\n else     if (ch == '.') {\n      buf.append('\\\\');\n    }\n    buf.append(ch);\n  }\n  return buf.toString();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              },
              {
                "node": "DBranch",
                "_else": [
                  {
                    "_call": "java.lang.StringBuilder.append(char)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.StringBuilder"
                  }
                ],
                "_cond": [],
                "_then": [
                  {
                    "_call": "java.lang.StringBuilder.append(char)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.StringBuilder"
                  }
                ]
              },
              {
                "_call": "java.lang.StringBuilder.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "List<String>",
        "List<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          },
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          },
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()",
              "java.util.Collections.emptyList()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jboss-as/cli/src/main/java/org/jboss/as/cli/Util.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "ModelControllerClient",
          "OperationRequestAddress",
          "String"
        ],
        [
          "ModelControllerClient",
          "OperationRequestAddress"
        ]
      ],
      "types": [
        "Character",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.String.length()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "character",
        "char"
      ]
    },
    {
      "method": "getAttributeName@92",
      "body": "public final Attributes.Name getAttributeName(String attributeName){\n  for (Iterator<?> iter=mainAttributeNames.iterator(); iter.hasNext(); ) {\n    Attributes.Name an=(Attributes.Name)iter.next();\n    if (an.toString().equals(attributeName)) {\n      return an;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<Tau_E>.iterator()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "Attributes.Name",
      "file": "./java_projects/gluegen/src/java/com/jogamp/common/util/JogampVersion.java",
      "classTypes": [
        "String",
        "int",
        "Attributes.Name"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Set",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "next",
        "util",
        "string",
        "iterator",
        "object"
      ]
    },
    {
      "method": "test_load@779",
      "body": "@TestTargetNew(level=TestLevel.COMPLETE,notes=\"\",method=\"load\",args={java.lang.String.class}) public void test_load(){\n  try {\n    Runtime.getRuntime().load(\"nonExistentLibrary\");\n    fail(\"UnsatisfiedLinkError was not thrown.\");\n  }\n catch (  UnsatisfiedLinkError ule) {\n  }\n  try {\n    Runtime.getRuntime().load(null);\n    fail(\"NullPointerException was not thrown.\");\n  }\n catch (  NullPointerException npe) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Runtime"
          },
          {
            "_call": "java.lang.Runtime.load(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Runtime.getRuntime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Runtime"
          },
          {
            "_call": "java.lang.Runtime.load(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Runtime.totalMemory()",
              "java.lang.Runtime.freeMemory()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.loadLibrary(java.lang.String)",
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.loadLibrary(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.traceInstructions(boolean)",
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.traceInstructions(boolean)",
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.traceInstructions(boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/RuntimeTest.java",
      "classTypes": [
        "int",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.load(java.lang.String)",
            "java.lang.Runtime.getRuntime()",
            "java.lang.Runtime.load(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "refresh@159",
      "body": "public void refresh(){\n  doRefresh();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.util.Arrays.sort(T[],java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)",
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)",
              "java.util.ArrayList.ArrayList()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/BitMate/azureus2/src/org/gudy/azureus2/ui/swt/views/PeersGraphicView.java",
      "classTypes": [
        "double[]",
        "double[]",
        "double[]"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.Arrays.sort(T[],java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "add",
        "list"
      ]
    },
    {
      "method": "canProcess@51",
      "body": "public boolean canProcess(Map params){\n  return super.canProcess(params) && \"JNDI\".equals(params.get(\"dstype\"));\n}\n",
      "formalParam": [
        "Map"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/geotools/modules/library/jdbc/src/main/java/org/geotools/data/jdbc/datasource/JNDIDataSourceFactory.java",
      "classTypes": [
        "Param",
        "Param",
        "Param[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "Boolean",
        "Map"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map.get(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "get",
        "map",
        "equals"
      ]
    },
    {
      "method": "filename@145",
      "body": "@Override public String filename(){\n  if (originType == OriginType.FILE) {\n    return description;\n  }\n else   if (urlOrNull != null) {\n    URL url;\n    try {\n      url=new URL(urlOrNull);\n    }\n catch (    MalformedURLException e) {\n      return null;\n    }\n    if (url.getProtocol().equals(\"file\")) {\n      return url.getFile();\n    }\n else {\n      return null;\n    }\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.net.URL.getProtocol()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.net.URL.getFile()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/config/config/src/main/java/com/typesafe/config/impl/SimpleConfigOrigin.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "getProtocol"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.getProtocol()",
            "java.lang.String.equals(java.lang.Object)",
            "java.net.URL.getFile()"
          ]
        },
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.getProtocol()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "file",
        "boolean"
      ]
    },
    {
      "method": "postDeregister@223",
      "body": "/** \n * @see javax.management.MBeanRegistration#postDeregister()\n */\npublic void postDeregister(){\n  if (registrations.decrementAndGet() < 1) {\n    shutDownDispatcher();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.concurrent.ExecutorService.shutdown()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "ObjectName",
        "void",
        "long[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()",
              "java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory)"
            ]
          },
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.sort(long[])",
              "java.io.IOException.IOException()",
              "java.lang.Throwable.initCause(java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.Arrays.sort(long[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/aries/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java",
      "classTypes": [
        "ExecutorService",
        "AtomicInteger",
        "Logger",
        "Lock",
        "AtomicInteger",
        "AtomicInteger"
      ],
      "sorrformalparam": [
        [
          "MBeanServer",
          "ObjectName"
        ],
        [
          "Boolean"
        ],
        []
      ],
      "types": [
        "ExecutorService",
        "Integer"
      ],
      "apicalls": [
        "decrementAndGet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
            "java.util.concurrent.ExecutorService.shutdown()"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
          ]
        }
      ],
      "keywords": [
        "get",
        "service",
        "concurrent",
        "shutdown",
        "util"
      ]
    },
    {
      "method": "writePayload@647",
      "body": "public void writePayload(HashSet<String> object,DataOutput dataOut) throws IOException {\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  ObjectOutputStream oout=new ObjectOutputStream(baos);\n  oout.writeObject(object);\n  oout.flush();\n  oout.close();\n  byte[] data=baos.toByteArray();\n  dataOut.writeInt(data.length);\n  dataOut.write(data);\n}\n",
      "formalParam": [
        "HashSet<String>",
        "DataOutput"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ObjectOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.DataOutput.writeInt(int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataOutput.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.text.NumberFormat.format(long)",
              "java.lang.System.currentTimeMillis()",
              "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Long>>.hasNext()",
              "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Long>>.next()",
              "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Long>>.remove()",
              "java.util.Iterator<java.util.Map.Entry<java.lang.String,java.lang.Long>>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/activemq/kahadb/src/test/java/org/apache/kahadb/index/ListIndexTest.java",
      "classTypes": [
        "NumberFormat",
        "HashSetStringMarshaller",
        "Logger"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Byte",
        "IOException",
        "ObjectOutputStream",
        "OutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
            "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
            "java.io.ObjectOutputStream.flush()",
            "java.io.ObjectOutputStream.close()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.DataOutput.writeInt(int)",
            "java.io.DataOutput.write(byte[])"
          ]
        }
      ],
      "keywords": [
        "stream",
        "integer",
        "array",
        "write",
        "close"
      ]
    },
    {
      "method": "iconic@6961",
      "body": "/** \n * Add option -iconic to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps iconic(){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-iconic\");\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Integer.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Integer.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [
          "Integer"
        ],
        [],
        [
          "Double"
        ],
        []
      ],
      "types": [
        "Integer",
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "string",
        "length",
        "lang"
      ]
    },
    {
      "method": "test_Constructor@24",
      "body": "/** \n * @tests java.lang.LinkageError#LinkageError()\n */\npublic void test_Constructor(){\n  LinkageError e=new LinkageError();\n  assertNull(e.getMessage());\n  assertNull(e.getLocalizedMessage());\n  assertNull(e.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getLocalizedMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.lang.Throwable.getCause()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/LinkageErrorTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Throwable"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getLocalizedMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "getFilter@52",
      "body": "/** \n * @return A LegacyBloomFilter with the lowest practical false positive probabilityfor the given number of elements.\n */\npublic static LegacyBloomFilter getFilter(long numElements,int targetBucketsPerElem){\n  int maxBucketsPerElement=Math.max(1,BloomCalculations.maxBucketsPerElement(numElements));\n  int bucketsPerElement=Math.min(targetBucketsPerElem,maxBucketsPerElement);\n  if (bucketsPerElement < targetBucketsPerElem) {\n    logger.warn(String.format(\"Cannot provide an optimal LegacyBloomFilter for %d elements (%d/%d buckets per element).\",numElements,bucketsPerElement,targetBucketsPerElem));\n  }\n  BloomCalculations.BloomSpecification spec=BloomCalculations.computeBloomSpec(bucketsPerElement);\n  return new LegacyBloomFilter(spec.K,bucketsFor(numElements,spec.bucketsPerElement));\n}\n",
      "formalParam": [
        "long",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.BitSet.BitSet(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "LegacyBloomFilter",
        "void",
        "int[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.BitSet.BitSet(int)",
              "java.util.BitSet.set(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.size()",
              "java.nio.Buffer.position()",
              "java.nio.Buffer.remaining()",
              "java.nio.Buffer.position()",
              "java.nio.Buffer.remaining()",
              "java.lang.Math.abs(int)",
              "java.util.BitSet.set(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.size()",
              "java.nio.Buffer.position()",
              "java.nio.Buffer.remaining()",
              "java.nio.Buffer.position()",
              "java.nio.Buffer.remaining()",
              "java.lang.Math.abs(int)"
            ]
          }
        ]
      ],
      "returnType": "LegacyBloomFilter",
      "file": "./java_projects/platform/dependencies/cassandra/src/java/org/apache/cassandra/utils/LegacyBloomFilter.java",
      "classTypes": [
        "LegacyBloomFilterSerializer",
        "BitSet",
        "int",
        "Logger"
      ],
      "sorrformalparam": [
        [],
        [
          "ByteBuffer"
        ],
        [
          "ByteBuffer"
        ]
      ],
      "types": [
        "Object",
        "BitSet"
      ],
      "apicalls": [
        "format"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.BitSet.BitSet(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "lang",
        "util"
      ]
    },
    {
      "method": "set@363",
      "body": "public static <T>Set<T> set(T... list){\n  return new HashSet<T>(Arrays.asList(list));\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Set<T>",
        "List<T>",
        "Set<T>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.util.HashSet<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Iterable<Tau_T>.iterator()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.HashSet<Tau_E>.add(Tau_E)",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "Set<T>",
      "file": "./java_projects/ofbiz/framework/base/src/org/ofbiz/base/test/GenericTestCaseBase.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Object",
          "Object"
        ],
        [
          "T"
        ],
        [
          "T"
        ],
        [
          "Iterable<T>"
        ]
      ],
      "types": [],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "set",
        "hash",
        "util"
      ]
    },
    {
      "method": "canConsumeAnyOf@921",
      "body": "/** \n * Attempt to consume the next token if it matches one of the supplied values.\n * @param options the options for the value of the current token\n * @return true if the current token's value did match one of the suplied options, or false otherwise\n * @throws IllegalStateException if this method was called before the stream was {@link #start() started}\n */\npublic boolean canConsumeAnyOf(Iterable<String> options) throws IllegalStateException {\n  if (completed)   return false;\n  for (  String option : options) {\n    if (canConsume(option))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "Iterable<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ListIterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean",
        "String",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.substring(int,int)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Boolean.parseBoolean(java.lang.String)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          },
          {
            "calls": [
              "java.lang.Boolean.parseBoolean(java.lang.String)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ListIterator<Tau_E>.previousIndex()",
              "java.util.List<Tau_E>.listIterator(int)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ListIterator<Tau_E>.previousIndex()",
              "java.util.List<Tau_E>.listIterator(int)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/modeshape/modeshape-common/src/main/java/org/modeshape/common/text/TokenStream.java",
      "classTypes": [
        "int",
        "boolean",
        "String",
        "boolean",
        "ListIterator<Token>",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String[]"
        ],
        [],
        [
          "int[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
            "java.util.ListIterator<Tau_E>.next()"
          ]
        }
      ],
      "keywords": [
        "next",
        "list",
        "iterator"
      ]
    },
    {
      "method": "main@39",
      "body": "public static void main(String... args){\n  try {\n    JavaCompiler javac=javax.tools.ToolProvider.getSystemJavaCompiler();\n    DiagnosticListener<JavaFileObject> dl=new DiagnosticListener<JavaFileObject>(){\n      public void report(      Diagnostic<? extends JavaFileObject> message){\n        throw new NullPointerException(SILLY_BILLY);\n      }\n    }\n;\n    StandardJavaFileManager fm=javac.getStandardFileManager(dl,null,null);\n    Iterable<? extends JavaFileObject> files=fm.getJavaFileObjectsFromStrings(Arrays.asList(\"badfile.java\"));\n    javac.getTask(null,fm,dl,null,null,files).call();\n  }\n catch (  RuntimeException e) {\n    Throwable cause=e.getCause();\n    if (cause instanceof NullPointerException && cause.getMessage().equals(SILLY_BILLY))     return;\n    throw new Error(\"unexpected exception caught: \" + e);\n  }\ncatch (  Throwable t) {\n    throw new Error(\"unexpected exception caught: \" + t);\n  }\n  throw new Error(\"no exception caught\");\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getCause()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              },
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_try": [
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/langtools/test/tools/javac/T6265400.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "List",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.lang.Throwable.getCause()",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "message",
        "boolean"
      ]
    },
    {
      "method": "read@136",
      "body": "/** \n * Reads up to  {@code length} of decompressed data and stores it in{@code buffer} starting at {@code offset}.\n * @param buffer Buffer to store into\n * @param offset offset in buffer to store at\n * @param length number of bytes to store\n * @return Number of uncompressed bytes read\n * @throws IOException if an IOException occurs.\n */\n@Override public int read(byte[] buffer,int offset,int length) throws IOException {\n  if (mEntry != null) {\n    return -1;\n  }\n  int r=super.read(buffer,offset,length);\n  if (verStream != null && !eos) {\n    if (r == -1) {\n      eos=true;\n      if (verifier != null) {\n        if (isMeta) {\n          verifier.addMetaEntry(jarEntry.getName(),((ByteArrayOutputStream)verStream).toByteArray());\n          try {\n            verifier.readCertificates();\n          }\n catch (          SecurityException e) {\n            verifier=null;\n            throw e;\n          }\n        }\n else {\n          ((JarVerifier.VerifierEntry)verStream).verify();\n        }\n      }\n    }\n else {\n      verStream.write(buffer,offset,r);\n    }\n  }\n  return r;\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.zip.ZipEntry.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.ByteArrayOutputStream.toByteArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "ZipEntry"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.zip.ZipEntry.getName()",
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()"
            ]
          },
          {
            "calls": [
              "java.util.zip.ZipEntry.getName()",
              "java.util.zip.ZipEntry.getName()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/libcore_1/luni/src/main/java/java/util/jar/JarInputStream.java",
      "classTypes": [
        "OutputStream",
        "boolean",
        "Manifest",
        "JarEntry",
        "boolean",
        "JarVerifier",
        "JarEntry"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Byte",
        "String",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(byte[],int,int)"
          ]
        },
        {
          "calls": [
            "java.util.zip.ZipEntry.getName()",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "byte",
        "get",
        "output"
      ]
    },
    {
      "method": "invalidateRelationshipNameProperties@436",
      "body": "public void invalidateRelationshipNameProperties(String ns){\n  getCache().removeNode(getFqn(ns,NODE_REL_NAME_PROPS));\n  if (log.isLoggable(Level.FINER)) {\n    log.finer(this.toString() + \"Invalidating IdentityObjectRelationshipName properties. \" + \"Namespace:\"+ ns);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.finer(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "Collection<IdentityObject>",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.finer(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/picketlink-idm/picketlink-idm-cache/src/main/java/org/picketlink/idm/impl/cache/InfinispanIdentityStoreCacheProviderImpl.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "int",
          "Object"
        ],
        [
          "String",
          "IdentityObjectSearch",
          "Collection<IdentityObject>"
        ],
        [
          "String",
          "IdentityObjectSearch"
        ],
        [
          "String"
        ],
        [
          "String",
          "String",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "isLoggable"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.finer(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "logging"
      ]
    },
    {
      "method": "avoidingGui@817",
      "body": "/** \n * Used to determine if the <tt>BeanContext</tt> child is avoiding using its GUI.\n * @return is this instance avoiding using its GUI?\n * @see Visibility\n */\npublic boolean avoidingGui(){\n  return !okToUseGui && needsGui();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Iterator",
        "void",
        "void",
        "void",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.beans.PropertyChangeEvent.getPropertyName()",
              "java.util.EventObject.getSource()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.HashMap.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.keySet()",
              "java.util.Set.iterator()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ObjectInputStream.readObject()",
              "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.contains(java.lang.Object)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.ArrayList.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.ArrayList.contains(java.lang.Object)",
              "java.util.ArrayList.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/beans/beancontext/BeanContextSupport.java",
      "classTypes": [
        "Object",
        "Object",
        "Iterator",
        "boolean",
        "long",
        "PropertyChangeListener",
        "boolean",
        "ArrayList",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "PropertyChangeEvent"
        ],
        [],
        [
          "ObjectInputStream"
        ],
        [
          "BeanContextMembershipListener"
        ],
        [
          "BeanContextMembershipListener"
        ],
        [],
        [
          "Collection"
        ]
      ],
      "types": [
        "HashMap",
        "Set"
      ],
      "apicalls": [
        "iterator",
        "next",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "onLongClick@587",
      "body": "@Override public boolean onLongClick(View view){\n  if (view == mDefaultActivityButton) {\n    if (mAdapter.getCount() > 0) {\n      mIsSelectingDefaultActivity=true;\n      showPopupUnchecked(mInitialActivityCount);\n    }\n  }\n else {\n    throw new IllegalArgumentException();\n  }\n  return true;\n}\n",
      "formalParam": [
        "View"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.Math.max(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/dreamDroid/libraries/ABS/src/com/actionbarsherlock/widget/ActivityChooserView.java",
      "classTypes": [
        "boolean",
        "FrameLayout",
        "Drawable",
        "ActivityChooserViewAdapter"
      ],
      "sorrformalparam": [
        [],
        [
          "ActivityChooserModel"
        ],
        [
          "View"
        ],
        []
      ],
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)",
            "java.lang.Math.min(int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "max",
        "integer",
        "lang",
        "min"
      ]
    },
    {
      "method": "getFile@47",
      "body": "public File getFile(Class<?> clazz){\n  return getFile(getName(clazz));\n}\n",
      "formalParam": [
        "Class<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getSimpleName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "File",
        "T",
        "File",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.lang.String.toLowerCase()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.lang.String.toLowerCase()",
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.lang.String.toLowerCase()",
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.lang.String.toLowerCase()"
            ]
          }
        ]
      ],
      "returnType": "File",
      "file": "./java_projects/Factions/src/com/massivecraft/factions/zcore/util/Persist.java",
      "classTypes": [
        "MPlugin"
      ],
      "sorrformalparam": [
        [
          "Class<?>"
        ],
        [
          "Type"
        ],
        [
          "Class<T>",
          "String"
        ],
        [
          "Object"
        ],
        [
          "Type"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getSimpleName()",
            "java.lang.String.toLowerCase()",
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "file",
        "lang",
        "string",
        "io"
      ]
    },
    {
      "method": "GUIController@54",
      "body": "public GUIController(PApplet newParent,boolean newVisible){\n  setParent(newParent);\n  setVisible(newVisible);\n  contents=new GUIComponent[5];\n  lookAndFeel=new IFLookAndFeel(parent,IFLookAndFeel.DEFAULT);\n  userState=new IFPGraphicsState();\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    try {\n      security.checkSystemClipboardAccess();\n      clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n    }\n catch (    SecurityException e) {\n      clipboard=new Clipboard(\"Interfascia Clipboard\");\n    }\n  }\n else {\n    try {\n      clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n    }\n catch (    Exception e) {\n    }\n  }\n  parent.registerKeyEvent(this);\n  parent.registerDraw(this);\n}\n",
      "formalParam": [
        "PApplet",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Toolkit.getDefaultToolkit()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Toolkit"
              },
              {
                "_call": "java.awt.Toolkit.getSystemClipboard()",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "node": "DAPICall",
                "_returns": "java.awt.datatransfer.Clipboard"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.SecurityManager.checkSystemClipboardAccess()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Toolkit.getDefaultToolkit()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Toolkit"
              },
              {
                "_call": "java.awt.Toolkit.getSystemClipboard()",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "node": "DAPICall",
                "_returns": "java.awt.datatransfer.Clipboard"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.KeyEvent.getKeyCode()",
              "java.awt.event.InputEvent.getModifiersEx()"
            ]
          },
          {
            "calls": [
              "java.awt.event.KeyEvent.getKeyCode()",
              "java.awt.event.KeyEvent.getKeyCode()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/interfascia/interfascia/GUIController.java",
      "classTypes": [
        "int",
        "PApplet",
        "int",
        "GUIComponent[]"
      ],
      "sorrformalparam": [
        [
          "KeyEvent"
        ]
      ],
      "types": [
        "HeadlessException"
      ],
      "apicalls": [
        "getSystemClipboard"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
          ]
        },
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.lang.SecurityManager.checkSystemClipboardAccess()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "awt"
      ]
    },
    {
      "method": "tJavaFlex_3_error@243",
      "body": "public void tJavaFlex_3_error(Exception exception,String errorComponent,final java.util.Map<String,Object> globalMap) throws TalendException {\n  end_Hash.put(\"tJavaFlex_3\",System.currentTimeMillis());\n  tESBProviderRequest_1_onSubJobError(exception,errorComponent,globalMap);\n}\n",
      "formalParam": [
        "Exception",
        "String",
        "java.util.Map<String,Object>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Long"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getId()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ObjectOutputStream.writeInt(int)",
              "java.io.ObjectOutputStream.write(byte[])"
            ]
          },
          {
            "calls": [
              "java.io.ObjectOutputStream.writeInt(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tesb-rt-se/job/job-api/src/test/java/org/talend/esb/job/api/test/TestProviderJob.java",
      "classTypes": [
        "byte[]",
        "Document",
        "ContextProperties",
        "byte[]",
        "byte[]",
        "java.util.Map<String,Boolean>",
        "boolean",
        "byte[]"
      ],
      "sorrformalparam": [
        [
          "ObjectOutputStream"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.util.Map<java.lang.String,java.lang.Long>.put(java.lang.String,java.lang.Long)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getId()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "thread",
        "util",
        "current"
      ]
    },
    {
      "method": "ResourceMethodListPair@100",
      "body": "ResourceMethodListPair(List<ResourceMethod> normal){\n  this.normal=normal;\n  if (correctOrder(normal)) {\n    this.wildPriority=normal;\n  }\n else {\n    this.wildPriority=new ArrayList<ResourceMethod>(normal.size());\n    int i=0;\n    for (    ResourceMethod method : normal) {\n      if (method.consumesWild()) {\n        wildPriority.add(i++,method);\n      }\n else {\n        wildPriority.add(method);\n      }\n    }\n  }\n  List<QualitySourceMediaType> pmts=new LinkedList<QualitySourceMediaType>();\n  for (  ResourceMethod m : normal) {\n    for (    MediaType mt : m.getProduces()) {\n      pmts.add(get(mt));\n    }\n  }\n  Collections.sort(pmts,MediaTypes.QUALITY_SOURCE_MEDIA_TYPE_COMPARATOR);\n  priorityMediaTypes=retain(pmts) ? pmts : null;\n}\n",
      "formalParam": [
        "List<ResourceMethod>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/jersey_1/jersey/jersey-server/src/main/java/com/sun/jersey/server/impl/uri/rules/HttpMethodRule.java",
      "classTypes": [
        "List<QualitySourceMediaType>",
        "List<ResourceMethod>",
        "MediaType",
        "enum"
      ],
      "sorrformalparam": [
        [
          "Map<String,List<ResourceMethod>>",
          "boolean",
          "DispatchingListener"
        ]
      ],
      "types": [
        "Collection",
        "Comparator",
        "ArrayList",
        "Collections",
        "LinkedList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "list",
        "collections"
      ]
    },
    {
      "method": "getAffectedResources@85",
      "body": "public Set<IResource> getAffectedResources(IResource resource,int kind,int deltaKind) throws CoreException {\n  if (resource instanceof IFile && SpringCoreUtils.hasNature(resource,PDE.PLUGIN_NATURE) && JdtUtils.isJavaProject(resource)) {\n    IPluginModelBase model=PDECore.getDefault().getModelManager().findModel(resource.getProject());\n    Set<IResource> resources=new HashSet<IResource>();\n    if (model != null) {\n      resources.add(resource);\n    }\n    return resources;\n  }\n  return Collections.emptySet();\n}\n",
      "formalParam": [
        "IResource",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.emptySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Set<IResource>",
      "file": "./java_projects/spring-ide/plugins/org.springframework.ide.eclipse.osgi.runtime/src/org/springframework/ide/eclipse/osgi/runtime/builder/OsgiBundleUpdateBuilder.java",
      "classTypes": [
        "enum"
      ],
      "sorrformalparam": [],
      "types": [
        "Set"
      ],
      "apicalls": [
        "emptySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Collections.emptySet()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "util",
        "collections",
        "empty"
      ]
    },
    {
      "method": "toHTML@136",
      "body": "@Override public String toHTML(String source,String syntaxId){\n  try {\n    Parser parser=componentManager.getInstance(Parser.class,syntaxId);\n    XDOM xdom=parser.parse(new StringReader(source));\n    TransformationContext txContext=new TransformationContext();\n    txContext.setXDOM(xdom);\n    txContext.setSyntax(syntaxFactory.createSyntaxFromIdString(syntaxId));\n    macroTransformation.transform(xdom,txContext);\n    WikiPrinter printer=new DefaultWikiPrinter();\n    xhtmlRenderer.render(xdom,printer);\n    return printer.toString();\n  }\n catch (  Exception e) {\n    this.logger.error(e.getLocalizedMessage(),e);\n    throw new RuntimeException(\"Exception while rendering HTML\",e);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getLocalizedMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.StringReader.StringReader(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.lang.Throwable.getLocalizedMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.lang.Throwable.getLocalizedMessage()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-server/src/main/java/org/xwiki/wysiwyg/server/internal/converter/DefaultHTMLConverter.java",
      "classTypes": [
        "HTMLCleaner",
        "StreamParser"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.lang.Throwable.getLocalizedMessage()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "reader"
      ]
    },
    {
      "method": "testHistoryRows@135",
      "body": "/** \n * Test cardinality of HISTORY table\n * @throws Exception\n */\npublic void testHistoryRows() throws Exception {\n  checkCountStar(\"HISTORY\",Load.HISTORY_COUNT_W * scale);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Statement"
          },
          {
            "_call": "java.sql.Statement.executeQuery(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "java.sql.ResultSet.next()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.ResultSet.getInt(int)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.sql.Connection.commit()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.ResultSet.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.sql.Connection.commit()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/derby/java/testing/org/apache/derbyTesting/system/oe/util/OEChecks.java",
      "classTypes": [
        "short"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getInt(int)",
            "java.sql.Connection.commit()",
            "java.sql.ResultSet.close()",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "execute"
      ]
    },
    {
      "method": "getProxyOffers@207",
      "body": "public Hashtable getProxyOffers(){\n  Hashtable result=new Hashtable();\n  Enumeration e=m_proxies.keys();\n  while (e.hasMoreElements()) {\n    String offerId=(String)e.nextElement();\n    ProxyOffer proxy=(ProxyOffer)m_proxies.get(offerId);\n    ProxyInfo info=proxy.describe();\n    info.type=m_serviceType;\n    result.put(offerId,info);\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable.keys()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Hashtable",
        "String[]",
        "String[]",
        "void",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Hashtable.Hashtable()",
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)",
              "java.util.Hashtable.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)",
              "java.util.Hashtable.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "Hashtable",
      "file": "./java_projects/Harpoon/ImageRec/contrib/JacORB1_3_30/src/org/jacorb/trading/db/simple/offers/OfferList.java",
      "classTypes": [
        "boolean",
        "Hashtable",
        "Hashtable",
        "char",
        "long",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Enumeration"
      ],
      "apicalls": [
        "put",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.util.Hashtable.keys()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "object",
        "keys"
      ]
    },
    {
      "method": "findItems@253",
      "body": "/** \n * Find items.\n * @param keys the keys\n * @param rangeFrom the range from\n * @param rangeTo the range to\n * @return the sets the\n */\npublic Set<T> findItems(final List<KeyType> keys,final String rangeFrom,final String rangeTo){\n  Set<T> items=new HashSet<T>();\n  MultigetSliceQuery<Object,String,byte[]> multigetSliceQuery=HFactory.createMultigetSliceQuery(keySpace,SerializerTypeInferer.getSerializer(keyTypeClass),StringSerializer.get(),BytesArraySerializer.get());\n  multigetSliceQuery.setColumnFamily(columnFamilyName);\n  multigetSliceQuery.setKeys(keys.toArray());\n  multigetSliceQuery.setRange(rangeFrom,rangeTo,false,50);\n  QueryResult<Rows<Object,String,byte[]>> result=multigetSliceQuery.execute();\n  for (  Row<Object,String,byte[]> row : result.get()) {\n    if (!row.getColumnSlice().getColumns().isEmpty()) {\n      items.add((T)row.getColumnSlice());\n    }\n  }\n  return items;\n}\n",
      "formalParam": [
        "List<KeyType>",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.toArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object[]"
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Map<KeyType,Map<Long,String>>",
        "Map<KeyType,Map<Long,Object>>",
        "Map<KeyType,Map<Long,String>>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.List<Tau_E>.toArray()",
              "java.util.HashMap<java.lang.Long,java.lang.String>.HashMap<Long,String>()",
              "java.util.HashMap<java.lang.Long,java.lang.String>.put(java.lang.Long,java.lang.String)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.List<Tau_E>.toArray()",
              "java.util.HashMap<java.lang.Long,java.lang.Object>.HashMap<Long,Object>()",
              "java.util.HashMap<java.lang.Long,java.lang.Object>.put(java.lang.Long,java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.List<Tau_E>.toArray()",
              "java.util.HashMap<java.lang.Long,java.lang.String>.HashMap<Long,String>()",
              "java.util.HashMap<java.lang.Long,java.lang.String>.put(java.lang.Long,java.lang.String)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ]
      ],
      "returnType": "Set<T>",
      "file": "./java_projects/turmeric-releng/utils/turmeric-utils-cassandra/src/main/java/org/ebayopensource/turmeric/utils/cassandra/dao/AbstractColumnFamilyDao.java",
      "classTypes": [
        "Class<T>",
        "String"
      ],
      "sorrformalparam": [
        [
          "List<KeyType>",
          "Long",
          "Long"
        ],
        [
          "List<KeyType>",
          "Long",
          "Long"
        ],
        [
          "List<KeyType>",
          "Long",
          "Long"
        ]
      ],
      "types": [
        "HashSet"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.List<Tau_E>.toArray()",
            "java.util.Set<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "object",
        "list",
        "hash"
      ]
    },
    {
      "method": "print@1165",
      "body": "public void print(PrintWriter out){\n  out.print(\"Class #\");\n  out.println(name);\n}\n",
      "formalParam": [
        "PrintWriter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintWriter.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.println(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "int",
        "void",
        "Set",
        "void",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(int)",
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeByte(int)",
              "java.io.DataOutputStream.writeFloat(float)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet.HashSet()",
              "java.util.HashSet.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeByte(int)",
              "java.io.DataOutputStream.writeUTF(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.PrintWriter.PrintWriter(java.io.OutputStream)",
              "java.io.ByteArrayOutputStream.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/makegood/com.piece_framework.makegood.aspect/lib/javassist-3.11.0/src/main/javassist/bytecode/ConstPool.java",
      "classTypes": [
        "HashMap",
        "int",
        "HashMap",
        "int",
        "int",
        "int",
        "int",
        "CtClass",
        "int"
      ],
      "sorrformalparam": [
        [
          "PrintWriter"
        ],
        [
          "PrintWriter"
        ],
        [
          "String",
          "int"
        ],
        [
          "DataOutputStream"
        ],
        [],
        [
          "DataOutputStream"
        ],
        [],
        [
          "PrintWriter"
        ]
      ],
      "types": [
        "PrintWriter",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintWriter.print(java.lang.String)",
            "java.io.PrintWriter.println(int)"
          ]
        }
      ],
      "keywords": [
        "print",
        "io",
        "integer",
        "println",
        "string"
      ]
    },
    {
      "method": "convertStreamToString@337",
      "body": "public String convertStreamToString(java.io.InputStream is){\n  try {\n    return new java.util.Scanner(is).useDelimiter(\"\\\\A\").next();\n  }\n catch (  java.util.NoSuchElementException e) {\n    return \"\";\n  }\n}\n",
      "formalParam": [
        "java.io.InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Scanner.Scanner(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Scanner.useDelimiter(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Scanner"
          },
          {
            "_call": "java.util.Scanner.next()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.size()",
              "java.util.ArrayList<java.lang.String>.get(int)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.endsWith(java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getAbsolutePath()",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.util.Scanner.Scanner(java.io.InputStream)",
              "java.util.Scanner.useDelimiter(java.lang.String)",
              "java.util.Scanner.next()",
              "java.lang.String.split(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/molgenis_apps/modules/xgap/org/molgenis/xgap/test/Stress_XqtlTestNG_IGNORED.java",
      "classTypes": [
        "Database",
        "int",
        "int",
        "DataSource",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "String",
        "InputStream"
      ],
      "apicalls": [
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Scanner.Scanner(java.io.InputStream)",
            "java.util.Scanner.useDelimiter(java.lang.String)",
            "java.util.Scanner.next()"
          ]
        }
      ],
      "keywords": [
        "delimiter",
        "string",
        "util",
        "use",
        "next",
        "stream",
        "scanner"
      ]
    },
    {
      "method": "updateType@1101",
      "body": "public void updateType(String newType){\n  type=newType;\n  setChanged();\n  notifyServerObservers(IServerConstants.UPDATE);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Observable.setChanged()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.lang.System.currentTimeMillis()",
              "java.lang.Thread.yield()",
              "java.lang.System.currentTimeMillis()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Date.Date()",
              "java.text.DateFormat.format(java.util.Date)",
              "java.lang.System.currentTimeMillis()",
              "java.lang.Thread.yield()",
              "java.lang.System.currentTimeMillis()",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Throwable.getLocalizedMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/radrails/plugins/org.radrails.server.core/src/org/radrails/server/core/Server.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "IProject"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "IProcess"
        ]
      ],
      "types": [
        "Observable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Observable.setChanged()",
            "java.util.HashSet<java.util.Observer>.HashSet<Observer>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection"
      ]
    },
    {
      "method": "start@202",
      "body": "/** \n * @see org.mortbay.jetty.ant.utils.ServerProxy#start()\n */\npublic void start(){\n  try {\n    server.start();\n    startScanners();\n    server.join();\n  }\n catch (  InterruptedException e) {\n    new RuntimeException(e);\n  }\ncatch (  Exception e) {\n    new RuntimeException(e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.Map.keySet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              },
              {
                "_call": "java.util.Set.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.lang.Integer.intValue()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pos_1/jetty/contrib/jetty-ant/src/main/java/org/mortbay/jetty/ant/ServerProxyImpl.java",
      "classTypes": [
        "List"
      ],
      "sorrformalparam": [
        [
          "WebApplicationProxy",
          "int"
        ]
      ],
      "types": [
        "Set",
        "Boolean",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()",
            "java.util.Iterator.hasNext()",
            "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "runtime",
        "integer"
      ]
    },
    {
      "method": "store@142",
      "body": "public void store(Node node,NodeModel model){\n  HashMap modelMap=(HashMap)nodeMapping.get(model);\n  if (modelMap == null) {\n    modelMap=new HashMap();\n    nodeMapping.put(model,modelMap);\n  }\n  modelMap.put(node.getImpl(),node);\n}\n",
      "formalParam": [
        "Node",
        "NodeModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)",
              "javax.swing.JLabel.setText(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.AbstractListModel.fireContentsChanged(java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "javax.swing.JLabel.setText(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/KanonProject/core/src/main/java/com/projity/undo/UndoController.java",
      "classTypes": [
        "Map",
        "UndoableEditSupport",
        "JDialog",
        "EditsModel",
        "JLabel",
        "SimpleDateFormat",
        "JLabel"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "UndoableEditEvent"
        ],
        [],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "map"
      ]
    },
    {
      "method": "onEntityExplode@105",
      "body": "@EventHandler(priority=EventPriority.NORMAL) public void onEntityExplode(EntityExplodeEvent event){\n  if (event.isCancelled())   return;\n  Set<FLocation> explosionLocs=new HashSet<FLocation>();\n  for (  Block block : event.blockList()) {\n    explosionLocs.add(new FLocation(block));\n  }\n  for (  FLocation loc : explosionLocs) {\n    Faction faction=Board.getFactionAt(loc);\n    if (faction.getFlag(FFlag.EXPLOSIONS) == false) {\n      event.setCancelled(true);\n      return;\n    }\n  }\n  Block center=event.getLocation().getBlock();\n  if (event.getEntity() instanceof TNTPrimed && Conf.handleExploitTNTWaterlog && center.isLiquid()) {\n    List<Block> targets=new ArrayList<Block>();\n    targets.add(center.getRelative(0,0,1));\n    targets.add(center.getRelative(0,0,-1));\n    targets.add(center.getRelative(0,1,0));\n    targets.add(center.getRelative(0,-1,0));\n    targets.add(center.getRelative(1,0,0));\n    targets.add(center.getRelative(-1,0,0));\n    for (    Block target : targets) {\n      int id=target.getTypeId();\n      if (id != 0 && (id < 7 || id > 11) && id != 49 && id != 116)       target.breakNaturally();\n    }\n  }\n}\n",
      "formalParam": [
        "EntityExplodeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Factions/src/com/massivecraft/factions/listeners/FactionsEntityListener.java",
      "classTypes": [
        "Set<PotionEffectType>",
        "P"
      ],
      "sorrformalparam": [],
      "types": [
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "list",
        "set",
        "array",
        "util"
      ]
    },
    {
      "method": "intercept@112",
      "body": "@Override public String intercept(ActionInvocation invocation) throws Exception {\n  Object action=invocation.getAction();\n  if (action instanceof ScopedModelDriven) {\n    ScopedModelDriven modelDriven=(ScopedModelDriven)action;\n    if (modelDriven.getModel() == null) {\n      ActionContext ctx=ActionContext.getContext();\n      ActionConfig config=invocation.getProxy().getConfig();\n      String cName=className;\n      if (cName == null) {\n        try {\n          Method method=action.getClass().getMethod(GET_MODEL,EMPTY_CLASS_ARRAY);\n          Class cls=method.getReturnType();\n          cName=cls.getName();\n        }\n catch (        NoSuchMethodException e) {\n          throw new XWorkException(\"The \" + GET_MODEL + \"() is not defined in action \"+ action.getClass()+ \"\",config);\n        }\n      }\n      String modelName=name;\n      if (modelName == null) {\n        modelName=cName;\n      }\n      Object model=resolveModel(objectFactory,ctx,cName,scope,modelName);\n      modelDriven.setModel(model);\n      modelDriven.setScopeKey(modelName);\n    }\n  }\n  return invocation.invoke();\n}\n",
      "formalParam": [
        "ActionInvocation"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method"
          },
          {
            "_call": "java.lang.reflect.Method.getReturnType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/struts2/xwork-core/src/main/java/com/opensymphony/xwork2/interceptor/ScopedModelDrivenInterceptor.java",
      "classTypes": [
        "String",
        "String",
        "ObjectFactory"
      ],
      "sorrformalparam": [],
      "types": [
        "NoSuchMethodException"
      ],
      "apicalls": [
        "getMethod"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.getReturnType()",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "security",
        "lang",
        "reflect",
        "get"
      ]
    },
    {
      "method": "getForeCastConditions@248",
      "body": "public List<ForecastConditions> getForeCastConditions(){\n  final ArrayList<ForecastConditions> forecastConditions=new ArrayList<ForecastConditions>();\n  for (  final Object o : getForeCastInformation()) {\n    if (o instanceof ForecastConditions) {\n      forecastConditions.add((ForecastConditions)o);\n    }\n  }\n  return forecastConditions;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "List<ForecastConditions>",
      "file": "./java_projects/choob/src/main/plugins/GoogleWeather.java",
      "classTypes": [
        "String[]",
        "DataItem",
        "DataItem",
        "Weather",
        "HashMap<String,String>",
        "DataItem",
        "String[]",
        "List<Object>"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "object",
        "boolean"
      ]
    },
    {
      "method": "hash_init@225",
      "body": "/** \n * Initialize a hash context.\n */\npublic HashContext hash_init(Env env,String algorithm,@Optional int options,@Optional StringValue keyString){\n  try {\n    algorithm=getAlgorithm(algorithm);\n    if (options == HASH_HMAC) {\n      algorithm=\"Hmac\" + algorithm;\n      Mac mac=Mac.getInstance(algorithm);\n      int keySize=64;\n      if (keyString != null) {\n        keySize=keyString.length();\n      }\n      byte[] keyBytes=new byte[keySize];\n      for (int i=0; i < keyString.length(); i++) {\n        keyBytes[i]=(byte)keyString.charAt(i);\n      }\n      Key key=new SecretKeySpec(keyBytes,\"dsa\");\n      mac.init(key);\n      return new HashMacContext(mac);\n    }\n else {\n      MessageDigest md=MessageDigest.getInstance(algorithm);\n      return new HashDigestContext(md);\n    }\n  }\n catch (  Exception e) {\n    env.error(L.l(\"hash_init: '{0}' is an unknown algorithm\",algorithm));\n    return null;\n  }\n}\n",
      "formalParam": [
        "Env",
        "String",
        "int",
        "StringValue"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.security.MessageDigest.getInstance(java.lang.String)",
                "_throws": [
                  "java.security.NoSuchAlgorithmException"
                ],
                "node": "DAPICall",
                "_returns": "java.security.MessageDigest"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.crypto.Mac.getInstance(java.lang.String)",
                "_throws": [
                  "java.security.NoSuchAlgorithmException"
                ],
                "node": "DAPICall",
                "_returns": "javax.crypto.Mac"
              },
              {
                "_call": "javax.crypto.Mac.init(java.security.Key)",
                "_throws": [
                  "java.security.InvalidKeyException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Value",
        "Value",
        "int",
        "Value",
        "Value"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.update(byte[],int,int)",
              "java.security.MessageDigest.digest()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.update(byte)",
              "java.security.MessageDigest.digest()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.io.InputStream.read(byte[],int,int)",
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.String>.keySet()",
              "java.util.HashMap<java.lang.String,java.lang.String>.values()",
              "java.security.Security.getAlgorithms(java.lang.String)",
              "$NOT$java.util.Collection<java.lang.String>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ]
      ],
      "returnType": "HashContext",
      "file": "./java_projects/Bianca/bianca/src/main/java/com/clevercloud/bianca/lib/HashModule.java",
      "classTypes": [
        "L10N"
      ],
      "sorrformalparam": [
        [
          "Env",
          "String",
          "Path",
          "boolean"
        ],
        [
          "Env",
          "String",
          "StringValue",
          "boolean"
        ],
        [
          "Env",
          "HashContext",
          "InputStream",
          "int"
        ],
        [
          "Env"
        ],
        [
          "Env",
          "HashContext",
          "Path"
        ]
      ],
      "types": [
        "InvalidKeyException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "javax.crypto.Mac.getInstance(java.lang.String)",
            "javax.crypto.Mac.init(java.security.Key)"
          ]
        },
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.security.MessageDigest.getInstance(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "crypto",
        "mac"
      ]
    },
    {
      "method": "mousePressed@214",
      "body": "public void mousePressed(MouseEvent e){\n  if (isFocusable() && isEnabled())   requestFocus();\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.isFocusable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Component.isEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.requestFocus()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/SwingOSC/src/main/java/de/sciss/swingosc/DragView.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.isFocusable()",
            "java.awt.Component.isEnabled()"
          ]
        },
        {
          "calls": [
            "java.awt.Component.isFocusable()",
            "java.awt.Component.isEnabled()",
            "javax.swing.JComponent.requestFocus()"
          ]
        }
      ],
      "keywords": [
        "enabled",
        "awt"
      ]
    },
    {
      "method": "toString@4253",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"peek_args(\");\n  boolean first=true;\n  sb.append(\"queue_name:\");\n  if (this.queue_name == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.queue_name);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "String",
        "None",
        "boolean",
        "void",
        "String",
        "abort_args",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": []
          },
          {
            "calls": [
              "java.util.BitSet.set(int,boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(int)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
              "java.util.Set<java.lang.Long>.add(java.lang.Long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "Map<_Fields,org.apache.thrift7.meta_data.FieldMetaData>",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ],
        [],
        [
          "put_result"
        ],
        [
          "confirm_args"
        ],
        [
          "org.apache.thrift7.protocol.TProtocol"
        ],
        [],
        [],
        []
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "requestDestroyed@56",
      "body": "@Override public void requestDestroyed(ServletRequestEvent sre){\n  final String listenerDisabledParam=sre.getServletContext().getInitParameter(DISABLE_LISTENER_PARAM);\n  if (listenerDisabledParam != null && \"true\".equals(listenerDisabledParam.trim().toLowerCase())) {\n    return;\n  }\n  try {\nswitch (this.tx.getStatus()) {\ncase Status.STATUS_ACTIVE:\n      this.log.debugf(\"Committing a transaction for request %s\",sre.getServletRequest());\n    tx.commit();\n  break;\ncase Status.STATUS_MARKED_ROLLBACK:\ncase Status.STATUS_PREPARED:\ncase Status.STATUS_PREPARING:\nthis.log.debugf(\"Rolling back a transaction for request %s\",sre.getServletRequest());\ntx.rollback();\nbreak;\ncase Status.STATUS_COMMITTED:\ncase Status.STATUS_COMMITTING:\ncase Status.STATUS_ROLLING_BACK:\ncase Status.STATUS_UNKNOWN:\ncase Status.STATUS_ROLLEDBACK:\ncase Status.STATUS_NO_TRANSACTION:\nbreak;\n}\n}\n catch (SystemException e) {\nthis.log.warn(\"Error rolling back the transaction\",e);\nthis.txException.fire(new ExceptionToCatch(e));\n}\ncatch (HeuristicRollbackException e) {\nthis.log.warn(\"Error committing the transaction\",e);\nthis.txException.fire(new ExceptionToCatch(e));\n}\ncatch (RollbackException e) {\nthis.log.warn(\"Error committing the transaction\",e);\nthis.txException.fire(new ExceptionToCatch(e));\n}\ncatch (HeuristicMixedException e) {\nthis.log.warn(\"Error committing the transaction\",e);\nthis.txException.fire(new ExceptionToCatch(e));\n}\n}\n",
      "formalParam": [
        "ServletRequestEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.toLowerCase()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/transaction/impl/src/main/java/org/jboss/seam/transaction/TransactionServletListener.java",
      "classTypes": [
        "SeamTransaction",
        "Event<ExceptionToCatch>",
        "String",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "ServletRequestEvent"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "toLowerCase",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "case",
        "lang",
        "lower",
        "trim",
        "boolean"
      ]
    },
    {
      "method": "enterInterrupt@752",
      "body": "/** \n * Called when the interrupt loop has been entered.\n */\npublic void enterInterrupt(Dim.StackFrame lastFrame,String threadTitle,String alertMessage){\n  if (SwingUtilities.isEventDispatchThread()) {\n    enterInterruptImpl(lastFrame,threadTitle,alertMessage);\n  }\n else {\n    RunProxy proxy=new RunProxy(this,RunProxy.ENTER_INTERRUPT);\n    proxy.lastFrame=lastFrame;\n    proxy.threadTitle=threadTitle;\n    proxy.alertMessage=alertMessage;\n    SwingUtilities.invokeLater(proxy);\n  }\n}\n",
      "formalParam": [
        "Dim.StackFrame",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JSplitPane.setDividerLocation(double)",
              "javax.swing.JInternalFrame.setMaximum(boolean)",
              "javax.swing.JInternalFrame.setSelected(boolean)",
              "javax.swing.JInternalFrame.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JScrollPane.JScrollPane(java.awt.Component)",
              "javax.swing.JInternalFrame.setContentPane(java.awt.Container)",
              "javax.swing.JInternalFrame.pack()",
              "javax.swing.JInternalFrame.addInternalFrameListener(javax.swing.event.InternalFrameListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()",
              "java.awt.event.MouseEvent.getY()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "String",
        "JButton",
        "JButton",
        "Runnable",
        "JLabel",
        "SwingGui",
        "FileWindow",
        "int",
        "FilePopupMenu"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [
          "String"
        ],
        [
          "Component"
        ],
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "SwingUtilities",
        "Runnable",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
          ]
        },
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()"
          ]
        }
      ],
      "keywords": [
        "event",
        "later"
      ]
    },
    {
      "method": "print@52",
      "body": "/** \n * Prints the string provided.\n * @exception IOException if an I/O error has occurred\n */\npublic void print(String s) throws IOException {\n  int len=s.length();\n  for (int i=0; i < len; i++) {\n    char c=s.charAt(i);\n    if ((c & 0xff00) != 0)     throw new CharConversionException(\"Not an ISO 8859/1 character:  \" + c);\n    write(c);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.io.OutputStream.write(int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.valueOf(long)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(long)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(char)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(double)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.io.OutputStream.write(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Harpoon/Benchmarks/webserver/javax/servlet/ServletOutputStream.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "long"
        ],
        [
          "boolean"
        ],
        [
          "long"
        ],
        [],
        [
          "int"
        ],
        [
          "char"
        ],
        [
          "boolean"
        ],
        [
          "double"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "OutputStream",
        "String"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.io.OutputStream.write(int)"
          ]
        }
      ],
      "keywords": [
        "character",
        "output",
        "stream",
        "length",
        "string"
      ]
    },
    {
      "method": "validateObject@130",
      "body": "public boolean validateObject(final Object obj){\n  final MethodCall call=new MethodCall(\"validateObject\",obj);\n  methodCalls.add(call);\n  if (validateObjectFail) {\n    throw new PrivateException(\"validateObject\");\n  }\n  final boolean r=valid;\n  call.returned(new Boolean(r));\n  return r;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Boolean.Boolean(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.add(java.lang.Object)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/commons-pool/src/test/org/apache/commons/pool/MethodCallPoolableObjectFactory.java",
      "classTypes": [
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List.add(java.lang.Object)",
            "java.lang.Boolean.Boolean(boolean)"
          ]
        }
      ],
      "keywords": [
        "list"
      ]
    },
    {
      "method": "enterInterrupt@752",
      "body": "/** \n * Called when the interrupt loop has been entered.\n */\npublic void enterInterrupt(Dim.StackFrame lastFrame,String threadTitle,String alertMessage){\n  if (SwingUtilities.isEventDispatchThread()) {\n    enterInterruptImpl(lastFrame,threadTitle,alertMessage);\n  }\n else {\n    RunProxy proxy=new RunProxy(this,RunProxy.ENTER_INTERRUPT);\n    proxy.lastFrame=lastFrame;\n    proxy.threadTitle=threadTitle;\n    proxy.alertMessage=alertMessage;\n    SwingUtilities.invokeLater(proxy);\n  }\n}\n",
      "formalParam": [
        "Dim.StackFrame",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JSplitPane.setDividerLocation(double)",
              "javax.swing.JInternalFrame.setMaximum(boolean)",
              "javax.swing.JInternalFrame.setSelected(boolean)",
              "javax.swing.JInternalFrame.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JScrollPane.JScrollPane(java.awt.Component)",
              "javax.swing.JInternalFrame.setContentPane(java.awt.Container)",
              "javax.swing.JInternalFrame.pack()",
              "javax.swing.JInternalFrame.addInternalFrameListener(javax.swing.event.InternalFrameListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()",
              "java.awt.event.MouseEvent.getY()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "String",
        "JButton",
        "JButton",
        "Runnable",
        "JLabel",
        "SwingGui",
        "FileWindow",
        "int",
        "FilePopupMenu"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [
          "String"
        ],
        [
          "Component"
        ],
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "SwingUtilities",
        "Runnable",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
          ]
        },
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()"
          ]
        }
      ],
      "keywords": [
        "event",
        "later"
      ]
    },
    {
      "method": "put@614",
      "body": "/** \n * Append an long value. This increases the array's length by one.\n * @param value A long value.\n * @return this.\n */\npublic JSONArray put(long value){\n  this.put(new Long(value));\n  return this;\n}\n",
      "formalParam": [
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Long.Long(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "JSONObject",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "JSONArray",
      "file": "./java_projects/templates/src/org/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Long.Long(long)",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "add",
        "long",
        "lang",
        "object",
        "list"
      ]
    },
    {
      "method": "ServletResource@59",
      "body": "public ServletResource(String localPath,HttpServletRequest req,HttpServletResponse response){\n  this.file=null;\n  this.name=localPath.substring(localPath.lastIndexOf(\"/\"));\n  this.localPath=localPath;\n  this.req=req;\n  this.response=response;\n}\n",
      "formalParam": [
        "String",
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Date"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.lastModified()",
              "java.util.Date.Date(long)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/milton/milton/milton-servlet/src/main/java/com/bradmcevoy/http/ServletResource.java",
      "classTypes": [
        "String",
        "String",
        "Response",
        "File",
        "HttpServletRequest",
        "HttpServletResponse",
        "OutputStream"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "index",
        "substring",
        "integer",
        "lang",
        "string",
        "last"
      ]
    },
    {
      "method": "somethingChanged@30",
      "body": "public void somethingChanged(){\n  setChanged();\n  notifyObservers();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Observable.setChanged()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Observable.notifyObservers()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.Observable.notifyObservers()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Software-Architectures-Project/Code/Software-Architectures-Project/CS4135/src/cs4135/cs4135/Basket.java",
      "classTypes": [
        "int",
        "double",
        "double"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Observable.setChanged()",
            "java.util.Observable.notifyObservers()"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "setWindowOpt@199",
      "body": "public static synchronized void setWindowOpt(String key,Boolean value){\n  setWindowOpt(key,value ? \"true\" : \"false\");\n}\n",
      "formalParam": [
        "String",
        "Boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Custom-Salem/src/haven/Config.java",
      "classTypes": [
        "byte[]",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        []
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
            "java.io.PrintStream.println(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "lang",
        "exception",
        "property",
        "string"
      ]
    },
    {
      "method": "ScannerInfoProvider@193",
      "body": "public ScannerInfoProvider(IConfigurationElement provider){\n  providerId=provider.getAttribute(\"providerId\");\n  IConfigurationElement[] actions=provider.getChildren();\n  providerKind=actions[0].getName();\n  if (providerKind.equals(RUN)) {\n    this.action=new ScannerConfigProfile.Run(actions[0]);\n  }\n else   if (providerKind.equals(OPEN)) {\n    this.action=new ScannerConfigProfile.Open(actions[0]);\n  }\n else {\n  }\n  IConfigurationElement[] parsers=provider.getChildren(\"scannerInfoConsoleParser\");\n  scannerInfoConsoleParser=new ScannerConfigProfile.ScannerInfoConsoleParser(parsers[0]);\n}\n",
      "formalParam": [
        "IConfigurationElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "List<String>",
        "boolean",
        "ScannerConfigScope"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cdt/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java",
      "classTypes": [
        "IConfigurationElement",
        "String",
        "Open",
        "ScannerInfoCollector",
        "Map<String,ScannerInfoProvider>",
        "ScannerInfoConsoleParser",
        "String",
        "Action"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "string",
        "object",
        "boolean",
        "lang"
      ]
    },
    {
      "method": "query@34",
      "body": "@SuppressWarnings(\"unchecked\") public List<T> query(CoordinateBounds b){\n  List<T> results=new ArrayList<T>();\n  Envelope env=new Envelope(b.getMinLon(),b.getMaxLon(),b.getMinLat(),b.getMaxLat());\n  List<STRtree> subTrees=_parentTree.query(env);\n  for (  STRtree subTree : subTrees) {\n    List<T> result=subTree.query(env);\n    results.addAll(result);\n  }\n  return results;\n}\n",
      "formalParam": [
        "CoordinateBounds"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "List<T>",
      "file": "./java_projects/onebusaway-application-modules/onebusaway-geospatial/src/main/java/org/onebusaway/geospatial/HierarchicalSTRtree.java",
      "classTypes": [
        "STRtree"
      ],
      "sorrformalparam": [],
      "types": [
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "array",
        "util",
        "list"
      ]
    },
    {
      "method": "updateTables@164",
      "body": "/** \n * Performs validation of DbEntities in the current DataMap. Returns a collection of ValidationInfo objects describing the problems.\n */\npublic void updateTables(DataMap dataMap){\n  this.tables=new ArrayList<DbEntity>(dataMap.getDbEntities());\n  excludedTables.clear();\n  validationMessages.clear();\n  Project project=getApplication().getProject();\n  ProjectValidator projectValidator=getApplication().getInjector().getInstance(ProjectValidator.class);\n  ValidationResult validationResult=projectValidator.validate(project.getRootNode());\n  if (validationResult.getFailures().size() > 0) {\n    for (    ValidationFailure nextProblem : validationResult.getFailures()) {\n      DbEntity failedEntity=null;\n      if (nextProblem.getSource() instanceof DbAttribute) {\n        DbAttribute failedAttribute=(DbAttribute)nextProblem.getSource();\n        failedEntity=(DbEntity)failedAttribute.getEntity();\n      }\n else       if (nextProblem.getSource() instanceof DbRelationship) {\n        DbRelationship failedRelationship=(DbRelationship)nextProblem.getSource();\n        failedEntity=(DbEntity)failedRelationship.getSourceEntity();\n      }\n else       if (nextProblem.getSource() instanceof DbEntity) {\n        failedEntity=(DbEntity)nextProblem.getSource();\n      }\n      if (failedEntity == null) {\n        continue;\n      }\n      excludedTables.put(failedEntity.getName(),failedEntity);\n      validationMessages.put(failedEntity.getName(),nextProblem.getDescription());\n    }\n  }\n  permanentlyExcludedCount=excludedTables.size();\n  selectableTablesList.clear();\n  for (  DbEntity table : tables) {\n    if (false == excludedTables.containsKey(table.getName())) {\n      selectableTablesList.add(table);\n    }\n  }\n  tableBinding.updateView();\n  tableSelectedAction();\n}\n",
      "formalParam": [
        "DataMap"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cayenne/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/dialog/db/TableSelectorController.java",
      "classTypes": [
        "ObjectBinding",
        "Map<String,String>",
        "List<DbEntity>",
        "Map<String,DbEntity>",
        "DbEntity",
        "List<DbEntity>"
      ],
      "sorrformalparam": [
        [
          "ProjectController"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Map<java.lang.String,java.lang.String>.clear()",
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "clear"
      ]
    },
    {
      "method": "totalSize@36",
      "body": "public static long totalSize(Collection files){\n  long total=0;\n  for (Iterator it=files.iterator(); it.hasNext(); ) {\n    File f=(File)it.next();\n    total+=f.length();\n  }\n  return total;\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.File.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "long",
      "file": "./java_projects/felix/sigil/ivy/resolver/test/multi-project/projects/size/src/size/FileSize.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Collection",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.io.File.length()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "long"
      ]
    },
    {
      "method": "testConstructedNode1@330",
      "body": "public void testConstructedNode1(){\n  try {\n    String q1=\"let $a := <A/> for $b in $a//B/string() return \\\"Oops!\\\"\";\n    XPathQueryService service=(XPathQueryService)getTestCollection().getService(\"XPathQueryService\",\"1.0\");\n    ResourceSet result=service.query(q1);\n    assertEquals(0,result.getSize());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.toString()"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(char[])",
              "java.io.PrintStream.println(char[])",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(char[])",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eXist-1.4.x/test/src/org/exist/xquery/XQueryTest.java",
      "classTypes": [
        "String",
        "int",
        "String",
        "String",
        "String",
        "String",
        "Database",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "message",
        "trace",
        "print",
        "get",
        "string"
      ]
    },
    {
      "method": "actionPerformed@43",
      "body": "/** \n * Method to handle events for the ActionListener interface.\n * @param e java.awt.event.ActionEvent\n */\npublic void actionPerformed(java.awt.event.ActionEvent e){\n  if ((e.getSource() == getDetailsButton())) {\n    connEtoC1(e);\n  }\n}\n",
      "formalParam": [
        "java.awt.event.ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Component.setName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setLocation(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setBackground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setSize(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Font.Font(java.lang.String,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setFont(java.awt.Font)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Component.getBackground()",
              "java.awt.Graphics.setColor(java.awt.Color)",
              "java.awt.Graphics.fill3DRect(int,int,int,int,boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Harpoon/ImageRec/contrib/JacORB1_3_30/src/org/jacorb/poa/gui/poa/QueuePanel.java",
      "classTypes": [
        "java.awt.Button",
        "DetailsButtonController",
        "java.awt.Label",
        "org.jacorb.poa.gui.beans.FillLevelBar",
        "java.awt.Label"
      ],
      "sorrformalparam": [
        [
          "java.awt.Graphics"
        ]
      ],
      "types": [],
      "apicalls": [
        "setBackground",
        "setFont",
        "getSource"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "java.awt.Component.setName(java.lang.String)",
            "java.awt.Component.setLocation(int,int)",
            "java.awt.Component.setBackground(java.awt.Color)",
            "java.awt.Component.setSize(int,int)",
            "java.awt.Font.Font(java.lang.String,int,int)",
            "java.awt.Component.setFont(java.awt.Font)"
          ]
        }
      ],
      "keywords": [
        "color",
        "set"
      ]
    },
    {
      "method": "saveNewPrototype@252",
      "body": "/** \n * Salvar a configuracao atual como prot\u00f3tipo.\n */\npublic void saveNewPrototype(){\n  try {\n    Object obj=JOptionPane.showInputDialog(this.getTopLevelAncestor(),\"Nome do Prot\u00f3tipo\",\"modelo \" + (getPersistentModel().getNumPrototypes() + 1));\n    if (obj != null) {\n      getPersistentModel().saveCurrentConfigAsPrototype(obj.toString());\n    }\n  }\n catch (  BackingStoreException ex) {\n    ex.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.max(int,int)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.lang.Math.max(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumnCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/blink/src/linsoft/gui/bean/PersistentBeanTable.java",
      "classTypes": [
        "TableColumnModel",
        "PropertyChangeListener",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        [],
        [
          "ActionEvent"
        ],
        [],
        [
          "ActionEvent"
        ],
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "Component"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "component",
        "trace",
        "input",
        "show",
        "throwable",
        "swing",
        "object"
      ]
    },
    {
      "method": "containsAttributes@259",
      "body": "/** \n * {@inheritDoc} \n */\npublic boolean containsAttributes(AttributeSet attributes){\n  boolean result=true;\n  Enumeration<?> names=attributes.getAttributeNames();\n  while (result && names.hasMoreElements()) {\n    Object name=names.nextElement();\n    result=attributes.getAttribute(name).equals(getAttribute(name));\n  }\n  return result;\n}\n",
      "formalParam": [
        "AttributeSet"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.AttributeSet.getAttributeNames()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration<Tau_E>.nextElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration<Tau_E>.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "Enumeration<String>",
        "None",
        "Object",
        "boolean",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>(int)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "java.util.Map<java.lang.String,java.lang.Object>.remove(java.lang.Object)",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.AttributeSet.getAttributeCount()",
              "javax.swing.text.AttributeSet.getAttributeNames()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.keySet()",
              "java.util.Collections.enumeration(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.AttributeSet.getAttributeCount()",
              "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>(int)",
              "javax.swing.text.AttributeSet.getAttributeNames()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.size()",
              "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>(int)",
              "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>(java.util.Map)",
              "javax.swing.text.AttributeSet.copyAttributes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/maven-doxia/doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java",
      "classTypes": [
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "SinkEventAttributes",
        "Map<String,Object>"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ],
        [
          "Enumeration<?>"
        ],
        [
          "AttributeSet"
        ],
        [],
        [
          "AttributeSet"
        ],
        [],
        [
          "Object",
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Enumeration",
        "String",
        "AttributeSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.AttributeSet.getAttributeNames()",
            "java.util.Enumeration<Tau_E>.hasMoreElements()",
            "java.util.Enumeration<Tau_E>.nextElement()",
            "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "javax.swing.text.AttributeSet.getAttribute(java.lang.Object)",
            "java.util.Enumeration<Tau_E>.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "map",
        "set",
        "boolean",
        "names",
        "element",
        "enumeration"
      ]
    },
    {
      "method": "computeDetail@55",
      "body": "public void computeDetail(final ValueCallback callback){\n  if (value.isPrimitive() || (variable != null && variable.isLibraryObject())) {\n    callback.detailComputed(getDisplayString());\n    return;\n  }\n  try {\n    getConnection().getRuntime().callToString(value.getObjectId(),new WebkitCallback<String>(){\n      @Override public void handleResult(      WebkitResult<String> result){\n        if (result.isError()) {\n          callback.detailComputed(result.getErrorMessage());\n        }\n else {\n          callback.detailComputed(result.getResult());\n        }\n      }\n    }\n);\n  }\n catch (  IOException e) {\n    DartDebugCorePlugin.logError(e);\n    callback.detailComputed(null);\n  }\n}\n",
      "formalParam": [
        "ValueCallback"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.indexOf(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.indexOf(int,int)",
              "java.lang.String.substring(int,int)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.indexOf(int,int)",
              "java.lang.String.substring(int,int)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/bleeding_edge/dart/editor/tools/plugins/com.google.dart.tools.debug.core/src/com/google/dart/tools/debug/core/dartium/DartiumDebugValue.java",
      "classTypes": [
        "WebkitRemoteObject",
        "VariableCollector",
        "DartiumDebugVariable"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "NumberFormatException"
      ],
      "apicalls": [
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.indexOf(int,int)",
            "java.lang.String.substring(int,int)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "parse",
        "substring",
        "number",
        "format"
      ]
    },
    {
      "method": "OsVersion@67",
      "body": "/** \n * @param String version, e.g. \"5.0.0.145\".\n * @throws NullPointerException if passed version String is null.\n * @throws IllegalStateException if passed version String does not matches the \"a.b.c.d\" pattern (a group of 4 non-empty string parts joined by a dot).\n * @throws NumberFormatException if at least one of the parts got by splitting the passed version String with a dot is not a parsable integer.\n */\npublic OsVersion(String version){\n  this.version=version.trim();\n  final String[] strParts=StringUtils.split(version,DELIMITER);\n  if (strParts.length != PARTS_SIZE) {\n    throw new IllegalStateException(\"Software version \\\"\" + version + \"\\\" consists of unexpected number \"+ \"of parts (\"+ strParts.length+ \"). Expected is \"+ PARTS_SIZE+ '.');\n  }\n  parts=new int[PARTS_SIZE];\n  for (int i=0; i < PARTS_SIZE; i++) {\n    parts[i]=Integer.parseInt(strParts[i]);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(int)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/blackberry_utils/src/com/cleverua/bb/utils/SoftwareVersionUtils.java",
      "classTypes": [
        "int",
        "OsVersion",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "parseInt",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "parse",
        "int",
        "exception",
        "format",
        "lang",
        "integer",
        "trim"
      ]
    },
    {
      "method": "add@46",
      "body": "public boolean add(T t){\n  if (t == null)   throw new IllegalArgumentException(\"null is not allowed in associations\");\n  int size=delegate().size();\n  if (!ref().opposite().isCollection()) {\n    ref().opposite().set(t,null);\n  }\n  link(t);\n  linkOpposite(t);\n  return size != size();\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/play-associations/src/play/modules/associations/AssociativeSet.java",
      "classTypes": [
        "T",
        "Iterator<T>"
      ],
      "sorrformalparam": [
        [
          "T"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Set",
        "Integer",
        "HashSet",
        "Boolean"
      ],
      "apicalls": [
        "size",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.size()",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.add(Tau_E)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.Set<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "integer",
        "size"
      ]
    },
    {
      "method": "updateSecurityScanResult@212",
      "body": "public synchronized void updateSecurityScanResult(SecurityScanResult checkResult){\n  logListModel.updateSecurityScanResult(checkResult,errorsOnly);\n  if (follow) {\n    try {\n      testLogList.ensureIndexIsVisible(logListModel.getSize() - 1);\n    }\n catch (    RuntimeException e) {\n      log.error(e.getMessage());\n    }\n  }\n}\n",
      "formalParam": [
        "SecurityScanResult"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.JList.ensureIndexIsVisible(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.getSelectedIndex()",
              "java.awt.event.MouseEvent.getClickCount()",
              "java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String)"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.getSelectedIndex()",
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.PrintWriter(java.io.File)",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/soapui/src/java/com/eviware/soapui/security/log/JSecurityTestRunLog.java",
      "classTypes": [
        "Set<String>",
        "int",
        "SecurityTestLogModel",
        "String",
        "Settings",
        "Font",
        "JList",
        "JHyperlinkLabel",
        "String",
        "Font"
      ],
      "sorrformalparam": [
        [
          "SecurityScanRequestResult"
        ],
        [
          "MouseEvent"
        ],
        [
          "SecurityTestStepResult",
          "boolean",
          "boolean"
        ],
        [
          "ActionEvent"
        ],
        [
          "SecurityScan"
        ],
        [
          "TestStep"
        ]
      ],
      "types": [],
      "apicalls": [
        "ensureIndexIsVisible",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.ensureIndexIsVisible(int)",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "javax.swing.JList.ensureIndexIsVisible(int)"
          ]
        }
      ],
      "keywords": [
        "j"
      ]
    },
    {
      "method": "contains@50",
      "body": "public boolean contains(Charset cs){\n  return ((cs instanceof EUC_KR) || (cs.name().equals(\"US-ASCII\")) || (cs instanceof ISO2022_KR));\n}\n",
      "formalParam": [
        "Charset"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.charset.Charset.name()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/sun/nio/cs/ext/ISO2022_KR.java",
      "classTypes": [
        "Charset"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Charset",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.nio.charset.Charset.name()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "nio",
        "string"
      ]
    },
    {
      "method": "stateChanged@4015",
      "body": "/** \n * change listener implementation for slider\n */\npublic void stateChanged(ChangeEvent e){\n  if (!slider.getValueIsAdjusting()) {\n    int size=slider.getValue();\n    GeoAngle angle;\n    for (int i=0; i < geos.length; i++) {\n      angle=(GeoAngle)geos[i];\n      if (size < 20 && (angle.decorationType == GeoElement.DECORATION_ANGLE_THREE_ARCS || angle.decorationType == GeoElement.DECORATION_ANGLE_TWO_ARCS)) {\n        angle.setArcSize(20);\n        int selected=((GeoAngle)geos[0]).decorationType;\n        if (selected == GeoElement.DECORATION_ANGLE_THREE_ARCS || selected == GeoElement.DECORATION_ANGLE_TWO_ARCS) {\n          slider.setValue(20);\n        }\n      }\n else       angle.setArcSize(size);\n      angle.updateRepaint();\n    }\n  }\n}\n",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JSlider.getValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "javax.swing.JSlider.setValue(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "JPanel",
        "void",
        "None",
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "boolean",
        "long",
        "JSlider",
        "AngleTextField",
        "JCheckBox",
        "JComboBox"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        [
          "Object[]"
        ],
        [
          "ChangeEvent"
        ],
        [],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "getValueIsAdjusting",
        "setValue"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
            "javax.swing.JSlider.getValue()",
            "javax.swing.JSlider.setValue(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "value",
        "set",
        "swing"
      ]
    },
    {
      "method": "createPopup@48",
      "body": "public static JPopupMenu createPopup(final String familyId){\n  JPopupMenu popupMenu=new JPopupMenu();\n  JMenuItem filter1Item=new JMenuItem(\"Filter by Family\");\n  filter1Item.addActionListener(new ActionListener(){\n    @Override public void actionPerformed(    ActionEvent e){\n      List<String> dnaIds=new ArrayList<String>();\n      int numPatients=0;\n      try {\n        Map<String,String> patientIDToDNAIDMap=MedSavantClient.PatientManager.getDNAIDsForFamily(LoginController.sessionId,ProjectController.getInstance().getCurrentProjectID(),familyId);\n        numPatients=patientIDToDNAIDMap.size();\n        Object[] values=patientIDToDNAIDMap.values().toArray();\n        for (        Object o : values) {\n          String[] d=((String)o).split(\",\");\n          for (          String id : d) {\n            if (!dnaIds.contains(id)) {\n              dnaIds.add(id);\n            }\n          }\n        }\n      }\n catch (      Exception ex) {\n        ClientMiscUtils.reportError(\"Error getting DNA IDs for family: %s\",ex);\n      }\n      DbColumn col=ProjectController.getInstance().getCurrentVariantTableSchema().getDBColumn(DefaultVariantTableSchema.COLUMNNAME_OF_DNA_ID);\n      Condition[] conditions=new Condition[dnaIds.size()];\n      for (int i=0; i < dnaIds.size(); i++) {\n        conditions[i]=BinaryConditionMS.equalTo(col,dnaIds.get(i));\n      }\n      removeExistingFilters();\n      filterPanels=FilterUtils.createAndApplyGenericFixedFilter(\"Individuals - Filter by Family\",numPatients + \" Patient(s) (\" + dnaIds.size()+ \" DNA Id(s))\",ComboCondition.or(conditions));\n    }\n  }\n);\n  popupMenu.add(filter1Item);\n  return popupMenu;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JPopupMenu.JPopupMenu()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JMenuItem.JMenuItem(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.JMenuItem"
          }
        ]
      },
      "sorrreturntype": [
        "JPopupMenu"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JPopupMenu.JPopupMenu()",
              "javax.swing.JMenuItem.JMenuItem(java.lang.String)",
              "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
              "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)"
            ]
          }
        ]
      ],
      "returnType": "JPopupMenu",
      "file": "./java_projects/medsavant/medsavant/MedSavantClient/src/org/ut/biolab/medsavant/view/pedigree/Utils.java",
      "classTypes": [
        "List<FilterPanelSubItem>"
      ],
      "sorrformalparam": [
        [
          "int[]"
        ]
      ],
      "types": [],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JPopupMenu.JPopupMenu()",
            "javax.swing.JMenuItem.JMenuItem(java.lang.String)",
            "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "javax.swing.JPopupMenu.add(javax.swing.JMenuItem)"
          ]
        }
      ],
      "keywords": [
        "j"
      ]
    },
    {
      "method": "renderView@51",
      "body": "public void renderView(RenderRequest request,RenderResponse response,MultiPageModel model) throws PortletException, IOException {\n  KeystoreManager manager=PortletManager.getCurrentServer(request).getKeystoreManager();\n  KeystoreInstance[] keystores=manager.getKeystores();\n  PortletSession session=request.getPortletSession(true);\n  KeystoreData[] datas=new KeystoreData[keystores.length];\n  Map keys=new HashMap();\n  for (int i=0; i < datas.length; i++) {\n    AbstractName aName=PortletManager.getNameFor(request,keystores[i]);\n    String name=(String)aName.getName().get(NameFactory.J2EE_NAME);\n    KeystoreData data=(KeystoreData)session.getAttribute(KEYSTORE_DATA_PREFIX + name);\n    if (data == null) {\n      data=new KeystoreData();\n      data.setInstance(keystores[i]);\n      session.setAttribute(KEYSTORE_DATA_PREFIX + name,data);\n    }\n    datas[i]=data;\n    if (!data.getInstance().isKeystoreLocked()) {\n      try {\n        String[] all=data.getInstance().getUnlockedKeys(null);\n        if (all.length > 0) {\n          keys.put(data.getInstance().getKeystoreName(),all.length + \" key\" + (all.length > 1 ? \"s\" : \"\")+ \" ready\");\n        }\n else {\n          keys.put(data.getInstance().getKeystoreName(),\"trust store only\");\n        }\n      }\n catch (      KeystoreException locked) {\n      }\n    }\n  }\n  request.setAttribute(\"keystores\",datas);\n  request.setAttribute(\"keys\",keys);\n}\n",
      "formalParam": [
        "RenderRequest",
        "RenderResponse",
        "MultiPageModel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/geronimo/plugins/console/console-base-portlets/src/main/java/org/apache/geronimo/console/keystores/ListHandler.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "map"
      ]
    },
    {
      "method": "addIngredient@149",
      "body": "public void addIngredient(){\n  String IngredientString=null;\n  String AmountString=null;\n  Boolean firstStep=true;\n  if ((counterIngredient - (int)getItemId(R.id.IngredientBox0)) / 25 <= (counterDelete - 1)) {\n    IngredientString=\" \";\n    AmountString=\" \";\n    firstStep=false;\n  }\n else {\n    EditText Ingredient=(EditText)getActivity().findViewById(counterIngredient);\n    EditText Amount=(EditText)getActivity().findViewById(counterAmount);\n    if (Ingredient != null && Amount != null) {\n      IngredientString=Ingredient.getText().toString();\n      AmountString=Amount.getText().toString();\n    }\n else {\n      IngredientString=\" \";\n      AmountString=\" \";\n    }\n  }\n  if ((IngredientString != null) && (IngredientString.length() > 0)) {\n    if ((AmountString != null) && (AmountString.length() > 0)) {\n      if (firstStep) {\n        IngredientString=null;\n        AmountString=null;\n        EditText IngredientED=(EditText)getActivity().findViewById(counterIngredient);\n        EditText AmountED=(EditText)getActivity().findViewById(counterAmount);\n        Spinner MeasurementS=(Spinner)getActivity().findViewById(counterMeasurement);\n        Button ButtonEdit=(Button)getActivity().findViewById(counterEdit);\n        Button ButtonRemove=(Button)getActivity().findViewById(counterRemove);\n        IngredientED.setFocusable(false);\n        AmountED.setFocusable(false);\n        MeasurementS.setFocusable(false);\n        MeasurementS.setEnabled(false);\n        IngredientED.setTextColor(Color.LTGRAY);\n        AmountED.setTextColor(Color.LTGRAY);\n        ButtonEdit.setVisibility(View.VISIBLE);\n        ButtonEdit.setOnClickListener(listenerOfEditButton);\n        ButtonRemove.setVisibility(View.VISIBLE);\n        ButtonRemove.setOnClickListener(listenerOfRemoveButton);\n      }\n      counterIngredient+=25;\n      counterAmount+=25;\n      counterMeasurement+=25;\n      counterEdit+=25;\n      counterRow+=25;\n      counterRemove+=25;\n      TableLayout table=(TableLayout)getActivity().findViewById(R.id.IngredientsTable);\n      TableRow rowIngredient=new TableRow(getActivity());\n      EditText tIngredient=new EditText(getActivity());\n      tIngredient.setHint(\"Ingredient\");\n      tIngredient.setInputType(InputType.TYPE_CLASS_TEXT);\n      tIngredient.setId(counterIngredient);\n      Button removeButton=new Button(getActivity());\n      removeButton.setText(R.string.Remove);\n      removeButton.setId(counterRemove);\n      removeButton.setOnClickListener(listenerOfRemoveButton);\n      rowIngredient.setId(counterRow);\n      rowIngredient.addView(tIngredient);\n      rowIngredient.addView(removeButton);\n      table.addView(rowIngredient,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n      TableRow rowAmount=new TableRow(getActivity());\n      EditText tAmount=new EditText(getActivity());\n      tAmount.setHint(\"Quantity (weight, volume etc)\");\n      tAmount.setId(counterAmount);\n      Button editButton=new Button(getActivity());\n      editButton.setVisibility(View.INVISIBLE);\n      editButton.setText(R.string.Edit);\n      editButton.setId(counterEdit);\n      editButton.setOnClickListener(listenerOfEditButton);\n      rowAmount.setId(counterRow + remember);\n      rowAmount.addView(tAmount);\n      rowAmount.addView(editButton);\n      table.addView(rowAmount,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n      TableRow rowMeasurement=new TableRow(getActivity());\n      Spinner tMeasurement=new Spinner(getActivity());\n      tMeasurement.setPrompt(\"Measurement\");\n      ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(getActivity(),R.array.WeightMeasurement,android.R.layout.simple_spinner_item);\n      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n      tMeasurement.setAdapter(adapter);\n      tMeasurement.setId(counterMeasurement);\n      rowMeasurement.setId(counterRow + remember + 1);\n      rowMeasurement.addView(tMeasurement);\n      table.addView(rowMeasurement,new TableLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,(float)1));\n    }\n else {\n      IngredientString=null;\n      AmountString=null;\n      new AlertDialog.Builder(getActivity()).setTitle(\"Fill in all fields\").setMessage(\"Please enter an amount\").setPositiveButton(\"Yes\",new DialogInterface.OnClickListener(){\n        public void onClick(        DialogInterface dialog,        int which){\n          dialog.dismiss();\n        }\n      }\n).show();\n    }\n  }\n else {\n    IngredientString=null;\n    AmountString=null;\n    new AlertDialog.Builder(getActivity()).setTitle(\"Fill in all fields\").setMessage(\"Please enter an ingredient\").setPositiveButton(\"Ok\",new DialogInterface.OnClickListener(){\n      public void onClick(      DialogInterface dialog,      int which){\n        dialog.dismiss();\n      }\n    }\n).show();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Cookbook/Cookbook/src/com/cookbook/activity/AddRecipeActivity.java",
      "classTypes": [
        "int",
        "OnClickListener",
        "int",
        "int",
        "OnClickListener",
        "OnClickListener",
        "int"
      ],
      "sorrformalparam": [
        [
          "Bundle"
        ]
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "integer",
        "lang",
        "length"
      ]
    },
    {
      "method": "testNullUserLogin@62",
      "body": "@Test public void testNullUserLogin() throws Exception {\n  testFailure(null,\"manager\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geronimo/testsuite/security-testsuite/test-security/src/test/java/org/apache/geronimo/testsuite/security/TestJMXSecurity.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "HashMap",
        "Map",
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "hash",
        "object",
        "util",
        "put",
        "map"
      ]
    },
    {
      "method": "testConstructorStringRadix16@674",
      "body": "/** \n * Create a positive number from a string value and radix 16.\n */\npublic void testConstructorStringRadix16(){\n  String value=\"fe2340a8b5ce790\";\n  int radix=16;\n  byte rBytes[]={15,-30,52,10,-117,92,-25,-112};\n  BigInteger aNumber=new BigInteger(value,radix);\n  byte resBytes[]=new byte[rBytes.length];\n  resBytes=aNumber.toByteArray();\n  for (int i=0; i < resBytes.length; i++) {\n    assertTrue(resBytes[i] == rBytes[i]);\n  }\n  assertEquals(\"incorrect sign\",1,aNumber.signum());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.math.BigInteger.signum()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])"
            ]
          },
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerConstructorsTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(java.lang.String,int)",
            "java.math.BigInteger.toByteArray()",
            "java.math.BigInteger.signum()"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "getSummaryData@35",
      "body": "public String getSummaryData(TestSummary summary){\n  if (summary.hasFailed()) {\n    StringBuffer sb=new StringBuffer(\"\\n\\n\");\n    sb.append(\"Script: \").append(summary.getScriptName());\n    sb.append(\"\\nFailures: \").append(summary.getFailures());\n    sb.append(\"\\nErrors: \").append(summary.getErrors());\n    return sb.toString();\n  }\n  return \"\";\n}\n",
      "formalParam": [
        "TestSummary"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/twistDemo/twist-libs/com.thoughtworks.webdriver.recorder_1.0.0.11288/sahi/src/net/sf/sahi/issue/IssueFormatter.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "String",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "append"
      ]
    },
    {
      "method": "TextFileMetaDataParser@420",
      "body": "/** \n * Default Constructor\n */\nprotected TextFileMetaDataParser(){\n  this.rmdSet=new TreeSet<RecordMetaData>();\n  this.tempDate=Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"),Locale.US);\n  this.tempDate.setTimeInMillis(0);\n  this.tempOperation=RecordMetaDataType.error;\n  this.tempOperator=IllegalArgumentException.class;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeSet<Tau_E>.TreeSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.TimeZone.getTimeZone(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.TimeZone"
          },
          {
            "_call": "java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Calendar"
          },
          {
            "_call": "java.util.Calendar.setTimeInMillis(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Set<String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.TreeSet<java.lang.String>.TreeSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/VIVO-Harvester/src/main/java/org/vivoweb/harvester/util/repo/TextFileRecordHandler.java",
      "classTypes": [
        "String",
        "Class<?>",
        "Iterator<String>",
        "Calendar"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet<Tau_E>.TreeSet()",
            "java.util.TimeZone.getTimeZone(java.lang.String)",
            "java.util.Calendar.getInstance(java.util.TimeZone,java.util.Locale)",
            "java.util.Calendar.setTimeInMillis(long)"
          ]
        }
      ],
      "keywords": [
        "zone",
        "time"
      ]
    },
    {
      "method": "decodeMultiple@49",
      "body": "public Result[] decodeMultiple(BinaryBitmap image,Hashtable hints) throws NotFoundException {\n  Vector results=new Vector();\n  DetectorResult[] detectorResult=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);\n  for (int i=0; i < detectorResult.length; i++) {\n    try {\n      DecoderResult decoderResult=getDecoder().decode(detectorResult[i].getBits());\n      ResultPoint[] points=detectorResult[i].getPoints();\n      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);\n      if (decoderResult.getByteSegments() != null) {\n        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,decoderResult.getByteSegments());\n      }\n      if (decoderResult.getECLevel() != null) {\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,decoderResult.getECLevel().toString());\n      }\n      results.addElement(result);\n    }\n catch (    ReaderException re) {\n    }\n  }\n  if (results.isEmpty()) {\n    return EMPTY_RESULT_ARRAY;\n  }\n else {\n    Result[] resultArray=new Result[results.size()];\n    for (int i=0; i < results.size(); i++) {\n      resultArray[i]=(Result)results.elementAt(i);\n    }\n    return resultArray;\n  }\n}\n",
      "formalParam": [
        "BinaryBitmap",
        "Hashtable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.util.Vector.size()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ]
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Result[]",
      "file": "./java_projects/huiswerk/print/zxing-1.6/core/src/com/google/zxing/multi/qrcode/QRCodeMultiReader.java",
      "classTypes": [
        "Result[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.isEmpty()",
            "java.util.Vector.size()",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "object",
        "element",
        "vector",
        "empty",
        "integer"
      ]
    },
    {
      "method": "removeAllItems@644",
      "body": "/** \n * Remove all elements\n */\npublic void removeAllItems(){\n  if (selectedIdx > 0 && selectedIdx < this.items.size())   ((UIItem)items.elementAt(this.selectedIdx)).setSelected(false);\n  items.removeAllElements();\n  setDirty(true);\n  selectedIdx=-1;\n  firstVisible=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Vector.removeAllElements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.contains(java.lang.Object)",
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/CIDE/CIDE_Samples/cide_samples/Lampiro/src/it/yup/ui/UIPanel.java",
      "classTypes": [
        "int",
        "Image"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [],
        [
          "UIItem"
        ],
        [
          "UIScreen"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "elements",
        "size",
        "hasMoreElements",
        "removeAllElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.removeAllElements()",
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "size",
        "integer"
      ]
    },
    {
      "method": "ShowTrimmedIntersectionLines@808",
      "body": "public ShowTrimmedIntersectionLines(){\n  setLayout(new FlowLayout(FlowLayout.LEFT));\n  showTrimmedLinesCB=new JCheckBox();\n  showTrimmedLinesCB.addItemListener(this);\n  add(showTrimmedLinesCB);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.FlowLayout.FlowLayout(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JCheckBox.JCheckBox()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "JPanel",
        "void",
        "JPanel",
        "JPanel",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.setEnabled(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JTextField.removeActionListener(java.awt.event.ActionListener)",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.isSelected()",
              "javax.swing.AbstractButton.setEnabled(boolean)"
            ]
          },
          {
            "calls": [
              "javax.swing.AbstractButton.isSelected()",
              "javax.swing.AbstractButton.setEnabled(boolean)",
              "javax.swing.AbstractButton.isSelected()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "JComboBox",
        "long",
        "JTabbedPane",
        "PopupMenuButton"
      ],
      "sorrformalparam": [
        [],
        [
          "ActionEvent"
        ],
        [
          "ActionEvent"
        ],
        [
          "Object[]"
        ],
        [],
        [
          "Object[]"
        ],
        [
          "Object[]"
        ],
        [
          "ChangeEvent"
        ],
        [
          "ItemEvent"
        ]
      ],
      "types": [
        "Component"
      ],
      "apicalls": [
        "setLayout"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.FlowLayout.FlowLayout(int)",
            "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "javax.swing.JCheckBox.JCheckBox()",
            "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "java.awt.Container.add(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "set",
        "item",
        "button",
        "abstract"
      ]
    },
    {
      "method": "fromString@363",
      "body": "public static Time fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,java.lang.String content){\n  if (content.indexOf(\":\") > -1) {\n    java.lang.String prefix=content.substring(0,content.indexOf(\":\"));\n    java.lang.String namespaceUri=xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);\n    return Time.Factory.fromString(content,namespaceUri);\n  }\n else {\n    return Time.Factory.fromString(content,\"\");\n  }\n}\n",
      "formalParam": [
        "javax.xml.stream.XMLStreamReader",
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "javax.xml.stream.XMLStreamReader.getNamespaceContext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.xml.namespace.NamespaceContext"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.stream.XMLStreamReader.getProperty(java.lang.String)",
              "java.lang.Boolean.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Time",
      "file": "./java_projects/axis2-java/modules/adb/src/org/apache/axis2/databinding/types/xsd/Time.java",
      "classTypes": [
        "org.apache.axis2.databinding.types.Time"
      ],
      "sorrformalparam": [
        [
          "javax.xml.stream.XMLStreamReader"
        ]
      ],
      "types": [
        "XMLStreamReader"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "javax.xml.stream.XMLStreamReader.getNamespaceContext()"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "string",
        "get"
      ]
    },
    {
      "method": "put@666",
      "body": "/** \n * Put a value in the JSONArray, where the value will be a JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value isnot finite.\n */\npublic JSONArray put(int index,Collection value) throws JSONException {\n  this.put(index,new JSONArray(value));\n  return this;\n}\n",
      "formalParam": [
        "int",
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "JSONArray",
        "None",
        "boolean",
        "int",
        "Object",
        "JSONArray",
        "JSONArray"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ]
      ],
      "returnType": "JSONArray",
      "file": "./java_projects/Code-EDU-Game/CodeEduGame/src/com/appspot/codeedugame/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int",
          "String"
        ],
        [
          "Map"
        ],
        [
          "Collection"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Collection"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "collection",
        "array"
      ]
    },
    {
      "method": "randomize@190",
      "body": "public void randomize(boolean objects,boolean blobs){\n  testint=AbstractTestCase.randomInt().intValue();\n  testlong=AbstractTestCase.randomLong().longValue();\n  testshort=AbstractTestCase.randomShort().shortValue();\n  testfloat=AbstractTestCase.randomFloat().floatValue();\n  testdouble=AbstractTestCase.randomDouble().doubleValue();\n  testbyte=AbstractTestCase.randomByte().byteValue();\n  testboolean=AbstractTestCase.randomBoolean().booleanValue();\n  testchar=AbstractTestCase.randomChar().charValue();\n  if (objects) {\n    testString=AbstractTestCase.randomString();\n    testDate=AbstractTestCase.randomDate();\n    testCalendar=Calendar.getInstance();\n    testCalendar.setTime(AbstractTestCase.randomDate());\n    testBigInteger=AbstractTestCase.randomBigInteger();\n    testBigDecimal=AbstractTestCase.randomBigDecimal();\n  }\n  if (blobs && objects) {\n    testObject=AbstractTestCase.randomBlob();\n    testBigString=AbstractTestCase.randomClob();\n  }\n}\n",
      "formalParam": [
        "boolean",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Calendar"
          },
          {
            "_call": "java.util.Calendar.setTime(java.util.Date)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjpa/openjpa-persistence-jdbc/src/test/java/org/apache/openjpa/persistence/kernel/common/apps/AllFieldTypesTest.java",
      "classTypes": [
        "float",
        "Object",
        "short"
      ],
      "sorrformalparam": [],
      "types": [
        "Calendar"
      ],
      "apicalls": [
        "getInstance",
        "setTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.setTime(java.util.Date)"
          ]
        }
      ],
      "keywords": [
        "date",
        "time",
        "set",
        "instance",
        "util"
      ]
    },
    {
      "method": "read@235",
      "body": "@Override public void read(int pos,byte[] dst) throws IOException {\n  if (isReadOnly()) {\n    ByteBuffer bb=ByteBuffer.wrap(dst);\n    _channel.read(bb,pos);\n  }\n else {\n    System.arraycopy(_buffer.array(),pos,dst,0,dst.length);\n  }\n}\n",
      "formalParam": [
        "int",
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.nio.ByteBuffer.array()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.nio.ByteBuffer.wrap(byte[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.nio.ByteBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "short",
        "void",
        "void",
        "void",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.getShort(int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.getShort(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.lang.System.currentTimeMillis()",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.putLong(long)",
              "java.nio.Buffer.flip()",
              "java.util.Queue<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.lang.System.currentTimeMillis()",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.putLong(long)",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.array()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.position()",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.nio.Buffer.position()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.getInt(int)"
            ]
          },
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.getInt(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/krati/krati-main/src/main/java/krati/core/segment/WriteBufferSegment.java",
      "classTypes": [
        "Queue<ByteBuffer>"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [],
        [
          "int",
          "byte[]",
          "int",
          "int"
        ],
        [
          "int",
          "int",
          "WritableByteChannel"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Object",
        "Byte"
      ],
      "apicalls": [
        "array"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])"
          ]
        },
        {
          "calls": [
            "java.nio.ByteBuffer.array()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "storeVariable@233",
      "body": "public void storeVariable(VariableValueType var){\n  List<VariableValueType> vars=variableTable.get(var.getVariableId());\n  if (vars == null) {\n    vars=new Vector<VariableValueType>();\n    variableTable.put(var.getVariableId(),vars);\n  }\n  for (  VariableValueType existingType : vars) {\n    if (existingType.isSetValue()) {\n      if (((String)existingType.getValue()).equals((String)var.getValue())) {\n        return;\n      }\n    }\n else     if (!var.isSetValue()) {\n      return;\n    }\n  }\n  vars.add(var);\n}\n",
      "formalParam": [
        "VariableValueType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Object",
        "None",
        "BigInteger",
        "List<VariableValueType>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.util.Hashtable<Tau_K,Tau_V>.containsKey(java.lang.Object)",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.math.BigInteger>>.get(java.lang.Object)",
              "java.util.HashSet<java.math.BigInteger>.HashSet<BigInteger>()",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.math.BigInteger>>.put(java.lang.String,java.util.HashSet<java.math.BigInteger>)",
              "java.util.HashSet<java.math.BigInteger>.add(java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.bind.JAXBContext.newInstance(java.lang.String)",
              "javax.xml.bind.JAXBContext.createUnmarshaller()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable<java.lang.String,java.math.BigInteger>.Hashtable<String,BigInteger>()",
              "javax.xml.bind.JAXBContext.newInstance(java.lang.String)",
              "javax.xml.bind.JAXBContext.createMarshaller()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable<java.lang.String,java.math.BigInteger>.get(java.lang.Object)",
              "java.lang.Integer.toString(int)",
              "java.math.BigInteger.BigInteger(byte[])",
              "java.util.Hashtable<java.lang.String,java.math.BigInteger>.put(java.lang.String,java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Hashtable<Tau_K,Tau_V>.containsKey(java.lang.Object)",
              "java.util.Vector<Tau_E>.Vector()",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.lang.String>>.containsKey(java.lang.Object)",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.lang.String>>.get(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.Hashtable<Tau_K,Tau_V>.containsKey(java.lang.Object)",
              "java.util.Vector<Tau_E>.Vector()",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.lang.String>>.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Hashtable<Tau_K,Tau_V>.containsKey(java.lang.Object)",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.lang.String>>.get(java.lang.Object)",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Hashtable<java.lang.String,java.util.HashSet<java.lang.String>>.put(java.lang.String,java.util.HashSet<java.lang.String>)",
              "java.util.HashSet<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jOVAL/src/org/joval/oval/SystemCharacteristics.java",
      "classTypes": [
        "JAXBContext",
        "String",
        "Hashtable<String,BigInteger>"
      ],
      "sorrformalparam": [
        [
          "String",
          "BigInteger"
        ],
        [
          "Source"
        ],
        [
          "SystemInfoType"
        ],
        [
          "ItemType"
        ],
        [
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "Vector",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.Vector()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "keyTyped@83",
      "body": "public void keyTyped(KeyEvent event){\n  char keyChar=event.getKeyChar();\n  if (keyChar == t) {\n    ((Component)event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));\n    graphMouse.setMode(Mode.TRANSFORMING);\n  }\n else   if (keyChar == p) {\n    ((Component)event.getSource()).setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n    graphMouse.setMode(Mode.PICKING);\n  }\n}\n",
      "formalParam": [
        "KeyEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.KeyEvent.getKeyChar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Component.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.awt.Cursor.getPredefinedCursor(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Cursor"
              },
              {
                "_call": "java.awt.Component.setCursor(java.awt.Cursor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/lcmc/src/lib/edu/uci/ics/jung/visualization/control/ModalLensGraphMouse.java",
      "classTypes": [
        "char",
        "LensMagnificationGraphMousePlugin",
        "char",
        "ModalGraphMouse"
      ],
      "sorrformalparam": [],
      "types": [
        "Character",
        "KeyEvent"
      ],
      "apicalls": [
        "getKeyChar",
        "setCursor"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.KeyEvent.getKeyChar()",
            "java.awt.Cursor.getPredefinedCursor(int)",
            "java.awt.Component.setCursor(java.awt.Cursor)"
          ]
        }
      ],
      "keywords": [
        "set"
      ]
    },
    {
      "method": "should@123",
      "body": "@Test public void should(){\n  Pattern VARIANT_EXTRACTOR_REGEX=Pattern.compile(\"((\\\\.)[^\\\\d][\\\\w]*)\");\n  Matcher variantMatcher=VARIANT_EXTRACTOR_REGEX.matcher(\"http://localhost:8080/v1/test-service-mock-0.9.2-SNAPSHOT/whatever.xml\");\n  if (variantMatcher.find()) {\n    for (int i=1; i <= variantMatcher.groupCount(); i++) {\n      System.out.println(variantMatcher.group(i));\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.compile(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Pattern"
          },
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.find()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.regex.Matcher.group(int)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.String"
                  },
                  {
                    "_call": "java.io.PrintStream.println(java.lang.String)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "void"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.regex.Matcher.groupCount()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/repose/project-set/components/content-normalization/src/test/java/com/rackspace/papi/components/cnorm/normalizer/MediaTypeNormalizerTest.java",
      "classTypes": [
        "MediaTypeNormalizer",
        "List<MediaType>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Pattern"
      ],
      "apicalls": [
        "groupCount",
        "compile"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()"
          ]
        },
        {
          "calls": [
            "java.util.regex.Pattern.compile(java.lang.String)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.find()",
            "java.util.regex.Matcher.groupCount()",
            "java.util.regex.Matcher.group(int)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.regex.Matcher.groupCount()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "print",
        "util",
        "group"
      ]
    },
    {
      "method": "compress@62",
      "body": "/** \n * The CodecOptions parameter should have the following fields set: {@link CodecOptions#width width}{@link CodecOptions#height height}{@link CodecOptions#channels channels}{@link CodecOptions#bitsPerSample bitsPerSample}{@link CodecOptions#interleaved interleaved}{@link CodecOptions#littleEndian littleEndian}{@link CodecOptions#signed signed}\n * @see Codec#compress(byte[],CodecOptions)\n */\npublic byte[] compress(byte[] data,CodecOptions options) throws FormatException {\n  if (data == null || data.length == 0)   return data;\n  if (options == null)   options=CodecOptions.getDefaultOptions();\n  if (options.bitsPerSample > 8) {\n    throw new FormatException(\"> 8 bit data cannot be compressed with JPEG.\");\n  }\n  ByteArrayOutputStream out=new ByteArrayOutputStream();\n  BufferedImage img=AWTImageTools.makeImage(data,options.width,options.height,options.channels,options.interleaved,options.bitsPerSample / 8,false,options.littleEndian,options.signed);\n  try {\n    ImageIO.write(img,\"jpeg\",out);\n  }\n catch (  IOException e) {\n    throw new FormatException(\"Could not write JPEG data\",e);\n  }\n  return out.toByteArray();\n}\n",
      "formalParam": [
        "byte[]",
        "CodecOptions"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream,int)",
              "javax.imageio.ImageIO.read(java.io.InputStream)",
              "java.awt.image.BufferedImage.getWidth()",
              "java.awt.image.BufferedImage.getHeight()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/bioformats/components/scifio/src/loci/formats/codec/JPEGCodec.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "RandomAccessInputStream",
          "CodecOptions"
        ]
      ],
      "types": [
        "ByteArrayOutputStream",
        "RenderedImage",
        "OutputStream"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "javax.imageio.ImageIO.write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)",
            "java.io.ByteArrayOutputStream.toByteArray()"
          ]
        }
      ],
      "keywords": [
        "imageio",
        "boolean",
        "array"
      ]
    },
    {
      "method": "reset@155",
      "body": "/** \n * Resets the stream to its beginning so it can be read again.\n * @exception IOException if there is an I/O error\n */\npublic void reset() throws IOException {\n  if (file == null) {\n    ((ByteArrayInputStream)is).reset();\n  }\n else {\n    if (fos != null) {\n      while (skip(4096) > 0)       ;\n      fos.close();\n      fos=null;\n      if (length == -1) {\n        length=totalBytesRead;\n      }\n    }\n    is.close();\n    is=new FileInputStream(file);\n  }\n  totalBytesRead=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.io.InputStream.skip(long)",
                    "_throws": [
                      "java.io.IOException"
                    ],
                    "node": "DAPICall",
                    "_returns": "long"
                  }
                ]
              },
              {
                "_call": "java.io.FileOutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.ByteArrayInputStream.reset()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStream.read()",
              "java.io.FileOutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-eclipse/org.eclipse.webdav/src/client/org/eclipse/webdav/http/client/RequestInputStream.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "InputStream",
          "long"
        ]
      ],
      "types": [
        "IOException",
        "FileOutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.reset()"
          ]
        },
        {
          "calls": [
            "java.io.InputStream.skip(long)",
            "java.io.InputStream.skip(long)",
            "java.io.FileOutputStream.close()",
            "java.io.InputStream.close()",
            "java.io.FileInputStream.FileInputStream(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "close",
        "long"
      ]
    },
    {
      "method": "doRecurseOperation@110",
      "body": "@Override public void doRecurseOperation() throws OpsException {\n  BindingScope scope=null;\n  try {\n    RecursionState recursionState=this.recursionState;\n    this.recursionState=null;\n    if (recursionState != null) {\n      if (recursionState.preventRecursion) {\n        log.warn(\"Skipping recursion into child items\");\n        return;\n      }\n      if (!recursionState.childScope.isEmpty()) {\n        scope=BindingScope.push(recursionState.childScope.values());\n      }\n    }\n    OpsContext opsContext=OpsContext.get();\n    OperationRecursor.doRecurseChildren(opsContext,this);\n  }\n  finally {\n    if (scope != null) {\n      scope.pop();\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.Map<java.lang.Class<?>,java.lang.Object>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Map<java.lang.Class<?>,java.lang.Object>.values()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Collection"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/platformlayer/ops/core/src/main/java/org/platformlayer/ops/tree/OpsTreeBase.java",
      "classTypes": [
        "Logger",
        "List<Object>",
        "RecursionState",
        "Map<Class<?>,Object>",
        "boolean"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Map"
      ],
      "apicalls": [
        "values"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.Class<?>,java.lang.Object>.isEmpty()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.Class<?>,java.lang.Object>.isEmpty()",
            "java.util.Map<java.lang.Class<?>,java.lang.Object>.values()"
          ]
        }
      ],
      "keywords": [
        "object",
        "values",
        "boolean"
      ]
    },
    {
      "method": "addToSuccess@2388",
      "body": "public void addToSuccess(String elem){\n  if (this.success == null) {\n    this.success=new ArrayList<String>();\n  }\n  this.success.add(elem);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "fetchN_result"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/hive/0.8.1-wso2v2/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java",
      "classTypes": [
        "org.apache.thrift.protocol.TField",
        "org.apache.hadoop.hive.metastore.api.Schema",
        "org.apache.thrift.protocol.TField",
        "org.apache.thrift.protocol.TStruct",
        "org.apache.thrift.protocol.TStruct"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String",
        "Boolean",
        "List",
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "add",
        "string",
        "list"
      ]
    },
    {
      "method": "runTest@16",
      "body": "public String runTest(String url,String homeCommunityId,String repositoryId,String[] documentIds){\n  String lastDocRetrieved=\"Not Started\";\n  DocRetrieveClient docRetrieve=new DocRetrieveClient();\n  for (  String docId : documentIds) {\n    String status=docRetrieve.retrieveDocument(url,homeCommunityId,repositoryId,docId);\n    if (\"Success\".equals(status)) {\n      lastDocRetrieved=docId;\n    }\n else {\n      System.out.println(\"Failure: \" + status);\n      break;\n    }\n  }\n  return lastDocRetrieved;\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/CONNECT/Product/IntegrationTest/JunitIntegrationTests/Gateway/LoadTest/src/main/java/gov/hhs/fha/nhinc/nhindocretrieve/DocRetrieveLoadTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "io",
        "print",
        "println"
      ]
    },
    {
      "method": "getTreeGrandfather@209",
      "body": "public String getTreeGrandfather(){\n  return tree.substring(0,tree.indexOf(\"/\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/WISP/src/skillsplanner/beans/Skill.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "boolean",
        "int"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "substring",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang"
      ]
    },
    {
      "method": "writeWord@18",
      "body": "public void writeWord(int word) throws IOException {\n  if ((word & 0xffff) != word) {\n    throw new IllegalArgumentException(\"Argument is not a 16 bit word: \" + word);\n  }\n  if (littleEndian) {\n    out.write(word & 0x00ff);\n    out.write((word & 0xff00) >> 8);\n  }\n else {\n    out.write((word & 0xff00) >> 8);\n    out.write(word & 0x00ff);\n  }\n  wordsWritten++;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.write(int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/DCPU-16-Assembler/src/main/java/com/minesnap/dcpu/assembler/WordWriter.java",
      "classTypes": [
        "boolean",
        "long",
        "OutputStream"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStream.write(int)",
            "java.io.OutputStream.write(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "output",
        "exception",
        "write",
        "io"
      ]
    },
    {
      "method": "getCommunicator@97",
      "body": "/** \n * Retrieves or creates a  {@link Communicator}\n * @param desc\n * @return A {@link Communicator} or null if none was created.\n * @throws SvcActivationException \tIf an error occurred while creating the service.\n */\npublic static Communicator getCommunicator(SvcDescriptor desc) throws SvcActivationException {\n  if (desc == null)   throw new NullPointerException(\"No service descriptor.\");\n  Object factory=activationMap.get(desc.getClass());\n  Object service=null;\n  if (factory != null) {\n    try {\n      SvcActivator activator=createActivator(factory);\n      service=((CommunicatorFactory)activator).activate(desc);\n    }\n catch (    Exception e) {\n      throw new SvcActivationException(\"Descriptor not recognized\",e);\n    }\n  }\n else {\n    String msg=\"Unknown service: \" + desc.getSvcName() + \".\";\n    System.err.println(\"WARNING: SvcRegistry\");\n    System.err.print(msg);\n  }\n  return (Communicator)service;\n}\n",
      "formalParam": [
        "SvcDescriptor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.Class,java.lang.Class>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Communicator",
      "file": "./java_projects/openmicroscopy/components/insight/SRC/org/openmicroscopy/shoola/svc/SvcRegistry.java",
      "classTypes": [
        "Map<Class,Class>"
      ],
      "sorrformalparam": [],
      "types": [
        "Map",
        "PrintStream"
      ],
      "apicalls": [
        "println",
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.Class,java.lang.Class>.get(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.print(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "map",
        "object",
        "print",
        "class"
      ]
    },
    {
      "method": "onCommand@100",
      "body": "public boolean onCommand(Player player,String[] split){\n  if (!split[0].equalsIgnoreCase(command) || !player.canUseCommand(command))   return false;\n  if (split.length < 2) {\n    stop();\n    player.sendMessage(Colors.Rose + \"Erasing stopped.\");\n    return true;\n  }\n  if (split[1].equalsIgnoreCase(\"nonat\")) {\n    if (!nonat) {\n      nonat=true;\n      player.sendMessage(Colors.Rose + \"Set to ignore 'natural blocks'.\");\n    }\n else {\n      nonat=false;\n      player.sendMessage(Colors.Rose + \"Set to include 'natural blocks'.\");\n    }\n    return true;\n  }\n  player.sendMessage(Colors.Rose + \"Usage: \" + command);\n  return true;\n}\n",
      "formalParam": [
        "Player",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/boots-plugins/RecursErase/RecursErase.java",
      "classTypes": [
        "ArrayList<Integer>",
        "int",
        "String",
        "String",
        "int",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "fire@154",
      "body": "/** \n * Invoke the target's method with a single argument.\n * @param argument an object passed to the target's method\n * @see #fire(Object[])\n */\npublic boolean fire(Object argument){\n  return this.fire(new Object[]{argument});\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ref.Reference.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.reflect.InvocationTargetException.getCause()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.lang.reflect.InvocationTargetException.getCause()"
            ]
          },
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.reflect.Method.equals(java.lang.Object)",
              "java.lang.ref.Reference.get()",
              "java.lang.ref.Reference.get()"
            ]
          },
          {
            "calls": [
              "java.lang.reflect.Method.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.lang.reflect.InvocationTargetException.getCause()"
            ]
          },
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/cayenne/framework/cayenne-jdk1.5-unpublished/src/main/java/org/apache/cayenne/util/Invocation.java",
      "classTypes": [
        "Class[]",
        "WeakReference",
        "Method"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "IllegalAccessException",
        "Method"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.Reference.get()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.reflect.InvocationTargetException.getCause()"
          ]
        },
        {
          "calls": [
            "java.lang.ref.Reference.get()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "illegal",
        "exception",
        "ref",
        "reflect",
        "access",
        "argument",
        "reference"
      ]
    },
    {
      "method": "testDeleteFullName@142",
      "body": "@Test public void testDeleteFullName() throws Exception {\n  Git git=new Git(db);\n  git.commit().setMessage(\"initial commit\").call();\n  Ref tagRef=git.tag().setName(\"tag\").call();\n  assertEquals(1,db.getTags().size());\n  List<String> deleted=git.tagDelete().setTags(Repository.shortenRefName(tagRef.getName())).call();\n  assertEquals(1,deleted.size());\n  assertEquals(tagRef.getName(),deleted.get(0));\n  assertEquals(0,db.getTags().size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jgit_1/org.eclipse.jgit.test/tst/org/eclipse/jgit/api/TagCommandTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer",
        "String",
        "List"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": [
        "get",
        "integer",
        "string",
        "list"
      ]
    },
    {
      "method": "getValueAt@273",
      "body": "public Object getValueAt(int rowIndex,int columnIndex){\n  DataField field=(DataField)formItems.get(rowIndex);\nswitch (columnIndex) {\ncase 0:\n    return field.getId();\ncase 1:\n  return new Boolean(isFieldActive(field));\n}\nthrow new IndexOutOfBoundsException(\"Colomun index \" + columnIndex + \" is too high\");\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Boolean.Boolean(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "Component"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JLabel.setText(java.lang.String)",
              "java.awt.Component.getBackground()",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          },
          {
            "calls": [
              "javax.swing.JLabel.setText(java.lang.String)",
              "java.awt.Color.Color(int,int,int)",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/jogetworkflow/wflow-designer/src/main/java/org/jped/plugins/form/shark/FormEditorPanel.java",
      "classTypes": [
        "String",
        "Action",
        "FormManager"
      ],
      "sorrformalparam": [
        [
          "JTable",
          "Object",
          "boolean",
          "boolean",
          "int",
          "int"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.lang.Boolean.Boolean(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "string"
      ]
    },
    {
      "method": "testGetETag@149",
      "body": "@Test public void testGetETag(){\n  String etag=UUID.randomUUID().toString();\n  storageObject.setETag(etag);\n  assertEquals(etag,storageObject.getETag());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.UUID.randomUUID()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.UUID"
          },
          {
            "_call": "java.util.UUID.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.lang.StringBuilder.StringBuilder()",
              "java.io.BufferedReader.readLine()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.io.BufferedReader.readLine()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Random.Random(long)",
              "java.util.Random.nextLong()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.hashCode()",
              "java.io.File.delete()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/sndacs-java/src/test/java/com/snda/storage/service/model/StorageObjectTest.java",
      "classTypes": [
        "StorageObject"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String",
        "UUID"
      ],
      "apicalls": [
        "toString",
        "randomUUID"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()"
          ]
        }
      ],
      "keywords": [
        "random",
        "string",
        "util",
        "uuid"
      ]
    },
    {
      "method": "testIteratorRemove_actualMap@225",
      "body": "public void testIteratorRemove_actualMap(){\n  multiset=ConcurrentHashMultiset.create();\n  multiset.add(KEY);\n  multiset.add(KEY + \"_2\");\n  multiset.add(KEY);\n  int mutations=0;\n  for (Iterator<String> it=multiset.iterator(); it.hasNext(); ) {\n    it.next();\n    it.remove();\n    mutations++;\n  }\n  assertTrue(multiset.isEmpty());\n  assertEquals(3,mutations);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.String>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Iterator<java.lang.String>.remove()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)",
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.concurrent.atomic.AtomicInteger>.get(java.lang.Object)",
              "java.util.concurrent.atomic.AtomicInteger.AtomicInteger(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/guava-libraries/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java",
      "classTypes": [
        "String",
        "ConcurrentHashMultiset<String>",
        "ConcurrentMap<String,AtomicInteger>"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Iterator",
        "Boolean",
        "String"
      ],
      "apicalls": [
        "next",
        "remove",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.next()",
            "java.util.Iterator<java.lang.String>.remove()",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "string",
        "util",
        "next"
      ]
    },
    {
      "method": "JdbcProducerBackendInvocationHandler@18",
      "body": "public JdbcProducerBackendInvocationHandler(JdbcProducerBackend backend,Class<?> contextType,Object[] args){\n  this.backend=backend;\n  this.contextType=contextType;\n  if (args != null && args.length > 0) {\n    fields=new HashMap<String,Object>();\n    for (int i=0; i < args.length; i+=2) {\n      fields.put((String)args[i],args[i + 1]);\n    }\n  }\n else {\n    fields=null;\n  }\n}\n",
      "formalParam": [
        "JdbcProducerBackend",
        "Class<?>",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/odata4j/odata4j-core/src/main/java/org/odata4j/producer/jdbc/JdbcProducerBackendInvocationHandler.java",
      "classTypes": [
        "Object",
        "Map<String,Object>"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object"
      ]
    },
    {
      "method": "setLast@45",
      "body": "public void setLast(T obj){\n  ArrayList<T> stack=getStack(true);\n  if (stack.isEmpty()) {\n    stack.add(obj);\n  }\n else {\n    stack.set(stack.size() - 1,obj);\n  }\n}\n",
      "formalParam": [
        "T"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ArrayList<T>"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.ThreadLocal<java.util.ArrayList<T>>.set(java.util.ArrayList<T>)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.set(int,Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean",
        "T"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.ThreadLocal<java.util.ArrayList<T>>.set(java.util.ArrayList<T>)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.ThreadLocal<java.util.ArrayList<T>>.set(java.util.ArrayList<T>)",
              "java.util.ArrayList<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
              "java.util.ArrayList<Tau_E>.isEmpty()",
              "java.util.ArrayList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/resteasy-mobile/src/main/java/org/jboss/resteasy/util/ThreadLocalStack.java",
      "classTypes": [
        "ThreadLocal<ArrayList<T>>"
      ],
      "sorrformalparam": [
        [
          "T"
        ],
        [],
        []
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "isEmpty",
        "get",
        "set"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.ThreadLocal<java.util.ArrayList<T>>.set(java.util.ArrayList<T>)",
            "java.util.ArrayList<Tau_E>.isEmpty()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        },
        {
          "calls": [
            "java.lang.ThreadLocal<java.util.ArrayList<T>>.get()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.ThreadLocal<java.util.ArrayList<T>>.set(java.util.ArrayList<T>)",
            "java.util.ArrayList<Tau_E>.isEmpty()",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.set(int,Tau_E)"
          ]
        }
      ],
      "keywords": [
        "thread",
        "get",
        "size",
        "empty",
        "set"
      ]
    },
    {
      "method": "setHistoryMaxSize@651",
      "body": "/** \n * Sets the maximal size of the historical data. Defaults to {@link #DEFAULT_HISTORY_MAX_LENGTH}<p> <strong>Note:</strong> Setting this property will immediately enforce the specified max history size by dropping enough old historical records to enforce the desired size. Thus, any records that exceed the history size will be discarded and irreversibly lost. </p>\n * @param historyMaxSize The max history size.\n */\npublic void setHistoryMaxSize(int historyMaxSize){\nsynchronized (mInstanceLock) {\n    if (mHistoryMaxSize == historyMaxSize) {\n      return;\n    }\n    mHistoryMaxSize=historyMaxSize;\n    pruneExcessiveHistoricalRecordsLocked();\n    sortActivities();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collections.unmodifiableList(java.util.List)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "ActivityChooserModel",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/The-Reverse-Recipe-Book/actionbarsherlock4.0/src/com/actionbarsherlock/widget/ActivityChooserModel.java",
      "classTypes": [
        "String",
        "Intent",
        "List<HistoricalRecord>",
        "String"
      ],
      "sorrformalparam": [
        [
          "Intent"
        ],
        [
          "Context",
          "String"
        ],
        [
          "Runnable"
        ],
        [
          "ActivitySorter"
        ],
        [
          "ResolveInfo"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "util",
        "integer",
        "collections"
      ]
    },
    {
      "method": "marshal@61",
      "body": "public static void marshal(Lmx lmx,OutputStream out) throws JAXBException {\n  try {\n    try {\n      newMarshaller().marshal(new JAXBElement<Lmx>(new QName(LMX_NAMESPACE_URI,\"lmx\"),Lmx.class,lmx),out);\n    }\n  finally {\n      out.flush();\n      out.close();\n    }\n  }\n catch (  IOException e) {\n    throw new JAXBException(\"Error while marshalling: \" + e.getMessage());\n  }\n}\n",
      "formalParam": [
        "Lmx",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.OutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/RouteConverter/navigation-formats/src/main/java/slash/navigation/lmx/NokiaLandmarkExchangeUtil.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "OutputStream",
        "QName",
        "IOException",
        "String"
      ],
      "apicalls": [
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.namespace.QName.QName(java.lang.String,java.lang.String)",
            "java.io.OutputStream.flush()",
            "java.io.OutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "name",
        "string",
        "exception",
        "q",
        "flush"
      ]
    },
    {
      "method": "getProxyOffers@207",
      "body": "public Hashtable getProxyOffers(){\n  Hashtable result=new Hashtable();\n  Enumeration e=m_proxies.keys();\n  while (e.hasMoreElements()) {\n    String offerId=(String)e.nextElement();\n    ProxyOffer proxy=(ProxyOffer)m_proxies.get(offerId);\n    ProxyInfo info=proxy.describe();\n    info.type=m_serviceType;\n    result.put(offerId,info);\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable.keys()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Hashtable",
        "String[]",
        "String[]",
        "void",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Hashtable.Hashtable()",
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.keys()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)",
              "java.util.Hashtable.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)",
              "java.util.Hashtable.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Hashtable.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "Hashtable",
      "file": "./java_projects/Harpoon/ImageRec/contrib/JacORB1_3_30/src/org/jacorb/trading/db/simple/offers/OfferList.java",
      "classTypes": [
        "boolean",
        "Hashtable",
        "Hashtable",
        "char",
        "long",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Enumeration"
      ],
      "apicalls": [
        "put",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.util.Hashtable.keys()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "object",
        "keys"
      ]
    },
    {
      "method": "postEncrypted@45",
      "body": "@Path(\"encrypted\") @POST public void postEncrypted(EnvelopedInput<Customer> input){\n  Customer cust=input.getEntity(privateKey,certificate);\n  System.out.println(\"Encrypted Server Input: \");\n  System.out.println(cust);\n}\n",
      "formalParam": [
        "EnvelopedInput<Customer>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Resteasy/jaxrs/examples/smime/src/main/java/org/jboss/resteasy/tests/smime/SMIMEResource.java",
      "classTypes": [
        "PrivateKey",
        "X509Certificate"
      ],
      "sorrformalparam": [
        [
          "EnvelopedInput<SignedInput<Customer>>"
        ],
        [
          "SignedInput<Customer>"
        ]
      ],
      "types": [
        "Character",
        "PrintStream",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "print",
        "println",
        "stream",
        "character",
        "string"
      ]
    },
    {
      "method": "run@128",
      "body": "public void run(){\n  try {\n    for (int i=1; i <= 100; i++) {\n      if (Thread.currentThread().interrupted()) {\n        throw new InterruptedException(\"QUIT!\");\n      }\n      gen.evolve(1);\nsynchronized (this) {\n        IGPProgram best=gen.getFittestProgram();\nsynchronized (best) {\n          if (best != null) {\n            if (m_best == null || best.getFitnessValue() < m_best.getFitnessValue()) {\n              m_best=(IGPProgram)best.clone();\n            }\n          }\n        }\n      }\n      Thread.currentThread().sleep((int)Math.random() * (20 + m_nextNumber * 5));\n    }\n    m_finished=true;\n    while (locked) {\n      Thread.currentThread().sleep(5);\n    }\n    try {\n      locked=true;\n      outputBestSolution();\n    }\n  finally {\n      locked=false;\n    }\n  }\n catch (  InterruptedException iex) {\n    ;\n  }\ncatch (  Exception ex) {\n    ex.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.interrupted()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IslandGPThread",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getId()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/LFA/jgap_3.6.2_full/examples/src/examples/gp/island/IslandGPThread.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "int",
          "int"
        ],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "currentThread",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupted()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep(long)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(char[])"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.interrupted()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.sleep(long)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "exception",
        "boolean",
        "current",
        "print"
      ]
    },
    {
      "method": "visitLastOperation@273",
      "body": "/** \n * Handles the \"String::last\" OCL operation directly from the traceability visitor as we need to alter recorded traceability information.\n * @param source String from which to take out a substring.\n * @param charCount Number of characters to keep.\n * @return The substring. Traceability information will have been changed directly within{@link AcceleoTraceabilityVisitor#recordedTraces}.\n */\npublic String visitLastOperation(String source,int charCount){\n  final String result;\n  if (charCount < 0 || charCount > source.length()) {\n    result=source;\n  }\n else {\n    result=visitSubstringOperation(source,source.length() - charCount,source.length());\n  }\n  return result;\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.intValue()",
              "java.lang.Integer.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.toCharArray()",
              "java.lang.String.trim()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/acceleo/plugins/org.eclipse.acceleo.traceability/src/org/eclipse/acceleo/internal/traceability/engine/AcceleoTraceabilityOperationVisitor.java",
      "classTypes": [
        "AcceleoTraceabilityVisitor<EPackage,C,EOperation,EStructuralFeature,EEnumLiteral,PM,EObject,CallOperationAction,SendSignalAction,Constraint,EClass,EObject>",
        "Map<String,TraceabilityTokenizer>"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "Integer"
        ],
        [
          "String",
          "int"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "substring"
      ]
    },
    {
      "method": "doPrivileged@83",
      "body": "/** \n * Performs the specified <code>PrivilegedAction</code> with privileges enabled and restricted by the specified <code>AccessControlContext</code>. The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified <code>AccessControlContext</code> if a security manager is present. <p/> <p/> If the action's <code>run</code> method throws an (unchecked) exception, it will propagate through this method.\n * @param action  the action to be performed.\n * @param context an <i>access control context</i> representing therestriction to be applied to the caller's domain's privileges before performing the specified action.\n * @return the value returned by the action's <code>run</code> method.\n * @see #doPrivileged(PrivilegedAction)\n * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n */\npublic static <T>T doPrivileged(PrivilegedAction<T> action,AccessControlContext context){\n  SecurityManager sm=System.getSecurityManager();\n  if (sm == null) {\n    return action.run();\n  }\n else {\n    return java.security.AccessController.doPrivileged(action,context);\n  }\n}\n",
      "formalParam": [
        "PrivilegedAction<T>",
        "AccessControlContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          }
        ]
      },
      "sorrreturntype": [
        "T",
        "T",
        "T"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getSecurityManager()",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getSecurityManager()",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getSecurityManager()",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)"
            ]
          }
        ]
      ],
      "returnType": "T",
      "file": "./java_projects/axis2-java/modules/kernel/src/org/apache/axis2/java/security/AccessController.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "PrivilegedAction<T>"
        ],
        [
          "PrivilegedExceptionAction<T>"
        ],
        [
          "PrivilegedExceptionAction<T>",
          "AccessControlContext"
        ]
      ],
      "types": [
        "PrivilegedAction"
      ],
      "apicalls": [
        "doPrivileged"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.security.AccessController.doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext)"
          ]
        }
      ],
      "keywords": [
        "action",
        "privileged",
        "controller",
        "manager",
        "system"
      ]
    },
    {
      "method": "testGetByProductAndFile@178",
      "body": "/** \n */\n@Test public void testGetByProductAndFile(){\n  try {\n    testSave();\n    ProductMedia media=service.getByProductAndFile(product,file);\n    assertTrue(\"media is null!\",media != null);\n  }\n catch (  ServiceException e) {\n    fail(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.InputStream"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.HashSet<Tau_E>.HashSet()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/magja/src/test/java/com/google/code/magja/service/product/ProductMediaRemoteServiceTest.java",
      "classTypes": [
        "ProductRemoteService",
        "Product",
        "ProductMediaRemoteService",
        "String",
        "Logger"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "Class"
      ],
      "apicalls": [
        "getMessage",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "class",
        "get"
      ]
    },
    {
      "method": "abs@186",
      "body": "public LispObject abs() throws Exception {\n  if (value.signum() >= 0)   return this;\n else   return valueOf(value.negate());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.math.BigInteger.negate()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.math.BigInteger"
              }
            ],
            "_cond": [
              {
                "_call": "java.math.BigInteger.signum()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "LispObject",
        "int",
        "boolean",
        "LispObject"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.xor(java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.bitLength()",
              "java.math.BigInteger.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.compareTo(java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.mod(java.math.BigInteger)"
            ]
          }
        ]
      ],
      "returnType": "LispObject",
      "file": "./java_projects/geogebra_1/geogebra/org/mathpiper/mpreduce/numbers/LispBigInteger.java",
      "classTypes": [
        "BigInteger"
      ],
      "sorrformalparam": [
        [
          "LispSmallInteger"
        ],
        [],
        [
          "LispSmallInteger"
        ],
        [
          "LispSmallInteger"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "signum",
        "negate"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.signum()"
          ]
        },
        {
          "calls": [
            "java.math.BigInteger.signum()",
            "java.math.BigInteger.negate()"
          ]
        }
      ],
      "keywords": [
        "math",
        "integer",
        "big"
      ]
    },
    {
      "method": "getAbsoluteFile@95",
      "body": "public static File getAbsoluteFile(File basepath,File f){\n  return f.isAbsolute() ? f : new File(basepath,f.getPath());\n}\n",
      "formalParam": [
        "File",
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.File.isAbsolute()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "File",
        "void",
        "String",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.Writer.close()",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.io.Writer.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.createTempFile(java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.String.indexOf(int)",
              "java.io.File.File(java.lang.String)",
              "java.io.File.createTempFile(java.lang.String,java.lang.String,java.io.File)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.close()",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getName()",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Reader.close()",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.io.Reader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.OutputStream.close()",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.io.OutputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "File",
      "file": "./java_projects/RomRaider/3rdparty/launch4j/src/net/sf/launch4j/Util.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Writer"
        ],
        [
          "String"
        ],
        [
          "InputStream"
        ],
        [
          "File"
        ],
        [
          "Reader"
        ],
        [
          "OutputStream"
        ]
      ],
      "types": [
        "File",
        "String"
      ],
      "apicalls": [
        "getPath",
        "isAbsolute"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.isAbsolute()"
          ]
        },
        {
          "calls": [
            "java.io.File.isAbsolute()",
            "java.io.File.getPath()",
            "java.io.File.File(java.io.File,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "get",
        "io",
        "boolean",
        "path"
      ]
    },
    {
      "method": "testCertificateNotYetValidException03@80",
      "body": "/** \n * Test for <code>CertificateNotYetValidException(String)</code> constructor Assertion: constructs CertificateNotYetValidException when <code>msg</code> is null\n */\npublic void testCertificateNotYetValidException03(){\n  String msg=null;\n  CertificateNotYetValidException tE=new CertificateNotYetValidException(msg);\n  assertNull(\"getMessage() must return null.\",tE.getMessage());\n  assertNull(\"getCause() must return null\",tE.getCause());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.getCause()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.concat(java.lang.String)",
              "java.lang.Throwable.getMessage()",
              "java.lang.Throwable.getCause()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.lang.Throwable.getCause()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateNotYetValidExceptionTest.java",
      "classTypes": [
        "Throwable",
        "String[]"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage",
        "getCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.getMessage()",
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "string",
        "cause",
        "get",
        "message",
        "lang"
      ]
    },
    {
      "method": "event@219",
      "body": "/** \n * Process Comet event.\n * @param request Request to be processed\n * @param response Response to be produced\n * @param event the event\n * @exception IOException if an input/output error occurred\n * @exception ServletException if a servlet error occurred\n */\n@Override public final void event(Request request,Response response,CometEvent event) throws IOException, ServletException {\n  Context context=request.getContext();\n  if (context.getLoader() != null) {\n    Thread.currentThread().setContextClassLoader(context.getLoader().getClassLoader());\n  }\n  context.getPipeline().getFirst().event(request,response,event);\n  response.setSuspended(false);\n  Throwable t=(Throwable)request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);\n  if (t != null) {\n    throwable(request,response,t);\n  }\n else {\n    status(request,response);\n  }\n  if (ACCESS_SESSION) {\n    request.getSession(false);\n  }\n  Thread.currentThread().setContextClassLoader(StandardHostValve.class.getClassLoader());\n}\n",
      "formalParam": [
        "Request",
        "Response",
        "CometEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat70/java/org/apache/catalina/core/StandardHostValve.java",
      "classTypes": [
        "StringManager",
        "boolean",
        "boolean",
        "Log",
        "ClassLoader",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)",
            "java.lang.Thread.currentThread()",
            "java.lang.Class<Tau_T>.getClassLoader()",
            "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
          ]
        }
      ],
      "keywords": [
        "current",
        "class"
      ]
    },
    {
      "method": "containsKey@256",
      "body": "/** \n * Returns true if the given key is contained in the mapping of this Bundle.\n * @param key a String key\n * @return true if the key is part of the mapping, false otherwise\n */\npublic boolean containsKey(String key){\n  unparcel();\n  return mMap.containsKey(key);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/frameworks_base/core/java/android/os/Bundle.java",
      "classTypes": [
        "boolean",
        "String",
        "Map<String,Object>",
        "Parcelable.Creator<Bundle>",
        "boolean",
        "boolean",
        "Bundle",
        "ClassLoader",
        "Parcel"
      ],
      "sorrformalparam": [
        [
          "String",
          "ArrayList<String>"
        ],
        [
          "String",
          "boolean[]"
        ],
        [
          "String",
          "CharSequence[]"
        ],
        [
          "String",
          "Bundle"
        ]
      ],
      "types": [
        "HashMap",
        "Boolean",
        "Object",
        "Map"
      ],
      "apicalls": [
        "containsKey"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "boolean",
        "map",
        "contains",
        "object"
      ]
    },
    {
      "method": "equals@891",
      "body": "@Override public boolean equals(Object object){\n  if (this == object) {\n    return true;\n  }\n  if (!(object instanceof Map)) {\n    return false;\n  }\n  Map<?,?> other=(Map<?,?>)object;\n  if (this.size() != other.size()) {\n    return false;\n  }\n  return Iterate.allSatisfy(other.entrySet(),Predicates.in(this.entrySet()));\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "V",
        "boolean",
        "V",
        "V",
        "UnifiedMap<K,V>",
        "UnifiedMap<K,V>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<Tau_E>.size()",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ref.Reference<Tau_T>.get()",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.Math.min(int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.ref.Reference<Tau_T>.get()",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.Math.min(int,int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/gs-collections/collections/src/main/java/com/gs/collections/impl/map/mutable/UnifiedMap.java",
      "classTypes": [
        "K",
        "K",
        "V",
        "int",
        "int",
        "int",
        "long",
        "Object",
        "WeakReference<UnifiedMap<K,V>>"
      ],
      "sorrformalparam": [
        [],
        [
          "K",
          "Function0<? extends V>"
        ],
        [
          "Collection<?>"
        ],
        [
          "V"
        ],
        [
          "K",
          "V"
        ],
        [
          "K",
          "V"
        ],
        [
          "K",
          "V"
        ]
      ],
      "types": [
        "Set",
        "Map",
        "Integer"
      ],
      "apicalls": [
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.size()",
            "java.util.Map<Tau_K,Tau_V>.entrySet()"
          ]
        }
      ],
      "keywords": [
        "set",
        "map",
        "size",
        "integer",
        "entry",
        "util"
      ]
    },
    {
      "method": "contains@74",
      "body": "public boolean contains(double x,double y){\n  return getShape().contains(x,y);\n}\n",
      "formalParam": [
        "double",
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Vector.listIterator(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.ListIterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.ListIterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.awt.geom.Path2D.closePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Shape.contains(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/Alice/src/main/java/edu/cmu/cs/stage3/alice/core/geometry/PolygonSegment.java",
      "classTypes": [
        "java.util.Vector",
        "Vertex3d[]"
      ],
      "sorrformalparam": [],
      "types": [
        "ListIterator",
        "Double"
      ],
      "apicalls": [
        "listIterator",
        "contains"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.isEmpty()",
            "java.util.Vector.listIterator(int)",
            "java.util.ListIterator.hasNext()",
            "java.util.ListIterator.hasNext()",
            "java.awt.geom.Path2D.closePath()",
            "java.awt.Shape.contains(double,double)"
          ]
        }
      ],
      "keywords": [
        "util",
        "path",
        "next",
        "contains",
        "path2"
      ]
    },
    {
      "method": "testGetFreeBlockWithNoneSpare@348",
      "body": "/** \n * Ask for free blocks where no free ones exist, and so the file needs to be extended and another BAT/XBAT added\n */\npublic void testGetFreeBlockWithNoneSpare() throws Exception {\n  NPOIFSFileSystem fs=new NPOIFSFileSystem(_inst.openResourceAsStream(\"BlockSize512.zvi\"));\n  int free;\n  assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(99));\n  for (int i=100; i < 128; i++) {\n    assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(i));\n  }\n  assertEquals(true,fs.getBATBlockAndIndex(0).getBlock().hasFreeSectors());\n  for (int i=100; i < 128; i++) {\n    fs.setNextBlock(i,POIFSConstants.END_OF_CHAIN);\n  }\n  assertEquals(false,fs.getBATBlockAndIndex(0).getBlock().hasFreeSectors());\n  try {\n    assertEquals(false,fs.getBATBlockAndIndex(128).getBlock().hasFreeSectors());\n    fail(\"Should only be one BAT\");\n  }\n catch (  IndexOutOfBoundsException e) {\n  }\n  assertEquals(129,fs.getFreeBlock());\n  assertEquals(false,fs.getBATBlockAndIndex(0).getBlock().hasFreeSectors());\n  assertEquals(true,fs.getBATBlockAndIndex(128).getBlock().hasFreeSectors());\n  assertEquals(POIFSConstants.FAT_SECTOR_BLOCK,fs.getNextBlock(128));\n  assertEquals(POIFSConstants.UNUSED_BLOCK,fs.getNextBlock(129));\n  for (int i=0; i < 109; i++) {\n    fs.getFreeBlock();\n    int startOffset=i * 128;\n    while (fs.getBATBlockAndIndex(startOffset).getBlock().hasFreeSectors()) {\n      free=fs.getFreeBlock();\n      fs.setNextBlock(free,POIFSConstants.END_OF_CHAIN);\n    }\n  }\n  assertEquals(false,fs.getBATBlockAndIndex(109 * 128 - 1).getBlock().hasFreeSectors());\n  try {\n    assertEquals(false,fs.getBATBlockAndIndex(109 * 128).getBlock().hasFreeSectors());\n    fail(\"Should only be 109 BATs\");\n  }\n catch (  IndexOutOfBoundsException e) {\n  }\n  free=fs.getFreeBlock();\n  assertEquals(false,fs.getBATBlockAndIndex(109 * 128 - 1).getBlock().hasFreeSectors());\n  assertEquals(true,fs.getBATBlockAndIndex(110 * 128 - 1).getBlock().hasFreeSectors());\n  try {\n    assertEquals(false,fs.getBATBlockAndIndex(110 * 128).getBlock().hasFreeSectors());\n    fail(\"Should only be 110 BATs\");\n  }\n catch (  IndexOutOfBoundsException e) {\n  }\n  for (int i=109; i < 109 + 127; i++) {\n    fs.getFreeBlock();\n    int startOffset=i * 128;\n    while (fs.getBATBlockAndIndex(startOffset).getBlock().hasFreeSectors()) {\n      free=fs.getFreeBlock();\n      fs.setNextBlock(free,POIFSConstants.END_OF_CHAIN);\n    }\n  }\n  assertEquals(false,fs.getBATBlockAndIndex(236 * 128 - 1).getBlock().hasFreeSectors());\n  try {\n    assertEquals(false,fs.getBATBlockAndIndex(236 * 128).getBlock().hasFreeSectors());\n    fail(\"Should only be 236 BATs\");\n  }\n catch (  IndexOutOfBoundsException e) {\n  }\n  free=fs.getFreeBlock();\n  assertEquals(false,fs.getBATBlockAndIndex(236 * 128 - 1).getBlock().hasFreeSectors());\n  assertEquals(true,fs.getBATBlockAndIndex(237 * 128 - 1).getBlock().hasFreeSectors());\n  try {\n    assertEquals(false,fs.getBATBlockAndIndex(237 * 128).getBlock().hasFreeSectors());\n    fail(\"Should only be 237 BATs\");\n  }\n catch (  IndexOutOfBoundsException e) {\n  }\n  int numBATs=0;\n  int numXBATs=0;\n  for (int i=0; i < 237 * 128; i++) {\n    if (fs.getNextBlock(i) == POIFSConstants.FAT_SECTOR_BLOCK) {\n      numBATs++;\n    }\n    if (fs.getNextBlock(i) == POIFSConstants.DIFAT_SECTOR_BLOCK) {\n      numXBATs++;\n    }\n  }\n  if (1 == 2) {\n    assertEquals(237,numBATs);\n    assertEquals(2,numXBATs);\n  }\n  ByteArrayOutputStream baos=new ByteArrayOutputStream();\n  fs.writeFilesystem(baos);\n  HeaderBlock header=new HeaderBlock(new ByteArrayInputStream(baos.toByteArray()));\n  if (1 == 2) {\n    assertEquals(237,header.getBATCount());\n    assertEquals(2,header.getXBATCount());\n    fs=new NPOIFSFileSystem(new ByteArrayInputStream(baos.toByteArray()));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/poi/src/testcases/org/apache/poi/poifs/filesystem/TestNPOIFSFileSystem.java",
      "classTypes": [
        "POIDataSamples"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "ByteArrayOutputStream",
        "Byte",
        "ByteArrayInputStream"
      ],
      "apicalls": [
        "toByteArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "stream",
        "input",
        "output",
        "io",
        "array"
      ]
    },
    {
      "method": "service@38",
      "body": "@Test @TestDir public void service() throws Exception {\n  String dir=TestDirHelper.getTestDir().getAbsolutePath();\n  Configuration conf=new Configuration(false);\n  conf.set(\"server.services\",StringUtils.join(\",\",Arrays.asList(GroupsService.class.getName())));\n  Server server=new Server(\"server\",dir,dir,dir,dir,conf);\n  server.init();\n  Groups groups=server.get(Groups.class);\n  assertNotNull(groups);\n  List<String> g=groups.getGroups(System.getProperty(\"user.name\"));\n  assertNotSame(g.size(),0);\n  server.destroy();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.util.Arrays.asList(T[])",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hadoop-common/hadoop-hdfs-project/hadoop-hdfs-httpfs/src/test/java/org/apache/hadoop/lib/service/security/TestGroupsService.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "getName",
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.util.Arrays.asList(T[])",
            "java.lang.System.getProperty(java.lang.String)",
            "java.util.List<java.lang.String>.size()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "get",
        "class",
        "list",
        "integer",
        "name"
      ]
    },
    {
      "method": "getSize@74",
      "body": "public long getSize() throws ResourceDownloaderException {\n  String file_str=file.toString();\n  int pos=file_str.lastIndexOf(\".\");\n  String file_type;\n  if (pos != -1) {\n    file_type=file_str.substring(pos + 1);\n  }\n else {\n    file_type=null;\n  }\n  setProperty(ResourceDownloader.PR_STRING_CONTENT_TYPE,HTTPUtils.guessContentTypeFromFileType(file_type));\n  return (FileUtil.getFileOrDirectorySize(file));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "InputStream"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.isDirectory()",
              "java.lang.Thread.setDaemon(boolean)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.isDirectory()",
              "java.lang.Thread.setDaemon(boolean)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "long",
      "file": "./java_projects/OneSwarm/az_src/src/org/gudy/azureus2/pluginsimpl/local/utils/resourcedownloader/ResourceDownloaderFileImpl.java",
      "classTypes": [
        "AESemaphore",
        "Object",
        "File",
        "long"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "File"
      ],
      "apicalls": [
        "toString",
        "substring",
        "lastIndexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.toString()",
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.substring(int)"
          ]
        }
      ],
      "keywords": [
        "file",
        "last",
        "io",
        "index",
        "substring"
      ]
    },
    {
      "method": "refresh@159",
      "body": "public void refresh(){\n  doRefresh();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.util.Arrays.sort(T[],java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)",
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)",
              "java.util.ArrayList.ArrayList()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/BitMate/azureus2/src/org/gudy/azureus2/ui/swt/views/PeersGraphicView.java",
      "classTypes": [
        "double[]",
        "double[]",
        "double[]"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.Arrays.sort(T[],java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "add",
        "list"
      ]
    },
    {
      "method": "next@24",
      "body": "@Override public T next(){\n  if (!enumeration.hasMoreElements()) {\n    throw new NoSuchElementException();\n  }\n  return enumeration.nextElement();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Enumeration<Tau_E>.hasMoreElements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Enumeration<Tau_E>.nextElement()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "T",
      "file": "./java_projects/repose/project-set/commons/utilities/src/main/java/com/rackspace/papi/commons/collections/EnumerationIterator.java",
      "classTypes": [
        "Enumeration<T>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Enumeration"
      ],
      "apicalls": [
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Enumeration<Tau_E>.hasMoreElements()",
            "java.util.Enumeration<Tau_E>.nextElement()"
          ]
        }
      ],
      "keywords": [
        "elements",
        "util",
        "boolean",
        "next",
        "enumeration"
      ]
    },
    {
      "method": "stateChanged@161",
      "body": "public void stateChanged(ChangeEvent e){\n  if (logger.isDebugEnabled())   logger.debug(\"stateChanged\");\n  initOpenAction();\n}\n",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTabbedPane.getSelectedComponent()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          },
          {
            "_call": "javax.swing.AbstractAction.setEnabled(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/lilith/lilith/src/main/java/de/huxhorn/lilith/swing/OpenPreviousDialog.java",
      "classTypes": [
        "MainFrame",
        "SourceIdentifier",
        "enum",
        "JList",
        "List<List<SourceIdentifier>>",
        "JList",
        "JTabbedPane",
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTabbedPane.getSelectedComponent()",
            "javax.swing.AbstractAction.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "action",
        "abstract",
        "swing",
        "boolean",
        "pane",
        "selected",
        "j"
      ]
    },
    {
      "method": "drawWavyString@732",
      "body": "/** \n * Draw a string with letters that move up and down individually. \n */\npublic void drawWavyString(String s,int x,int y,int align,int increment_x,double tmr,double amplitude,double pos_phaseshift,double timer_phaseshift,JGFont font,JGColor col){\n  setFont(font);\n  setColor(col);\n  if (align == 0) {\n    x-=increment_x * s.length() / 2;\n  }\n else   if (align == 1) {\n    x-=increment_x * s.length();\n  }\n  for (int i=0; i < s.length(); i++)   drawString(s.substring(i,i + 1),x + i * increment_x,y + (int)(amplitude * -Math.cos(Math.PI * (pos_phaseshift * i + tmr * timer_phaseshift))),0);\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "int",
        "int",
        "double",
        "double",
        "double",
        "double",
        "JGFont",
        "JGColor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "JGPoint",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
              "java.lang.System.exit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Class.getName()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/TT2POL/RLCompetition/src/jgame/platform/MyEngine.java",
      "classTypes": [
        "double",
        "JGFont",
        "int",
        "int",
        "int",
        "JGFont"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String[]",
          "int"
        ],
        []
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "testSchedule1@104",
      "body": "/** \n * delayed schedule of callable successfully executes after delay\n */\npublic void testSchedule1(){\n  try {\n    TrackedCallable callable=new TrackedCallable();\n    CustomExecutor p1=new CustomExecutor(1);\n    Future f=p1.schedule(callable,SHORT_DELAY_MS,TimeUnit.MILLISECONDS);\n    assertFalse(callable.done);\n    Thread.sleep(MEDIUM_DELAY_MS);\n    assertTrue(callable.done);\n    assertEquals(Boolean.TRUE,f.get());\n    try {\n      p1.shutdown();\n    }\n catch (    SecurityException ok) {\n      return;\n    }\n    joinPool(p1);\n  }\n catch (  RejectedExecutionException e) {\n  }\ncatch (  Exception e) {\n    e.printStackTrace();\n    unexpectedException();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.ScheduledFuture"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.Future.get()",
            "_throws": [
              "java.lang.InterruptedException",
              "java.util.concurrent.ExecutionException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
              "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ScheduledThreadPoolExecutor.execute(java.lang.Runnable)",
              "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()",
              "java.util.concurrent.ThreadPoolExecutor.awaitTermination(long,java.util.concurrent.TimeUnit)",
              "java.util.concurrent.ThreadPoolExecutor.isTerminated()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.util.concurrent.Callable<java.lang.String>>.ArrayList<Callable<String>>()",
              "java.util.ArrayList<java.util.concurrent.Callable<java.lang.String>>.add(java.util.concurrent.Callable<java.lang.String>)",
              "java.util.concurrent.ExecutorService.invokeAny(java.util.Collection,long,java.util.concurrent.TimeUnit)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/scala-parallel/jsr166/src/test/tck/ScheduledExecutorSubclassTest.java",
      "classTypes": [
        "boolean",
        "RunnableScheduledFuture<V>"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Future",
        "ScheduledFuture",
        "InterruptedException",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ScheduledThreadPoolExecutor.schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)",
            "java.lang.Thread.sleep(long)",
            "java.util.concurrent.Future.get()",
            "java.util.concurrent.ScheduledThreadPoolExecutor.shutdown()"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "time",
        "schedule",
        "shutdown",
        "long"
      ]
    },
    {
      "method": "shouldEnable@64",
      "body": "/** \n * Returns whether this action should be enabled for the given selection.\n * @param selection the selection\n * @return enablement\n */\npublic boolean shouldEnable(IStructuredSelection selection){\n  if (selection.isEmpty()) {\n    return false;\n  }\n  for (Iterator i=selection.iterator(); i.hasNext(); ) {\n    IMarker marker=(IMarker)i.next();\n    if (!(MarkerUtil.isMarkerType(marker,IMarker.TASK) && !MarkerUtil.isComplete(marker) && MarkerUtil.isEditable(marker))) {\n      return false;\n    }\n  }\n  return true;\n}\n",
      "formalParam": [
        "IStructuredSelection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.HashMap.HashMap()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/eclipse.platform.ui/bundles/org.eclipse.ui.ide/src/org/eclipse/ui/views/tasklist/MarkCompletedAction.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "boolean",
        "next",
        "util"
      ]
    },
    {
      "method": "containsValue@234",
      "body": "public boolean containsValue(Object value){\n  return m.containsValue(Value.valueOfQueryOnly(value));\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.util.Map<java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value>.containsValue(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "Value",
        "boolean",
        "boolean",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Set<java.lang.ProcessEnvironment.Variable>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Collection<java.lang.ProcessEnvironment.Value>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Set<java.lang.ProcessEnvironment.Variable>.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Collection<java.lang.ProcessEnvironment.Value>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Map<java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value>.get(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.util.Map<java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.getBytes()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/jdk7u-jdk/src/solaris/classes/java/lang/ProcessEnvironment.java",
      "classTypes": [
        "Map.Entry<Variable,Value>",
        "Set<Map.Entry<Variable,Value>>",
        "Collection<Value>",
        "Set<Variable>",
        "HashMap<Variable,Value>",
        "int",
        "Map<String,String>",
        "byte[]",
        "Map<Variable,Value>"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "Object"
        ],
        [
          "String"
        ],
        [
          "Object"
        ],
        [
          "Object"
        ],
        [
          "Object"
        ],
        [
          "Object"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.util.Map<java.lang.ProcessEnvironment.Variable,java.lang.ProcessEnvironment.Value>.containsValue(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "value"
      ]
    },
    {
      "method": "handleLastNameFocusChange@107",
      "body": "public void handleLastNameFocusChange(boolean hasFocus){\n  if (D)   Log.d(TAG,\"handleLastNameFocusChange called\");\n  if (!hasFocus) {\n    String nameText=view.getLastNameBox().getText().toString();\n    if (nameText != null && !nameText.equals(\"\")) {\n      boolean valid=validateNameFocusChange(nameText);\n      if (!valid) {\n        notify(INVALID_LAST_NAME);\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.regex.Matcher"
              },
              {
                "_call": "java.util.regex.Matcher.matches()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/OpenComm-Group/2012_2013/OldCode/OpenComm_Sean/src/edu/cornell/opencomm/controller/SignupController.java",
      "classTypes": [
        "Pattern",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [
          "boolean"
        ]
      ],
      "types": [
        "String",
        "Pattern"
      ],
      "apicalls": [
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "regex"
      ]
    },
    {
      "method": "getMenuItemParent@796",
      "body": "/** \n * Returns parent of this component if it is not a top-level menu Otherwise returns null.\n * @param menuItem the menu item whose parent will be returned.\n * @return parent of this component if it is not a top-level menuOtherwise returns null.\n */\npublic static JComponent getMenuItemParent(JMenuItem menuItem){\n  Container parent=menuItem.getParent();\n  if ((parent instanceof JComponent) && (!(menuItem instanceof JMenu) || !((JMenu)menuItem).isTopLevelMenu())) {\n    return (JComponent)parent;\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "JMenuItem"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getParent()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Container"
          },
          {
            "_call": "$NOT$javax.swing.JMenu.isTopLevelMenu()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.AbstractButton.getHorizontalAlignment()",
              "javax.swing.AbstractButton.getHorizontalTextPosition()",
              "javax.swing.AbstractButton.getVerticalTextPosition()"
            ]
          }
        ]
      ],
      "returnType": "JComponent",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/sun/swing/MenuItemLayoutHelper.java",
      "classTypes": [
        "int",
        "Rectangle",
        "int",
        "boolean",
        "boolean",
        "Rectangle"
      ],
      "sorrformalparam": [
        [
          "boolean",
          "JMenuItem"
        ]
      ],
      "types": [
        "Container",
        "JMenu",
        "Boolean"
      ],
      "apicalls": [
        "getParent"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getParent()",
            "$NOT$javax.swing.JMenu.isTopLevelMenu()"
          ]
        }
      ],
      "keywords": [
        "level"
      ]
    },
    {
      "method": "testFontFaceDeclaration@588",
      "body": "/** \n * Test font-face with declaration\n * @throws Exception\n */\npublic void testFontFaceDeclaration() throws Exception {\n  parseTest(\"@font-face {font-family: name;}\" + EOL);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()",
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/studio3/tests/com.aptana.editor.css.tests/src/com/aptana/editor/css/parsing/CSSParserTest.java",
      "classTypes": [
        "boolean",
        "boolean",
        "String",
        "CSSFlexScanner"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Object",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "instance@573",
      "body": "public static FittingCurveHelper instance(double[] xArray,double[] yArray,boolean isTransposed){\n  double[][] sa=sort(xArray,yArray,isTransposed);\n  int iSize=mergeBase(sa);\n  return new FittingCurveHelper(sa,iSize);\n}\n",
      "formalParam": [
        "double[]",
        "double[]",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.sort(T[],java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "FittingCurveHelper",
      "file": "./java_projects/birt/chart/org.eclipse.birt.chart.engine/src/org/eclipse/birt/chart/render/AxesRenderer.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [],
      "types": [
        "Comparator"
      ],
      "apicalls": [
        "sort",
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.sort(T[],java.util.Comparator)",
            "java.lang.Math.min(int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "lang",
        "arrays",
        "util",
        "sort"
      ]
    },
    {
      "method": "getVMArguments@151",
      "body": "/** \n * Generate and return the list of virtual machine arguments that are passed to java when the function is called.\n */\n@Override public Collection<String> getVMArguments(){\n  if (vmArguments == null) {\n    final Collection<String> vmArgs=new ArrayList<String>();\n    vmArgs.add(\"-Dillarion.components.avaiable.tabsplitter=true\");\n    vmArguments=vmArgs;\n  }\n  return vmArguments;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Collection<URL>",
        "Collection<File>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.net.URL>.ArrayList<URL>()",
              "java.net.URL.URL(java.lang.String)",
              "java.util.Collection<java.net.URL>.add(java.net.URL)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.io.File>.ArrayList<File>()",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.util.Collection<java.io.File>.add(java.io.File)"
            ]
          }
        ]
      ],
      "returnType": "Collection<String>",
      "file": "./java_projects/Illarion-Java/illadownload/src/illarion/download/install/resources/libs/Tabsplitter.java",
      "classTypes": [
        "Collection<String>",
        "Tabsplitter",
        "Collection<URL>",
        "Collection<File>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.Collection<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "list",
        "util",
        "add"
      ]
    },
    {
      "method": "copyIncludedLibraries@113",
      "body": "public static void copyIncludedLibraries(Shell shell,String projectPath){\n  Enumeration enumeration=SampleIncludedSourceEntry.getIncludedLibraries();\n  while (enumeration.hasMoreElements()) {\n    URL libraryURL=(URL)enumeration.nextElement();\n    String filename=libraryURL.getFile();\n    String desFileName=filename.substring(filename.lastIndexOf('/') + 1);\n    PlaceResources.copy(shell,projectPath,desFileName,libraryURL);\n  }\n}\n",
      "formalParam": [
        "Shell",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.net.URL.getFile()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.lastIndexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Enumeration.hasMoreElements()",
              "java.net.URL.getFile()",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration.hasMoreElements()",
              "java.net.URL.getFile()",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/birt/UI/org.eclipse.birt.report.designer.ui.samplesview/src/org/eclipse/birt/report/designer/ui/samplesview/util/PlaceResources.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Shell",
          "String",
          "String"
        ],
        [
          "Shell",
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.net.URL.getFile()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "net"
      ]
    },
    {
      "method": "getExtraMethodSource@238",
      "body": "@Override public Scriptable getExtraMethodSource(Context cx){\n  if (hasSimpleContent()) {\n    String src=toString();\n    return ScriptRuntime.toObjectOrNull(cx,src);\n  }\n  return null;\n}\n",
      "formalParam": [
        "Context"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "Scriptable",
      "file": "./java_projects/jermaine/lib/rhino/xmlimplsrc/org/mozilla/javascript/xmlimpl/XML.java",
      "classTypes": [
        "XmlNode",
        "long"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "buffer",
        "append",
        "lang"
      ]
    },
    {
      "method": "JcpSelection@585",
      "body": "@SuppressWarnings(\"unchecked\") public JcpSelection(IAtomContainer tocopy1) throws Exception {\n  IMolecule tocopy=tocopy1.getBuilder().newInstance(IMolecule.class,tocopy1);\n  StringWriter sw=new StringWriter();\n  new MDLV2000Writer(sw).writeMolecule(tocopy);\n  this.mol=sw.toString();\n  SmilesGenerator sg=new SmilesGenerator();\n  smiles=sg.createSMILES(tocopy);\n  svg=jcpPanel.getSVGString();\n  sw=new StringWriter();\n  Class cmlWriterClass=null;\n  try {\n    cmlWriterClass=this.getClass().getClassLoader().loadClass(\"org.openscience.cdk.io.CMLWriter\");\n    if (cmlWriterClass != null) {\n      IChemObjectWriter cow=(IChemObjectWriter)cmlWriterClass.newInstance();\n      Constructor constructor=cow.getClass().getConstructor(new Class[]{Writer.class});\n      cow=(IChemObjectWriter)constructor.newInstance(new Object[]{sw});\n      cow.write(tocopy);\n      cow.close();\n    }\n    cml=sw.toString();\n  }\n catch (  Exception exception) {\n    logger.error(\"Could not load CMLWriter: \",exception.getMessage());\n    logger.debug(exception);\n  }\n}\n",
      "formalParam": [
        "IAtomContainer"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader"
              },
              {
                "_call": "java.lang.ClassLoader.loadClass(java.lang.String)",
                "_throws": [
                  "java.lang.ClassNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Class"
              },
              {
                "_call": "java.io.StringWriter.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/jchempaint/src/main/org/openscience/jchempaint/action/CopyPasteAction.java",
      "classTypes": [
        "String",
        "DataFlavor",
        "String",
        "DataFlavor",
        "DataFlavor[]",
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()",
            "java.io.StringWriter.StringWriter()",
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.io.StringWriter.toString()",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()",
            "java.io.StringWriter.StringWriter()",
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.loadClass(java.lang.String)",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "writer",
        "class"
      ]
    },
    {
      "method": "cleanExit@534",
      "body": "public boolean cleanExit(){\n  if (!disableConfirmations) {\n    disableConfirmations=true;\n    for (    Bot bot : bots) {\n      if (bot.getAccountName() != null) {\n        disableConfirmations=true;\n        break;\n      }\n    }\n  }\n  boolean doExit=true;\n  if (!disableConfirmations) {\n    final String message=\"Are you sure you want to exit?\";\n    int result=JOptionPane.showConfirmDialog(this,message,\"Exit\",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);\n    if (result != JOptionPane.OK_OPTION) {\n      doExit=false;\n    }\n  }\n  WebQueue.Destroy();\n  setVisible(false);\n  while (WebQueue.IsRunning()) {\n    try {\n      Thread.sleep(50);\n    }\n catch (    Exception e) {\n    }\n  }\n  if (doExit) {\n    menuBar.savePrefs();\n    System.exit(0);\n  }\n else {\n    setVisible(true);\n  }\n  return doExit;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Window.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Window.setVisible(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.exit(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/RSBot/src/org/rsbot/gui/BotGUI.java",
      "classTypes": [
        "BotToolBar",
        "long",
        "int",
        "BotHome",
        "List<Bot>",
        "BotPanel"
      ],
      "sorrformalparam": [
        [],
        [
          "Bot"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "java.awt.Window.setVisible(boolean)",
            "java.lang.Thread.sleep(long)",
            "java.awt.Window.setVisible(boolean)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "java.awt.Window.setVisible(boolean)",
            "java.lang.Thread.sleep(long)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "lang",
        "string",
        "confirm",
        "swing"
      ]
    },
    {
      "method": "FGEUnionArea@188",
      "body": "public FGEUnionArea(List<? extends FGEArea> objects){\n  this();\n  for (  FGEArea o : objects) {\n    addArea(o.clone());\n  }\n  if (objects.size() == 1) {\n    logger.warning(\"Called constructor for FGEUnionArea with 1 object\");\n  }\n}\n",
      "formalParam": [
        "List<? extends FGEArea>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.warning(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexographicalengine/src/main/java/org/openflexo/fge/geom/area/FGEUnionArea.java",
      "classTypes": [
        "Vector<FGEArea>",
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Logger",
        "List"
      ],
      "apicalls": [
        "warning"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.logging.Logger.warning(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "list",
        "size",
        "logging",
        "logger"
      ]
    },
    {
      "method": "close@133",
      "body": "public void close(){\n  lock.lock();\n  try {\n    if (open) {\n      open=false;\n      context.removeBundleListener(bundleListener);\n      Bundle[] bundles=bundleList.toArray(new Bundle[bundleList.size()]);\n      for (      Bundle bundle : bundles) {\n        if (bundleList.remove(bundle)) {\n          for (          Registry registry : registryList) {\n            registry.remove(bundle);\n          }\n        }\n      }\n      log.info(\"Bundle tracker is closed\");\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/axis2-java/modules/osgi/src/org/apache/axis2/osgi/deployment/tracker/BundleTracker.java",
      "classTypes": [
        "List<Registry>",
        "BundleListener",
        "BundleContext",
        "Lock",
        "List<Bundle>",
        "boolean",
        "Log"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "lock",
        "unlock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "test_getNextJarEntry@117",
      "body": "/** \n * @tests java.util.jar.JarInputStream#getNextJarEntry()\n */\npublic void test_getNextJarEntry() throws Exception {\n  final Set<String> desired=new HashSet<String>(Arrays.asList(new String[]{\"foo/\",\"foo/bar/\",\"foo/bar/A.class\",\"Blah.txt\"}));\n  Set<String> actual=new HashSet<String>();\n  InputStream is=new URL(jarName).openConnection().getInputStream();\n  JarInputStream jis=new JarInputStream(is);\n  JarEntry je=jis.getNextJarEntry();\n  while (je != null) {\n    actual.add(je.toString());\n    je=jis.getNextJarEntry();\n  }\n  assertEquals(actual,desired);\n  jis.close();\n  try {\n    jis.getNextJarEntry();\n    fail(\"IOException expected\");\n  }\n catch (  IOException ee) {\n  }\n  File resources=Support_Resources.createTempFolder();\n  Support_Resources.copyFile(resources,null,\"Broken_entry.jar\");\n  is=Support_Resources.getStream(\"Broken_entry.jar\");\n  jis=new JarInputStream(is,false);\n  jis.getNextJarEntry();\n  try {\n    jis.getNextJarEntry();\n    fail(\"ZipException expected\");\n  }\n catch (  ZipException ee) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URL.openConnection()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.URLConnection"
          },
          {
            "_call": "java.net.URLConnection.getInputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.util.zip.ZipEntry.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.util.zip.ZipEntry.toString()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.lang.Throwable.toString()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarInputStreamTest.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "IOException"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openConnection()",
            "java.net.URLConnection.getInputStream()",
            "java.util.zip.ZipEntry.toString()",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "zip",
        "string",
        "util",
        "connection"
      ]
    },
    {
      "method": "isOpen@122",
      "body": "/** \n * Checks whether the socket is connected.\n */\npublic boolean isOpen(){\n  return socketChannel_.isOpen() && socketChannel_.isConnected();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.nio.channels.SocketChannel.isConnected()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "None",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.channels.SocketChannel.socket()",
              "java.net.Socket.setSoTimeout(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.SocketChannel.validOps()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.nio.channels.SocketChannel.write(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.SocketChannel.socket()",
              "java.net.Socket.setSoLinger(boolean,int)",
              "java.net.Socket.setTcpNoDelay(boolean)",
              "java.nio.channels.SocketChannel.socket()",
              "java.net.Socket.setSoTimeout(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.channels.SocketChannel.validOps()",
              "java.nio.ByteBuffer.wrap(byte[],int,int)",
              "java.nio.channels.SocketChannel.read(java.nio.ByteBuffer)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/platform/dependencies/thrift/lib/java/src/org/apache/thrift/transport/TNonblockingSocket.java",
      "classTypes": [
        "SocketChannel",
        "SocketAddress",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "byte[]",
          "int",
          "int"
        ],
        [
          "SocketChannel",
          "int",
          "SocketAddress"
        ],
        [
          "byte[]",
          "int",
          "int"
        ]
      ],
      "types": [
        "SocketChannel"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
            "java.nio.channels.SocketChannel.isConnected()"
          ]
        }
      ],
      "keywords": [
        "spi",
        "channels",
        "open"
      ]
    },
    {
      "method": "hasUniqueIDNode@119",
      "body": "/** \n * Checks whether the Semantic Graph contains a node with this unique sesame id (the id that is stored in a separate target node)\n * @param id Sesame ID\n * @return true if the graph contains this node\n */\npublic boolean hasUniqueIDNode(String id){\n  for (Iterator it=getNodes(); it.hasNext(); ) {\n    SGNode node=(SGNode)it.next();\n    if (id.equals(node.getUniqueID()))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "ArrayList<SGNode>",
        "SGNode",
        "None",
        "ArrayList<SGEdge>",
        "void",
        "ArrayList<SGNode>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.Integer.toString(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/RDF2TextTranslator/src/NLGService/WYSIWYM/model/SemanticGraph.java",
      "classTypes": [
        "int",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "int"
        ],
        [
          "SGNode"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "next"
      ]
    },
    {
      "method": "getAllValues@390",
      "body": "@Override public Set<Object> getAllValues(final String parameterName){\n  return rawGetAllValues(getPositionOfParameter(parameterName),emptyArray());\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.util.HashSet<java.lang.Object>.HashSet<Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Set<Object>",
        "Collection<Match>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
              "java.util.HashSet<java.lang.Object>.HashSet<Object>()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "Set<Object>",
      "file": "./java_projects/EMF-IncQuery/plugins/org.eclipse.viatra2.emf.incquery.runtime/src/org/eclipse/viatra2/emf/incquery/runtime/api/impl/BaseMatcher.java",
      "classTypes": [
        "Map<String,Integer>",
        "NavigationHelper",
        "Object[]",
        "IncQueryEngine",
        "ReteEngine<Pattern>",
        "String[]",
        "RetePatternMatcher"
      ],
      "sorrformalparam": [
        [
          "String",
          "Match"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Integer>.get(java.lang.Object)",
            "java.util.HashSet<java.lang.Object>.HashSet<Object>()"
          ]
        }
      ],
      "keywords": [
        "map"
      ]
    },
    {
      "method": "print@19",
      "body": "public void print(String strMsg){\n  print(strMsg,0);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(char[])",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/CSE131/src/ErrorPrinter.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "int"
        ]
      ],
      "types": [
        "PrintStream",
        "Character",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "onChange@188",
      "body": "public void onChange(final Widget widget){\n  setDefaultParamSetId(selector.getSelectedParamSet().getId());\n  fireSelectionEvent();\n}\n",
      "formalParam": [
        "Widget"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.valueOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.setTime(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Date"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.util.Date.getTime()",
              "java.util.Date.setTime(long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/swift/swift/web/src/main/java/edu/mayo/mprc/swift/ui/client/widgets/ParamSetSelectionController.java",
      "classTypes": [
        "List<ParamSetSelectionListener>",
        "ClientParamSetList",
        "ParamsSelector"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.valueOf(int)",
            "java.util.Date.Date()",
            "java.util.Date.getTime()",
            "java.util.Date.setTime(long)"
          ]
        }
      ],
      "keywords": [
        "long",
        "time",
        "set",
        "lang",
        "string",
        "date",
        "get"
      ]
    },
    {
      "method": "test64kminus7@92",
      "body": "public void test64kminus7(){\n  checkLargeMessage((64 * 1024) - 7);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/qpid/qpid/java/systests/src/main/java/org/apache/qpid/test/unit/basic/LargeMessageTest.java",
      "classTypes": [
        "Destination"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "append",
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "character",
        "integer",
        "length"
      ]
    },
    {
      "method": "onUserDataUpdated@122",
      "body": "@Override public void onUserDataUpdated(){\n  updateHud();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.text.NumberFormat"
          },
          {
            "_call": "java.text.NumberFormat.setMinimumIntegerDigits(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.Format.format(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)",
              "java.text.NumberFormat.setMinimumIntegerDigits(int)",
              "java.text.NumberFormat.setMaximumFractionDigits(int)",
              "java.text.Format.format(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_7/src/org/immopoly/android/fragments/HudFragment.java",
      "classTypes": [
        "HudPopupHelper",
        "OnTrackingEventListener"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.text.NumberFormat.getCurrencyInstance(java.util.Locale)",
            "java.text.NumberFormat.setMinimumIntegerDigits(int)",
            "java.text.NumberFormat.setMaximumFractionDigits(int)",
            "java.text.Format.format(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "currency",
        "format",
        "integer",
        "minimum"
      ]
    },
    {
      "method": "testFadein@64",
      "body": "public void testFadein() throws Exception {\n  waitForDojoReady();\n  XPath xpath=XPathFactory.newInstance().newXPath();\n  Document doc=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(\"http://localhost:8080/eclipse-jsfdojo-library-test-selenium/dojoserverfaces/behavior/fadeinout/fadeinout.xhtml\");\n  String id=selenium.getEval(\"window.dijit.byId('form:initialValues:form1:portletA').get('id')\");\n  String id1=id.substring(19);\n  String target=xpath.evaluate(\"//behaviorFadeIn/@target\",doc);\n  if (!(target.equals(id1))) {\n    FacesMessage message=new FacesMessage(\"valid component not found with id \" + target);\n    message.setSeverity(FacesMessage.SEVERITY_ERROR);\n    throw new ValidatorException(message);\n  }\n else {\n    verifyEquals(\"false\",selenium.isVisible(\"form:initialValues:form1:portletA\"));\n    selenium.click(\"form:initialValues:buttonA\");\n    verifyEquals(\"true\",selenium.isVisible(\"form:initialValues:form1:portletA\"));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.lang.String)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "javax.xml.parsers.DocumentBuilder.parse(java.lang.String)",
              "java.lang.String.substring(int)",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/DojoServerFaces/dojoserverfaces-library-test-selenium/src/main/java/org/dojoserverfaces/tests/behavior/faidinout/FadeinFadeoutSelenium.java",
      "classTypes": [
        "SeleniumSetupSuite"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Object",
        "DocumentBuilderFactory"
      ],
      "apicalls": [
        "newInstance",
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.parse(java.lang.String)",
            "java.lang.String.substring(int)",
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "io",
        "exception",
        "string"
      ]
    },
    {
      "method": "testSetGetGlassPane@460",
      "body": "public void testSetGetGlassPane(){\n  MyPropertyChangeListener listener=new MyPropertyChangeListener();\n  window.addPropertyChangeListener(\"glassPane\",listener);\n  JPanel pane=new JPanel();\n  window.setGlassPane(pane);\n  assertTrue(window.getGlassPane() == pane);\n  assertFalse(\"glassPane is not a bound property\",listener.ok);\n  boolean ok=false;\n  try {\n    window.setGlassPane(null);\n  }\n catch (  NullPointerException e) {\n    ok=true;\n  }\n finally {\n    assertTrue(ok);\n  }\n  assertTrue(window.getGlassPane() != null);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JPanel.JPanel()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
              "java.awt.Container.getComponentCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
              "javax.swing.JPanel.JPanel()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.getOwner()",
              "java.awt.Component.isVisible()",
              "java.awt.Window.getLocale()",
              "javax.swing.JComponent.getDefaultLocale()",
              "java.awt.Window.isFocusableWindow()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.accessibility.AccessibleContext.getAccessibleRole()",
              "javax.accessibility.AccessibleContext.getAccessibleName()",
              "javax.accessibility.AccessibleContext.getAccessibleDescription()",
              "javax.accessibility.AccessibleContext.getAccessibleChildrenCount()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/swing/src/test/api/java.injected/javax/swing/JWindowTest.java",
      "classTypes": [
        "JWindow",
        "boolean",
        "boolean",
        "long",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "JPanel"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Window.addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)",
            "javax.swing.JPanel.JPanel()"
          ]
        }
      ],
      "keywords": [
        "j",
        "add",
        "panel",
        "listener"
      ]
    },
    {
      "method": "test_writeI@195",
      "body": "/** \n * @tests java.io.FileOutputStream#write(int)\n */\npublic void test_writeI() throws IOException {\n  f=new File(System.getProperty(\"user.home\"),\"output.tst\");\n  fos=new FileOutputStream(f.getPath());\n  fos.write('t');\n  fis=new FileInputStream(f.getPath());\n  assertEquals(\"Incorrect char written\",'t',fis.read());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.write(int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileInputStream.read()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.getAbsolutePath()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.getFD()",
              "java.io.FileOutputStream.close()",
              "$NOT$java.io.FileOutputStream.getFD()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
              "java.io.FileOutputStream.close()",
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.FileDescriptor)",
              "java.io.FileOutputStream.write(byte[],int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.getPath()",
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
              "java.io.FileOutputStream.close()",
              "java.lang.String.getBytes()",
              "java.io.FileOutputStream.write(byte[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/FileOutputStreamTest.java",
      "classTypes": [
        "String",
        "File",
        "byte[]",
        "FileInputStream"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "FileInputStream",
        "String",
        "IOException",
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.getPath()",
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.FileOutputStream.write(int)",
            "java.io.File.getPath()",
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.FileInputStream.read()"
          ]
        }
      ],
      "keywords": [
        "property",
        "get",
        "stream",
        "path"
      ]
    },
    {
      "method": "failed@754",
      "body": "public void failed(final Exception ex){\n  System.out.println(\"[client<-proxy] \" + ex.toString());\n}\n",
      "formalParam": [
        "Exception"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(char[])",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/httpcore/httpcore-nio/src/examples/org/apache/http/examples/nio/NHttpReverseProxy.java",
      "classTypes": [
        "ByteBuffer",
        "boolean",
        "String",
        "HttpHost",
        "boolean",
        "boolean",
        "HttpRequest"
      ],
      "sorrformalparam": [
        [
          "Exception"
        ],
        [
          "HttpResponse"
        ],
        [
          "Exception"
        ],
        [
          "Exception"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.toString()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print"
      ]
    },
    {
      "method": "setNetworkTrafficGenericTos@2001",
      "body": "public void setNetworkTrafficGenericTos(String networkTrafficGenericTos){\n  addPair(NETWORK_TRAFFIC_GENERIC_TOS,networkTrafficGenericTos);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-integration-extensions/spring-integration-splunk/src/main/java/org/springframework/integration/splunk/entity/SplunkData.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "append"
      ]
    },
    {
      "method": "getMenuFont@268",
      "body": "public FontUIResource getMenuFont(){\n  return getControlFont();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Font.Font(java.lang.String,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Font.getFont(java.lang.String,java.awt.Font)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Font"
          }
        ]
      },
      "sorrreturntype": [
        "FontSet",
        "FontUIResource",
        "FontUIResource",
        "FontUIResource",
        "None",
        "FontUIResource",
        "FontUIResource"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Font.getSize2D()",
              "java.awt.Font.deriveFont(float)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.Font(java.lang.String,int,int)",
              "java.awt.Font.getFont(java.lang.String,java.awt.Font)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.Font(java.lang.String,int,int)",
              "java.awt.Font.getFont(java.lang.String,java.awt.Font)",
              "java.awt.Font.deriveFont(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.Font(java.lang.String,int,int)",
              "java.awt.Font.getFont(java.lang.String,java.awt.Font)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.getSize2D()",
              "java.awt.Font.deriveFont(float)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.Font(java.lang.String,int,int)",
              "java.awt.Font.getFont(java.lang.String,java.awt.Font)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Font.Font(java.lang.String,int,int)",
              "java.awt.Font.getFont(java.lang.String,java.awt.Font)",
              "java.awt.Font.deriveFont(int)"
            ]
          }
        ]
      ],
      "returnType": "FontUIResource",
      "file": "./java_projects/substance/src/org/pushingpixels/substance/internal/fonts/FontSets.java",
      "classTypes": [
        "FontUIResource"
      ],
      "sorrformalparam": [
        [
          "Font",
          "Font",
          "Font",
          "Font",
          "Font",
          "Font"
        ],
        [],
        [],
        [],
        [
          "Font",
          "Font",
          "Font",
          "Font",
          "Font",
          "Font"
        ],
        [],
        []
      ],
      "types": [
        "String",
        "Font",
        "Integer"
      ],
      "apicalls": [
        "getFont"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Font.Font(java.lang.String,int,int)",
            "java.awt.Font.getFont(java.lang.String,java.awt.Font)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "string",
        "integer",
        "font",
        "get"
      ]
    },
    {
      "method": "MainConfigBackingBean@44",
      "body": "public MainConfigBackingBean(EhourConfigStub config){\n  this.config=config;\n  smtpAuthentication=StringUtils.isNotBlank(config.getSmtpUsername()) && StringUtils.isNotBlank(config.getSmtpPassword());\n  Calendar cal=new GregorianCalendar();\n  DateUtil.dayOfWeekFix(cal);\n  cal.set(Calendar.DAY_OF_WEEK,config.getFirstDayOfWeek());\n  firstWeekStart=cal.getTime();\n}\n",
      "formalParam": [
        "EhourConfigStub"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.GregorianCalendar.GregorianCalendar()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.set(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.GregorianCalendar.GregorianCalendar()",
              "java.util.Calendar.setTime(java.util.Date)",
              "java.util.Calendar.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Locale.getCountry()",
              "java.util.Locale.getLanguage()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/ehour/eHour-wicketweb/src/main/java/net/rrm/ehour/ui/admin/config/dto/MainConfigBackingBean.java",
      "classTypes": [
        "Date",
        "EhourConfigStub",
        "long",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Date"
        ],
        [
          "Locale"
        ]
      ],
      "types": [
        "Calendar",
        "Integer",
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.GregorianCalendar.GregorianCalendar()",
            "java.util.Calendar.set(int,int)",
            "java.util.Calendar.getTime()"
          ]
        }
      ],
      "keywords": [
        "calendar",
        "set",
        "util",
        "time",
        "get"
      ]
    },
    {
      "method": "ScannerInfoProvider@193",
      "body": "public ScannerInfoProvider(IConfigurationElement provider){\n  providerId=provider.getAttribute(\"providerId\");\n  IConfigurationElement[] actions=provider.getChildren();\n  providerKind=actions[0].getName();\n  if (providerKind.equals(RUN)) {\n    this.action=new ScannerConfigProfile.Run(actions[0]);\n  }\n else   if (providerKind.equals(OPEN)) {\n    this.action=new ScannerConfigProfile.Open(actions[0]);\n  }\n else {\n  }\n  IConfigurationElement[] parsers=provider.getChildren(\"scannerInfoConsoleParser\");\n  scannerInfoConsoleParser=new ScannerConfigProfile.ScannerInfoConsoleParser(parsers[0]);\n}\n",
      "formalParam": [
        "IConfigurationElement"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "List<String>",
        "boolean",
        "ScannerConfigScope"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cdt/build/org.eclipse.cdt.make.core/src/org/eclipse/cdt/make/internal/core/scannerconfig2/ScannerConfigProfile.java",
      "classTypes": [
        "IConfigurationElement",
        "String",
        "Open",
        "ScannerInfoCollector",
        "Map<String,ScannerInfoProvider>",
        "ScannerInfoConsoleParser",
        "String",
        "Action"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "String",
        "Object",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "equals",
        "string",
        "object",
        "boolean",
        "lang"
      ]
    },
    {
      "method": "test_issue314@473",
      "body": "@Test public void test_issue314(){\n  Context context=Lang.context();\n  context.set(\"String\",String.class);\n  Issue314 i314=new Issue314();\n  List<String> list=new ArrayList<String>();\n  list.add(\"123\");\n  i314.setList(list);\n  context.set(\"map\",i314);\n  assertEquals(\"123\",El.eval(context,\"String.valueOf(123)\"));\n  assertEquals(\"123\",El.eval(context,\"map.list.get(0)\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.CountDownLatch.CountDownLatch(int)",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
              "java.lang.Thread.start()",
              "java.util.concurrent.CountDownLatch.await()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.toString()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/nutz/test/org/nutz/el/El2Test.java",
      "classTypes": [
        "El"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "ArrayList",
        "String",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "add",
        "array"
      ]
    },
    {
      "method": "testFactAssignmentField@37",
      "body": "@Test public void testFactAssignmentField() throws Exception {\n  ClassLoader classLoader=Thread.currentThread().getContextClassLoader();\n  TypeResolver typeResolver=new ClassTypeResolver(new HashSet<String>(),classLoader);\n  typeResolver.addImport(\"org.drools.ide.common.server.testscenarios.Cheese\");\n  Mouse mouse=new Mouse();\n  FactAssignmentField factAssignmentField=new FactAssignmentField(\"cheese\",\"Cheese\");\n  FactAssignmentFieldPopulator factAssignmentFieldPopulator=new FactAssignmentFieldPopulator(mouse,factAssignmentField,typeResolver,classLoader);\n  factAssignmentFieldPopulator.populate(new HashMap<String,Object>());\n  assertNotNull(mouse.getCheese());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getContextClassLoader()",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/guvnor/droolsjbpm-ide-common/src/test/java/org/drools/ide/common/server/testscenarios/populators/FactAssignmentFieldPopulatorTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Thread",
        "HashMap",
        "String",
        "Object",
        "ClassLoader"
      ],
      "apicalls": [
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()"
          ]
        }
      ],
      "keywords": [
        "hash"
      ]
    },
    {
      "method": "Mail@59",
      "body": "public Mail(final long mailId,final String text,final String html,final Date sendDate,final String subject,final Sender sender){\n  Transaction tx=ConnectionFactory.getDatabase().beginTx();\n  try {\n    dataNode=ConnectionFactory.getDatabase().createNode();\n    writeProperty(ID,mailId);\n    writeProperty(\"type\",getClass().getName());\n    writeProperty(DATE,sendDate.getTime());\n    writeProperty(SUBJECT,subject);\n    writeProperty(TEXT,text);\n    writeProperty(HTML,html);\n    writeProperty(DONE,false);\n    writeProperty(SENT,false);\n    ConnectionFactory.getNewsletterIndex().add(this.dataNode,IndexTypes.NEWSLETTER_ID,mailId);\n    ConnectionFactory.getNewsletterIndex().add(this.dataNode,IndexTypes.TYPE,getClass().getName());\n    ConnectionFactory.getDatabase().getReferenceNode().createRelationshipTo(dataNode,RelationTypes.NEWSLETTER_REFERENCE);\n    tx.success();\n    sender.addSentMail(this);\n  }\n catch (  Exception e) {\n    tx.failure();\n  }\n finally {\n    tx.finish();\n  }\n}\n",
      "formalParam": [
        "long",
        "String",
        "String",
        "Date",
        "String",
        "Sender"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Relationship",
        "Relationship"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.util.Date.getTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.util.Date.getTime()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/Mail-Pigeon/pigeon-common/src/main/java/com/trivago/mail/pigeon/bean/Mail.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Recipient"
        ],
        [
          "Campaign"
        ]
      ],
      "types": [
        "Long",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getName()",
            "java.util.Date.getTime()",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "get",
        "string",
        "name",
        "date"
      ]
    },
    {
      "method": "LookupPage@18",
      "body": "/** \n * Creates new form LookupPage \n */\npublic LookupPage(){\n  initComponents();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Dimension.Dimension(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.setLayout(java.awt.LayoutManager)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/ETRACS2/etracs2-province/etracs2-prov/src/etracs2/prov/LookupPage.java",
      "classTypes": [
        "com.rameses.rcp.control.XDataTable",
        "com.rameses.rcp.control.XButton",
        "com.rameses.rcp.control.XButton"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "JComponent"
      ],
      "apicalls": [
        "setLayout"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Dimension.Dimension(int,int)",
            "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
            "java.awt.Container.setLayout(java.awt.LayoutManager)"
          ]
        }
      ],
      "keywords": [
        "set",
        "awt",
        "container",
        "swing",
        "preferred",
        "size",
        "manager"
      ]
    },
    {
      "method": "getDynamicTemplate@603",
      "body": "public OMElement getDynamicTemplate(String key) throws AxisFault {\n  final Lock lock=getLock();\n  try {\n    lock.lock();\n    SynapseConfiguration synConfig=getSynapseConfiguration();\n    Registry registry=synConfig.getRegistry();\n    if (registry != null) {\n      if (registry.getRegistryEntry(key).getType() == null) {\n        handleException(\"No resource is available by the key '\" + key + \"'\");\n      }\n      return (OMElement)registry.getResource(new Entry(key),getSynapseConfiguration().getProperties());\n    }\n else {\n      handleException(\"Unable to access the registry instance for the ESB\");\n    }\n  }\n  finally {\n    lock.unlock();\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.reset()",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.lang.String.String(byte[])",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "OMElement",
      "file": "./java_projects/platform/components/mediation/template-editor/org.wso2.carbon.mediation.templates/src/main/java/org/wso2/carbon/mediation/templates/services/TemplateEditorAdmin.java",
      "classTypes": [
        "String",
        "Log"
      ],
      "sorrformalparam": [
        [
          "String",
          "OMElement"
        ],
        [
          "String"
        ],
        [
          "String",
          "OMElement"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "concurrent"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "unlock",
        "lock",
        "locks",
        "util",
        "concurrent"
      ]
    },
    {
      "method": "postProcessBeanFactory@226",
      "body": "/** \n * Prepare the Configuration classes for servicing bean requests at runtime by replacing them with CGLIB-enhanced subclasses.\n */\npublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory){\n  int factoryId=System.identityHashCode(beanFactory);\n  if (this.factoriesPostProcessed.contains(factoryId)) {\n    throw new IllegalStateException(\"postProcessBeanFactory already called for this post-processor against \" + beanFactory);\n  }\n  this.factoriesPostProcessed.add((factoryId));\n  if (!this.registriesPostProcessed.contains((factoryId))) {\n    processConfigBeanDefinitions((BeanDefinitionRegistry)beanFactory);\n  }\n  enhanceConfigurationClasses(beanFactory);\n}\n",
      "formalParam": [
        "ConfigurableListableBeanFactory"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.identityHashCode(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Set<java.lang.Integer>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Set<java.lang.Integer>.add(java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.Set<java.lang.Integer>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getSuperclass()",
              "java.lang.Class.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-framework/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java",
      "classTypes": [
        "ClassLoader",
        "MetadataReaderFactory",
        "String",
        "SourceExtractor",
        "BeanFactory",
        "ResourceLoader",
        "String",
        "Environment"
      ],
      "sorrformalparam": [
        [
          "Object",
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "Set",
        "Object"
      ],
      "apicalls": [
        "identityHashCode"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.identityHashCode(java.lang.Object)",
            "java.util.Set<java.lang.Integer>.contains(java.lang.Object)",
            "java.util.Set<java.lang.Integer>.add(java.lang.Integer)",
            "$NOT$java.util.Set<java.lang.Integer>.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "set",
        "util",
        "contains",
        "identity",
        "lang",
        "object"
      ]
    },
    {
      "method": "toString@17",
      "body": "public String toString(){\n  StringBuffer buf=new StringBuffer();\n  for (int i=0; i < choices.length; i++) {\n    if (i != 0)     buf.append('|');\n    buf.append(choices[i].toString());\n  }\n  return buf.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/wicket-stuff-markup-validator/jing/src/main/java/com/thaiopensource/validate/picl/ChoicePattern.java",
      "classTypes": [
        "Pattern[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Character",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string",
        "buffer",
        "object",
        "append"
      ]
    },
    {
      "method": "toString@1079",
      "body": "public String toString(){\n  ByteArrayOutputStream bout=new ByteArrayOutputStream();\n  PrintWriter out=new PrintWriter(bout);\n  print(out);\n  return bout.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.OutputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "int",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeByte(int)",
              "java.io.DataOutputStream.writeShort(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeByte(int)",
              "java.io.DataOutputStream.writeShort(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(int)",
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.println(float)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.size()",
              "java.util.HashMap.HashMap(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.size()",
              "java.util.HashMap.HashMap(int)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/makegood/com.piece_framework.makegood.aspect/lib/javassist-3.11.0/src/main/javassist/bytecode/ConstPool.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "PrintWriter"
        ],
        [
          "String",
          "int"
        ],
        [
          "DataOutputStream"
        ],
        [
          "DataOutputStream"
        ],
        [
          "PrintWriter"
        ],
        [
          "PrintWriter"
        ],
        [
          "String",
          "String"
        ],
        [
          "Map"
        ]
      ],
      "types": [
        "String",
        "ByteArrayOutputStream"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.PrintWriter.PrintWriter(java.io.OutputStream)",
            "java.io.ByteArrayOutputStream.toString()"
          ]
        }
      ],
      "keywords": [
        "output",
        "io",
        "string",
        "writer",
        "print"
      ]
    },
    {
      "method": "testAsync0Idle0Size@35",
      "body": "public void testAsync0Idle0Size() throws Exception {\n  System.out.println(\"[testPoolThreads20Connections10FairAsync] Starting fairness - Tomcat JDBC - Fair - Async\");\n  init();\n  this.datasource.getPoolProperties().setMaxActive(10);\n  this.datasource.getPoolProperties().setFairQueue(true);\n  this.datasource.getPoolProperties().setInitialSize(0);\n  try {\n    Future<Connection> cf=((DataSourceProxy)datasource).getConnectionAsync();\n    cf.get(5,TimeUnit.SECONDS);\n  }\n  finally {\n    tearDown();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.Future<java.sql.Connection>.get(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException",
              "java.util.concurrent.ExecutionException",
              "java.util.concurrent.TimeoutException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Connection"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/tomcat70/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/Async0IdleTestBug50477.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "ExecutionException",
        "TimeUnit"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.util.concurrent.Future<java.sql.Connection>.get(long,java.util.concurrent.TimeUnit)"
          ]
        }
      ],
      "keywords": [
        "println",
        "string",
        "exception",
        "connection",
        "unit",
        "print",
        "long"
      ]
    },
    {
      "method": "testNumberingNoneAbstractNumber@45",
      "body": "@Test public void testNumberingNoneAbstractNumber() throws Exception {\n  DocxNumberingPreprocessor preprocessor=new DocxNumberingPreprocessor();\n  InputStream stream=IOUtils.toInputStream(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\" + \"<w:numbering\" + \" xmlns:ve=\\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\\"\"+ \" xmlns:o=\\\"urn:schemas-microsoft-com:office:office\\\"\"+ \" xmlns:r=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\\"\"+ \" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"\"+ \" xmlns:v=\\\"urn:schemas-microsoft-com:vml\\\"\"+ \" xmlns:wp=\\\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\\\"\"+ \" xmlns:w10=\\\"urn:schemas-microsoft-com:office:word\\\"\"+ \" xmlns:w=\\\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\\\"\"+ \" xmlns:wne=\\\"http://schemas.microsoft.com/office/word/2006/wordml\\\">\"+ \" </w:numbering>\");\n  StringWriter writer=new StringWriter();\n  IDocumentFormatter formatter=new FreemarkerDocumentFormatter();\n  Map<String,Object> sharedContext=new HashMap<String,Object>();\n  preprocessor.preprocess(\"word/numbering.xml\",stream,writer,null,formatter,sharedContext);\n  Assert.assertEquals(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\" + \"<w:numbering\" + \" xmlns:ve=\\\"http://schemas.openxmlformats.org/markup-compatibility/2006\\\"\"+ \" xmlns:o=\\\"urn:schemas-microsoft-com:office:office\\\"\"+ \" xmlns:r=\\\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\\\"\"+ \" xmlns:m=\\\"http://schemas.openxmlformats.org/officeDocument/2006/math\\\"\"+ \" xmlns:v=\\\"urn:schemas-microsoft-com:vml\\\"\"+ \" xmlns:wp=\\\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\\\"\"+ \" xmlns:w10=\\\"urn:schemas-microsoft-com:office:word\\\"\"+ \" xmlns:w=\\\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\\\"\"+ \" xmlns:wne=\\\"http://schemas.microsoft.com/office/word/2006/wordml\\\"> \"+ \"${___NoEscapeStylesGenerator.generateAbstractNumBullet(___DefaultStyle)}\"+ \"${___NoEscapeStylesGenerator.generateAbstractNumDecimal(___DefaultStyle)}\"+ \"[#if ___NumberingRegistry??]\"+ \"[#list ___NumberingRegistry.numbers as ___NumberInfo]\"+ \"<w:num w:numId=\\\"${___NumberInfo.numId}\\\">\"+ \"<w:abstractNumId w:val=\\\"${___NumberInfo.abstractNumId}\\\"/>\"+ \"</w:num>\"+ \"[/#list]\"+ \"[/#if]\"+ \"</w:numbering>\",writer.toString());\n  DefaultStyle defaultStyle=DocxContextHelper.getDefaultStyle(sharedContext);\n  Assert.assertNotNull(defaultStyle);\n  Assert.assertNull(defaultStyle.getAbstractNumIdForOrdererList());\n  Assert.assertNull(defaultStyle.getAbstractNumIdForUnordererList());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.io.StringWriter.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/xdocreport/integrationtests/fr.opensagres.xdocreport.core.test/src/test/java/fr/opensagres/xdocreport/document/docx/preprocessor/numbering/DocxNumberingPreprocessorWithFreemarkerTestCase.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "util",
        "hash"
      ]
    },
    {
      "method": "setAcknowledgeMode@307",
      "body": "/** \n * Set the acknowledge mode\n * @param value The value\n */\npublic void setAcknowledgeMode(final String value){\n  if (HornetQActivationSpec.trace) {\n    HornetQRALogger.LOGGER.trace(\"setAcknowledgeMode(\" + value + \")\");\n  }\n  if (\"DUPS_OK_ACKNOWLEDGE\".equalsIgnoreCase(value) || \"Dups-ok-acknowledge\".equalsIgnoreCase(value)) {\n    acknowledgeMode=Session.DUPS_OK_ACKNOWLEDGE;\n  }\n else   if (\"AUTO_ACKNOWLEDGE\".equalsIgnoreCase(value) || \"Auto-acknowledge\".equalsIgnoreCase(value)) {\n    acknowledgeMode=Session.AUTO_ACKNOWLEDGE;\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported acknowledgement mode \" + value);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hornetq/hornetq-ra/src/main/java/org/hornetq/ra/inflow/HornetQActivationSpec.java",
      "classTypes": [
        "String",
        "Hashtable",
        "String",
        "boolean",
        "String",
        "String",
        "Boolean",
        "Boolean",
        "Integer",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "ignore",
        "case"
      ]
    },
    {
      "method": "testParticipatingTransactionWithTransactionStartedFromSynch@514",
      "body": "public void testParticipatingTransactionWithTransactionStartedFromSynch() throws Exception {\n  MockControl conControl=MockControl.createControl(Connection.class);\n  Connection con=(Connection)conControl.getMock();\n  con.getAutoCommit();\n  conControl.setReturnValue(false,2);\n  con.commit();\n  conControl.setVoidCallable(2);\n  con.isReadOnly();\n  conControl.setReturnValue(false,2);\n  con.close();\n  conControl.setVoidCallable(2);\n  MockControl dsControl=MockControl.createControl(DataSource.class);\n  final DataSource ds=(DataSource)dsControl.getMock();\n  ds.getConnection();\n  dsControl.setReturnValue(con,2);\n  conControl.replay();\n  dsControl.replay();\n  DataSourceTransactionManager tm=new DataSourceTransactionManager(ds);\n  assertTrue(\"Hasn't thread connection\",!TransactionSynchronizationManager.hasResource(ds));\n  assertTrue(\"Synchronization not active\",!TransactionSynchronizationManager.isSynchronizationActive());\n  final TransactionTemplate tt=new TransactionTemplate(tm);\n  tt.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);\n  final TestTransactionSynchronization synch=new TestTransactionSynchronization(ds,TransactionSynchronization.STATUS_COMMITTED){\n    public void afterCompletion(    int status){\n      super.afterCompletion(status);\n      tt.execute(new TransactionCallbackWithoutResult(){\n        protected void doInTransactionWithoutResult(        TransactionStatus status) throws RuntimeException {\n        }\n      }\n);\n    }\n  }\n;\n  tt.execute(new TransactionCallbackWithoutResult(){\n    protected void doInTransactionWithoutResult(    TransactionStatus status) throws RuntimeException {\n      TransactionSynchronizationManager.registerSynchronization(synch);\n    }\n  }\n);\n  assertTrue(\"Hasn't thread connection\",!TransactionSynchronizationManager.hasResource(ds));\n  assertTrue(synch.beforeCommitCalled);\n  assertTrue(synch.beforeCompletionCalled);\n  assertTrue(synch.afterCommitCalled);\n  assertTrue(synch.afterCompletionCalled);\n  conControl.verify();\n  dsControl.verify();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.getAutoCommit()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.Connection.commit()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.Connection.isReadOnly()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.Connection.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.DatabaseMetaData.supportsSavepoints()",
              "java.sql.Connection.getMetaData()",
              "java.sql.Connection.setSavepoint(java.lang.String)",
              "java.sql.Connection.rollback(java.sql.Savepoint)",
              "java.sql.Connection.commit()",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.SQLException.SQLException(java.lang.String)",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.close()",
              "java.sql.Connection.getAutoCommit()",
              "java.sql.Connection.commit()",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.Connection.rollback()",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()",
              "java.sql.SQLException.SQLException()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.DatabaseMetaData.supportsSavepoints()",
              "java.sql.Connection.getMetaData()",
              "java.sql.Connection.setSavepoint(java.lang.String)",
              "java.sql.Connection.rollback(java.sql.Savepoint)",
              "java.sql.Connection.commit()",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.DatabaseMetaData.supportsSavepoints()",
              "java.sql.Connection.getMetaData()",
              "java.sql.Connection.setSavepoint(java.lang.String)",
              "java.sql.Connection.releaseSavepoint(java.sql.Savepoint)",
              "java.sql.Connection.commit()",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.getAutoCommit()",
              "java.sql.Connection.setAutoCommit(boolean)",
              "java.sql.Connection.rollback()",
              "java.sql.SQLException.SQLException(java.lang.String)",
              "java.sql.Connection.setAutoCommit(boolean)",
              "java.sql.Connection.isReadOnly()",
              "java.sql.Connection.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-framework/spring-jdbc/src/test/java/org/springframework/jdbc/datasource/DataSourceTransactionManagerTests.java",
      "classTypes": [
        "int",
        "boolean",
        "DataSource",
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Boolean",
        "Connection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.getAutoCommit()",
            "java.sql.Connection.commit()",
            "java.sql.Connection.isReadOnly()",
            "java.sql.Connection.close()"
          ]
        }
      ],
      "keywords": [
        "auto",
        "read",
        "get"
      ]
    },
    {
      "method": "printExpr@148",
      "body": "/** \n * Visitor method: print expression tree.\n * @param prec  The current precedence level.\n */\npublic void printExpr(JCTree tree,int prec) throws IOException {\n  int prevPrec=this.prec;\n  try {\n    this.prec=prec;\n    if (tree == null)     print(\"/*missing*/\");\n else {\n      tree.accept(this);\n    }\n  }\n catch (  UncheckedIOException ex) {\n    IOException e=new IOException(ex.getMessage());\n    e.initCause(ex);\n    throw e;\n  }\n finally {\n    this.prec=prevPrec;\n  }\n}\n",
      "formalParam": [
        "JCTree",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.IOException.IOException(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ],
            "_try": [
              {
                "_call": "java.io.Writer.write(char[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.Writer.write(java.lang.String)",
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Writer.write(java.lang.String)",
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(char[])",
              "java.io.Writer.write(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Writer.write(java.lang.String)",
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Writer.write(java.lang.String)",
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.Writer.write(java.lang.String)",
              "java.io.Writer.write(char[])",
              "java.io.Writer.write(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/langtools/src/share/classes/com/sun/tools/javac/tree/Pretty.java",
      "classTypes": [
        "Map<JCTree,String>",
        "boolean",
        "String",
        "Name"
      ],
      "sorrformalparam": [
        [
          "JCInstanceOf"
        ],
        [
          "JCBinary"
        ],
        [
          "TypeBoundKind"
        ],
        [
          "JCUnary"
        ],
        [
          "JCAssign"
        ],
        [
          "JCTree"
        ],
        [
          "JCAssignOp"
        ]
      ],
      "types": [
        "Throwable",
        "Character",
        "String"
      ],
      "apicalls": [
        "initCause",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.Writer.write(char[])",
            "java.lang.Throwable.getMessage()",
            "java.io.IOException.IOException(java.lang.String)",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.io.Writer.write(char[])"
          ]
        }
      ],
      "keywords": [
        "throwable"
      ]
    },
    {
      "method": "shouldNotCreateFileIfFailToDownload@120",
      "body": "@Test public void shouldNotCreateFileIfFailToDownload() throws Exception {\n  File toDir=temporaryFolder.newFolder();\n  File toFile=new File(toDir,\"downloadToFile.txt\");\n  try {\n    new HttpDownloader(new Settings()).download(new URI(\"http://localhost:1/unknown\"),toFile);\n  }\n catch (  SonarException e) {\n    assertThat(toFile).doesNotExist();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.io.File,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URI.URI(java.lang.String)",
            "_throws": [
              "java.net.URISyntaxException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.net.URI.URI(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/sonar/sonar-plugin-api/src/test/java/org/sonar/api/utils/HttpDownloaderTest.java",
      "classTypes": [
        "TemporaryFolder",
        "SocketConnection",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.net.URI.URI(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "syntax"
      ]
    },
    {
      "method": "writeValueDelete@89",
      "body": "public void writeValueDelete(Object value){\n  Object[] resource=(Object[])value;\n  m_oId=resource[0];\n  m_jName.setText((String)resource[1]);\n  m_ResourceModel.setSelectedKey(resource[2]);\n  ResourceType restype=(ResourceType)m_ResourceModel.getSelectedItem();\n  if (restype == ResourceType.TEXT) {\n    m_jText.setText(Formats.BYTEA.formatValue(resource[3]));\n    m_jText.setCaretPosition(0);\n    m_jImage.setImage(null);\n  }\n else   if (restype == ResourceType.IMAGE) {\n    m_jText.setText(null);\n    m_jImage.setImage(ImageUtils.readImage((byte[])resource[3]));\n  }\n else   if (restype == ResourceType.BINARY) {\n    m_jText.setText(resource[3] == null ? null : Base64Encoder.encodeChunked((byte[])resource[3]));\n    m_jText.setCaretPosition(0);\n    m_jImage.setImage(null);\n  }\n else {\n    m_jText.setText(null);\n    m_jImage.setImage(null);\n  }\n  m_jName.setEnabled(false);\n  m_jType.setEnabled(false);\n  m_jText.setEnabled(false);\n  m_jImage.setEnabled(false);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setEnabled(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComboBox.setEnabled(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Object",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JComponent.setEnabled(boolean)",
              "javax.swing.JComboBox.setEnabled(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()",
              "javax.swing.text.JTextComponent.getText()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JComponent.setEnabled(boolean)",
              "javax.swing.JComboBox.setEnabled(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JComponent.setEnabled(boolean)",
              "javax.swing.JComboBox.setEnabled(boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pos_1/src-pos/com/openbravo/pos/admin/ResourcesView.java",
      "classTypes": [
        "ComboBoxValModel",
        "javax.swing.JLabel",
        "javax.swing.ButtonGroup",
        "com.openbravo.data.gui.JImageEditor",
        "Object",
        "org.fife.ui.rsyntaxtextarea.RSyntaxTextArea",
        "javax.swing.JScrollPane",
        "javax.swing.JPanel",
        "javax.swing.JTextField"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "Object"
        ]
      ],
      "types": [
        "JComboBox",
        "Boolean"
      ],
      "apicalls": [
        "setEnabled",
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "javax.swing.JComponent.setEnabled(boolean)",
            "javax.swing.JComboBox.setEnabled(boolean)"
          ]
        }
      ],
      "keywords": [
        "j",
        "swing",
        "text",
        "set"
      ]
    },
    {
      "method": "testProcess@48",
      "body": "@Test public void testProcess() throws InterruptedException, LifecycleException, EventDeliveryException {\n  Channel channel=new PseudoTxnMemoryChannel();\n  Context context=new Context();\n  context.put(\"logicalNode.name\",\"test\");\n  Configurables.configure(source,context);\n  Configurables.configure(channel,context);\n  List<Channel> channels=new ArrayList<Channel>();\n  channels.add(channel);\n  ChannelSelector rcs=new ReplicatingChannelSelector();\n  rcs.setChannels(channels);\n  source.setChannelProcessor(new ChannelProcessor(rcs));\n  for (long i=0; i < 100; i++) {\n    source.process();\n    Event event=channel.take();\n    Assert.assertArrayEquals(String.valueOf(i).getBytes(),new String(event.getBody()).getBytes());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.valueOf(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.String.valueOf(long)",
              "java.lang.String.getBytes()",
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.String.valueOf(long)",
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/flume/flume-ng-core/src/test/java/org/apache/flume/source/TestSequenceGeneratorSource.java",
      "classTypes": [
        "PollableSource"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "ArrayList",
        "String",
        "Long"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.valueOf(long)",
            "java.lang.String.getBytes()",
            "java.lang.String.String(java.lang.String)",
            "java.lang.String.getBytes()"
          ]
        }
      ],
      "keywords": [
        "string",
        "value",
        "bytes",
        "array"
      ]
    },
    {
      "method": "toString@69",
      "body": "/** \n * For debugging use only.\n */\n@Override public String toString(){\n  if (path.isEmpty()) {\n    return \"<this>\";\n  }\n  StringBuilder sb=new StringBuilder();\n  boolean needsDot=false;\n  for (  Property p : path) {\n    if (needsDot) {\n      sb.append(\".\");\n    }\n else {\n      needsDot=true;\n    }\n    sb.append(p.getName());\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/flatpack-java/core/src/main/java/com/getperka/flatpack/ext/PropertyPath.java",
      "classTypes": [
        "List<Property>"
      ],
      "sorrformalparam": [
        [
          "Collection<Property>"
        ]
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder"
      ]
    },
    {
      "method": "read@2184",
      "body": "public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n  org.apache.thrift.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 1:\n      if (field.type == org.apache.thrift.protocol.TType.I32) {\n        this.numRows=iprot.readI32();\n        setNumRowsIsSet(true);\n      }\n else {\n        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.set(int,boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "fetchAll_result",
        "String",
        "String",
        "fetchN_result",
        "void",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear(int)"
            ]
          },
          {
            "calls": [
              "java.util.BitSet.set(int,boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/hive/0.8.1-wso2v2/service/src/gen/thrift/gen-javabean/org/apache/hadoop/hive/service/ThriftHive.java",
      "classTypes": [
        "Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>",
        "org.apache.thrift.protocol.TField",
        "org.apache.thrift.protocol.TStruct",
        "Map<String,_Fields>",
        "org.apache.thrift.protocol.TStruct",
        "Map<String,_Fields>",
        "Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [
          "String"
        ],
        [],
        [
          "_Fields",
          "Object"
        ]
      ],
      "types": [],
      "apicalls": [
        "set"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.set(int,boolean)"
          ]
        }
      ],
      "keywords": [
        "bit",
        "util",
        "integer"
      ]
    },
    {
      "method": "execute@421",
      "body": "@Override public Void execute(final ISession session,final SeConnection connection) throws SeException, IOException {\n  try {\n    connection.close();\n    LOGGER.fine(session.toString() + \" successfully closed\");\n  }\n catch (  Exception ignore) {\n    LOGGER.fine(\"Problem closing \" + session.toString() + \": \"+ ignore.getMessage());\n  }\n  return null;\n}\n",
      "formalParam": [
        "ISession",
        "SeConnection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "SeVersion"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Void",
      "file": "./java_projects/geotools/modules/plugin/arcsde/common/src/main/java/org/geotools/arcsde/session/Commands.java",
      "classTypes": [
        "SeTable",
        "Command<String>",
        "Command<List<SeLayer>>",
        "Command<SeInsert>",
        "SeObjectId",
        "Command<Void>"
      ],
      "sorrformalparam": [
        [
          "ISession",
          "SeConnection"
        ]
      ],
      "types": [
        "Logger"
      ],
      "apicalls": [
        "fine"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.fine(java.lang.String)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "fine",
        "logger"
      ]
    },
    {
      "method": "toString@145",
      "body": "@Override public String toString(){\n  return toValueText();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "List<NV>",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/vjet/core/org.ebayopensource.vjet.core.jst/src/org/ebayopensource/dsf/jst/term/ObjLiteral.java",
      "classTypes": [
        "Map<String,NV>",
        "long",
        "IJstType"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "testGetOptional_ok@39",
      "body": "public void testGetOptional_ok() throws Exception {\n  in=mockInputStream(\"asdf\\rOK\");\n  String response=d.getOptional(in,out,\"RANDOM_COMMAND\");\n  assertEquals(\"asdf\",response);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/at-modem-detector/src/test/java/net/frontlinesms/messaging/ATDeviceDetectorTest.java",
      "classTypes": [
        "OutputStream",
        "ATDeviceDetector",
        "InputStream"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Byte",
        "String",
        "ByteArrayInputStream"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "io",
        "encoding",
        "byte",
        "get",
        "array",
        "input"
      ]
    },
    {
      "method": "execute@39",
      "body": "@Override public void execute(L1PcInstance pc,String cmdName,String arg){\n  try {\n    StringTokenizer st=new StringTokenizer(arg);\n    int gfxid=Integer.parseInt(st.nextToken(),10);\n    int count=Integer.parseInt(st.nextToken(),10);\n    for (int i=0; i < count; i++) {\n      L1ItemInstance item=ItemTable.getInstance().createItem(40005);\n      item.getItem().setGfxId(gfxid + i);\n      item.getItem().setName(String.valueOf(gfxid + i));\n      pc.getInventory().storeItem(item);\n    }\n  }\n catch (  Exception exception) {\n    pc.sendPackets(new S_SystemMessage(cmdName + \" id\"));\n  }\n}\n",
      "formalParam": [
        "L1PcInstance",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.StringTokenizer.nextToken()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String,int)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.StringTokenizer.nextToken()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String,int)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.valueOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/en/src/l1j/server/server/command/executor/L1InvGfxId.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.StringTokenizer.StringTokenizer(java.lang.String)",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.Integer.parseInt(java.lang.String,int)",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.Integer.parseInt(java.lang.String,int)",
            "java.lang.String.valueOf(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "token",
        "tokenizer",
        "number"
      ]
    },
    {
      "method": "write@108",
      "body": "public void write(byte[] buf,int off,int len){\n  getCurrent().write(buf,off,len);\n}\n",
      "formalParam": [
        "byte[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal<java.io.PrintStream>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.PrintStream"
          },
          {
            "_call": "java.io.PrintStream.write(byte[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.io.PrintStream>.get()",
              "java.io.PrintStream.flush()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/felix/gogo/runtime/src/main/java/org/apache/felix/gogo/runtime/threadio/ThreadPrintStream.java",
      "classTypes": [
        "PrintStream"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<java.io.PrintStream>.get()",
            "java.io.PrintStream.write(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "byte"
      ]
    },
    {
      "method": "run@119",
      "body": "/** \n * @see java.lang.Runnable#run()\n */\npublic void run(){\n  _alert.setString(Integer.toString(_time));\n  _alert.setTimeout(_time * 1000 + 5000);\n  _updateThread=new UpdateThread();\n  _updateThread.start();\n  _display.setCurrent(_alert,_form);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.toString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/JDE-Samples/com/rim/samples/device/midletdemo/MIDletDemo.java",
      "classTypes": [
        "Display",
        "Form"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.toString(int)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "start"
      ]
    },
    {
      "method": "drawVString@393",
      "body": "public void drawVString(String str,Point2D p,int anchor){\n  if (currvf == null)   return;\n  currvf.drawString(str,toX(p),toY(p),null,g);\n  this.needflush=true;\n}\n",
      "formalParam": [
        "String",
        "Point2D",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.Point2D.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.awt.geom.Point2D.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "Rectangle",
        "void",
        "Rectangle",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.Graphics.fillArc(int,int,int,int,int,int)",
              "java.awt.Graphics.drawArc(int,int,int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.Point.Point(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Graphics.fillRect(int,int,int,int)",
              "java.awt.Graphics.drawRect(int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Rectangle.Rectangle()",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.Graphics.drawChars(char[],int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()",
              "java.awt.Graphics.drawLine(int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.geom.Point2D.getX()",
              "java.awt.geom.Point2D.getY()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.BasicStroke.BasicStroke(float,int,int,float,float[],float)",
              "java.awt.Graphics2D.setStroke(java.awt.Stroke)"
            ]
          },
          {
            "calls": [
              "java.awt.BasicStroke.BasicStroke(float)",
              "java.awt.Graphics2D.setStroke(java.awt.Stroke)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hecl/midp20gui/org/graphics/Drawable.java",
      "classTypes": [
        "Color",
        "int",
        "short",
        "short",
        "short",
        "VFont",
        "int"
      ],
      "sorrformalparam": [
        [
          "Point2D",
          "Dimension",
          "int",
          "int",
          "boolean"
        ],
        [
          "int",
          "Point2D[]",
          "boolean"
        ],
        [
          "int",
          "int",
          "int",
          "int",
          "boolean"
        ],
        [
          "String",
          "Point2D",
          "int",
          "Rectangle"
        ],
        [
          "String",
          "Point2D",
          "int",
          "double",
          "double",
          "double",
          "double"
        ],
        [],
        [
          "char",
          "Point2D",
          "int"
        ],
        [
          "Point2D",
          "Point2D"
        ],
        [
          "int[]",
          "int",
          "int",
          "Point2D",
          "Dimension",
          "boolean"
        ],
        [
          "int",
          "short"
        ]
      ],
      "types": [
        "Double"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.Point2D.getX()",
            "java.awt.geom.Point2D.getY()"
          ]
        }
      ],
      "keywords": [
        "y",
        "geom"
      ]
    },
    {
      "method": "expand@132",
      "body": "public void expand(SearchOperation operation) throws Exception {\n  Session session=operation.getSession();\n  SearchRequest request=operation.getSearchRequest();\n  SearchResponse response=operation.getSearchResponse();\n  DN baseDn=operation.getDn();\n  final Set<String> keys=new LinkedHashSet<String>();\n  final Interpreter interpreter=partition.newInterpreter();\n  SearchRequest newRequest=(SearchRequest)request.clone();\n  if (getDn().matches(baseDn)) {\n    newRequest.setDn(baseDn.getRdn());\n    newRequest.setScope(SearchRequest.SCOPE_BASE);\n  }\n else {\n    newRequest.setScope(SearchRequest.SCOPE_SUB);\n  }\n  for (  EntrySource sourceRef : getSources()) {\n    final String alias=sourceRef.getAlias();\n    log.debug(\"Searching source \" + alias + \":\");\n    SearchResponse newResponse=new Pipeline(response){\n      public void add(      SearchResult result) throws Exception {\n        SourceAttributes sv=new SourceAttributes();\n        sv.set(alias,result.getAttributes());\n        interpreter.set(sv);\n        DN newDn=computeDn(interpreter);\n        Attributes newAttributes=computeAttributes(interpreter);\n        interpreter.clear();\n        SearchResult newResult=(SearchResult)result.clone();\n        newResult.setDn(newDn);\n        newResult.setAttributes(newAttributes);\n        newResult.setSourceAttributes(sv);\n        newResult.setEntryName(getName());\n        log.debug(\"New entry:\");\n        newResult.print();\n        String key=newDn.getNormalizedDn();\n        if (keys.contains(key))         return;\n        keys.add(key);\n        super.add(newResult);\n      }\n    }\n;\n    try {\n      Source source=sourceRef.getSource();\n      source.search(session,newRequest,newResponse);\n    }\n catch (    Exception e) {\n      Penrose.errorLog.error(e.getMessage(),e);\n    }\n  }\n}\n",
      "formalParam": [
        "SearchOperation"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/penrose-server/core/src/java/org/safehaus/penrose/ldap/directory/LDAPMergeEntry.java",
      "classTypes": [
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "String"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashSet<java.lang.String>.LinkedHashSet<String>()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "message",
        "lang"
      ]
    },
    {
      "method": "getDefaultJavaCharset@1081",
      "body": "/** \n * Get the default charset corresponding to the system's current default locale.  If the System property <code>mail.mime.charset</code> is set, a system charset corresponding to this MIME charset will be returned. <p>\n * @return  the default charset of the system's default locale,as a Java charset. (NOT a MIME charset)\n * @since   JavaMail 1.1\n */\npublic static String getDefaultJavaCharset(){\n  if (defaultJavaCharset == null) {\n    String mimecs=null;\n    try {\n      mimecs=System.getProperty(\"mail.mime.charset\");\n    }\n catch (    SecurityException ex) {\n    }\n    if (mimecs != null && mimecs.length() > 0) {\n      defaultJavaCharset=javaCharset(mimecs);\n      return defaultJavaCharset;\n    }\n    try {\n      defaultJavaCharset=System.getProperty(\"file.encoding\",\"8859_1\");\n    }\n catch (    SecurityException sex) {\nclass NullInputStream extends InputStream {\n        public int read(){\n          return 0;\n        }\n      }\n      InputStreamReader reader=new InputStreamReader(new NullInputStream());\n      defaultJavaCharset=reader.getEncoding();\n      if (defaultJavaCharset == null)       defaultJavaCharset=\"8859_1\";\n    }\n  }\n  return defaultJavaCharset;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.InputStreamReader.getEncoding()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.System.getProperty(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.io.InputStream.read(byte[],int,int)",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.io.InputStream.read(byte[],int,int)",
              "java.io.InputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ikvm-openjdk/build/linux-amd64/impsrc/com/sun/xml/internal/messaging/saaj/packaging/mime/internet/MimeUtility.java",
      "classTypes": [
        "int",
        "boolean",
        "Hashtable",
        "boolean",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [
          "DataHandler"
        ],
        [
          "DataSource"
        ]
      ],
      "types": [
        "String",
        "System"
      ],
      "apicalls": [
        "getEncoding",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.System.getProperty(java.lang.String,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.System.getProperty(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.System.getProperty(java.lang.String,java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.InputStreamReader.getEncoding()"
          ]
        }
      ],
      "keywords": [
        "get",
        "input"
      ]
    },
    {
      "method": "Limits_Limit_1@1550",
      "body": "@Test public void Limits_Limit_1(){\n  t(\"Limit[a sin(v)/v, v, 0]\",\"a\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra/test/src/test/java/geogebra/cas/GeoGebraCasIntegrationTest.java",
      "classTypes": [
        "CASTestLogger",
        "boolean",
        "MyArbitraryConstant",
        "GeoGebraCasInterface",
        "Kernel"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Boolean",
        "Object",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "equals",
        "integer"
      ]
    },
    {
      "method": "test_retainAllLjava_util_Collection@174",
      "body": "/** \n * @tests java.util.AbstractCollection#retainAll(java.util.Collection)\n */\npublic void test_retainAllLjava_util_Collection(){\n  final String[] removed=new String[1];\n  AbstractCollection<String> ac=new AbstractCollection<String>(){\n    @Override public Iterator<String> iterator(){\n      return new Iterator<String>(){\n        String[] values=new String[]{\"0\",\"1\",\"2\"};\n        int index;\n        public boolean hasNext(){\n          return index < values.length;\n        }\n        public String next(){\n          return values[index++];\n        }\n        public void remove(){\n          removed[index - 1]=values[index - 1];\n        }\n      }\n;\n    }\n    @Override public int size(){\n      fail(\"size should not get called\");\n      return 0;\n    }\n  }\n;\n  assertTrue(ac.retainAll(Arrays.asList(\"1\",\"2\")));\n  assertEquals(\"0\",removed[0]);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.AbstractCollection<java.lang.String>.retainAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.AbstractCollection<java.lang.String>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.AbstractCollection<java.lang.String>.containsAll(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/luni/tests/java/util/AbstractCollectionTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "List",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.AbstractCollection<java.lang.String>.retainAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "abstract",
        "collection",
        "boolean"
      ]
    },
    {
      "method": "canConsumeAnyOf@921",
      "body": "/** \n * Attempt to consume the next token if it matches one of the supplied values.\n * @param options the options for the value of the current token\n * @return true if the current token's value did match one of the suplied options, or false otherwise\n * @throws IllegalStateException if this method was called before the stream was {@link #start() started}\n */\npublic boolean canConsumeAnyOf(Iterable<String> options) throws IllegalStateException {\n  if (completed)   return false;\n  for (  String option : options) {\n    if (canConsume(option))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "Iterable<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ListIterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean",
        "String",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.substring(int,int)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Boolean.parseBoolean(java.lang.String)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          },
          {
            "calls": [
              "java.lang.Boolean.parseBoolean(java.lang.String)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ListIterator<Tau_E>.previousIndex()",
              "java.util.List<Tau_E>.listIterator(int)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ListIterator<Tau_E>.previousIndex()",
              "java.util.List<Tau_E>.listIterator(int)",
              "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
              "java.util.ListIterator<Tau_E>.next()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/modeshape/modeshape-common/src/main/java/org/modeshape/common/text/TokenStream.java",
      "classTypes": [
        "int",
        "boolean",
        "String",
        "boolean",
        "ListIterator<Token>",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String[]"
        ],
        [],
        [
          "int[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "hasNext",
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.ListIterator<Tau_E>.hasNext()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.ListIterator<Tau_E>.hasNext()",
            "java.util.ListIterator<Tau_E>.next()"
          ]
        }
      ],
      "keywords": [
        "next",
        "list",
        "iterator"
      ]
    },
    {
      "method": "read@3186",
      "body": "public void read(org.apache.thrift7.protocol.TProtocol iprot) throws org.apache.thrift7.TException {\n  org.apache.thrift7.protocol.TField field;\n  iprot.readStructBegin();\n  while (true) {\n    field=iprot.readFieldBegin();\n    if (field.type == org.apache.thrift7.protocol.TType.STOP) {\n      break;\n    }\nswitch (field.id) {\ncase 0:\n      if (field.type == org.apache.thrift7.protocol.TType.I32) {\n        this.success=iprot.readI32();\n        set_success_isSet(true);\n      }\n else {\n        org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);\n      }\n    break;\ndefault :\n  org.apache.thrift7.protocol.TProtocolUtil.skip(iprot,field.type);\n}\niprot.readFieldEnd();\n}\niprot.readStructEnd();\nvalidate();\n}\n",
      "formalParam": [
        "org.apache.thrift7.protocol.TProtocol"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.BitSet.set(int,boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "BitSet"
      ],
      "sorrformalparam": [
        [
          "abort_result"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "set"
      ],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.util.BitSet.set(int,boolean)"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "callMethods@159",
      "body": "public static void callMethods(Object object,String[] methods) throws Exception {\n  Set methodNames=new HashSet(Arrays.asList(methods));\n  Method[] classMethods=object.getClass().getMethods();\n  for (int i=0; i < classMethods.length; i++) {\n    if (methodNames.contains(classMethods[i].getName())) {\n      classMethods[i].invoke(object,new Object[classMethods[i].getParameterTypes().length]);\n    }\n  }\n}\n",
      "formalParam": [
        "Object",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet.HashSet(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class.getMethods()",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method[]"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.reflect.Method.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Set.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.reflect.Method.getName()",
              "java.util.Set.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/springfaces-v1/org.springframework.faces.mvc/src/test/java/org/springframework/faces/mvc/test/MvcFacesTestUtils.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Method"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.lang.Class.getMethods()",
            "java.lang.reflect.Method.getName()",
            "java.util.Set.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet.HashSet(java.util.Collection)",
            "java.lang.Class.getMethods()",
            "java.lang.reflect.Method.getName()",
            "java.util.Set.contains(java.lang.Object)",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "get",
        "access"
      ]
    },
    {
      "method": "update@211",
      "body": "/** \n * <p>update</p>\n * @throws java.io.IOException if any.\n * @throws org.exolab.castor.xml.MarshalException if any.\n * @throws org.exolab.castor.xml.ValidationException if any.\n */\npublic void update() throws IOException, MarshalException, ValidationException {\n  getWriteLock().lock();\n  try {\n    final File cfgFile=ConfigFileConstants.getFile(ConfigFileConstants.POLLER_CONFIG_FILE_NAME);\n    if (cfgFile.lastModified() > m_currentVersion) {\n      m_currentVersion=cfgFile.lastModified();\n      LogUtils.debugf(this,\"init: config file path: %s\",cfgFile.getPath());\n      InputStream stream=null;\n      try {\n        stream=new FileInputStream(cfgFile);\n        m_config=CastorUtils.unmarshal(PollerConfiguration.class,stream);\n      }\n  finally {\n        IOUtils.closeQuietly(stream);\n      }\n      init();\n      LogUtils.debugf(this,\"init: finished loading config file: %s\",cfgFile.getPath());\n    }\n  }\n  finally {\n    getWriteLock().unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.lastModified()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.lastModified()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              },
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.getPath()",
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.File.lastModified()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/opennms_dashboard/opennms-services/src/main/java/org/opennms/netmgt/config/PollerConfigFactory.java",
      "classTypes": [
        "PollerConfig",
        "boolean",
        "long"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "lastModified"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.lastModified()"
          ]
        },
        {
          "calls": [
            "java.io.File.lastModified()",
            "java.io.File.lastModified()",
            "java.io.File.getPath()",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.io.File.getPath()"
          ]
        }
      ],
      "keywords": [
        "file",
        "get",
        "input",
        "io",
        "string"
      ]
    },
    {
      "method": "unmarshall@35",
      "body": "public CreateSpotDatafeedSubscriptionResult unmarshall(StaxUnmarshallerContext context) throws Exception {\n  CreateSpotDatafeedSubscriptionResult createSpotDatafeedSubscriptionResult=new CreateSpotDatafeedSubscriptionResult();\n  int originalDepth=context.getCurrentDepth();\n  int targetDepth=originalDepth + 1;\n  if (context.isStartOfDocument())   targetDepth+=1;\n  while (true) {\n    XMLEvent xmlEvent=context.nextEvent();\n    if (xmlEvent.isEndDocument())     return createSpotDatafeedSubscriptionResult;\n    if (xmlEvent.isAttribute() || xmlEvent.isStartElement()) {\n      if (context.testExpression(\"spotDatafeedSubscription\",targetDepth)) {\n        createSpotDatafeedSubscriptionResult.setSpotDatafeedSubscription(SpotDatafeedSubscriptionStaxUnmarshaller.getInstance().unmarshall(context));\n        continue;\n      }\n    }\n else     if (xmlEvent.isEndElement()) {\n      if (context.getCurrentDepth() < originalDepth) {\n        return createSpotDatafeedSubscriptionResult;\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "StaxUnmarshallerContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isEndElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isAttribute()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "javax.xml.stream.events.XMLEvent.isStartElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "CreateSpotDatafeedSubscriptionResult",
      "file": "./java_projects/aws-sdk-for-android/src/com/amazonaws/services/ec2/model/transform/CreateSpotDatafeedSubscriptionResultStaxUnmarshaller.java",
      "classTypes": [
        "CreateSpotDatafeedSubscriptionResultStaxUnmarshaller"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()",
            "javax.xml.stream.events.XMLEvent.isEndElement()"
          ]
        },
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()"
          ]
        }
      ],
      "keywords": [
        "document",
        "boolean",
        "stream",
        "start",
        "xml"
      ]
    },
    {
      "method": "serialBlaster@58",
      "body": "@Test(timeOut=10000) public void serialBlaster() throws TException, InterruptedException {\n  final int loop=100 * 1000;\n  server.start();\n  mb=new ScribeMessagePublisher();\n  mb.setHostname(\"localhost\");\n  mb.setPort(TestServerStarter.port);\n  ScribeNettyImpl m=(ScribeNettyImpl)mb.build();\n  TestSimple.waitForConnectComplete(m);\n  m.setFixedCategory(\"ch\");\n  TimingAccumulator inspector=m.getInspector().getStats();\n  long success=inspector.getSuccessCount();\n  for (int i=0; i < loop; i++) {\n    m.publish((\"mmmm\" + i).getBytes());\n  }\n  while (inspector.getInFlight() != 0) {\n    Thread.sleep(100);\n  }\n  assertEquals(inspector.getSuccessCount(),success + loop);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.start()",
              "java.lang.Thread.join()",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/messaging-client-scribe/src/test/java/com/inmobi/messaging/netty/TestByteSender.java",
      "classTypes": [
        "NtMultiServer",
        "ScribeMessagePublisher"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "sleep"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "sleep"
      ]
    },
    {
      "method": "run@33",
      "body": "@Override public void run(){\n  StrategyParams params;\n  try {\n    while (true) {\nsynchronized (tasks) {\n        if (tasks.isEmpty())         break;\n        params=tasks.removeFirst();\n      }\n      Strategy strategy=(Strategy)strategyConstructor.newInstance(params);\n      setStrategy(strategy);\n      backTest();\n      PositionManager positionManager=strategy.getPositionManager();\n      int trades=positionManager.getTrades();\n      if (trades >= minTrades) {\n        double totalPL=positionManager.getTotalProfitAndLoss();\n        double profitFactor=positionManager.getProfitFactor();\n        double maxDrawdown=positionManager.getMaxDrawdown();\n        double kelly=positionManager.getKelly();\n        String tradeDistribution=strategy.getTradeDistribution();\n        Result result=new Result(params,totalPL,maxDrawdown,trades,profitFactor,kelly,tradeDistribution);\nsynchronized (results) {\n          results.add(result);\n        }\n      }\nsynchronized (remainingTasks) {\n        remainingTasks.countDown();\n      }\n    }\n  }\n catch (  Exception t) {\n    eventReport.report(t);\n    String msg=\"Encountered unexpected error while running strategy optimizer: \" + t.getMessage();\n    AppUtil.showError(t);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.CountDownLatch.countDown()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/trademaker/src/org/lifeform/optimizer/OptimizerWorker.java",
      "classTypes": [
        "LinkedList<StrategyParams>",
        "Constructor<?>",
        "CountDownLatch",
        "int",
        "List<Result>"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Throwable"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.countDown()"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.CountDownLatch.countDown()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "util",
        "throwable"
      ]
    },
    {
      "method": "toReference@139",
      "body": "/** \n * Convert from range/azimuth to latitude/longitude. Values input are in terms of multiples of the value resolution from the low value (ex: low + value * resolution).\n * @param tuples  range/azimuth values\n * @return  lat/lon values\n * @throws VisADException  tuples is null or wrong dimension\n */\npublic double[][] toReference(double[][] tuples) throws VisADException {\n  if (tuples == null || tuples.length != 2) {\n    throw new CoordinateSystemException(\"Radar2DCoordinateSystem.\" + \"toReference: tuples wrong dimension\");\n  }\n  int len=tuples[0].length;\n  double[][] value=tuples;\n  for (int i=0; i < len; i++) {\n    double rad=radlow + radres * tuples[0][i];\n    if (rad < 0.0) {\n      value[0][i]=Double.NaN;\n      value[1][i]=Double.NaN;\n    }\n else {\n      double az=azlow + azres * tuples[1][i];\n      double cosaz=Math.cos(Data.DEGREES_TO_RADIANS * az);\n      double sinaz=Math.sin(Data.DEGREES_TO_RADIANS * az);\n      value[0][i]=centlat + cosaz * rad / latscale;\n      value[1][i]=centlon + sinaz * rad / lonscale;\n    }\n  }\n  return value;\n}\n",
      "formalParam": [
        "double[][]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.cos(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Math.sin(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "float[][]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)"
            ]
          }
        ]
      ],
      "returnType": "double[][]",
      "file": "./java_projects/VisAD/src/main/java/visad/bom/Radar2DCoordinateSystem.java",
      "classTypes": [
        "double"
      ],
      "sorrformalparam": [
        [
          "float[][]"
        ]
      ],
      "types": [],
      "apicalls": [
        "sin"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.cos(double)",
            "java.lang.Math.sin(double)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "double",
        "cos"
      ]
    },
    {
      "method": "list@126",
      "body": "/** \n * Returns the list of bonded devices.\n * @return\n */\npublic String[] list(){\n  Vector<String> list=new Vector<String>();\n  Set<BluetoothDevice> devices;\n  try {\n    devices=mAdapter.getBondedDevices();\n    Object[] deviceArray=devices.toArray();\n    for (int i=0; i < devices.size(); i++) {\n      BluetoothDevice thisDevice=mAdapter.getRemoteDevice(deviceArray[i].toString());\n      list.addElement(thisDevice.getAddress());\n    }\n  }\n catch (  UnsatisfiedLinkError e) {\n  }\ncatch (  Exception e) {\n  }\n  String outgoing[]=new String[list.size()];\n  list.copyInto(outgoing);\n  return outgoing;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<java.lang.String>.Vector<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector<java.lang.String>.addElement(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector<java.lang.String>.copyInto(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.String(byte[])",
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.String.String(byte[])",
              "java.lang.String.indexOf(int)"
            ]
          }
        ]
      ],
      "returnType": "String[]",
      "file": "./java_projects/BtSerial/src/cc/arduino/btserial/BtSerial.java",
      "classTypes": [
        "boolean",
        "int",
        "BluetoothDevice",
        "Context",
        "boolean",
        "BluetoothSocket",
        "byte[]",
        "String"
      ],
      "sorrformalparam": [
        [
          "char"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "copyInto",
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<java.lang.String>.Vector<String>()",
            "java.util.Vector<java.lang.String>.addElement(java.lang.String)",
            "java.util.Vector<java.lang.String>.copyInto(java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "element",
        "vector",
        "object",
        "string",
        "util",
        "add"
      ]
    },
    {
      "method": "addData@564",
      "body": "/** \n * Annotate the current event on the top of the stack with more information. The method expects key, value pairs, so there must be an even number of parameters.\n * @param data JSON property, value pair to add to current event.\n */\npublic static void addData(String... data){\n  Tracer.get().addDataImpl(data);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal<java.util.Stack<com.google.dart.engine.metrics.Tracer.TraceEvent>>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Stack<com.google.dart.engine.metrics.Tracer.TraceEvent>"
          },
          {
            "_call": "java.util.Vector<Tau_E>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Stack<Tau_E>.peek()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.List<java.lang.String>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "None",
        "void",
        "None",
        "None",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.management.ManagementFactory.getOperatingSystemMXBean()",
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.util.Stack<com.google.dart.engine.metrics.Tracer.TraceEvent>>.get()",
              "java.util.Vector<Tau_E>.isEmpty()",
              "java.util.Stack<Tau_E>.peek()",
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.add(Tau_E)",
              "java.lang.System.currentTimeMillis()",
              "java.lang.ThreadLocal<java.lang.Long>.get()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.lang.ThreadLocal<java.lang.Long>.set(java.lang.Long)",
              "java.lang.System.currentTimeMillis()",
              "java.lang.ThreadLocal<java.lang.Long>.get()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.management.ManagementFactory.getThreadMXBean()",
              "java.lang.System.nanoTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.lang.ThreadLocal<java.lang.Long>.set(java.lang.Long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/bleeding_edge/dart/editor/tools/plugins/com.google.dart.engine/src/com/google/dart/engine/metrics/Tracer.java",
      "classTypes": [
        "boolean",
        "boolean",
        "List<String>",
        "DummyEvent",
        "long",
        "Method"
      ],
      "sorrformalparam": [
        [],
        [
          "String"
        ],
        [
          "TraceEvent",
          "EventType",
          "String"
        ],
        [
          "String"
        ],
        [],
        [],
        []
      ],
      "types": [
        "Collection",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<java.util.Stack<com.google.dart.engine.metrics.Tracer.TraceEvent>>.get()",
            "java.util.Vector<Tau_E>.isEmpty()",
            "java.util.Stack<Tau_E>.peek()",
            "java.util.Arrays.asList(T[])",
            "java.util.List<java.lang.String>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "vector",
        "local",
        "peek",
        "add",
        "boolean",
        "collection"
      ]
    },
    {
      "method": "testDueDateSpecificTime@44",
      "body": "public void testDueDateSpecificTime() throws ParseException {\n  task.setFlag(Task.FLAGS,Task.FLAG_REPEAT_AFTER_COMPLETION,false);\n  buildRRule(1,Frequency.DAILY);\n  long dayWithTime=Task.createDueDate(Task.URGENCY_SPECIFIC_DAY_TIME,new Date(110,7,1,10,4).getTime());\n  task.setValue(Task.DUE_DATE,dayWithTime);\n  long nextDayWithTime=dayWithTime + DateUtilities.ONE_DAY;\n  nextDueDate=RepeatTaskCompleteListener.computeNextDueDate(task,rrule.toIcal());\n  assertDateTimeEquals(nextDayWithTime,nextDueDate);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date(int,int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Date.Date(int,int,int,int,int,int)",
              "java.util.Date.getTime()",
              "java.util.Date.Date()",
              "java.util.Date.setHours(int)",
              "java.util.Date.setMinutes(int)",
              "java.util.Date.setSeconds(int)",
              "java.util.Date.getTime()",
              "java.util.Date.Date(long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/astrid/tests/src/com/todoroo/astrid/repeats/AdvancedRepeatTests.java",
      "classTypes": [
        "Task",
        "long",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Date"
      ],
      "apicalls": [
        "getTime"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date(int,int,int,int,int)",
            "java.util.Date.getTime()",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "long"
      ]
    },
    {
      "method": "trace@28",
      "body": "@Override public void trace(String msg,Object... arg){\n  log(Level.FINEST,msg,arg);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "ILogger",
        "void",
        "void",
        "None",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Rythm/src/main/java/com/greenlaw110/rythm/logger/JDKLogger.java",
      "classTypes": [
        "long",
        "Logger",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "Class<?>"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "String",
          "Object"
        ],
        [
          "Class"
        ],
        [
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "logp"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "logging"
      ]
    },
    {
      "method": "Hintergrund@2619",
      "body": "public Hintergrund(ImageIcon icon){\n  super();\n  if (icon != null) {\n    hgicon=icon;\n    icx=hgicon.getIconWidth() / 2;\n    icy=hgicon.getIconHeight() / 2;\n    xac1=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,0.15f);\n    xac2=AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f);\n  }\n else {\n    hgicon=null;\n  }\n  this.setDoubleBuffered(true);\n}\n",
      "formalParam": [
        "ImageIcon"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.ImageIcon.getIconWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.ImageIcon.getIconHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.JComponent.setDoubleBuffered(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "int",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Graphics2D.setPaint(java.awt.Paint)",
              "java.awt.Graphics.fillRect(int,int,int,int)",
              "javax.swing.ImageIcon.getImage()",
              "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
              "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.addAWTEventListener(java.awt.event.AWTEventListener,long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getHeight()",
              "javax.swing.JComponent.getHeight()"
            ]
          },
          {
            "calls": [
              "javax.swing.JComponent.getHeight()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Graphics2D.setComposite(java.awt.Composite)",
              "javax.swing.ImageIcon.getImage()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()",
              "java.awt.Graphics.drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)",
              "java.awt.Graphics2D.setComposite(java.awt.Composite)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.Timer.Timer(int,java.awt.event.ActionListener)",
              "javax.swing.Timer.setActionCommand(java.lang.String)",
              "javax.swing.Timer.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.close()",
              "java.lang.Class.forName(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.sql.Connection.close()",
              "java.lang.Class.forName(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/thera-pi-2/Reha/src/hauptFenster/Reha.java",
      "classTypes": [
        "int",
        "JDesktopPane",
        "boolean",
        "JLabel",
        "boolean",
        "RehaSmartDialog",
        "JXFrame",
        "Cursor",
        "ArztPanel"
      ],
      "sorrformalparam": [
        [
          "Graphics"
        ],
        [],
        [],
        [
          "Graphics"
        ],
        [],
        []
      ],
      "types": [
        "Integer",
        "Boolean"
      ],
      "apicalls": [
        "getIconHeight",
        "setDoubleBuffered"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.ImageIcon.getIconWidth()",
            "javax.swing.ImageIcon.getIconHeight()",
            "javax.swing.JComponent.setDoubleBuffered(boolean)"
          ]
        }
      ],
      "keywords": [
        "icon",
        "get",
        "integer",
        "component",
        "width"
      ]
    },
    {
      "method": "showDialog@486",
      "body": "/** \n * Displays the dialog box representing the editor.\n * @return true if it displayed okay\n */\npublic final int showDialog(){\n  this.pack();\n  setLocationRelativeTo(null);\n  this.setVisible(true);\n  return (status);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Window.pack()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Dialog.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "int",
      "file": "./java_projects/ATReference/src/org/archiviststoolkit/dialog/UserPreferencesDialog.java",
      "classTypes": [
        "JPanel",
        "JPanel"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Window.pack()",
            "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
            "java.awt.Dialog.setVisible(boolean)"
          ]
        }
      ],
      "keywords": [
        "dialog",
        "relative"
      ]
    },
    {
      "method": "cleanExit@534",
      "body": "public boolean cleanExit(){\n  if (!disableConfirmations) {\n    disableConfirmations=true;\n    for (    Bot bot : bots) {\n      if (bot.getAccountName() != null) {\n        disableConfirmations=true;\n        break;\n      }\n    }\n  }\n  boolean doExit=true;\n  if (!disableConfirmations) {\n    final String message=\"Are you sure you want to exit?\";\n    int result=JOptionPane.showConfirmDialog(this,message,\"Exit\",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);\n    if (result != JOptionPane.OK_OPTION) {\n      doExit=false;\n    }\n  }\n  WebQueue.Destroy();\n  setVisible(false);\n  while (WebQueue.IsRunning()) {\n    try {\n      Thread.sleep(50);\n    }\n catch (    Exception e) {\n    }\n  }\n  if (doExit) {\n    menuBar.savePrefs();\n    System.exit(0);\n  }\n else {\n    setVisible(true);\n  }\n  return doExit;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "_throws": [
              "java.awt.HeadlessException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Window.setVisible(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Window.setVisible(boolean)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.exit(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/RSBot/src/org/rsbot/gui/BotGUI.java",
      "classTypes": [
        "BotToolBar",
        "long",
        "int",
        "BotHome",
        "List<Bot>",
        "BotPanel"
      ],
      "sorrformalparam": [
        [],
        [
          "Bot"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "java.awt.Window.setVisible(boolean)",
            "java.lang.Thread.sleep(long)",
            "java.awt.Window.setVisible(boolean)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int,int)",
            "java.awt.Window.setVisible(boolean)",
            "java.lang.Thread.sleep(long)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "sleep",
        "lang",
        "string",
        "confirm",
        "swing"
      ]
    },
    {
      "method": "compare@462",
      "body": "/** \n * Tell if one object is less than the other.\n * @param obj2 Object to compare this nodeset to\n * @param comparator Comparator to use\n * @return See the comments below for each object type comparison \n * @throws javax.xml.transform.TransformerException\n */\npublic boolean compare(XObject obj2,Comparator comparator) throws javax.xml.transform.TransformerException {\n  boolean result=false;\n  int type=obj2.getType();\n  if (XObject.CLASS_NODESET == type) {\n    DTMIterator list1=iterRaw();\n    DTMIterator list2=((XNodeSet)obj2).iterRaw();\n    int node1;\n    java.util.Vector node2Strings=null;\n    while (DTM.NULL != (node1=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node1);\n      if (null == node2Strings) {\n        int node2;\n        while (DTM.NULL != (node2=list2.nextNode())) {\n          XMLString s2=getStringFromNode(node2);\n          if (comparator.compareStrings(s1,s2)) {\n            result=true;\n            break;\n          }\n          if (null == node2Strings)           node2Strings=new java.util.Vector();\n          node2Strings.addElement(s2);\n        }\n      }\n else {\n        int n=node2Strings.size();\n        for (int i=0; i < n; i++) {\n          if (comparator.compareStrings(s1,(XMLString)node2Strings.elementAt(i))) {\n            result=true;\n            break;\n          }\n        }\n      }\n    }\n    list1.reset();\n    list2.reset();\n  }\n else   if (XObject.CLASS_BOOLEAN == type) {\n    double num1=bool() ? 1.0 : 0.0;\n    double num2=obj2.num();\n    result=comparator.compareNumbers(num1,num2);\n  }\n else   if (XObject.CLASS_NUMBER == type) {\n    DTMIterator list1=iterRaw();\n    double num2=obj2.num();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      double num1=getNumberFromNode(node);\n      if (comparator.compareNumbers(num1,num2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else   if (XObject.CLASS_RTREEFRAG == type) {\n    XMLString s2=obj2.xstr();\n    DTMIterator list1=iterRaw();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node);\n      if (comparator.compareStrings(s1,s2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else   if (XObject.CLASS_STRING == type) {\n    XMLString s2=obj2.xstr();\n    DTMIterator list1=iterRaw();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node);\n      if (comparator.compareStrings(s1,s2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else {\n    result=comparator.compareNumbers(this.num(),obj2.num());\n  }\n  return result;\n}\n",
      "formalParam": [
        "XObject",
        "Comparator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/libcore_1/luni/src/main/java/org/apache/xpath/objects/XNodeSet.java",
      "classTypes": [
        "NotEqualComparator",
        "LessThanOrEqualComparator",
        "EqualComparator",
        "LessThanComparator",
        "GreaterThanOrEqualComparator",
        "GreaterThanComparator",
        "long"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "object"
      ]
    },
    {
      "method": "getAttributeName@92",
      "body": "public final Attributes.Name getAttributeName(String attributeName){\n  for (Iterator<?> iter=mainAttributeNames.iterator(); iter.hasNext(); ) {\n    Attributes.Name an=(Attributes.Name)iter.next();\n    if (an.toString().equals(attributeName)) {\n      return an;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<Tau_E>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<Tau_E>.iterator()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "Attributes.Name",
      "file": "./java_projects/gluegen/src/java/com/jogamp/common/util/JogampVersion.java",
      "classTypes": [
        "String",
        "int",
        "Attributes.Name"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Set",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<Tau_E>.iterator()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "next",
        "util",
        "string",
        "iterator",
        "object"
      ]
    },
    {
      "method": "deleteSlot@80",
      "body": "public synchronized void deleteSlot(int slot){\n  if (slot >= getSize()) {\n    warn(\"deleteSlot(): slot=\" + slot + \" >= size=\"+ getSize(),true);\n    return;\n  }\n  this.slots.removeElementAt(slot);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Vector<Tau_E>.removeElementAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "String",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.elements()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.get(int)",
              "java.util.Vector<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.elements()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.elements()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.removeElementAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.elements()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()",
              "java.util.Enumeration<Tau_E>.nextElement()",
              "java.util.Enumeration<Tau_E>.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Henshin-Editor/de.tub.tfs.agg/src/agg/attribute/view/impl/SlotSequence.java",
      "classTypes": [
        "int",
        "long",
        "Vector<Slot>",
        "int",
        "long"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Vector",
        "Integer"
      ],
      "apicalls": [
        "size",
        "removeElementAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.size()",
            "java.util.Vector<Tau_E>.removeElementAt(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "element",
        "size",
        "util",
        "vector"
      ]
    },
    {
      "method": "over@994",
      "body": "public static Complex over(Complex a,Complex b){\n  Complex c=new Complex(0.0D,0.0D);\n  if (Complex.infOption && !a.isInfinite() && b.isInfinite())   return c;\n  double denom=0.0D, ratio=0.0D;\n  if (a.isZero()) {\n    if (b.isZero()) {\n      c.real=Double.NaN;\n      c.imag=Double.NaN;\n    }\n else {\n      c.real=0.0D;\n      c.imag=0.0D;\n    }\n  }\n else {\n    if (Math.abs(b.real) >= Math.abs(b.imag)) {\n      ratio=b.imag / b.real;\n      denom=b.real + b.imag * ratio;\n      c.real=(a.real + a.imag * ratio) / denom;\n      c.imag=(a.imag - a.real * ratio) / denom;\n    }\n else {\n      ratio=b.real / b.imag;\n      denom=b.real * ratio + b.imag;\n      c.real=(a.real * ratio + a.imag) / denom;\n      c.imag=(a.imag * ratio - a.real) / denom;\n    }\n  }\n  return c;\n}\n",
      "formalParam": [
        "Complex",
        "Complex"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              },
              {
                "_call": "java.lang.Math.abs(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "double"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Complex",
        "Complex",
        "void",
        "void",
        "Complex",
        "Complex"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.toRadians(double)",
              "java.lang.Math.cos(double)",
              "java.lang.Math.sin(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.sin(double)",
              "java.lang.Math.cos(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(double)"
            ]
          }
        ]
      ],
      "returnType": "Complex",
      "file": "./java_projects/flanagan/src/main/java/flanagan/complex/Complex.java",
      "classTypes": [
        "double",
        "char",
        "double",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "double",
          "Complex"
        ],
        [
          "Complex"
        ],
        [
          "double",
          "double"
        ],
        [
          "double",
          "double"
        ],
        [
          "Complex"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)",
            "java.lang.Math.abs(double)"
          ]
        }
      ],
      "keywords": [
        "double"
      ]
    },
    {
      "method": "setRevertValue@93",
      "body": "@Override public void setRevertValue(Shape oldValue){\n  if (oldValue != null) {\n    _revertValue=oldValue.clone();\n  }\n else {\n    _revertValue=null;\n  }\n  if (logger.isLoggable(Level.FINE)) {\n    logger.fine(\"Sets revert value to \" + _revertValue);\n  }\n}\n",
      "formalParam": [
        "Shape"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.fine(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.util.logging.Logger.fine(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexographicalengine/src/main/java/org/openflexo/fge/view/widget/FIBShapeSelector.java",
      "classTypes": [
        "Polygon",
        "FileResource"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Logger"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.util.logging.Logger.fine(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "loggable",
        "logging"
      ]
    },
    {
      "method": "testDecodeEntryChangeControlSuccess@50",
      "body": "/** \n * Test the decoding of a EntryChangeControl\n */\n@Test public void testDecodeEntryChangeControlSuccess() throws Exception {\n  ByteBuffer bb=ByteBuffer.allocate(0x0D);\n  bb.put(new byte[]{0x30,0x0B,0x0A,0x01,0x08,0x04,0x03,'a','=','b',0x02,0x01,0x10});\n  bb.flip();\n  EntryChangeDecorator decorator=new EntryChangeDecorator(codec);\n  EntryChange entryChange=(EntryChange)decorator.decode(bb.array());\n  assertEquals(ChangeType.MODDN,entryChange.getChangeType());\n  assertEquals(\"a=b\",entryChange.getPreviousDn().toString());\n  assertEquals(16,entryChange.getChangeNumber());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.allocate(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.put(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.Buffer.flip()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.ByteBuffer.array()",
              "java.nio.Buffer.flip()",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.ByteBuffer.array()",
              "java.nio.Buffer.flip()",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.Buffer.flip()",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/directory-shared/ldap/codec/core/src/test/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Byte",
        "Integer"
      ],
      "apicalls": [
        "allocate",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.allocate(int)",
            "java.nio.ByteBuffer.put(byte[])",
            "java.nio.Buffer.flip()"
          ]
        }
      ],
      "keywords": [
        "nio"
      ]
    },
    {
      "method": "CheckBoxInterpolateImage@1731",
      "body": "public CheckBoxInterpolateImage(){\n  super(new FlowLayout(FlowLayout.LEFT));\n  checkbox=new JCheckBox();\n  checkbox.addItemListener(this);\n  add(checkbox);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JCheckBox.JCheckBox()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          }
        ]
      },
      "sorrreturntype": [
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [
          "Object[]"
        ]
      ],
      "types": [
        "ItemListener"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JCheckBox.JCheckBox()",
            "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "java.awt.Container.add(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "j",
        "abstract",
        "add",
        "item",
        "check",
        "listener",
        "container"
      ]
    },
    {
      "method": "greetMeSometime@45",
      "body": "public String greetMeSometime(String me){\n  LOG.info(\"Executing operation greetMeSometime\");\n  System.out.println(\"Executing operation greetMeSometime\\n\");\n  return \"How are you \" + me;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.logging.Logger.info(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/litle-sdk-for-java/lib/apache-cxf-2.5.2/samples/jaxws_async/src/main/java/demo/hw/server/GreeterImpl.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.info(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println"
      ]
    },
    {
      "method": "CreateRelationalTableAction@57",
      "body": "public CreateRelationalTableAction(){\n  super(TITLE);\n  setImageDescriptor(UiPlugin.getDefault().getImageDescriptor(UiConstants.Images.NEW_TABLE_ICON));\n  Set<String> unsortedDatatypes=DataTypeManager.getAllDataTypeNames();\n  datatypes=new ArrayList<String>();\n  String[] sortedStrings=unsortedDatatypes.toArray(new String[unsortedDatatypes.size()]);\n  Arrays.sort(sortedStrings);\n  for (  String dType : sortedStrings) {\n    datatypes.add(dType);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          },
          {
            "_call": "java.util.Arrays.sort(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.relational.ui/src/org/teiid/designer/relational/ui/actions/CreateRelationalTableAction.java",
      "classTypes": [
        "String",
        "Collection<String>",
        "IFile"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.Set<java.lang.String>.toArray(T[])",
            "java.util.Arrays.sort(java.lang.Object[])",
            "java.util.Collection<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "array",
        "arrays"
      ]
    },
    {
      "method": "close@59",
      "body": "public void close(){\n  statusCleanupTimer.cancel();\n  statusCleanupTimer.purge();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Timer.cancel()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Timer.purge()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "List<Long>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
              "java.util.Set<java.lang.Long>.add(java.lang.Long)",
              "java.util.ArrayList<java.lang.Long>.ArrayList<Long>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Timer.Timer(java.lang.String,boolean)",
              "java.util.Timer.schedule(java.util.TimerTask,long,long)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/blur/src/blur-core/src/main/java/com/nearinfinity/blur/manager/status/QueryStatusManager.java",
      "classTypes": [
        "Timer",
        "Object",
        "long",
        "Log",
        "ConcurrentHashMap<QueryStatus,Object>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        []
      ],
      "types": [
        "Timer",
        "Integer"
      ],
      "apicalls": [
        "purge",
        "cancel"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Timer.cancel()",
            "java.util.Timer.purge()"
          ]
        }
      ],
      "keywords": [
        "cancel",
        "integer",
        "purge",
        "util",
        "timer"
      ]
    },
    {
      "method": "testEventGenerationDelayedMaxItems@75",
      "body": "@Test public void testEventGenerationDelayedMaxItems() throws DroolsParserException, IOException, Exception {\n  final Reader reader=new InputStreamReader(getClass().getResourceAsStream(TEST_RULE_FILE));\n  final RuleBase ruleBase=loadRuleBase(reader);\n  final WorkingMemory wm=ruleBase.newStatefulSession();\n  final SimpleEventGenerator myGenerator;\n  myGenerator=new SimpleEventGenerator(wm,new SimpleEventListener(wm));\n  myGenerator.addDelayedEventSource(\"Conveyor1\",new Event(EventType.CUSTOM,null),PseudoSessionClock.timeInSeconds(4),PseudoSessionClock.timeInSeconds(6),PseudoSessionClock.timeInMinutes(2),0,10);\n  myGenerator.generate();\n  assertEquals(wm.getQueryResults(\"all inserted events\").size(),10);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/drools/drools-compiler/src/test/java/org/drools/integrationtests/eventgenerator/SimpleEventGeneratorTest.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)"
          ]
        }
      ],
      "keywords": [
        "io",
        "reader",
        "string"
      ]
    },
    {
      "method": "getCompressionLevel@87",
      "body": "public static int getCompressionLevel(String command){\n  int compressionLevel=-1;\n  try {\n    compressionLevel=Integer.parseInt(command.substring(1));\n  }\n catch (  Exception e) {\n    compressionLevel=-1;\n  }\n  if (compressionLevel > 0 && compressionLevel < 6) {\nswitch (compressionLevel) {\ncase 1:\n      compressionLevel=CompressionLevel.COMPRESSION_LEVEL_FAST;\n    break;\ncase 2:\n  compressionLevel=CompressionLevel.COMPRESSION_LEVEL_NORMAL;\nbreak;\ncase 3:\ncompressionLevel=CompressionLevel.COMPRESSION_LEVEL_HIGH;\nbreak;\ncase 4:\ncompressionLevel=CompressionLevel.COMPRESSION_LEVEL_EXTRA_HIGH;\nbreak;\ncase 5:\ncompressionLevel=CompressionLevel.COMPRESSION_LEVEL_INSANE;\nbreak;\n}\n}\nreturn compressionLevel;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.substring(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/musique/dependencies/jmac/src/main/java/davaguine/jmac/core/jmacu.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.substring(int)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "substring"
      ]
    },
    {
      "method": "generate@78",
      "body": "@Override public String generate(TreeLogger logger,GeneratorContext context,String typeName) throws UnableToCompleteException {\n  this.logger=logger;\n  this.context=context;\n  this.classLoader=Thread.currentThread().getContextClassLoader();\n  if (!isFirstPass()) {\n    return null;\n  }\n  JClassType cwType=null;\n  try {\n    cwType=context.getTypeOracle().getType(ContentWidget.class.getName());\n  }\n catch (  NotFoundException e) {\n    logger.log(TreeLogger.ERROR,\"Cannot find ContentWidget class\",e);\n    throw new UnableToCompleteException();\n  }\n  JClassType[] types=cwType.getSubtypes();\n  for (  JClassType type : types) {\n    generateRawFiles(type);\n    generateSourceFiles(type);\n  }\n  String[] themes=new String[]{Showcase.THEME};\n  for (  String theme : themes) {\n    String styleDefsLTR=getStyleDefinitions(theme,false);\n    String styleDefsRTL=getStyleDefinitions(theme,true);\n    String outDirLTR=ShowcaseConstants.DST_SOURCE_STYLE + theme + \"/\";\n    String outDirRTL=ShowcaseConstants.DST_SOURCE_STYLE + theme + \"_rtl/\";\n    for (    JClassType type : types) {\n      generateStyleFiles(type,styleDefsLTR,outDirLTR);\n      generateStyleFiles(type,styleDefsRTL,outDirRTL);\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "TreeLogger",
        "GeneratorContext",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/netnumeri/lib/gwt-2.5.0.rc1/samples/Showcase/src/com/google/gwt/sample/showcase/generator/ShowcaseGenerator.java",
      "classTypes": [
        "String[]",
        "GeneratorContext",
        "Set<String>",
        "ClassLoader",
        "TreeLogger"
      ],
      "sorrformalparam": [],
      "types": [
        "Class",
        "String",
        "Thread"
      ],
      "apicalls": [
        "currentThread",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "context",
        "loader",
        "thread"
      ]
    },
    {
      "method": "createEmptyDocument@139",
      "body": "@Override public Document createEmptyDocument(){\n  Document result=null;\n  try {\n    result=DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n  }\n catch (  final ParserConfigurationException e) {\n    throw new RuntimeException(\"Should not reach this point\");\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.newDocument()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          }
        ]
      },
      "sorrreturntype": [
        "Document",
        "Document",
        "Document"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "javax.xml.parsers.DocumentBuilder.newDocument()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "javax.xml.parsers.DocumentBuilder.newDocument()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.File.File(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.File)"
            ]
          }
        ]
      ],
      "returnType": "Document",
      "file": "./java_projects/AtoCC/Core/util.bundle/src/de/hszg/atocc/core/util/internal/XmlUtilServiceImpl.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "Document"
        ],
        [
          "Document"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "newDocument"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "testInvalidGATKFileIntervalHandling@130",
      "body": "@Test(expectedExceptions=UserException.class,dataProvider=\"invalidIntervalTestData\") public void testInvalidGATKFileIntervalHandling(GenomeAnalysisEngine testEngine,GenomeLocParser genomeLocParser,String contig,int intervalStart,int intervalEnd) throws Exception {\n  File gatkIntervalFile=createTempFile(\"testInvalidGATKFileIntervalHandling\",\".intervals\",String.format(\"%s:%d-%d\",contig,intervalStart,intervalEnd));\n  List<IntervalBinding<Feature>> intervalArgs=new ArrayList<IntervalBinding<Feature>>(1);\n  intervalArgs.add(new IntervalBinding<Feature>(gatkIntervalFile.getAbsolutePath()));\n  testEngine.loadIntervals(intervalArgs,IntervalSetRule.UNION);\n}\n",
      "formalParam": [
        "GenomeAnalysisEngine",
        "GenomeLocParser",
        "String",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.deleteOnExit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.PrintWriter(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.close()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "java.io.File.deleteOnExit()",
              "java.io.PrintWriter.PrintWriter(java.io.File)",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.close()",
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Torrent-Variant-Caller-stable/public/java/test/org/broadinstitute/sting/gatk/GenomeAnalysisEngineUnitTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "GenomeAnalysisEngine",
          "GenomeLocParser",
          "String",
          "int",
          "int"
        ]
      ],
      "types": [
        "IOException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.deleteOnExit()",
            "java.io.PrintWriter.PrintWriter(java.io.File)",
            "java.io.PrintWriter.println(java.lang.String)",
            "java.io.PrintWriter.close()",
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": [
        "file",
        "delete",
        "format",
        "writer"
      ]
    },
    {
      "method": "addToContainer@54",
      "body": "public void addToContainer(final Object c,final Object constraints){\n  logger.debug(\"Adding to TipiTabbedQuestionList container:   \" + c + \" constraints: \"+ constraints);\n  runSyncInEventThread(new Runnable(){\n    public void run(){\n      ((Container)getContainer()).add((Component)c,BorderLayout.CENTER);\n    }\n  }\n);\n}\n",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)",
                "_throws": [
                  "java.lang.InterruptedException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.SwingUtilities.isEventDispatchThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Runnable.run()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.SwingUtilities.isEventDispatchThread()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "javax.swing.SwingUtilities.isEventDispatchThread()",
              "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JPanel.JPanel()",
              "java.awt.BorderLayout.BorderLayout()",
              "java.awt.Container.setLayout(java.awt.LayoutManager)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/navajo/tipi/com.dexels.navajo.tipi.swing/src/com/dexels/navajo/tipi/components/swingimpl/TipiQuestionGroup.java",
      "classTypes": [
        "long",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "Runnable"
        ],
        []
      ],
      "types": [
        "InvocationTargetException",
        "Boolean"
      ],
      "apicalls": [
        "run",
        "isEventDispatchThread"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "java.lang.Runnable.run()"
          ]
        },
        {
          "calls": [
            "javax.swing.SwingUtilities.isEventDispatchThread()",
            "javax.swing.SwingUtilities.invokeAndWait(java.lang.Runnable)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "run",
        "boolean",
        "interrupted",
        "invoke"
      ]
    },
    {
      "method": "getMaximumSize@204",
      "body": "public Dimension getMaximumSize(JComponent c){\n  if (((JMenu)menuItem).isTopLevelMenu() == true) {\n    Dimension d=c.getPreferredSize();\n    return new Dimension(d.width,Short.MAX_VALUE);\n  }\n  return null;\n}\n",
      "formalParam": [
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "javax.swing.JMenu.isTopLevelMenu()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.getPreferredSize()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Dimension"
              },
              {
                "_call": "java.awt.Dimension.Dimension(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "$NOT$java.awt.event.InputEvent.isConsumed()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getParent()",
              "javax.swing.JMenu.getPopupMenu()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          },
          {
            "calls": [
              "java.awt.Component.getParent()",
              "java.awt.Component.getParent()",
              "javax.swing.JMenu.getPopupMenu()",
              "javax.swing.JPopupMenu.getSubElements()"
            ]
          }
        ]
      ],
      "returnType": "Dimension",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/basic/BasicMenuUI.java",
      "classTypes": [
        "boolean",
        "MenuListener",
        "Component",
        "boolean",
        "boolean",
        "int",
        "JMenu",
        "boolean",
        "JMenu",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ],
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "Boolean",
        "JMenu",
        "Integer"
      ],
      "apicalls": [
        "getPreferredSize"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JMenu.isTopLevelMenu()"
          ]
        },
        {
          "calls": [
            "javax.swing.JMenu.isTopLevelMenu()",
            "javax.swing.JComponent.getPreferredSize()",
            "java.awt.Dimension.Dimension(int,int)"
          ]
        }
      ],
      "keywords": [
        "preferred",
        "awt",
        "swing",
        "j",
        "top",
        "size"
      ]
    },
    {
      "method": "testGetRegisteredProviders@29",
      "body": "/** \n * Test for SyncFactory.getRegisteredProviders(). Regression for HARMONY-6345.\n * @throws SyncFactoryException\n */\npublic void testGetRegisteredProviders() throws SyncFactoryException {\n  Enumeration<SyncProvider> providers=SyncFactory.getRegisteredProviders();\n  while (providers.hasMoreElements()) {\n    SyncFactory.getInstance(providers.nextElement().getProviderID());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.nextElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.sql.rowset.spi.SyncProvider"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/sql/src/test/java/org/apache/harmony/sql/tests/internal/rowset/SyncFactoryTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Enumeration"
      ],
      "apicalls": [
        "nextElement",
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()",
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.nextElement()",
            "java.util.Enumeration<javax.sql.rowset.spi.SyncProvider>.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "element",
        "elements",
        "next"
      ]
    },
    {
      "method": "generateTokenNameCache@378",
      "body": "/** \n * Method to generate a map of token type names, keyed by their token type values.\n * @param tokenTypeInterface The *TokenTypes interface (or implementor of said interface).\n * @return The generated map.\n */\npublic static Map generateTokenNameCache(Class tokenTypeInterface){\n  final Field[] fields=tokenTypeInterface.getFields();\n  Map cache=new HashMap((int)(fields.length * .75) + 1);\n  for (int i=0; i < fields.length; i++) {\n    final Field field=fields[i];\n    if (Modifier.isStatic(field.getModifiers())) {\n      try {\n        cache.put(field.get(null),field.getName());\n      }\n catch (      Throwable ignore) {\n      }\n    }\n  }\n  return cache;\n}\n",
      "formalParam": [
        "Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getFields()",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field[]"
          },
          {
            "_call": "java.util.HashMap.HashMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.reflect.Field.getModifiers()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.reflect.Modifier.isStatic(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.reflect.Field.get(java.lang.Object)",
                "_throws": [
                  "java.lang.IllegalArgumentException",
                  "java.lang.IllegalAccessException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.lang.reflect.Field.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "Map",
      "file": "./java_projects/hibernate-orm/hibernate-core/src/main/java/org/hibernate/hql/internal/ast/util/ASTUtil.java",
      "classTypes": [
        "List",
        "FilterPredicate"
      ],
      "sorrformalparam": [
        [
          "AST"
        ],
        [
          "AST"
        ]
      ],
      "types": [
        "Integer",
        "IllegalArgumentException",
        "HashMap",
        "Map"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getFields()",
            "java.util.HashMap.HashMap(int)",
            "java.lang.reflect.Field.getModifiers()",
            "java.lang.reflect.Modifier.isStatic(int)",
            "java.lang.reflect.Field.get(java.lang.Object)",
            "java.lang.reflect.Field.getName()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getFields()",
            "java.util.HashMap.HashMap(int)",
            "java.lang.reflect.Field.getModifiers()",
            "java.lang.reflect.Modifier.isStatic(int)"
          ]
        }
      ],
      "keywords": [
        "fields",
        "field",
        "string"
      ]
    },
    {
      "method": "checkPropertyAccess@301",
      "body": "@Override public void checkPropertyAccess(String property){\n  checkAccess();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.currentThread()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Thread"
              },
              {
                "_call": "java.lang.Thread.getThreadGroup()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ThreadGroup"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Thread.dumpStack()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()",
              "$NOT$java.lang.Thread.getThreadGroup()"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()",
              "java.lang.Thread.dumpStack()"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getThreadGroup()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/SpoutcraftAPI/src/main/java/org/spoutcraft/spoutcraftapi/addon/SimpleSecurityManager.java",
      "classTypes": [
        "boolean",
        "ThreadGroup",
        "HashSet<String>",
        "double",
        "HashMap<String,HashSet<String>>",
        "Thread"
      ],
      "sorrformalparam": [
        [
          "Thread"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "dumpStack",
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getThreadGroup()",
            "java.lang.Thread.dumpStack()"
          ]
        },
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getThreadGroup()"
          ]
        }
      ],
      "keywords": [
        "get",
        "thread",
        "lang"
      ]
    },
    {
      "method": "testEmptyObjectWrite@17",
      "body": "public void testEmptyObjectWrite() throws Exception {\n  StringWriter sw=new StringWriter();\n  JsonGenerator gen=new JsonFactory().createJsonGenerator(sw);\n  JsonStreamContext ctxt=gen.getOutputContext();\n  assertTrue(ctxt.inRoot());\n  assertFalse(ctxt.inArray());\n  assertFalse(ctxt.inObject());\n  assertEquals(0,ctxt.getEntryCount());\n  assertEquals(0,ctxt.getCurrentIndex());\n  gen.writeStartObject();\n  ctxt=gen.getOutputContext();\n  assertFalse(ctxt.inRoot());\n  assertFalse(ctxt.inArray());\n  assertTrue(ctxt.inObject());\n  assertEquals(0,ctxt.getEntryCount());\n  assertEquals(0,ctxt.getCurrentIndex());\n  gen.writeEndObject();\n  ctxt=gen.getOutputContext();\n  assertTrue(ctxt.inRoot());\n  assertFalse(ctxt.inArray());\n  assertFalse(ctxt.inObject());\n  assertEquals(1,ctxt.getEntryCount());\n  assertEquals(0,ctxt.getCurrentIndex());\n  gen.close();\n  String docStr=sw.toString();\n  JsonParser jp=createParserUsingReader(docStr);\n  assertEquals(JsonToken.START_OBJECT,jp.nextToken());\n  assertEquals(JsonToken.END_OBJECT,jp.nextToken());\n  assertEquals(null,jp.nextToken());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.math.BigDecimal.BigDecimal(java.lang.String)",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jackson-core/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "StringWriter",
        "String"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "io",
        "writer",
        "string"
      ]
    },
    {
      "method": "hasUniqueIDNode@119",
      "body": "/** \n * Checks whether the Semantic Graph contains a node with this unique sesame id (the id that is stored in a separate target node)\n * @param id Sesame ID\n * @return true if the graph contains this node\n */\npublic boolean hasUniqueIDNode(String id){\n  for (Iterator it=getNodes(); it.hasNext(); ) {\n    SGNode node=(SGNode)it.next();\n    if (id.equals(node.getUniqueID()))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "ArrayList<SGNode>",
        "SGNode",
        "None",
        "ArrayList<SGEdge>",
        "void",
        "ArrayList<SGNode>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.Integer.toString(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/RDF2TextTranslator/src/NLGService/WYSIWYM/model/SemanticGraph.java",
      "classTypes": [
        "int",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "int"
        ],
        [
          "SGNode"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "next"
      ]
    },
    {
      "method": "testPagePercentDeclaration@228",
      "body": "/** \n * Test page with a percent declaration\n * @throws Exception\n */\npublic void testPagePercentDeclaration() throws Exception {\n  parseTest(\"@page {testing: 10%;}\" + EOL);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/studio3/tests/com.aptana.editor.css.tests/src/com/aptana/editor/css/parsing/CSSParserTest.java",
      "classTypes": [
        "String",
        "boolean",
        "CSSFlexScanner"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "CheckBoxInterpolateImage@1731",
      "body": "public CheckBoxInterpolateImage(){\n  super(new FlowLayout(FlowLayout.LEFT));\n  checkbox=new JCheckBox();\n  checkbox.addItemListener(this);\n  add(checkbox);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JCheckBox.JCheckBox()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          }
        ]
      },
      "sorrreturntype": [
        "JPanel",
        "void",
        "None",
        "None",
        "JPanel",
        "None",
        "JPanel",
        "void",
        "JPanel",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          },
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()",
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.FlowLayout.FlowLayout(int)",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JTextField.addActionListener(java.awt.event.ActionListener)",
              "java.awt.Component.addFocusListener(java.awt.event.FocusListener)",
              "java.awt.BorderLayout.BorderLayout()",
              "java.awt.Container.setLayout(java.awt.LayoutManager)",
              "java.awt.Container.add(java.awt.Component,java.lang.Object)",
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.setEnabled(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JSlider.removeChangeListener(javax.swing.event.ChangeListener)",
              "javax.swing.JSlider.setValue(int)",
              "javax.swing.JSlider.addChangeListener(javax.swing.event.ChangeListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "Object[]",
        "CornerPointsPanel",
        "Object[]",
        "long",
        "BackgroundImagePanel",
        "PointSizePanel"
      ],
      "sorrformalparam": [
        [
          "Object[]"
        ],
        [
          "ActionEvent"
        ],
        [],
        [
          "Application",
          "PropertiesPanel"
        ],
        [
          "Object[]"
        ],
        [],
        [
          "Object[]"
        ],
        [],
        [
          "Object[]"
        ],
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "AbstractButton",
        "Container"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JCheckBox.JCheckBox()",
            "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
            "java.awt.Container.add(java.awt.Component)"
          ]
        }
      ],
      "keywords": [
        "awt",
        "button",
        "abstract"
      ]
    },
    {
      "method": "getEnabledACs@514",
      "body": "public List<NestedApplCond> getEnabledACs(){\n  final List<NestedApplCond> vars=new Vector<NestedApplCond>();\n  for (int i=0; i < this.itsACs.size(); i++) {\n    NestedApplCond ac=this.itsACs.get(i);\n    if (ac.isEnabled())     vars.add(ac);\n  }\n  return vars;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector<Tau_E>.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<Tau_E>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "java.util.List<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "List<String>",
        "List<NestedApplCond>",
        "void",
        "boolean",
        "NestedApplCond"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<java.lang.String>.Vector<String>()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector<Tau_E>.Vector()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.add(Tau_E)",
              "java.util.List<Tau_E>.addAll(java.util.Collection)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()"
            ]
          }
        ]
      ],
      "returnType": "List<NestedApplCond>",
      "file": "./java_projects/Henshin-Editor/de.tub.tfs.agg/src/agg/xt_basis/NestedApplCond.java",
      "classTypes": [
        "String",
        "OrdinaryMorphism",
        "NestedApplCond",
        "Formula",
        "boolean",
        "List<NestedApplCond>",
        "boolean",
        "String"
      ],
      "sorrformalparam": [
        [
          "Graph"
        ],
        [],
        [],
        [],
        [],
        [
          "int"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "add",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector<Tau_E>.Vector()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.get(int)",
            "java.util.List<Tau_E>.add(Tau_E)",
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "list",
        "integer"
      ]
    },
    {
      "method": "setHighlightrow@703",
      "body": "/** \n * Set the row to highlight\n * @param highlightRowIn the row to highlight or -1 for no highlight\n */\npublic void setHighlightrow(String highlightRowIn){\n  if ((highlightRowIn == null) || highlightRowIn.equals(\"\")) {\n    highlightRow=-1;\n  }\n else {\n    try {\n      highlightRow=Integer.parseInt(highlightRowIn);\n    }\n catch (    NumberFormatException nfe) {\n      highlightRow=-1;\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Corisco/dspace-1.6.2-src-release-corisco-1/dspace-jspui/dspace-jspui-api/src/main/java/org/dspace/app/webui/jsptag/BrowseListTag.java",
      "classTypes": [
        "int",
        "Logger",
        "String",
        "String",
        "BrowseItem[]",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "exception"
      ]
    },
    {
      "method": "testSubscriptionMessageBuilderScenarioTwo@89",
      "body": "public void testSubscriptionMessageBuilderScenarioTwo(){\n  String addressUrl=\"http://synapse.test.com/eventing/subscriptions\";\n  String message=\"<wse:Unsubscribe xmlns:wse=\\\"http://schemas.xmlsoap.org/ws/2004/08/eventing\\\"/>\";\n  try {\n    MessageContext msgCtx=TestUtils.getAxis2MessageContext(message,null).getAxis2MessageContext();\n    msgCtx.setTo(new EndpointReference(addressUrl));\n    String id=addIdentifierHeader(msgCtx);\n    SynapseSubscription sub=SubscriptionMessageBuilder.createUnSubscribeMessage(msgCtx);\n    assertEquals(id,sub.getId());\n    assertEquals(addressUrl,sub.getAddressUrl());\n    assertNull(SubscriptionMessageBuilder.getErrorCode());\n    assertNull(SubscriptionMessageBuilder.getErrorReason());\n    assertNull(SubscriptionMessageBuilder.getErrorSubCode());\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    fail(\"Error while constructing the sample subscription request: \" + e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date(long)",
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.setTime(java.util.Date)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date(long)",
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.setTime(java.util.Date)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/synapse/2.1.0-wso2v6/modules/core/src/test/java/org/apache/synapse/eventing/builders/MessageBuilderTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "print",
        "get",
        "lang",
        "string",
        "stack",
        "trace",
        "throwable"
      ]
    },
    {
      "method": "getChildren@34",
      "body": "public Vector getChildren(){\n  Vector v=new Vector();\n  v.addElement(expr);\n  for (Enumeration e=predicates.elements(); e.hasMoreElements(); )   v.addElement(e.nextElement());\n  return v;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration.nextElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Vector",
      "file": "./java_projects/FormDesigner/OpenRosa/src/org/openrosa/client/jr/xpath/parser/ast/ASTNodeFilterExpr.java",
      "classTypes": [
        "ASTNodeAbstractExpr",
        "Vector"
      ],
      "sorrformalparam": [],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "nextElement",
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "object",
        "vector",
        "enumeration",
        "util"
      ]
    },
    {
      "method": "validRangeWithMultipleWhereExpiredEntitlementOverlaps@231",
      "body": "@Test public void validRangeWithMultipleWhereExpiredEntitlementOverlaps(){\n  Consumer c=mockConsumer(PRODUCT_1);\n  Calendar cal=Calendar.getInstance();\n  Date now=cal.getTime();\n  DateRange range1=rangeRelativeToDate(now,-4,2);\n  DateRange range2=rangeRelativeToDate(now,-7,-3);\n  c.addEntitlement(mockEntitlement(c,PRODUCT_1,range2,PRODUCT_1));\n  c.addEntitlement(mockEntitlement(c,PRODUCT_1,range1,PRODUCT_1));\n  List<Entitlement> ents=new LinkedList<Entitlement>(c.getEntitlements());\n  when(entCurator.listByConsumerAndDate(eq(c),any(Date.class))).thenReturn(ents);\n  ComplianceStatus status=compliance.getStatus(c,now);\n  ConsumerInstalledProductEnricher calculator=new ConsumerInstalledProductEnricher(c,status,compliance);\n  Product p=new Product(PRODUCT_1,\"Awesome Product\");\n  DateRange validRange=calculator.getValidDateRange(p);\n  assertEquals(range2.getStartDate(),validRange.getStartDate());\n  assertEquals(range1.getEndDate(),validRange.getEndDate());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Calendar.getInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Calendar"
          },
          {
            "_call": "java.util.Calendar.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.getTime()",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.getTime()",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.getTime()",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.getTime()",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.util.Date.Date()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.util.Calendar.getTime()",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/candlepin/src/test/java/org/candlepin/resource/util/InstalledProductStatusCalculatorTest.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "ComplianceRules",
        "RulesCurator",
        "EntitlementCurator",
        "JsRulesProvider",
        "Owner"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Collection"
      ],
      "apicalls": [
        "getInstance"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Calendar.getInstance()",
            "java.util.Calendar.getTime()",
            "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "date",
        "calendar",
        "get",
        "time"
      ]
    },
    {
      "method": "removeAll@108",
      "body": "public boolean removeAll(Collection collection){\n  boolean ret=true;\n  for (Iterator it=collection.iterator(); it.hasNext(); ) {\n    Object o=it.next();\n    ret=remove(o) & ret;\n  }\n  return ret;\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.ArrayList.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "boolean",
        "boolean",
        "int",
        "None",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Collections.sort(java.util.List)",
              "java.util.Iterator.hasNext()",
              "java.util.Collections.sort(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Collections.sort(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Collections.sort(java.util.List)",
              "java.util.Iterator.hasNext()",
              "java.util.Collections.sort(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/twitter_nlp/mallet-2.0.6/src/cc/mallet/grmm/types/HashVarSet.java",
      "classTypes": [
        "int",
        "THashSet",
        "ArrayList",
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "Collection"
        ],
        [
          "Object",
          "boolean"
        ],
        [],
        [
          "Variable[]"
        ],
        []
      ],
      "types": [],
      "apicalls": [
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.ArrayList.remove(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "remove"
      ]
    },
    {
      "method": "read@114",
      "body": "public byte[] read(int id,int timeout,int offset) throws PayloadException {\n  try {\n    PollingHandler handler=getHandler(id);\n    int generation=handler.setSendOffset(offset);\n    byte[] data=handler.getSendBytes(timeout,-1,false,generation);\n    if (data == null) {\nsynchronized (allHandlers) {\n        allHandlers.set(id,null);\n        while (id == allHandlers.size() - 1 && allHandlers.get(id) == null) {\n          allHandlers.remove(id);\n          id--;\n        }\n      }\n    }\n    return data;\n  }\n catch (  Throwable t) {\n    throw new PayloadException(t);\n  }\n}\n",
      "formalParam": [
        "int",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.set(int,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "byte[]",
      "file": "./java_projects/JavaPayload/J2EEPayload/src/j2eepayload/axis/TunnelService.java",
      "classTypes": [
        "Exception",
        "List",
        "String[]",
        "InputStream",
        "OutputStream"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List.set(int,java.lang.Object)",
            "java.util.List.size()",
            "java.util.List.get(int)",
            "java.util.List.remove(int)",
            "java.util.List.size()",
            "java.util.List.get(int)"
          ]
        }
      ],
      "keywords": [
        "remove",
        "get",
        "size"
      ]
    },
    {
      "method": "testLockFile@60",
      "body": "/** \n * Tests the  {@link LockFileChecker}.\n */\n@Test public void testLockFile(){\n  String appName=\"TestApp\" + System.currentTimeMillis();\n  installData.getInfo().setAppName(appName);\n  TestConsole console=new TestConsole();\n  ConsolePrompt prompt=new ConsolePrompt(console);\n  LockFileChecker checker=new LockFileChecker(installData,prompt);\n  assertTrue(checker.check());\n  console.addScript(\"LockFileExists-enter-N\",\"n\");\n  assertFalse(checker.check());\n  console.addScript(\"LockFileExists-enter-Y\",\"y\");\n  assertTrue(checker.check());\n  File file=FileUtil.getLockFile(appName);\n  assertTrue(file.delete());\n  assertTrue(checker.check());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.File.delete()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/izpack/izpack-installer/src/test/java/com/izforge/izpack/installer/requirement/LockFileCheckerTest.java",
      "classTypes": [
        "InstallData"
      ],
      "sorrformalparam": [],
      "types": [
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "current"
      ]
    },
    {
      "method": "connect@22",
      "body": "public boolean connect(String id,String hostname,int port,String key,boolean force) throws IOException {\n  if (outgoing.containsKey(id) && !force)   return false;\n  Socket socket=new Socket(hostname,port);\n  socket.getOutputStream().write(makeLine(\"identify \" + key));\n  outgoing.put(id,socket);\n  return true;\n}\n",
      "formalParam": [
        "String",
        "String",
        "int",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.net.Socket>.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.net.Socket.Socket(java.lang.String,int)",
            "_throws": [
              "java.net.UnknownHostException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.Socket.getOutputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.OutputStream"
          },
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.OutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.net.Socket>.put(java.lang.String,java.net.Socket)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.Socket"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.net.ServerSocket.close()",
              "java.util.HashMap<java.lang.String,java.net.Socket>.values()",
              "java.net.Socket.close()",
              "java.util.HashMap<Tau_K,Tau_V>.keySet()",
              "java.net.Socket.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.net.Socket>.containsKey(java.lang.Object)",
              "java.net.Socket.Socket(java.lang.String,int)",
              "java.net.Socket.getOutputStream()",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])",
              "java.util.HashMap<java.lang.String,java.net.Socket>.put(java.lang.String,java.net.Socket)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.net.Socket>.keySet()",
              "java.util.HashMap<java.lang.String,java.net.Socket>.get(java.lang.Object)",
              "java.net.Socket.getOutputStream()",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.net.Socket>.keySet()",
              "java.util.HashMap<java.lang.String,java.net.Socket>.get(java.lang.Object)",
              "java.net.Socket.getOutputStream()",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.ServerSocket.ServerSocket(int)",
              "java.net.ServerSocket.setSoTimeout(int)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/joe.to/src/to/joe/manager/serverlink/Connection.java",
      "classTypes": [
        "String",
        "HashMap<String,Socket>",
        "HashMap<Socket,ConnectionInfo>",
        "ServerSocket",
        "ConnectionCallback",
        "boolean",
        "ServerThread"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "String",
          "int",
          "String"
        ],
        [
          "String"
        ],
        [],
        [
          "int"
        ]
      ],
      "types": [
        "UnknownHostException",
        "Socket"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.net.Socket>.containsKey(java.lang.Object)",
            "java.net.Socket.Socket(java.lang.String,int)",
            "java.net.Socket.getOutputStream()",
            "java.lang.String.getBytes()",
            "java.io.OutputStream.write(byte[])",
            "java.util.HashMap<java.lang.String,java.net.Socket>.put(java.lang.String,java.net.Socket)"
          ]
        }
      ],
      "keywords": [
        "map",
        "bytes"
      ]
    },
    {
      "method": "getFirstFieldPosFromPage@137",
      "body": "/** \n * Returns the first input field position from the current page.<p>\n * @param formHandler the form handler\n * @param page the current page\n * @return the first input field position from the current page\n */\npublic static int getFirstFieldPosFromPage(CmsFormHandler formHandler,int page){\n  int firstField=0;\n  CmsPagingField.initializeFields(formHandler);\n  if (page == 1) {\n    firstField=0;\n  }\n else {\n    firstField=(m_fields.get(page - 2)).intValue() + 1;\n  }\n  return firstField;\n}\n",
      "formalParam": [
        "CmsFormHandler",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.Integer>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.get(int)",
              "java.lang.Integer.intValue()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/alkacon-oamp/com.alkacon.opencms.formgenerator/src/com/alkacon/opencms/formgenerator/CmsPagingField.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "CmsFormHandler",
          "int"
        ]
      ],
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "get",
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.get(int)",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "lang",
        "value",
        "util",
        "get",
        "int"
      ]
    },
    {
      "method": "saveUploadedFile@75",
      "body": "public void saveUploadedFile(String filename){\n  BufferedInputStream inputStream=null;\n  FileOutputStream outputStream=null;\n  try {\n    inputStream=new BufferedInputStream(this.item.getInputStream());\n    outputStream=new FileOutputStream(filename);\n    int c;\n    byte[] b=new byte[4096];\n    while ((c=inputStream.read(b)) != -1) {\n      outputStream.write(b,0,c);\n    }\n  }\n catch (  IOException e) {\n    throw new ForumException(e);\n  }\n finally {\n    if (outputStream != null) {\n      try {\n        outputStream.flush();\n        outputStream.close();\n      }\n catch (      IOException e) {\n      }\n    }\n    if (inputStream != null) {\n      try {\n        inputStream.close();\n      }\n catch (      IOException e) {\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.FileOutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.FilterInputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jforum2/src/net/jforum/view/forum/common/UploadUtils.java",
      "classTypes": [
        "FileItem",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "FilterInputStream",
        "IOException",
        "OutputStream",
        "FileOutputStream",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.FilterInputStream.read(byte[])",
            "java.io.FileOutputStream.write(byte[],int,int)",
            "java.io.FilterInputStream.read(byte[])",
            "java.io.OutputStream.flush()",
            "java.io.FileOutputStream.close()",
            "java.io.BufferedInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "testIsGzipCompressedLarge@160",
      "body": "/** \n * Tests gzip compression of a large size file\n */\n@Test public void testIsGzipCompressedLarge() throws Exception {\n  assertIsGzipCompressed(\"file-large.txt\",LARGE);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getSimpleName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.File.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getSimpleName()",
              "java.io.File.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jetty.project/jetty-servlets/src/test/java/org/eclipse/jetty/servlets/GzipFilterContentLengthTest.java",
      "classTypes": [
        "Class<? extends Servlet>",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getSimpleName()",
            "java.io.File.getName()"
          ]
        }
      ],
      "keywords": [
        "name",
        "get"
      ]
    },
    {
      "method": "processSheet@127",
      "body": "/** \n * Processes the given sheet\n */\npublic void processSheet(SheetContentsHandler sheetContentsExtractor,StylesTable styles,ReadOnlySharedStringsTable strings,InputStream sheetInputStream) throws IOException, SAXException {\n  DataFormatter formatter;\n  if (locale == null) {\n    formatter=new DataFormatter();\n  }\n else {\n    formatter=new DataFormatter(locale);\n  }\n  InputSource sheetSource=new InputSource(sheetInputStream);\n  SAXParserFactory saxFactory=SAXParserFactory.newInstance();\n  try {\n    SAXParser saxParser=saxFactory.newSAXParser();\n    XMLReader sheetParser=saxParser.getXMLReader();\n    ContentHandler handler=new XSSFSheetXMLHandler(styles,strings,sheetContentsExtractor,formatter,formulasNotResults);\n    sheetParser.setContentHandler(handler);\n    sheetParser.parse(sheetSource);\n  }\n catch (  ParserConfigurationException e) {\n    throw new RuntimeException(\"SAX parser appears to be broken - \" + e.getMessage());\n  }\n}\n",
      "formalParam": [
        "SheetContentsHandler",
        "StylesTable",
        "ReadOnlySharedStringsTable",
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParserFactory"
          },
          {
            "_call": "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException",
              "org.xml.sax.SAXException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.SAXParser"
          },
          {
            "_call": "javax.xml.parsers.SAXParser.getXMLReader()",
            "_throws": [
              "org.xml.sax.SAXException"
            ],
            "node": "DAPICall",
            "_returns": "org.xml.sax.XMLReader"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.append(char)",
              "java.io.InputStream.close()",
              "java.lang.StringBuffer.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.append(char)",
              "java.io.InputStream.close()",
              "java.lang.StringBuffer.toString()",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/poi/src/ooxml/java/org/apache/poi/xssf/extractor/XSSFEventBasedExcelExtractor.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "ParserConfigurationException"
      ],
      "apicalls": [
        "newInstance",
        "newSAXParser"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.SAXParserFactory.newInstance()",
            "javax.xml.parsers.SAXParserFactory.newSAXParser()",
            "javax.xml.parsers.SAXParser.getXMLReader()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "configuration",
        "parsers",
        "factory",
        "reader"
      ]
    },
    {
      "method": "evaluateItem@44",
      "body": "@Override public Item evaluateItem(XPathContext xpathContext) throws XPathException {\n  final String propertyNameString=argument[0].evaluateAsString(xpathContext).toString();\n  final QName propertyNameQName=Dom4jUtils.extractTextValueQName(namespaceMappings,propertyNameString,false);\n  if (propertyNameString.toLowerCase().indexOf(\"password\") != -1) {\n    return null;\n  }\n  if (VERSION_PROPERTY.equals(propertyNameString)) {\n    return VERSION;\n  }\n else   if (CONFORMANCE_LEVEL_PROPERTY.equals(propertyNameString)) {\n    return CONFORMANCE_LEVEL;\n  }\n else   if (XFormsConstants.XXFORMS_NAMESPACE_URI.equals(propertyNameQName.getNamespaceURI())) {\n    final Object value=XFormsProperties.getProperty(getContainingDocument(xpathContext),propertyNameQName.getName());\n    if (value == null)     return null;\n    return (Item)XFormsUtils.convertJavaObjectToSaxonObject(value);\n  }\n else {\n    throw new XPathException(\"Invalid property() function parameter: \" + propertyNameString);\n  }\n}\n",
      "formalParam": [
        "XPathContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Item",
      "file": "./java_projects/orbeon-forms/src/java/org/orbeon/oxf/xforms/function/Property.java",
      "classTypes": [
        "String",
        "String",
        "StringValue",
        "Map<String,String>",
        "StringValue"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String",
        "Boolean"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lower",
        "case",
        "boolean",
        "equals",
        "integer"
      ]
    },
    {
      "method": "test_getExtra@126",
      "body": "/** \n * @tests java.util.zip.ZipEntry#getExtra()\n */\npublic void test_getExtra(){\n  assertNull(\"Incorrect extra information returned\",zentry.getExtra());\n  byte[] ba={'T','E','S','T'};\n  zentry=new ZipEntry(\"test.tst\");\n  zentry.setExtra(ba);\n  assertTrue(\"Incorrect Extra Information Returned.\",zentry.getExtra() == ba);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.zip.ZipEntry.getExtra()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.zip.ZipEntry.setExtra(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.zip.ZipEntry.getExtra()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.zip.ZipEntry.setCompressedSize(long)",
              "java.util.zip.ZipEntry.getCompressedSize()",
              "java.util.zip.ZipEntry.setCompressedSize(long)",
              "java.util.zip.ZipEntry.getCompressedSize()",
              "java.util.zip.ZipEntry.setCompressedSize(long)",
              "java.util.zip.ZipEntry.getCompressedSize()",
              "java.util.zip.ZipEntry.setCompressedSize(long)",
              "java.util.zip.ZipEntry.getCompressedSize()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.zip.ZipFile.getEntry(java.lang.String)",
              "java.util.zip.ZipEntry.getMethod()",
              "java.util.zip.ZipFile.getEntry(java.lang.String)",
              "java.util.zip.ZipEntry.getMethod()",
              "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
              "java.util.zip.ZipEntry.getMethod()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.zip.ZipEntry.isDirectory()",
              "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
              "java.util.zip.ZipEntry.isDirectory()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/archive/tests/java/util/zip/ZipEntryTest.java",
      "classTypes": [
        "java.util.zip.ZipFile",
        "String",
        "long",
        "java.util.zip.ZipEntry",
        "long",
        "String",
        "long",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "ZipEntry"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.zip.ZipEntry.getExtra()",
            "java.util.zip.ZipEntry.ZipEntry(java.lang.String)",
            "java.util.zip.ZipEntry.setExtra(byte[])",
            "java.util.zip.ZipEntry.getExtra()"
          ]
        }
      ],
      "keywords": [
        "util",
        "extra",
        "entry",
        "set",
        "get"
      ]
    },
    {
      "method": "AdvisorStatusManager@57",
      "body": "public AdvisorStatusManager(){\n  super();\n  setup();\n  statusListeners=new ArrayList();\n  this.autoBuildJobListener=new AutoBuildJobListener();\n  this.statusRefreshJob=getNewStatusUpdateJob();\n  registerAsListener();\n  updateStatus(false);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.advisor.ui/src/org/teiid/designer/advisor/ui/core/status/AdvisorStatusManager.java",
      "classTypes": [
        "EventObjectListener",
        "IResourceChangeListener",
        "AutoBuildJobListener",
        "String",
        "Object"
      ],
      "sorrformalparam": [
        [
          "IResourceChangeEvent"
        ]
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "array",
        "println"
      ]
    },
    {
      "method": "find@62",
      "body": "public LocalArtifactResult find(RepositorySystemSession session,LocalArtifactRequest request){\n  String path=getPathForLocalArtifact(request.getArtifact());\n  File file=new File(getRepository().getBasedir(),path);\n  LocalArtifactResult result=new LocalArtifactResult(request);\n  if (file.isFile()) {\n    result.setFile(file);\n    result.setAvailable(true);\n  }\n  return result;\n}\n",
      "formalParam": [
        "RepositorySystemSession",
        "LocalArtifactRequest"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.isFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "LocalArtifactResult",
      "file": "./java_projects/maven-3/maven-compat/src/test/java/org/apache/maven/project/LegacyLocalRepositoryManager.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "File"
      ],
      "apicalls": [
        "isFile"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.isFile()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "TimeDelta@49",
      "body": "public TimeDelta(String deltaUnitStr,String dateFormat) throws ParseException {\n  deltaUnit=Integer.parseInt(deltaUnitStr);\n  if (dateFormat != null) {\n    parseDate=true;\n    sdf=new SimpleDateFormat(dateFormat);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Long"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.text.DateFormat.parse(java.lang.String)",
              "java.text.DateFormat.parse(java.lang.String)",
              "java.util.Date.getTime()",
              "java.util.Date.getTime()"
            ]
          },
          {
            "calls": [
              "java.lang.Number.longValue()",
              "java.lang.Number.longValue()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/akela/src/main/java/com/mozilla/pig/eval/date/TimeDelta.java",
      "classTypes": [
        "boolean",
        "SimpleDateFormat",
        "enum"
      ],
      "sorrformalparam": [
        [
          "Tuple"
        ]
      ],
      "types": [
        "NumberFormatException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "format",
        "parse",
        "exception"
      ]
    },
    {
      "method": "toReference@182",
      "body": "public double[][] toReference(double[][] tuples) throws VisADException {\n  double x;\n  double y;\n  double rh;\n  double ts;\n  double temp;\n  long flag;\n  double lon;\n  double lat;\n  int n_tuples=tuples[0].length;\n  int tuple_dim=tuples.length;\n  if (tuple_dim != 2) {\n    throw new VisADException(\"PolarStereographic: tuple dim != 2\");\n  }\n  double t_tuples[][]=new double[2][n_tuples];\n  for (int ii=0; ii < n_tuples; ii++) {\n    x=(tuples[0][ii] - false_easting) * fac;\n    y=(tuples[1][ii] - false_northing) * fac;\n    rh=Math.sqrt(x * x + y * y);\n    if (ind != 0) {\n      ts=rh * tcs / (r_major * mcs);\n    }\n else {\n      ts=rh * e4 / (r_major * 2.0);\n    }\n    lat=GctpFunction.phi2z(e,ts);\n    if (lat == Double.NaN) {\n    }\n else {\n      lat=lat * fac;\n    }\n    if (rh == 0) {\n      lon=fac * center_lon;\n    }\n else {\n      temp=Math.atan2(x,-y);\n      lon=GctpFunction.adjust_lon(fac * temp + center_lon);\n    }\n    t_tuples[0][ii]=lon;\n    t_tuples[1][ii]=lat;\n  }\n  return t_tuples;\n}\n",
      "formalParam": [
        "double[][]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.sqrt(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Math.atan2(double,double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.sqrt(double)",
              "java.lang.Math.abs(double)",
              "java.lang.Math.abs(int)"
            ]
          }
        ]
      ],
      "returnType": "double[][]",
      "file": "./java_projects/VisAD/src/main/java/visad/data/hdfeos/PolarStereographic.java",
      "classTypes": [
        "Unit[]",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double",
        "double"
      ],
      "sorrformalparam": [
        [
          "RealTupleType",
          "double",
          "double",
          "double",
          "double",
          "double",
          "double"
        ]
      ],
      "types": [
        "Double"
      ],
      "apicalls": [
        "atan2",
        "sqrt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.sqrt(double)",
            "java.lang.Math.atan2(double,double)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "atan2",
        "double",
        "sqrt",
        "math"
      ]
    },
    {
      "method": "getDouble@345",
      "body": "/** \n * Returns the double associated to the key put in parameter (\"name\"). If the value associated to the key is null, this method returns the value of the parameter deflt.\n * @param name : String designating the key in the set\n * @param deflt : float designating the default value if value associated with the key is null\n * @return double : value associated to the key\n */\npublic double getDouble(String name,float deflt){\n  Object val=_set.get(name);\n  if (val == null)   return deflt;\n  if (val instanceof Number)   return ((Number)val).doubleValue();\n  try {\n    return Double.parseDouble((String)val);\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"Float value required, but found: \" + val);\n  }\n}\n",
      "formalParam": [
        "String",
        "float"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Number.doubleValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Double.parseDouble(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "float",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
              "java.lang.Number.floatValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.entrySet()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "double",
      "file": "./java_projects/l2adena-l2j-core/java/com/l2jserver/gameserver/templates/StatsSet.java",
      "classTypes": [
        "Logger",
        "Map<String,Object>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "StatsSet"
        ]
      ],
      "types": [
        "String",
        "Map"
      ],
      "apicalls": [
        "parseDouble",
        "doubleValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "java.lang.Number.doubleValue()",
            "java.lang.Double.parseDouble(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "value",
        "string",
        "parse",
        "map",
        "object",
        "double"
      ]
    },
    {
      "method": "testRemove0@153",
      "body": "public final void testRemove0(){\n  while (!ref.isEmpty()) {\n    int key=ref.tailMap((ref.firstKey() + ref.lastKey()) / 2).firstKey();\n    assertEquals(ref.remove(key),map.remove(key));\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.firstKey()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.lastKey()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.tailMap(java.lang.Integer)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.SortedMap"
              },
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              },
              {
                "_call": "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.Integer,java.lang.Integer>.equals(java.lang.Object)",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.put(java.lang.Integer,java.lang.Integer)",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.Integer,java.lang.Integer>.clear()",
              "java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ObjectOutputStream.ObjectOutputStream(java.io.OutputStream)",
              "java.io.ObjectOutputStream.writeObject(java.lang.Object)",
              "java.io.ObjectOutputStream.close()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.ObjectInputStream.ObjectInputStream(java.io.InputStream)",
              "java.io.ObjectInputStream.readObject()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/SortedMapTestBase.java",
      "classTypes": [
        "SortedMap<Integer,Integer>",
        "int",
        "SortedMap<Integer,Integer>",
        "int",
        "Random"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "tailMap",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.firstKey()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.lastKey()",
            "java.util.SortedMap<java.lang.Integer,java.lang.Integer>.tailMap(java.lang.Integer)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
            "java.util.Map<java.lang.Integer,java.lang.Integer>.remove(java.lang.Object)",
            "$NOT$java.util.Map<java.lang.Integer,java.lang.Integer>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "last",
        "boolean",
        "tail",
        "remove",
        "sorted",
        "integer",
        "util"
      ]
    },
    {
      "method": "getObjectY@622",
      "body": "/** \n * Returns the y-coordinate of a specific object from a specific group.\n * @param groupID Index of a group\n * @param objectID Index of an object\n * @return The y-coordinate of an object, or -1, when error occurred\n */\npublic int getObjectY(int groupID,int objectID){\n  if (groupID >= 0 && groupID < objectGroups.size()) {\n    ObjectGroup grp=(ObjectGroup)objectGroups.get(groupID);\n    if (objectID >= 0 && objectID < grp.objects.size()) {\n      GroupObject object=(GroupObject)grp.objects.get(objectID);\n      return object.y;\n    }\n  }\n  return -1;\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "TileSet",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/ProjetX/slick/src/org/newdawn/slick/tiled/TiledMap.java",
      "classTypes": [
        "ArrayList",
        "String",
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int",
          "int",
          "int",
          "int",
          "int",
          "int",
          "boolean"
        ],
        [
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "int",
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "size",
        "array",
        "list",
        "util"
      ]
    },
    {
      "method": "testIfOtherTypesThanStringWorks_shouldProcessDate@787",
      "body": "@Test public void testIfOtherTypesThanStringWorks_shouldProcessDate() throws Exception {\n  EDBObject object=new EDBObject(\"test/type/date\");\n  Date date=new Date();\n  object.putEDBObjectEntry(\"value\",date);\n  db.commitEDBObjects(Arrays.asList(object),null,null);\n  object=db.getObject(\"test/type/date\");\n  Object value=object.getObject(\"value\");\n  assertThat(value.getClass().getName(),is(Date.class.getName()));\n  assertThat((Date)value,is(date));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.Date()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Integer.valueOf(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.valueOf(int)",
              "java.util.Arrays.asList(T[])",
              "java.lang.Class.getName()",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Integer.valueOf(int)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.lang.Class.getName()",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.Properties()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openengsb-framework/components/edb/src/test/java/org/openengsb/core/edb/jpa/internal/JPATestIT.java",
      "classTypes": [
        "Utils",
        "JPADatabase"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Date.Date()",
            "java.util.Arrays.asList(T[])",
            "java.lang.Class.getName()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "name",
        "util",
        "string",
        "arrays",
        "class"
      ]
    },
    {
      "method": "setPage@55",
      "body": "/** \n * This will set the page that should be displayed in this panel.\n * @param pdfPage The page to draw.\n */\npublic void setPage(PDPage pdfPage){\n  page=pdfPage;\n  PDRectangle pageSize=page.findMediaBox();\n  drawDimension=pageSize.createDimension();\n  int rotation=page.findRotation();\n  if (rotation == 90 || rotation == 270) {\n    pageDimension=new Dimension(drawDimension.height,drawDimension.width);\n  }\n else {\n    pageDimension=drawDimension;\n  }\n  setSize(pageDimension);\n  setBackground(java.awt.Color.white);\n}\n",
      "formalParam": [
        "PDPage"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Dimension.Dimension(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setSize(java.awt.Dimension)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setBackground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/PDF-to-unusual-HTML/PDF-to-unusual-HTML/src/org/apache/pdfbox/pdfviewer/PDFPagePanel.java",
      "classTypes": [
        "Dimension",
        "Dimension",
        "PDPage",
        "PageDrawer"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "JComponent",
        "Dimension"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Dimension.Dimension(int,int)",
            "java.awt.Component.setSize(java.awt.Dimension)",
            "javax.swing.JComponent.setBackground(java.awt.Color)"
          ]
        }
      ],
      "keywords": [
        "component",
        "awt",
        "j",
        "background",
        "color"
      ]
    },
    {
      "method": "add@162",
      "body": "/** \n * Add (union) in a complete set.  \n * @param other the set being added.\n * @return true if this changes the set.\n */\npublic boolean add(terminal_set other) throws internal_error {\n  not_null(other);\n  BitSet copy=(BitSet)_elements.clone();\n  _elements.or(other._elements);\n  return !_elements.equals(copy);\n}\n",
      "formalParam": [
        "terminal_set"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.util.BitSet.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.BitSet.xor(java.util.BitSet)",
              "$NOT$java.util.BitSet.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.or(java.util.BitSet)",
              "java.util.BitSet.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.get(int)",
              "java.util.BitSet.set(int)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/platform_cts/tools/dasm/src/java_cup/terminal_set.java",
      "classTypes": [
        "BitSet",
        "terminal_set"
      ],
      "sorrformalparam": [
        [
          "terminal_set"
        ],
        [
          "terminal_set"
        ],
        [
          "terminal"
        ]
      ],
      "types": [
        "BitSet",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.or(java.util.BitSet)",
            "$NOT$java.util.BitSet.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "delete@234",
      "body": "public void delete() throws DatabaseException {\n  new TransactionManager(new HashSet<Object>(Arrays.asList(this.getDomain()))){\n    @Override protected void dbOperation() throws Exception {\n      delete(this.session);\n    }\n  }\n;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet<java.lang.Object>.HashSet<Object>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "boolean",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.hashCode()",
              "java.lang.String.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.hashCode()",
              "java.lang.String.hashCode()",
              "java.lang.Long.valueOf(long)",
              "java.lang.Long.hashCode()",
              "java.lang.String.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony/harmony.idb/src/main/java/org/opennaas/extensions/idb/database/hibernate/DomSupportedSwitch.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ],
        [
          "DomSupportedSwitch"
        ]
      ],
      "types": [
        "HashSet",
        "Object",
        "List",
        "Collection"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet<java.lang.Object>.HashSet<Object>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "collection",
        "object",
        "arrays",
        "hash",
        "set"
      ]
    },
    {
      "method": "ejbActivate@152",
      "body": "/** \n * The activate method is called when the instance is activated from its \"passive\" state. The instance should acquire any resource that it has released earlier in the ejbPassivate() method.\n */\npublic void ejbActivate() throws EJBException, RemoteException {\n  testAllowedOperations(\"ejbActivate\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.naming.InitialContext.InitialContext()",
            "_throws": [
              "javax.naming.NamingException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
              "java.lang.StringBuffer.StringBuffer(java.lang.String)",
              "java.lang.StringBuffer.reverse()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.InitialContext.InitialContext()",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openejb/openejb/itests/openejb-itests-beans/src/main/java/org/apache/openejb/test/singleton/BasicSingletonBean.java",
      "classTypes": [
        "SessionContext",
        "Hashtable",
        "String"
      ],
      "sorrformalparam": [
        [
          "Timer"
        ],
        [
          "String"
        ],
        [],
        [],
        [],
        [
          "SessionContext"
        ]
      ],
      "types": [
        "Hashtable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.naming.InitialContext.InitialContext()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "publicFieldPublicPropertyMarshalUnmarshal@43",
      "body": "@Test public void publicFieldPublicPropertyMarshalUnmarshal() throws Exception {\n  logger.debug(\"Start testPublicFieldPublicPropertyMarshalUnmarshal.\");\n  PublicFieldPublicProperty obj=new PublicFieldPublicProperty(\"JAXB\");\n  marshalUnmarshalObject(obj,false);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.JAXBContext"
          },
          {
            "_call": "javax.xml.bind.JAXBContext.createMarshaller()",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.Marshaller"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.bind.JAXBContext.createUnmarshaller()",
            "_throws": [
              "javax.xml.bind.JAXBException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.bind.Unmarshaller"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
              "javax.xml.bind.JAXBContext.createMarshaller()",
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toString()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.bind.JAXBContext.createUnmarshaller()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
              "javax.xml.bind.JAXBContext.createMarshaller()",
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toString()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "javax.xml.bind.JAXBContext.createUnmarshaller()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/turmeric-runtime/integration-tests/SOATests/src/test/java/org/ebayopensource/turmeric/runtime/tests/jaxb/reflection/IntrospectionTest.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "ByteArrayInputStream",
        "String"
      ],
      "apicalls": [
        "newInstance",
        "createUnmarshaller"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.bind.JAXBContext.newInstance(java.lang.Class[])",
            "javax.xml.bind.JAXBContext.createMarshaller()",
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toString()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.ByteArrayOutputStream.toByteArray()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "javax.xml.bind.JAXBContext.createUnmarshaller()"
          ]
        }
      ],
      "keywords": [
        "xml",
        "unmarshaller"
      ]
    },
    {
      "method": "update@154",
      "body": "/** \n * Notifies this UI delegate to repaint the specified component. This method paints the component background, then calls the  {@link #paint(SynthContext,Graphics)} method.<p>In general, this method does not need to be overridden by subclasses. All Look and Feel rendering code should reside in the  {@code paint} method.\n * @param g the {@code Graphics} object used for painting\n * @param c the component being painted\n * @see #paint(SynthContext,Graphics)\n */\n@Override public void update(Graphics g,JComponent c){\n  SynthContext context=getContext(c);\n  SynthLookAndFeel.update(context,g);\n  context.getPainter().paintDesktopIconBackground(context,g,0,0,c.getWidth(),c.getHeight());\n  paint(context,g);\n  context.dispose();\n}\n",
      "formalParam": [
        "Graphics",
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthContext"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getPainter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthPainter"
          },
          {
            "_call": "javax.swing.JComponent.getWidth()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.JComponent.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getPainter()",
              "javax.swing.plaf.synth.SynthPainter.paintDesktopIconBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.isSelected()",
              "$NOT$javax.swing.JInternalFrame.isIconifiable()",
              "javax.swing.AbstractButton.setSelected(boolean)"
            ]
          },
          {
            "calls": [
              "javax.swing.AbstractButton.isSelected()",
              "$NOT$javax.swing.JInternalFrame.isIconifiable()",
              "javax.swing.JInternalFrame.setIcon(boolean)",
              "javax.swing.JInternalFrame.setSelected(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
              "javax.swing.plaf.synth.SynthContext.dispose()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/synth/SynthDesktopIconUI.java",
      "classTypes": [
        "SynthStyle",
        "Handler"
      ],
      "sorrformalparam": [
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "ActionEvent"
        ],
        [
          "Graphics",
          "JComponent"
        ]
      ],
      "types": [
        "Graphics"
      ],
      "apicalls": [
        "getContext",
        "getWidth"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "javax.swing.plaf.synth.SynthContext.getPainter()",
            "javax.swing.JComponent.getWidth()",
            "javax.swing.JComponent.getHeight()",
            "javax.swing.plaf.synth.SynthPainter.paintDesktopIconBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
            "javax.swing.plaf.synth.SynthContext.dispose()"
          ]
        }
      ],
      "keywords": [
        "paint",
        "icon",
        "dispose",
        "height",
        "component"
      ]
    },
    {
      "method": "countInRange@135",
      "body": "public int countInRange(){\n  int res=0;\n  for (int i=0; i < data.size(); i++) {\n    Double d=data.get(i);\n    if ((inclusive && d >= minRange && d <= maxRange) || (!inclusive && d > minRange && d < maxRange)) {\n      res++;\n    }\n  }\n  return res;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<java.lang.Double>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Double"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Double>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "double",
        "double",
        "double",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)",
              "java.util.List<java.lang.Double>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)",
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.add(java.lang.Double)",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/gephi-maven/modules/FiltersPluginUI/src/main/java/org/gephi/ui/filters/plugin/JQuickHistogram.java",
      "classTypes": [
        "Double",
        "int",
        "Color",
        "Double",
        "List<Double>"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [],
        [],
        [
          "int"
        ],
        [
          "Double"
        ]
      ],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Double>.size()",
            "java.util.List<java.lang.Double>.get(int)",
            "java.util.List<java.lang.Double>.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "integer",
        "double",
        "list"
      ]
    },
    {
      "method": "put@631",
      "body": "/** \n * Append an int value. This increases the array's length by one.\n * @param value An int value.\n * @return this.\n */\npublic JSONArray put(int value){\n  put(new Integer(value));\n  return this;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "JSONArray",
        "Object",
        "JSONArray",
        "JSONObject",
        "JSONArray",
        "None",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Double.Double(double)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isArray()",
              "java.lang.reflect.Array.getLength(java.lang.Object)",
              "java.lang.reflect.Array.get(java.lang.Object,int)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ]
      ],
      "returnType": "JSONArray",
      "file": "./java_projects/platform/dependencies/webharvest/src/main/java/org/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "double"
        ],
        [
          "int"
        ],
        [
          "long"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Object"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "array",
        "integer",
        "list"
      ]
    },
    {
      "method": "validateConnection@122",
      "body": "/** \n * Validates a connection can be made to the given address and port, within the given time limit.\n * @param ipAddress The IP address to connect to\n * @param port The port number to use\n * @throws IOException Reports a failure to connect or resolve the given address.\n */\npublic static void validateConnection(final String ipAddress,final int port) throws IOException {\n  validateConnection(ipAddress,port,DEFAULT_CONNECTION_TIMEOUT);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.Socket.Socket()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.InetSocketAddress.isUnresolved()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.concurrent.TimeUnit.toMillis(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.net.Socket.connect(java.net.SocketAddress,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.Socket.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.lang.StringBuilder.StringBuilder()",
              "java.io.BufferedReader.readLine()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.io.BufferedReader.readLine()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cloudify/esc/src/main/java/org/cloudifysource/esc/util/Utils.java",
      "classTypes": [
        "int",
        "int",
        "java.util.logging.Logger",
        "Integer"
      ],
      "sorrformalparam": [
        [
          "InputStream"
        ]
      ],
      "types": [
        "IOException",
        "Integer",
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.Socket.Socket()",
            "java.net.InetSocketAddress.InetSocketAddress(java.lang.String,int)",
            "java.net.InetSocketAddress.isUnresolved()",
            "java.util.concurrent.TimeUnit.toMillis(long)",
            "java.net.Socket.connect(java.net.SocketAddress,int)",
            "java.net.Socket.close()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "pipe@13",
      "body": "public static void pipe(InputStream read,OutputStream write) throws IOException {\n  byte[] bytes=new byte[1024];\n  int count;\n  while ((count=read.read(bytes)) > 0) {\n    write.write(bytes,0,count);\n  }\n  write.flush();\n  read.close();\n}\n",
      "formalParam": [
        "InputStream",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.OutputStream.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/pp-rebel/pp-rebel/src/main/java/com/polopoly/javarebel/fs/FSUtil.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "InputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.flush()",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "printStackTrace@72",
      "body": "public void printStackTrace(){\n  printStackTrace(System.err);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintWriter.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace(java.io.PrintWriter)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/mchange-commons-java/src/java/com/mchange/lang/PotentiallySecondaryError.java",
      "classTypes": [
        "Throwable",
        "String"
      ],
      "sorrformalparam": [
        [
          "PrintWriter"
        ],
        [
          "PrintStream"
        ]
      ],
      "types": [
        "PrintStream",
        "Throwable"
      ],
      "apicalls": [
        "println",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "throwable",
        "trace",
        "print",
        "println"
      ]
    },
    {
      "method": "writeDataFile@198",
      "body": "/** \n * Returns the records in this DataFile object as a plain text data file content\n * @throws DataFileException Exception thown for various errors, generally has a nested exception\n * @return A String containing what would go into a data file as plain text\n */\npublic String writeDataFile() throws DataFileException {\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  writeDataFile(bos);\n  String outString=bos.toString();\n  try {\n    if (bos != null)     bos.close();\n  }\n catch (  IOException e) {\n    Debug.logWarning(e,module);\n  }\n  return outString;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ofbiz/framework/datafile/src/org/ofbiz/datafile/DataFile.java",
      "classTypes": [
        "String",
        "ModelDataFile",
        "List<Record>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toString()",
            "java.io.ByteArrayOutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "close",
        "io"
      ]
    },
    {
      "method": "deepCopy@1754",
      "body": "public get_args deepCopy(){\n  return new get_args(this);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.BitSet.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.BitSet.or(java.util.BitSet)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
              "java.util.Set<java.lang.Long>.add(java.lang.Long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(int)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ]
      ],
      "returnType": "get_args",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "org.apache.thrift7.protocol.TField",
        "int",
        "Map<String,_Fields>"
      ],
      "sorrformalparam": [
        [
          "long"
        ],
        [],
        [
          "abort_result"
        ]
      ],
      "types": [],
      "apicalls": [
        "or",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.BitSet.clear()",
            "java.util.BitSet.or(java.util.BitSet)"
          ]
        }
      ],
      "keywords": [
        "util",
        "bit"
      ]
    },
    {
      "method": "lastIndexOf@543",
      "body": "/** \n * @throws NullPointerException {@inheritDoc}\n * @since      1.4\n */\npublic synchronized int lastIndexOf(String str,int fromIndex){\n  return String.lastIndexOf(value,0,count,str.toCharArray(),0,str.length(),fromIndex);\n}\n",
      "formalParam": [
        "String",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.lastIndexOf(char[],int,int,char[],int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.toCharArray()",
              "java.lang.String.length()",
              "java.lang.String.lastIndexOf(char[],int,int,char[],int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toCharArray()",
              "java.lang.String.length()",
              "java.lang.String.indexOf(char[],int,int,char[],int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toCharArray()",
              "java.lang.String.length()",
              "java.lang.String.indexOf(char[],int,int,char[],int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/java/lang/StringBuffer.java",
      "classTypes": [
        "long",
        "java.io.ObjectStreamField[]"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "int"
        ]
      ],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.String.length()",
            "java.lang.String.lastIndexOf(char[],int,int,char[],int,int,int)"
          ]
        }
      ],
      "keywords": [
        "length",
        "integer",
        "string",
        "character"
      ]
    },
    {
      "method": "update_strategy_approve_updating_approved_content_with_draft@1873",
      "body": "@Test public void update_strategy_approve_updating_approved_content_with_draft() throws UnsupportedEncodingException {\n  ContentTypeConfig contentTypeConfig=fixture.findCategoryByName(\"Persons\").getContentType().getContentTypeConfig();\n  CreateContentCommand createCommand=setupDefaultCreateContentCommandForPersons(ContentStatus.APPROVED);\n  CustomContentData contentData=new CustomContentData(contentTypeConfig);\n  contentData.add(new TextDataEntry(contentTypeConfig.getInputConfig(\"person-no\"),\"2\"));\n  contentData.add(new TextDataEntry(contentTypeConfig.getInputConfig(\"name\"),\"Original approved version\"));\n  createCommand.setContentData(contentData);\n  ContentKey contentKey_approved=contentService.createContent(createCommand);\n  UpdateContentCommand updateCommand=UpdateContentCommand.storeNewVersionIfChanged(fixture.findContentByKey(contentKey_approved).getMainVersion().getKey());\n  updateCommand.setContentKey(contentKey_approved);\n  updateCommand.setUpdateStrategy(UpdateContentCommand.UpdateStrategy.MODIFY);\n  updateCommand.setModifier(fixture.findUserByName(\"testuser\").getKey());\n  updateCommand.setPriority(0);\n  updateCommand.setLanguage(fixture.findLanguageByCode(\"en\"));\n  updateCommand.setStatus(ContentStatus.DRAFT);\n  contentData=new CustomContentData(contentTypeConfig);\n  contentData.add(new TextDataEntry(contentTypeConfig.getInputConfig(\"person-no\"),\"2\"));\n  contentData.add(new TextDataEntry(contentTypeConfig.getInputConfig(\"name\"),\"Original draft version\"));\n  updateCommand.setContentData(contentData);\n  contentService.updateContent(updateCommand);\n  fixture.flushIndexTransaction();\n  assertEquals(1,fixture.countAllContent());\n  assertEquals(2,fixture.countContentVersionsByContent(contentKey_approved));\n  assertEquals(ContentStatus.APPROVED,fixture.findContentByKey(contentKey_approved).getMainVersion().getStatus());\n  assertTrue(fixture.findContentByKey(contentKey_approved).hasDraft());\n  assertEquals(ContentStatus.APPROVED,fixture.findContentVersionByContent(0,contentKey_approved).getStatus());\n  assertEquals(ContentStatus.DRAFT,fixture.findContentVersionByContent(1,contentKey_approved).getStatus());\n  String importsConfig=\"\";\n  importsConfig+=\"<imports>\";\n  importsConfig+=\"<import base='/persons/person' mode='xml' name='xml-import' update-strategy='UPDATE-AND-APPROVE-CONTENT' sync='person-no'>\";\n  importsConfig+=\"  <mapping src='@id' dest='person-no'/>\";\n  importsConfig+=\"  <mapping src='name' dest='name'/>\";\n  importsConfig+=\"  <mapping src='html' dest='htmlarea'/>\";\n  importsConfig+=\"</import>\";\n  importsConfig+=\"</imports>\";\n  String changedContentTypeXml=personContentTypeXml.replace(\"<imports/>\",importsConfig);\n  updateContentType(\"PersonCty\",changedContentTypeXml);\n  String importData=\"\";\n  importData+=\"<persons>\";\n  importData+=\"  <person id='2'><name>Update by import</name></person>\";\n  importData+=\"</persons>\";\n  ImportContentCommand command=new ImportContentCommand();\n  command.importer=fixture.findUserByName(\"testuser\");\n  command.categoryToImportTo=fixture.findCategoryByName(\"Persons\");\n  command.importName=\"xml-import\";\n  command.inputStream=new ByteArrayInputStream(importData.getBytes(\"UTF-8\"));\n  ImportJob job=importJobFactory.createImportJob(command);\n  ImportResult result=job.start();\n  assertEquals(1,result.getUpdated().size());\n  assertEquals(1,fixture.countAllContent());\n  assertEquals(ContentStatus.APPROVED,fixture.findContentByKey(contentKey_approved).getMainVersion().getStatus());\n  assertFalse(fixture.findContentByKey(contentKey_approved).hasDraft());\n  assertEquals(3,fixture.countContentVersionsByContent(contentKey_approved));\n  assertEquals(ContentStatus.ARCHIVED,fixture.findContentVersionByContent(0,contentKey_approved).getStatus());\n  assertEquals(\"Original approved version\",getTextDataEntryValue(\"name\",fixture.findContentVersionByContent(0,contentKey_approved).getContentData()));\n  assertEquals(ContentStatus.ARCHIVED,fixture.findContentVersionByContent(1,contentKey_approved).getStatus());\n  assertEquals(\"Original draft version\",getTextDataEntryValue(\"name\",fixture.findContentVersionByContent(1,contentKey_approved).getContentData()));\n  assertEquals(ContentStatus.APPROVED,fixture.findContentVersionByContent(2,contentKey_approved).getStatus());\n  assertEquals(\"Update by import\",getTextDataEntryValue(\"name\",fixture.findContentVersionByContent(2,contentKey_approved).getContentData()));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.lang.String.getBytes(java.lang.String)",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cms-ce/modules/cms-itest/src/test/java/com/enonic/cms/itest/content/imports/ImportServiceImplTest.java",
      "classTypes": [
        "HibernateTemplate",
        "ContentService",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String",
        "ByteArrayInputStream",
        "CharSequence",
        "Byte"
      ],
      "apicalls": [
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.lang.String.getBytes(java.lang.String)",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "stream",
        "lang",
        "bytes"
      ]
    },
    {
      "method": "main@110",
      "body": "/** \n * Simple test.  Takes modulus on command line and prints out permutation.\n */\npublic static void main(String[] args){\n  int modulus=Integer.parseInt(args[0]);\n  Permuter p=new Permuter(modulus);\n  for (int i=0; i < modulus; i++) {\n    System.out.print(p.map(i) + \" \");\n  }\n  System.out.println();\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/demo/copperchloride/src/swingset2/Permuter.java",
      "classTypes": [
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "NumberFormatException",
        "Integer"
      ],
      "apicalls": [
        "println",
        "parseInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.PrintStream.println()"
          ]
        }
      ],
      "keywords": [
        "stream"
      ]
    },
    {
      "method": "hashCode@486",
      "body": "public int hashCode(){\n  int result=17;\n  result=37 * result + p.getName().hashCode();\n  if (oid != null) {\n    result=37 * result + oid.hashCode();\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.Provider.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.hashCode()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "int",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/sun/security/jgss/ProviderList.java",
      "classTypes": [
        "HashSet<Oid>",
        "HashMap<PreferencesEntry,MechanismFactory>"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.security.Provider.getName()",
            "java.lang.String.hashCode()"
          ]
        }
      ],
      "keywords": [
        "string",
        "lang",
        "get",
        "hash",
        "security"
      ]
    },
    {
      "method": "array_filter@576",
      "body": "/** \n * Returns an array that filters out any values that do not hold true when used in the callback function.\n * @param array    the array to filter\n * @param callback the function name for filtering\n * @return a filtered array\n */\npublic static Value array_filter(Env env,ArrayValue array,@Optional Value callbackName){\n  if (array == null) {\n    return NullValue.NULL;\n  }\n  ArrayValue filteredArray=new ArrayValueImpl();\n  if (!callbackName.isDefault()) {\n    Callable callback=callbackName.toCallable(env);\n    if (callback == null || !callback.isValid(env)) {\n      return NullValue.NULL;\n    }\n    try {\n      Iterator<Map.Entry<Value,Value>> iter=array.getIterator(env);\n      while (iter.hasNext()) {\n        Map.Entry<Value,Value> entry=iter.next();\n        Value key=entry.getKey();\n        Value value;\n        if (entry instanceof ArrayValue.Entry) {\n          value=((ArrayValue.Entry)entry).getRawValue();\n        }\n else {\n          value=entry.getValue();\n        }\n        boolean isMatch=callback.callArray(env,array,key,value).toBoolean();\n        if (isMatch) {\n          filteredArray.put(key,value);\n        }\n      }\n    }\n catch (    Exception t) {\n      log.log(Level.WARNING,t.toString(),t);\n      env.warning(\"An error occurred while invoking the filter callback\");\n      return NullValue.NULL;\n    }\n  }\n else {\n    for (    Map.Entry<Value,Value> entry : array.entrySet()) {\n      if (entry.getValue().toBoolean()) {\n        filteredArray.put(entry.getKey(),entry.getValue());\n      }\n    }\n  }\n  return filteredArray;\n}\n",
      "formalParam": [
        "Env",
        "ArrayValue",
        "Value"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Value",
        "Value",
        "Value",
        "Value",
        "boolean",
        "boolean",
        "Value"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Character.isDigit(char)",
              "java.lang.Math.abs(int)"
            ]
          },
          {
            "calls": [
              "java.lang.Character.isDigit(char)",
              "java.lang.Math.abs(int)",
              "java.lang.Math.abs(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toUpperCase()"
            ]
          },
          {
            "calls": [
              "java.lang.String.toLowerCase()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.toString()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ]
      ],
      "returnType": "Value",
      "file": "./java_projects/Bianca/bianca/src/main/java/com/clevercloud/bianca/lib/ArrayModule.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "AbstractGet",
        "CompareNumeric",
        "int"
      ],
      "sorrformalparam": [
        [
          "Env",
          "Value",
          "Value",
          "long"
        ],
        [
          "Env",
          "Value[]"
        ],
        [
          "Env",
          "ArrayValue",
          "int"
        ],
        [
          "Env",
          "Value[]"
        ],
        [
          "Env",
          "Value",
          "Callable",
          "Value"
        ],
        [
          "Env",
          "Value",
          "Callable",
          "Value"
        ],
        [
          "Env",
          "Value[]"
        ]
      ],
      "types": [
        "Level",
        "String",
        "Throwable"
      ],
      "apicalls": [
        "log",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.toString()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "logger"
      ]
    },
    {
      "method": "fire@154",
      "body": "/** \n * Invoke the target's method with a single argument.\n * @param argument an object passed to the target's method\n * @see #fire(Object[])\n */\npublic boolean fire(Object argument){\n  return this.fire(new Object[]{argument});\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ref.Reference.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.reflect.InvocationTargetException.getCause()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
                "_throws": [
                  "java.lang.IllegalAccessException",
                  "java.lang.IllegalArgumentException",
                  "java.lang.reflect.InvocationTargetException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.lang.reflect.InvocationTargetException.getCause()"
            ]
          },
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.reflect.Method.equals(java.lang.Object)",
              "java.lang.ref.Reference.get()",
              "java.lang.ref.Reference.get()"
            ]
          },
          {
            "calls": [
              "java.lang.reflect.Method.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.lang.reflect.InvocationTargetException.getCause()"
            ]
          },
          {
            "calls": [
              "java.lang.ref.Reference.get()",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/cayenne/framework/cayenne-jdk1.5-unpublished/src/main/java/org/apache/cayenne/util/Invocation.java",
      "classTypes": [
        "Class[]",
        "WeakReference",
        "Method"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "IllegalAccessException",
        "Method"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.Reference.get()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.reflect.InvocationTargetException.getCause()"
          ]
        },
        {
          "calls": [
            "java.lang.ref.Reference.get()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
          ]
        }
      ],
      "keywords": [
        "illegal",
        "exception",
        "ref",
        "reflect",
        "access",
        "argument",
        "reference"
      ]
    },
    {
      "method": "analyze@31",
      "body": "public void analyze(){\n  out.append(\"Starting Useless Comm Analysis\\n\");\n  HashSet<TaintEdge> uselessCommingEdges=new HashSet<TaintEdge>();\n  for (  TaintEdge edge : gb.getEdgeList()) {\n    nextEdge:     for (    TaintedObject taintedObject : edge.getTaintedObjects()) {\n      for (      TaintedObject subTaintedObject : taintedObject.getSubTaintedObjects()) {\n        if (subTaintedObject.isUnused()) {\n          uselessCommingEdges.add(edge);\n          break nextEdge;\n        }\n      }\n    }\n  }\n  System.out.println(\"Useless comming edges: \" + uselessCommingEdges.size() + \" of \"+ gb.getEdgeList().size());\n  GraphBuilder userStateGraphBuilder=GraphBuilder.getBuilderFromEdges(gb,uselessCommingEdges);\n  analysisMainWindow.addAnalysisGraphBuilder(userStateGraphBuilder,\"WASTING EDGES\" + \"[\" + uselessCommingEdges.size() + \"]\",\"\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTextArea.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(char[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/DICE/DICETrackerAnalysis/src/dicetrackeranalysis/graphanalysis/UselessCommAnalysis.java",
      "classTypes": [
        "GraphBuilder",
        "AnalysisMainWindow",
        "JTextArea"
      ],
      "sorrformalparam": [],
      "types": [
        "Character"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTextArea.append(java.lang.String)",
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.io.PrintStream.println(char[])"
          ]
        }
      ],
      "keywords": [
        "stream"
      ]
    },
    {
      "method": "propertyChange@82",
      "body": "public void propertyChange(PropertyChangeEvent e){\n  if (SynthLookAndFeel.shouldUpdateStyle(e)) {\n    updateStyle((JList)e.getSource());\n  }\n}\n",
      "formalParam": [
        "PropertyChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthContext"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.setComponentState(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JList.getSelectionBackground()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Color"
          },
          {
            "_call": "javax.swing.JList.setSelectionBackground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JList.getSelectionForeground()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Color"
          },
          {
            "_call": "javax.swing.JList.setSelectionForeground(java.awt.Color)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JList.setFixedCellHeight(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
              "javax.swing.plaf.synth.SynthContext.getPainter()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()",
              "javax.swing.plaf.synth.SynthPainter.paintListBackground(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)",
              "javax.swing.plaf.synth.SynthContext.dispose()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getPainter()",
              "javax.swing.plaf.synth.SynthPainter.paintListBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/synth/SynthListUI.java",
      "classTypes": [
        "SynthStyle",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "Graphics",
          "JComponent"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ]
      ],
      "types": [
        "Color",
        "JComponent"
      ],
      "apicalls": [
        "getSelectionBackground",
        "setComponentState",
        "getContext"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "javax.swing.plaf.synth.SynthContext.setComponentState(int)",
            "javax.swing.JList.getSelectionBackground()",
            "javax.swing.JList.setSelectionBackground(java.awt.Color)",
            "javax.swing.JList.getSelectionForeground()",
            "javax.swing.JList.setSelectionForeground(java.awt.Color)",
            "javax.swing.JList.setFixedCellHeight(int)",
            "javax.swing.plaf.synth.SynthContext.dispose()"
          ]
        }
      ],
      "keywords": [
        "swing",
        "foreground",
        "background"
      ]
    },
    {
      "method": "testTimerBoundaryEventDateISO@1168",
      "body": "public void testTimerBoundaryEventDateISO() throws Exception {\n  KnowledgeBase kbase=createKnowledgeBase(\"BPMN2-TimerBoundaryEventDateISO.bpmn2\");\n  StatefulKnowledgeSession ksession=createKnowledgeSession(kbase);\n  ksession.getWorkItemManager().registerWorkItemHandler(\"MyTask\",new DoNothingWorkItemHandler());\n  HashMap<String,Object> params=new HashMap<String,Object>();\n  DateTime now=new DateTime(System.currentTimeMillis());\n  now.plus(2000);\n  params.put(\"date\",now.toString());\n  ProcessInstance processInstance=ksession.startProcess(\"TimerBoundaryEvent\",params);\n  assertTrue(processInstance.getState() == ProcessInstance.STATE_ACTIVE);\n  Thread.sleep(2000);\n  ksession=restoreSession(ksession,true);\n  assertProcessInstanceCompleted(processInstance.getId(),ksession);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
              "java.util.List<java.lang.Process>.size()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.lang.System.currentTimeMillis()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Long>.ArrayList<Long>()",
              "java.lang.Thread.sleep(long)",
              "java.util.List<java.lang.Long>.size()",
              "java.lang.Thread.sleep(long)",
              "java.util.List<java.lang.Long>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jbpm/jbpm-bpmn2/src/test/java/org/jbpm/bpmn2/SimpleBPMNProcessTest.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
            "java.lang.System.currentTimeMillis()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.lang.Thread.sleep(long)"
          ]
        }
      ],
      "keywords": [
        "time",
        "map",
        "current"
      ]
    },
    {
      "method": "execute@211",
      "body": "public void execute(Event<UIPage> event) throws Exception {\n  WebuiRequestContext pContext=event.getRequestContext();\n  String id=pContext.getRequestParameter(UIComponent.OBJECTID);\n  UIPage uiPage=event.getSource();\n  List<UIGadget> uiWidgets=new ArrayList<UIGadget>();\n  uiPage.findComponentOfType(uiWidgets,UIGadget.class);\n  for (  UIGadget uiWidget : uiWidgets) {\n    if (uiWidget.getId().equals(id)) {\n      uiPage.getChildren().remove(uiWidget);\n      String userName=pContext.getRemoteUser();\n      if (userName != null && userName.trim().length() > 0) {\n      }\n      if (uiPage.isModifiable()) {\n        Page page=(Page)PortalDataMapper.buildModelObject(uiPage);\n        if (page.getChildren() == null) {\n          page.setChildren(new ArrayList<ModelObject>());\n        }\n        PageService pageService=uiPage.getApplicationComponent(PageService.class);\n        PageState pageState=new PageState(page.getTitle(),page.getDescription(),page.isShowMaxWindow(),page.getFactoryId(),page.getAccessPermissions() != null ? Arrays.asList(page.getAccessPermissions()) : null,page.getEditPermission());\n        pageService.savePage(new PageContext(page.getPageKey(),pageState));\n        DataStorage dataService=uiPage.getApplicationComponent(DataStorage.class);\n        dataService.save(page);\n      }\n      break;\n    }\n  }\n  PortalRequestContext pcontext=(PortalRequestContext)event.getRequestContext();\n  pcontext.ignoreAJAXUpdateOnPortlets(false);\n  pcontext.setResponseComplete(true);\n  pcontext.getWriter().write(EventListener.RESULT_OK);\n}\n",
      "formalParam": [
        "Event<UIPage>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/gatein-portal/webui/portal/src/main/java/org/exoplatform/portal/webui/page/UIPageActionListener.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Event<UIPage>"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.String.trim()",
            "java.lang.String.length()",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "length"
      ]
    },
    {
      "method": "startStartup@78",
      "body": "public void startStartup() throws ServiceException {\n  LOG.info(\"StartStartup called\");\nsynchronized (lock) {\n    if (state == State.STARTING || state == State.STOPPING) {\n      throw new IllegalStateException(\"State change already in progress\");\n    }\n    if (state == State.STARTED) {\n      LOG.info(\"Already started\");\n      return;\n    }\n    state=State.STARTING;\n  }\n  new Thread(new Runnable(){\n    public void run(){\n      LOG.info(\"Starting up\");\n      try {\n        doStartup();\n        LOG.info(\"Startup completed\");\nsynchronized (lock) {\n          state=State.STARTED;\n          lock.notifyAll();\n        }\n      }\n catch (      InterruptedException ex) {\n        LOG.error(\"Startup interrupted\");\nsynchronized (lock) {\n          state=State.FAILED;\n          lock.notifyAll();\n        }\n      }\ncatch (      ServiceException ex) {\n        LOG.error(\"Startup failed\",ex);\nsynchronized (lock) {\n          state=State.FAILED;\n          lock.notifyAll();\n        }\n      }\n    }\n  }\n).start();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ACLS-protocol-library/aclslib/src/main/java/au/edu/uq/cmm/aclslib/service/ServiceBase.java",
      "classTypes": [
        "State",
        "Logger",
        "Object"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "start"
      ]
    },
    {
      "method": "createDate@49",
      "body": "public static final Date createDate(double value){\n  long time=Math.round(value);\n  return new Date(time);\n}\n",
      "formalParam": [
        "double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.round(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Date.Date(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Date",
      "file": "./java_projects/gwtphonegap/src/main/java/com/googlecode/gwtphonegap/client/file/js/FileObjectJsImpl.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Date",
        "Math",
        "Double"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.round(double)",
            "java.util.Date.Date(long)"
          ]
        }
      ],
      "keywords": [
        "math",
        "round"
      ]
    },
    {
      "method": "doExecute@52",
      "body": "@Override public void doExecute(TestContext context){\n  log.info(\"Assert container asserting exceptions of type \" + exception);\n  try {\n    setLastExecutedAction(action);\n    action.execute(context);\n  }\n catch (  Exception e) {\n    log.info(\"Validating caught exception ...\");\n    if (exception.isAssignableFrom(e.getClass())) {\n      if (message != null && !message.equals(e.getLocalizedMessage())) {\n        throw new ValidationException(\"Validation failed for asserted exception message - expected: '\" + message + \"' but was: '\"+ e.getLocalizedMessage()+ \"'\",e);\n      }\n      log.info(\"Exception is as expected: \" + e.getClass() + \": \"+ e.getLocalizedMessage());\n      log.info(\"Exception validation successful\");\n      return;\n    }\n else {\n      throw new ValidationException(\"Validation failed for asserted exception type - expected: '\" + exception + \"' but was: '\"+ e.getClass().getName()+ \"'\",e);\n    }\n  }\n  throw new ValidationException(\"Missing asserted exception '\" + exception + \"'\");\n}\n",
      "formalParam": [
        "TestContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Throwable.getLocalizedMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/citrus_1/modules/citrus-core/src/main/java/com/consol/citrus/container/Assert.java",
      "classTypes": [
        "Logger",
        "TestAction"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "Class"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
            "java.lang.Throwable.getLocalizedMessage()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
          ]
        }
      ],
      "keywords": [
        "localized",
        "get",
        "assignable",
        "object",
        "string"
      ]
    },
    {
      "method": "toHtmlFormBody@684",
      "body": "@Override public String toHtmlFormBody(){\n  final StringBuilder sb=new StringBuilder();\n  @SuppressWarnings(\"unused\") final String prefix=\"profile_\";\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "None",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(int)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(int)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/queryall/queryall-lib/src/main/java/org/queryall/impl/profile/ProfileImpl.java",
      "classTypes": [
        "Collection<URI>",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [
          "Collection<Statement>",
          "URI",
          "int"
        ],
        []
      ],
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "lang"
      ]
    },
    {
      "method": "ASTList@54",
      "body": "/** \n * Initializes a list expression with a Java Collection\n */\npublic ASTList(Collection objects){\n  super(ExpressionParserTreeConstants.JJTLIST);\n  setValues(objects);\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.Iterator.next()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.Object"
                  },
                  {
                    "_call": "java.util.List.add(java.lang.Object)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              },
              {
                "_call": "java.util.List.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Collection.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "Expression",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char[])",
              "java.io.PrintWriter.print(char)",
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cayenne/framework/cayenne-jdk1.5-unpublished/src/main/java/org/apache/cayenne/exp/parser/ASTList.java",
      "classTypes": [
        "Object[]"
      ],
      "sorrformalparam": [
        [
          "Iterator"
        ],
        [
          "int",
          "Object"
        ],
        [],
        [],
        [
          "PrintWriter",
          "String"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Collection",
        "Object",
        "Iterator"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.List.toArray()"
          ]
        },
        {
          "calls": [
            "java.util.Collection.toArray()"
          ]
        }
      ],
      "keywords": [
        "array",
        "iterator",
        "list",
        "add",
        "util"
      ]
    },
    {
      "method": "main@37",
      "body": "public static void main(String argv[]){\n  boolean t=true;\n  E1 se1=new E1();\n  E2 se2=new E2();\n  int i;\n  try {\n    if (t) {\n      i=0;\n      throw se1;\n    }\n else {\n      throw se2;\n    }\n  }\n catch (  E1 e) {\n  }\ncatch (  E2 e) {\n    i=0;\n  }\n  System.out.println(i);\n  System.out.println(\"Error : there should be compile-time errors\");\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/langtools/test/tools/javac/DefiniteAssignment/DefAssignAfterTry2.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "PrintStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(int)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "print",
        "io"
      ]
    },
    {
      "method": "stateChanged@3902",
      "body": "/** \n * change listener implementation for slider\n */\npublic void stateChanged(ChangeEvent e){\n  if (!slider.getValueIsAdjusting()) {\n    int size=slider.getValue();\n    GeoNumeric num;\n    for (int i=0; i < geos.length; i++) {\n      num=(GeoNumeric)geos[i];\n      num.setSlopeTriangleSize(size);\n      num.updateRepaint();\n    }\n  }\n}\n",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JSlider.getValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "JPanel",
        "void",
        "JPanel",
        "void",
        "void",
        "void",
        "JPanel",
        "JPanel",
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.setValue(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          },
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()",
              "java.awt.event.ActionEvent.getActionCommand()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.getValue()",
              "javax.swing.JSlider.getValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedIndex(int)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComboBox.removeActionListener(java.awt.event.ActionListener)",
              "javax.swing.JComboBox.setSelectedItem(java.lang.Object)",
              "javax.swing.JComboBox.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "Object[]",
        "DecoAnglePanel",
        "Application",
        "SelectionAllowedPanel",
        "JLabel",
        "JToggleButton",
        "ConicEqnPanel"
      ],
      "sorrformalparam": [
        [
          "ChangeEvent"
        ],
        [
          "Object[]"
        ],
        [],
        [
          "Object[]"
        ],
        [
          "ActionEvent"
        ],
        [
          "ActionEvent"
        ],
        [
          "ChangeEvent"
        ],
        [
          "Object[]"
        ],
        [
          "Object[]"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "getValue"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
            "javax.swing.JSlider.getValue()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
          ]
        }
      ],
      "keywords": [
        "adjusting",
        "swing",
        "get",
        "boolean",
        "j",
        "slider",
        "value"
      ]
    },
    {
      "method": "getData@75",
      "body": "/** \n * @param packetDescription true if log data received. set false when they contain GZIPed data et c.\n * @param timeout\n * @param timeoutUnit\n * @return\n */\npublic byte[] getData(String packetDescription,long timeout,TimeUnit timeoutUnit){\n  if (packetDescription != null && log.isDebugEnabled()) {\n    log.debug(\"waiting for \" + packetDescription + \" data from server.\");\n  }\n  long started=System.currentTimeMillis();\n  try {\n    if (!this.done.tryAcquire(timeout,timeoutUnit)) {\n      throw new TimeoutException(System.currentTimeMillis() - started);\n    }\n  }\n catch (  InterruptedException e) {\n    log.error(\"Exception while waiting for data\",e);\n  }\n  ByteBuffer data=ByteBuffer.allocate(this.bytes);\n  for (  ByteBuffer b : this.buffers) {\n    data.put(b);\n  }\n  byte[] arr=data.array();\n  long millisecondsSpent=System.currentTimeMillis() - started;\n  if (packetDescription != null && log.isInfoEnabled()) {\n    log.info(\"received \" + packetDescription + \" containing\"+ arr.length+ \" bytes in \"+ millisecondsSpent+ \" milliseconds:\\n\"+ Hex.log(arr,log));\n  }\n  return arr;\n}\n",
      "formalParam": [
        "String",
        "long",
        "TimeUnit"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "$NOT$java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.nio.ByteBuffer.allocate(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.array()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "byte[]",
        "byte[]",
        "void",
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.Semaphore.Semaphore(int)",
              "java.util.LinkedList<java.nio.ByteBuffer>.LinkedList<ByteBuffer>()",
              "java.util.concurrent.Semaphore.acquireUninterruptibly()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "$NOT$java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
              "java.nio.ByteBuffer.array()",
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "$NOT$java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
              "java.nio.ByteBuffer.array()",
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "$NOT$java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
              "java.nio.ByteBuffer.array()",
              "java.lang.System.currentTimeMillis()"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/despotify/java/tags/0.4.1/src/main/java/se/despotify/client/protocol/channel/ChannelCallback.java",
      "classTypes": [
        "Semaphore",
        "int",
        "Logger",
        "TimeUnit",
        "long",
        "List<ByteBuffer>"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "long",
          "TimeUnit"
        ],
        [
          "Channel",
          "byte[]"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "TimeUnit"
      ],
      "apicalls": [
        "array"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.currentTimeMillis()",
            "$NOT$java.util.concurrent.Semaphore.tryAcquire(long,java.util.concurrent.TimeUnit)",
            "java.nio.ByteBuffer.allocate(int)",
            "java.nio.ByteBuffer.put(java.nio.ByteBuffer)",
            "java.nio.ByteBuffer.array()",
            "java.lang.System.currentTimeMillis()"
          ]
        }
      ],
      "keywords": [
        "interrupted",
        "buffer",
        "system",
        "concurrent",
        "long"
      ]
    },
    {
      "method": "unmarshall@35",
      "body": "public DeleteHostedZoneResult unmarshall(StaxUnmarshallerContext context) throws Exception {\n  DeleteHostedZoneResult deleteHostedZoneResult=new DeleteHostedZoneResult();\n  int originalDepth=context.getCurrentDepth();\n  int targetDepth=originalDepth + 1;\n  if (context.isStartOfDocument())   targetDepth+=1;\n  while (true) {\n    XMLEvent xmlEvent=context.nextEvent();\n    if (xmlEvent.isEndDocument())     return deleteHostedZoneResult;\n    if (xmlEvent.isAttribute() || xmlEvent.isStartElement()) {\n      if (context.testExpression(\"ChangeInfo\",targetDepth)) {\n        deleteHostedZoneResult.setChangeInfo(ChangeInfoStaxUnmarshaller.getInstance().unmarshall(context));\n        continue;\n      }\n    }\n else     if (xmlEvent.isEndElement()) {\n      if (context.getCurrentDepth() < originalDepth) {\n        return deleteHostedZoneResult;\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "StaxUnmarshallerContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isEndElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isAttribute()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "javax.xml.stream.events.XMLEvent.isStartElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "DeleteHostedZoneResult",
      "file": "./java_projects/aws-sdk-for-java/src/main/java/com/amazonaws/services/route53/model/transform/DeleteHostedZoneResultStaxUnmarshaller.java",
      "classTypes": [
        "DeleteHostedZoneResultStaxUnmarshaller"
      ],
      "sorrformalparam": [],
      "types": [
        "stream",
        "Boolean"
      ],
      "apicalls": [
        "isEndDocument",
        "isStartElement",
        "isEndElement"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()",
            "javax.xml.stream.events.XMLEvent.isEndElement()"
          ]
        },
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "attribute",
        "events"
      ]
    },
    {
      "method": "onRecordAfterDelete@164",
      "body": "@Override public void onRecordAfterDelete(final ODocument iRecord){\n  final OClass cls=iRecord.getSchemaClass();\n  if (cls == null)   return;\n  final Collection<OIndex<?>> indexes=new ArrayList<OIndex<?>>(cls.getIndexes());\n  if (!indexes.isEmpty()) {\n    final Set<String> dirtyFields=new HashSet<String>(Arrays.asList(iRecord.getDirtyFields()));\n    if (!dirtyFields.isEmpty()) {\n      final Iterator<OIndex<?>> indexIterator=indexes.iterator();\n      while (indexIterator.hasNext()) {\n        final OIndex<?> index=indexIterator.next();\n        final boolean result;\n        if (index.getDefinition() instanceof OCompositeIndexDefinition)         result=processCompositeIndexDelete(index,dirtyFields,iRecord);\n else         result=processSingleIndexDelete(index,dirtyFields,iRecord);\n        if (result)         indexIterator.remove();\n      }\n    }\n    for (    final OIndex<?> index : indexes) {\n      final Object key=index.getDefinition().getDocumentValueToIndex(iRecord);\n      deleteIndexKey(index,iRecord,key);\n    }\n  }\n  releaseModificationLock(iRecord,indexes);\n  if (iRecord.isTrackingChanges()) {\n    iRecord.setTrackingChanges(false);\n    iRecord.setTrackingChanges(true);\n  }\n}\n",
      "formalParam": [
        "ODocument"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.util.Set<java.lang.String>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
              "$NOT$java.util.Set<java.lang.String>.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Orient/core/src/main/java/com/orientechnologies/orient/core/index/OClassIndexManager.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "ODocument"
        ]
      ],
      "types": [
        "ArrayList",
        "Set",
        "Boolean",
        "List"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Arrays.asList(T[])",
            "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
            "$NOT$java.util.Set<java.lang.String>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "boolean",
        "string",
        "list"
      ]
    },
    {
      "method": "testGetByProductAndFile@178",
      "body": "/** \n */\n@Test public void testGetByProductAndFile(){\n  try {\n    testSave();\n    ProductMedia media=service.getByProductAndFile(product,file);\n    assertTrue(\"media is null!\",media != null);\n  }\n catch (  ServiceException e) {\n    fail(e.getMessage());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getResourceAsStream(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.InputStream"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.getResourceAsStream(java.lang.String)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.HashSet<Tau_E>.HashSet()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/magja/src/test/java/com/google/code/magja/service/product/ProductMediaRemoteServiceTest.java",
      "classTypes": [
        "ProductRemoteService",
        "Product",
        "ProductMediaRemoteService",
        "String",
        "Logger"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "Class"
      ],
      "apicalls": [
        "getMessage",
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getResourceAsStream(java.lang.String)",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "class",
        "get"
      ]
    },
    {
      "method": "copy@126",
      "body": "/** \n * Copy the contents (EObjects, uri and xmi:ids) from oldResource to newResource. <p> This is basically EcoreUtil.copyAll, wrapped up in an XMLResource with an added copy of uri and xmi:ids. <p> The copy is not registered with any ResourceSet. It is intended primarily for subsequent use by EcoreUpdater. <p> Use  {@link org.eclipse.ocl.examples.common.utils.XMIUtils#assignIds} to avoid MissingXmiIdExceptions.\n * @param newResource to be defined\n * @param oldResource to be copied\n * @throws MissingXmiIdException if any oldResource object lacks an xmi:id\n */\npublic static void copy(XMLResource newResource,XMLResource oldResource) throws MissingXmiIdException {\n  newResource.setURI(oldResource.getURI());\n  Copier copier=new Copier();\n  newResource.getContents().addAll(copier.copyAll(oldResource.getContents()));\n  copier.copyReferences();\n  for (  EObject oldObject : copier.keySet()) {\n    EObject newObject=copier.get(oldObject);\n    if (!(newObject instanceof EGenericType)) {\n      String id=oldResource.getID(oldObject);\n      if (id == null)       throw new MissingXmiIdException(oldObject);\n      newResource.setID(newObject,id);\n    }\n  }\n  for (TreeIterator<EObject> iterator=newResource.getAllContents(); iterator.hasNext(); ) {\n    EObject newObject=iterator.next();\n    if (!(newObject instanceof EGenericType)) {\n      String id=newResource.getID(newObject);\n      if (id == null) {\n        EObject newContainer=newObject.eContainer();\n        String containerId=newResource.getID(newContainer);\n        if (containerId == null)         throw new MissingXmiIdException(newContainer);\n        EStructuralFeature containingFeature=newObject.eContainingFeature();\n        EObject oldContainer=oldResource.getEObject(containerId);\n        Object oldObject=oldContainer.eGet(containingFeature);\n        if (containingFeature.isMany()) {\n          List<?> newList=(List<?>)newContainer.eGet(containingFeature);\n          int index=newList.indexOf(newObject);\n          oldObject=((List<?>)oldObject).get(index);\n        }\n        id=oldResource.getID((EObject)oldObject);\n        newResource.setID(newObject,id);\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "XMLResource",
        "XMLResource"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.indexOf(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "sorrreturntype": [
        "List<EObject>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.ArrayList<Tau_E>.ArrayList(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.Collections.sort(java.util.List)",
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ocl/archive/org.eclipse.ocl.examples.editor.ui/src/org/eclipse/ocl/examples/editor/ui/utils/EcoreUpdater.java",
      "classTypes": [
        "XMLResource",
        "Map<EObject,String>",
        "Map<EObject,String>",
        "XMLResource"
      ],
      "sorrformalparam": [
        [
          "XMLResource",
          "Map<String,EObject>",
          "Map<EObject,String>",
          "IdCreator"
        ],
        [
          "PrintStream"
        ]
      ],
      "types": [
        "Object",
        "List"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.indexOf(java.lang.Object)",
            "java.util.List<Tau_E>.get(int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "delete@379",
      "body": "/** \n * Overrides the delete function because we keep all files throws every child into the trash also. Recursive function if the file has children\n */\n@Override public void delete() throws SQLException {\n  setDeleted(true);\n  setDeletedWhen(IWTimestamp.getTimestampRightNow());\n  try {\n    IWContext iwc=IWContext.getInstance();\n    int userId=iwc.getUserId();\n    if (userId != -1) {\n      setDeletedByUserId(userId);\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace(System.err);\n  }\n  ICFile file=(ICFile)getParentNode();\n  if (file != null) {\n    file.removeChild(this);\n  }\n  Iterator iter=getChildrenIterator();\n  if (iter != null) {\n    while (iter.hasNext()) {\n      ICFile item=(ICFile)iter.next();\n      item.delete();\n    }\n  }\n  update();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/com.idega.core/src/java/com/idega/core/file/data/ICFileBMPBean.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace(java.io.PrintStream)",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "MetaEnumeration@118",
      "body": "/** \n * Initiates this enumeration.\n * @param outer an iterator over external collection ofPermissionCollections\n */\npublic MetaEnumeration(Iterator outer){\n  pcIter=outer;\n  current=getNextEnumeration();\n}\n",
      "formalParam": [
        "Iterator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Enumeration<Permission>",
        "void",
        "Object",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map.values()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.Permission.newPermissionCollection()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration.nextElement()",
              "$NOT$java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Enumeration.nextElement()",
              "$NOT$java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/harmony_1/classlib/modules/security/src/main/java/common/java/security/Permissions.java",
      "classTypes": [
        "boolean",
        "ObjectStreamField[]",
        "Enumeration",
        "Map",
        "long",
        "Iterator"
      ],
      "sorrformalparam": [
        [],
        [
          "Permission"
        ],
        [],
        [
          "Permission"
        ]
      ],
      "types": [
        "Iterator"
      ],
      "apicalls": [
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "getKey@7423",
      "body": "public byte[] getKey(){\n  setKey(TBaseHelper.rightSize(key));\n  return key.array();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.array()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "byte[]",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.size()",
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.entrySet()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "ColumnParent",
        "TStruct",
        "short",
        "Map<_Fields,FieldMetaData>",
        "TField"
      ],
      "sorrformalparam": [
        [
          "TProtocol"
        ],
        [],
        []
      ],
      "types": [
        "ByteBuffer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.nio.ByteBuffer.array()"
          ]
        }
      ],
      "keywords": [
        "array",
        "byte"
      ]
    },
    {
      "method": "propertyChange@67",
      "body": "public void propertyChange(PropertyChangeEvent e){\n  if (e.getPropertyName().equals(LINE_STYLE_PROPERTY))   decodeLineStyle(e.getNewValue());\n}\n",
      "formalParam": [
        "PropertyChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.beans.PropertyChangeEvent.getPropertyName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.beans.PropertyChangeEvent.getNewValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.UIManager.getColor(java.lang.Object)",
              "java.awt.Graphics.setColor(java.awt.Color)",
              "java.awt.Graphics.getClipBounds()",
              "java.awt.Graphics.drawLine(int,int,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.getClientProperty(java.lang.Object)",
              "java.awt.Container.addPropertyChangeListener(java.beans.PropertyChangeListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/javax/swing/plaf/metal/MetalTreeUI.java",
      "classTypes": [
        "String",
        "int",
        "int",
        "String",
        "PropertyChangeListener",
        "String"
      ],
      "sorrformalparam": [
        [
          "Graphics",
          "JComponent"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [],
      "apicalls": [
        "getPropertyName",
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)",
            "java.beans.PropertyChangeEvent.getNewValue()"
          ]
        },
        {
          "calls": [
            "java.beans.PropertyChangeEvent.getPropertyName()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "event",
        "equals",
        "object"
      ]
    },
    {
      "method": "getAccessibleChild@196",
      "body": "/** \n * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic Accessible getAccessibleChild(JComponent a,int b){\n  Accessible returnValue=((ComponentUI)(uis.elementAt(0))).getAccessibleChild(a,b);\n  for (int i=1; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).getAccessibleChild(a,b);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JComponent",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.accessibility.Accessible"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.accessibility.Accessible"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "boolean",
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.paint(java.awt.Graphics,javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,int,int)",
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,int,int)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)",
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ]
      ],
      "returnType": "Accessible",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/multi/MultiLabelUI.java",
      "classTypes": [
        "Vector"
      ],
      "sorrformalparam": [
        [
          "Graphics",
          "JComponent"
        ],
        [
          "JComponent"
        ],
        [
          "JComponent",
          "int",
          "int"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [
        "ComponentUI"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()",
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "child",
        "get"
      ]
    },
    {
      "method": "testFullpathDiffersInCaseScanningInsensitive@385",
      "body": "public void testFullpathDiffersInCaseScanningInsensitive(){\n  if (!loginSuceeded) {\n    return;\n  }\n  if (!changeRemoteDir(remoteTmpDir)) {\n    return;\n  }\n  FTP.FTPDirectoryScanner ds=myFTPTask.newScanner(ftp);\n  ds.setBasedir(new File(getProject().getBaseDir(),\"tmp\"));\n  ds.setIncludes(new String[]{\"alpha/beta/gamma/gamma.xml\",\"alpha/beta/gamma/GAMMA.XML\"});\n  ds.setCaseSensitive(false);\n  ds.scan();\n  compareFiles(ds,new String[]{\"alpha/beta/gamma/gamma.xml\"},new String[]{});\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.io.PrintStream.println(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "$NOT$java.io.PrintStream.println(java.lang.String)",
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ant/src/tests/junit/org/apache/tools/ant/taskdefs/optional/net/FTPTest.java",
      "classTypes": [
        "String",
        "int",
        "boolean",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "File",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.PrintStream.println(java.lang.String)",
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "println",
        "stream",
        "file",
        "string"
      ]
    },
    {
      "method": "testJmxRegistration@62",
      "body": "@Test public void testJmxRegistration() throws Exception {\n  List<MBeanServer> servers=MBeanServerFactory.findMBeanServer(null);\n  log.info(\"Servers in testJmxRegistration: \" + servers);\n  assertNotNull(\"MBeanServers were null\",servers);\n  assertFalse(\"No MBeanServer was found\",servers.isEmpty());\n  MBeanServer mbeanServer=servers.get(0);\n  assertTrue(\"No MBeans found in server\",mbeanServer.getMBeanCount() > 0);\n  Set<ObjectInstance> objects=mbeanServer.queryMBeans(null,null);\n  assertFalse(\"No SolrInfoMBean objects found in mbean server\",objects.isEmpty());\n  for (  ObjectInstance o : objects) {\n    MBeanInfo mbeanInfo=mbeanServer.getMBeanInfo(o.getObjectName());\n    if (mbeanInfo.getClassName().endsWith(SolrDynamicMBean.class.getName())) {\n      assertTrue(\"No Attributes found for mbean: \" + mbeanInfo,mbeanInfo.getAttributes().length > 0);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<javax.management.MBeanServer>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List<javax.management.MBeanServer>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.management.MBeanServer"
          },
          {
            "_call": "javax.management.MBeanServer.getMBeanCount()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set<javax.management.ObjectInstance>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.management.MBeanServer.getMBeanInfo(javax.management.ObjectName)",
            "_throws": [
              "javax.management.ReflectionException",
              "javax.management.IntrospectionException",
              "javax.management.InstanceNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "javax.management.MBeanInfo"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.endsWith(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<javax.management.MBeanServer>.get(int)",
              "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",
              "java.lang.String.valueOf(char[])",
              "javax.management.MBeanServer.getAttribute(javax.management.ObjectName,java.lang.String)",
              "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",
              "java.lang.String.valueOf(char[])",
              "javax.management.MBeanServer.getAttribute(javax.management.ObjectName,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.util.List<javax.management.MBeanServer>.get(int)",
              "javax.management.MBeanServer.queryNames(javax.management.ObjectName,javax.management.QueryExp)",
              "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",
              "java.util.Set.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/lucene-solr/solr/core/src/test/org/apache/solr/core/TestJmxIntegration.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "MBeanInfo",
        "ReflectionException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<javax.management.MBeanServer>.isEmpty()",
            "java.util.List<javax.management.MBeanServer>.get(int)",
            "javax.management.MBeanServer.getMBeanCount()",
            "javax.management.MBeanServer.queryMBeans(javax.management.ObjectName,javax.management.QueryExp)",
            "java.util.Set<javax.management.ObjectInstance>.isEmpty()",
            "javax.management.MBeanServer.getMBeanInfo(javax.management.ObjectName)",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "server",
        "info"
      ]
    },
    {
      "method": "execute@35",
      "body": "public boolean execute(HttpServletRequest request,HttpServletResponse response) throws CarbonException, IOException {\n  String webContext=(String)request.getAttribute(CarbonConstants.WEB_CONTEXT);\n  String serverURL=(String)request.getAttribute(CarbonConstants.SERVER_URL);\n  String cookie=(String)request.getAttribute(ServerConstants.ADMIN_SERVICE_COOKIE);\n  Map<String,ArrayList<FileItemData>> fileItemsMap=getFileItemsMap();\n  if (fileItemsMap == null || fileItemsMap.isEmpty()) {\n    String msg=\"File uploading failed. No files are specified\";\n    log.error(msg);\n    CarbonUIMessage.sendCarbonUIMessage(msg,CarbonUIMessage.ERROR,request,response,getContextRoot(request) + \"/\" + webContext+ \"/ds/upload.jsp\");\n  }\n  DBSFileUploadClient serviceUploaderClient=new DBSFileUploadClient(configurationContext,serverURL,cookie);\n  String msg;\n  try {\n    if (fileItemsMap != null) {\n      for (      Object o : fileItemsMap.keySet()) {\n        String fieldName=(String)o;\n        FileItemData fileItemData=fileItemsMap.get(fieldName).get(0);\n        String fileName=getFileName(fileItemData.getFileItem().getName());\n        checkServiceFileExtensionValidity(fileName,ALLOWED_FILE_EXTENSIONS);\n        if (fileName.endsWith(\".dbs\")) {\n          serviceUploaderClient.uploadService(fileName,\"\",fileItemData.getDataHandler());\n        }\n else {\n          throw new CarbonException(\"File with extension \" + fileName + \" is not supported!\");\n        }\n      }\n      response.setContentType(\"text/html; charset=utf-8\");\n      msg=\"Uploaded the DBS. Deployment in progress. Status of the upload will be known once the \" + \"deployment is complete.Please refresh the service list in a moment\";\n      CarbonUIMessage.sendCarbonUIMessage(msg,CarbonUIMessage.INFO,request,response,getContextRoot(request) + \"/\" + webContext+ \"/service-mgt/index.jsp\");\n      return true;\n    }\n  }\n catch (  java.lang.Exception e) {\n    msg=\"File upload failed. \" + e.getMessage();\n    log.error(msg);\n    CarbonUIMessage.sendCarbonUIMessage(msg.replace(\"'\",\"`\").replace(\"\\\"\",\"`\").replace('\\n',' '),CarbonUIMessage.ERROR,request,response,getContextRoot(request) + \"/\" + webContext+ \"/ds/upload.jsp\");\n  }\n  return false;\n}\n",
      "formalParam": [
        "HttpServletRequest",
        "HttpServletResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(char,char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/platform/components/data-services/org.wso2.carbon.dataservices.ui/src/main/java/org/wso2/carbon/dataservices/ui/fileupload/DBSFileUploadExecutor.java",
      "classTypes": [
        "String[]"
      ],
      "sorrformalparam": [],
      "types": [
        "CharSequence"
      ],
      "apicalls": [
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.endsWith(java.lang.String)",
            "java.lang.Throwable.getMessage()",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "java.lang.String.replace(char,char)"
          ]
        }
      ],
      "keywords": [
        "message",
        "string",
        "get"
      ]
    },
    {
      "method": "testUpdateTranslation@12",
      "body": "@Test public void testUpdateTranslation(){\n  translationNotifier.setLanguage(Language.FR);\n  JPanel jPanel=new JPanel();\n  jPanel.setBorder(BorderFactory.createTitledBorder(\"Borde\"));\n  InternationalizableJPanel panel=new InternationalizableJPanel(\"MyBorderKey\",jPanel);\n  TitledBorder border=((TitledBorder)panel.getComponent().getBorder());\n  assertThat(border.getTitle(),equalTo(\"Borde\"));\n  panel.updateTranslation(Language.EN,translationManager);\n  assertThat(border.getTitle(),equalTo(\"Border\"));\n  panel.updateTranslation(Language.FR,translationManager);\n  assertThat(border.getTitle(),equalTo(\"Bordure\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JPanel.JPanel()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.TitledBorder"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JPanel.JPanel()",
              "java.lang.Throwable.getMessage()",
              "javax.swing.BorderFactory.createEtchedBorder()",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/codjo-i18n/codjo-i18n-gui/src/test/java/net/codjo/i18n/gui/InternationalizableJPanelTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "BorderFactory",
        "Border"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JPanel.JPanel()",
            "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "j",
        "set",
        "border",
        "factory"
      ]
    },
    {
      "method": "urlToPath@59",
      "body": "public static String urlToPath(String maybeUrl){\n  Matcher m=URL.matcher(maybeUrl);\n  return (m.matches() ? m.group(1) : maybeUrl);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.matches()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.regex.Matcher.group(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/MPS/core/make-runtime/solutions/jetbrains.mps.make.runtime/source_gen/jetbrains/mps/internal/make/runtime/util/DirUtil.java",
      "classTypes": [
        "String",
        "Pattern",
        "char"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "group",
        "matcher",
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Matcher.group(int)"
          ]
        },
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "sequence",
        "integer",
        "matches"
      ]
    },
    {
      "method": "toSQLString@68",
      "body": "public static String toSQLString(SQLObject sqlObject){\n  StringBuilder out=new StringBuilder();\n  sqlObject.accept(new SQLASTOutputVisitor(out));\n  String sql=out.toString();\n  return sql;\n}\n",
      "formalParam": [
        "SQLObject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/druid/src/main/java/com/alibaba/druid/sql/SQLUtils.java",
      "classTypes": [
        "Log"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "SQLObject"
        ],
        [
          "SQLObject"
        ],
        [
          "SQLObject"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "SQLObject"
        ]
      ],
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "lang",
        "string"
      ]
    },
    {
      "method": "updateWithOnConflict@131",
      "body": "public int updateWithOnConflict(SQLiteOpenHelper db,ContentValues values,int algorithm){\n  assertTable();\n  PlatformDatabaseUtils pdb=new PlatformDatabaseUtils(db);\n  return pdb.updateWithOnConflict(mTable,values,getSelection(),getSelectionArgs(),algorithm);\n}\n",
      "formalParam": [
        "SQLiteOpenHelper",
        "ContentValues",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ArrayList<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "SelectionBuilder",
        "Cursor"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.setLength(int)",
              "java.util.ArrayList<java.lang.String>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.StringBuilder.toString()",
              "java.util.ArrayList<java.lang.String>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/ProviderOne/java/SampleProviderProject/src/com/groupme/providerone/sample/database/autogen/util/SelectionBuilder.java",
      "classTypes": [
        "ArrayList<String>",
        "StringBuilder",
        "Map<String,String>",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "SQLiteDatabase",
          "String[]",
          "String",
          "String",
          "String",
          "String"
        ]
      ],
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [
        "toArray",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.toString()",
            "java.util.ArrayList<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "lang",
        "array",
        "util",
        "builder",
        "list",
        "string"
      ]
    },
    {
      "method": "main@37",
      "body": "/** \n * For verification of a modicum of sanity, run a few  test strings through\n */\npublic static void main(String argv[]){\n  String str[]={\"\",\"a\",\"abc\",\"message digest\",\"abcdefghijklmnopqrstuvwxyz\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"01234567890123456789012345678901234567890123456789012345\"};\n  for (int i=0; i < str.length; i++) {\n    md4 mdc=new md4(str[i]);\n    mdc.calc();\n    System.out.println(\"md4(\\\"\" + str[i] + \"\\\") = \"+ mdc);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Ganymede/src/ganymede/arlut/csd/crypto/md4.java",
      "classTypes": [
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "integer"
      ]
    },
    {
      "method": "md5@168",
      "body": "/** \n * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n * @param data Data to digest\n * @return MD5 digest\n * @throws IOException On error reading from the stream\n * @since 1.4\n */\npublic static byte[] md5(InputStream data) throws IOException {\n  return digest(getMd5Digest(),data);\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.MessageDigest.getInstance(java.lang.String)",
            "_throws": [
              "java.security.NoSuchAlgorithmException"
            ],
            "node": "DAPICall",
            "_returns": "java.security.MessageDigest"
          },
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.security.MessageDigest.update(byte[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.security.MessageDigest.digest()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "byte[]",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.digest(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.digest(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.MessageDigest.getInstance(java.lang.String)",
              "java.security.MessageDigest.digest(byte[])"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/frascati-studio-social/src/org/apache/commons/codec/digest/DigestUtils.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "byte[]"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "NoSuchAlgorithmException"
      ],
      "apicalls": [
        "getInstance",
        "update"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.MessageDigest.getInstance(java.lang.String)",
            "java.io.InputStream.read(byte[],int,int)",
            "java.security.MessageDigest.update(byte[],int,int)",
            "java.io.InputStream.read(byte[],int,int)",
            "java.security.MessageDigest.digest()"
          ]
        }
      ],
      "keywords": [
        "instance",
        "input",
        "read"
      ]
    },
    {
      "method": "getInteger@50",
      "body": "/** \n * Get <code>Integer</code> for value.\n * @param value non-negative integer value\n * @return corresponding <code>Integer</code> value\n */\npublic static Integer getInteger(int value){\n  if (value >= s_integers.length) {\nsynchronized (IntegerCache.class) {\n      int size=s_integers.length * 3 / 2;\n      if (size <= value) {\n        size=value + 1;\n      }\n      Integer[] ints=new Integer[size];\n      System.arraycopy(s_integers,0,ints,0,s_integers.length);\n      for (int i=0; i < size; i++) {\n        ints[i]=new Integer(i);\n      }\n      s_integers=ints;\n    }\n  }\n  return s_integers[value];\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Integer",
      "file": "./java_projects/core_8/build/src/org/jibx/binding/util/IntegerCache.java",
      "classTypes": [
        "Integer[]"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "System"
      ],
      "apicalls": [
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.Integer.Integer(int)"
          ]
        }
      ],
      "keywords": [
        "system",
        "integer",
        "lang",
        "object",
        "arraycopy"
      ]
    },
    {
      "method": "fromString@363",
      "body": "public static Time fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,java.lang.String content){\n  if (content.indexOf(\":\") > -1) {\n    java.lang.String prefix=content.substring(0,content.indexOf(\":\"));\n    java.lang.String namespaceUri=xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);\n    return Time.Factory.fromString(content,namespaceUri);\n  }\n else {\n    return Time.Factory.fromString(content,\"\");\n  }\n}\n",
      "formalParam": [
        "javax.xml.stream.XMLStreamReader",
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.indexOf(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "javax.xml.stream.XMLStreamReader.getNamespaceContext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.xml.namespace.NamespaceContext"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.stream.XMLStreamReader.getProperty(java.lang.String)",
              "java.lang.Boolean.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Time",
      "file": "./java_projects/axis2-java/modules/adb/src/org/apache/axis2/databinding/types/xsd/Time.java",
      "classTypes": [
        "org.apache.axis2.databinding.types.Time"
      ],
      "sorrformalparam": [
        [
          "javax.xml.stream.XMLStreamReader"
        ]
      ],
      "types": [
        "XMLStreamReader"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.substring(int,int)",
            "javax.xml.stream.XMLStreamReader.getNamespaceContext()"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "integer",
        "string",
        "get"
      ]
    },
    {
      "method": "traverse@397",
      "body": "public void traverse(Collection<CodecStats> col){\n  col.add(this);\n  for (  CodecStats childStats : children.values())   childStats.traverse(col);\n}\n",
      "formalParam": [
        "Collection<CodecStats>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.values()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Collection"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "CodecStats"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.values()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.tree.DefaultMutableTreeNode.getUserObject()",
              "java.util.TreeMap<Tau_K,Tau_V>.TreeMap()",
              "javax.swing.tree.DefaultMutableTreeNode.children()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/crammer/src/main/java/uk/ac/ebi/ena/sra/cram/impl/RecordCodecFactory.java",
      "classTypes": [
        "long",
        "String",
        "Map<String,CodecStats>"
      ],
      "sorrformalparam": [
        [
          "StringBuffer"
        ],
        [
          "DefaultMutableTreeNode"
        ]
      ],
      "types": [],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.add(Tau_E)",
            "java.util.Map<Tau_K,Tau_V>.values()"
          ]
        }
      ],
      "keywords": [
        "map",
        "add",
        "boolean"
      ]
    },
    {
      "method": "addFetchInnerJoins@447",
      "body": "public JDBCFetchConfiguration addFetchInnerJoins(Collection<String> joins){\n  if (joins == null || joins.isEmpty())   return this;\n  for (Iterator<String> itr=joins.iterator(); itr.hasNext(); )   addFetchInnerJoin((String)itr.next());\n  return this;\n}\n",
      "formalParam": [
        "Collection<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<java.lang.String>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Collection<java.lang.String>.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "JDBCFetchConfiguration",
        "JDBCFetchConfiguration",
        "JDBCFetchConfiguration"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.lang.String>.isEmpty()",
              "java.util.Collection<java.lang.String>.iterator()",
              "java.util.Iterator<java.lang.String>.hasNext()",
              "java.util.Iterator<java.lang.String>.next()",
              "java.util.Iterator<java.lang.String>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "JDBCFetchConfiguration",
      "file": "./java_projects/openjpa/openjpa-jdbc/src/main/java/org/apache/openjpa/jdbc/kernel/JDBCFetchConfigurationImpl.java",
      "classTypes": [
        "Set<String>",
        "int",
        "Set<String>",
        "int",
        "JDBCConfigurationState",
        "int",
        "int",
        "Localizer"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Collection<String>"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<java.lang.String>.isEmpty()",
            "java.util.Collection<java.lang.String>.iterator()",
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "next"
      ]
    },
    {
      "method": "testJoinincomingCallDirect@2209",
      "body": "/** \n */\npublic void testJoinincomingCallDirect(){\n  final SIPIncomingCall incomingCall=joinincomingCallDirectExpectations(\"testJoinincomingCallDirectInitReqNoSDP\");\n  try {\n    sipcall.join(incomingCall,JoinType.DIRECT,Direction.DUPLEX).get();\n  }\n catch (  final Throwable ex) {\n    ex.printStackTrace();\n    fail(ex.getMessage());\n  }\n  assertEquals(sipcall.getSIPCallState(),SIPCall.State.ANSWERED);\n  assertTrue(sipcall.getMediaObject() == null);\n  assertTrue(sipcall.getPeers()[0] == incomingCall);\n  mockery.assertIsSatisfied();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/moho/moho-impl/src/test/java/com/voxeo/moho/sip/SIPIncomingCallTest.java",
      "classTypes": [
        "SipApplicationSession",
        "MediaSession",
        "SIPIncomingCall",
        "SdpPortManagerEvent",
        "CountDownLatch",
        "ExecutionContext",
        "SIPCallImpl",
        "MsControlFactory"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "get",
        "print"
      ]
    },
    {
      "method": "getAccessibleChild@196",
      "body": "/** \n * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.\n * @return the value obtained from the first UI, which isthe UI obtained from the default <code>LookAndFeel</code>\n */\npublic Accessible getAccessibleChild(JComponent a,int b){\n  Accessible returnValue=((ComponentUI)(uis.elementAt(0))).getAccessibleChild(a,b);\n  for (int i=1; i < uis.size(); i++) {\n    ((ComponentUI)(uis.elementAt(i))).getAccessibleChild(a,b);\n  }\n  return returnValue;\n}\n",
      "formalParam": [
        "JComponent",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.accessibility.Accessible"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.accessibility.Accessible"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "boolean",
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.paint(java.awt.Graphics,javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.installUI(javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,int,int)",
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.contains(javax.swing.JComponent,int,int)",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)",
              "java.util.Vector.size()",
              "javax.swing.plaf.ComponentUI.getMaximumSize(javax.swing.JComponent)",
              "java.util.Vector.size()"
            ]
          }
        ]
      ],
      "returnType": "Accessible",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/multi/MultiLabelUI.java",
      "classTypes": [
        "Vector"
      ],
      "sorrformalparam": [
        [
          "Graphics",
          "JComponent"
        ],
        [
          "JComponent"
        ],
        [
          "JComponent",
          "int",
          "int"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [
        "ComponentUI"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()",
            "javax.swing.plaf.ComponentUI.getAccessibleChild(javax.swing.JComponent,int)",
            "java.util.Vector.size()"
          ]
        }
      ],
      "keywords": [
        "child",
        "get"
      ]
    },
    {
      "method": "testCase21@457",
      "body": "/** \n * Subtract ZERO from a number. The number is positive.\n */\npublic void testCase21(){\n  byte aBytes[]={120,34,78,-23,-111,45,127,23,45,-3};\n  byte rBytes[]={120,34,78,-23,-111,45,127,23,45,-3};\n  int aSign=1;\n  BigInteger aNumber=new BigInteger(aSign,aBytes);\n  BigInteger bNumber=BigInteger.ZERO;\n  BigInteger result=aNumber.subtract(bNumber);\n  byte resBytes[]=new byte[rBytes.length];\n  resBytes=result.toByteArray();\n  for (int i=0; i < resBytes.length; i++) {\n    assertTrue(resBytes[i] == rBytes[i]);\n  }\n  assertEquals(1,result.signum());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(int,byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.subtract(java.math.BigInteger)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.math.BigInteger"
          },
          {
            "_call": "java.math.BigInteger.toByteArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.math.BigInteger.signum()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.subtract(java.math.BigInteger)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.subtract(java.math.BigInteger)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.subtract(java.math.BigInteger)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerSubtractTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "subtract"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(int,byte[])",
            "java.math.BigInteger.subtract(java.math.BigInteger)",
            "java.math.BigInteger.toByteArray()",
            "java.math.BigInteger.signum()"
          ]
        }
      ],
      "keywords": [
        "array",
        "signum"
      ]
    },
    {
      "method": "build@34",
      "body": "public JButton build(){\n  JButton button=new JButton(action);\n  button.setName(name);\n  button.setBorderPainted(false);\n  button.setFocusable(false);\n  button.setMargin(new Insets(0,0,0,0));\n  if ((labelKey != null) || (tooltipKey != null)) {\n    registerInternationalizableButton(button);\n  }\n  return button;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JButton.JButton(javax.swing.Action)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setName(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.setBorderPainted(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.setFocusable(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Insets.Insets(int,int,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.setMargin(java.awt.Insets)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "JButton",
      "file": "./java_projects/codjo-mad/codjo-mad-gui/src/main/java/net/codjo/mad/gui/base/ButtonBuilder.java",
      "classTypes": [
        "String",
        "String",
        "TranslationNotifier",
        "String",
        "Action"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JButton.JButton(javax.swing.Action)",
            "java.awt.Component.setName(java.lang.String)",
            "javax.swing.AbstractButton.setBorderPainted(boolean)",
            "java.awt.Component.setFocusable(boolean)",
            "java.awt.Insets.Insets(int,int,int,int)",
            "javax.swing.AbstractButton.setMargin(java.awt.Insets)"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "registerState@20",
      "body": "public static String registerState(Object init){\nsynchronized (_lock) {\n    String id=UUID.randomUUID().toString();\n    _states.put(id,init);\n    return id;\n  }\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.UUID.randomUUID()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.UUID"
          },
          {
            "_call": "java.util.UUID.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/storm/src/jvm/backtype/storm/utils/RegisteredGlobalState.java",
      "classTypes": [
        "Object",
        "HashMap<String,Object>"
      ],
      "sorrformalparam": [],
      "types": [
        "UUID",
        "String",
        "HashMap"
      ],
      "apicalls": [
        "toString",
        "put",
        "randomUUID"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()",
            "java.util.HashMap<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "uuid",
        "map"
      ]
    },
    {
      "method": "getEntryNames@100",
      "body": "public static List<String> getEntryNames(Iterator<? extends FSEntry> it){\n  List<String> names=new ArrayList<String>();\n  while (it.hasNext()) {\n    FSEntry entry=it.next();\n    names.add((entry == null) ? null : entry.getName());\n  }\n  return names;\n}\n",
      "formalParam": [
        "Iterator<? extends FSEntry>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "String",
        "File",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.forName(java.lang.String)",
              "java.lang.Class<Tau_T>.newInstance()",
              "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.FileInputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.write(byte[])",
              "java.io.FileOutputStream.write(byte[],int,int)",
              "java.io.OutputStream.flush()",
              "java.io.FileOutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.InputStream.read(byte[])",
              "java.nio.ByteBuffer.wrap(byte[],int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "List<String>",
      "file": "./java_projects/jnode/fs/src/test/org/jnode/test/support/TestUtils.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [
          "String",
          "Class<?>"
        ],
        [
          "String",
          "int",
          "int"
        ],
        [
          "String",
          "long"
        ],
        [
          "InputStream",
          "Device"
        ],
        [
          "Iterator<? extends FSEntry>"
        ]
      ],
      "types": [
        "ArrayList",
        "Iterator"
      ],
      "apicalls": [
        "hasNext",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "add",
        "boolean",
        "string"
      ]
    },
    {
      "method": "testInheritedFolderName2@636",
      "body": "/** \n * Tests inheritance of folder names for resource types.<p>\n * @throws Exception\n */\npublic void testInheritedFolderName2() throws Exception {\n  CmsFolderOrName folder=new CmsFolderOrName(\"/somefolder/.content\",\"blah\");\n  CmsResourceTypeConfig typeConf1=new CmsResourceTypeConfig(\"foo\",false,folder,\"pattern_%(number)\",null);\n  CmsTestConfigData config1=new CmsTestConfigData(\"/somefolder\",list(typeConf1),NO_PROPERTIES,NO_DETAILPAGES,NO_MODEL_PAGES);\n  config1.initialize(rootCms());\n  CmsResourceTypeConfig typeConf2=new CmsResourceTypeConfig(\"foo\",false,null,\"blah\",null);\n  CmsTestConfigData config2=new CmsTestConfigData(\"/somefolder/somesubfolder\",list(typeConf2),NO_PROPERTIES,NO_DETAILPAGES,NO_MODEL_PAGES);\n  config2.initialize(rootCms());\n  config2.setParent(config1);\n  CmsResourceTypeConfig rtc=config2.getResourceType(typeConf1.getTypeName());\n  String folderPath=rtc.getFolderPath(getCmsObject());\n  assertPathEquals(\"/somefolder/.content/blah\",folderPath);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.List<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.util.Set<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/opencms-core/test/org/opencms/ade/configuration/TestConfig.java",
      "classTypes": [
        "List<CmsModelPageConfig>",
        "List<CmsDetailPageInfo>",
        "List<CmsPropertyConfig>",
        "List<CmsResourceTypeConfig>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.add(Tau_E)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.List<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "add",
        "array"
      ]
    },
    {
      "method": "getSubDocuments@847",
      "body": "/** \n * Returns the count of sub documents, if this document is a folder.<p> If this document is a file, 0 is returned.\n * @param cms the CmsObject to be passed\n * @return count of sub documents, if this \"document\" is a folder\n * @throws CmsException \n */\npublic int getSubDocuments(CmsObject cms) throws CmsException {\n  if (m_cmsResource.isFolder()) {\n    List list=cms.getFilesInFolder(m_path);\n    for (int i=0; i < list.size(); i++) {\n      if ((((CmsResource)list.get(i)).getName()).startsWith(\"$\")) {\n        list.remove(i);\n      }\n    }\n    return list.size();\n  }\n else {\n    return 0;\n  }\n}\n",
      "formalParam": [
        "CmsObject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "CmsDocument",
        "boolean",
        "String",
        "String",
        "CmsDocument"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)",
              "java.util.Locale.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.util.Date.getTime()",
              "java.util.Date.Date()",
              "java.util.Date.getTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)",
              "java.text.DateFormat.getDateInstance(int,java.util.Locale)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.endsWith(java.lang.String)",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "java.lang.String.toLowerCase()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)",
              "java.util.Locale.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/alkacon-oamp/com.alkacon.opencms.documentcenter/src/com/alkacon/opencms/documentcenter/CmsDocument.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "int"
        ],
        [
          "long",
          "boolean"
        ],
        [],
        [
          "Locale",
          "boolean"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.remove(int)",
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "integer",
        "list",
        "util"
      ]
    },
    {
      "method": "getString@76",
      "body": "public static String getString(final String string,final Object... params){\n  String result=null;\n  if (string != null) {\n    result=new String(string);\n  }\n  if (params != null && string != null) {\n    for (int i=0; i < params.length; i++) {\n      if (params[i] != null) {\n        result=result.replaceAll(\"\\\\{\" + i + \"\\\\}\",Matcher.quoteReplacement(params[i].toString()));\n      }\n    }\n  }\n  return result;\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.String(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.regex.Matcher.quoteReplacement(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "boolean",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.StringBuffer.StringBuffer(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.StringBuffer.insert(int,char)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(char)",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)"
            ]
          },
          {
            "calls": [
              "java.util.regex.Pattern.matches(java.lang.String,java.lang.CharSequence)",
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
              "java.lang.String.toLowerCase()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/demoiselle-contrib/demoiselle-core-contrib/src/main/java/br/gov/frameworkdemoiselle/util/contrib/Strings.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String",
          "int"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "char"
        ],
        [
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "String",
        "Matcher"
      ],
      "apicalls": [
        "quoteReplacement",
        "replaceAll"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.String(java.lang.String)",
            "java.util.regex.Matcher.quoteReplacement(java.lang.String)",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "regex",
        "matcher",
        "replacement"
      ]
    },
    {
      "method": "change@98",
      "body": "@Override public void change(CollectionChange<T> change){\nsynchronized (_contents) {\n    preserveOnlyActualChanges(change);\n    if (change.elementsAdded().isEmpty() && change.elementsRemoved().isEmpty())     return;\n    _contents.addAll(change.elementsAdded());\n    _contents.removeAll(change.elementsRemoved());\n    _output._notifier.notifyReceivers(change);\n    updateSize();\n  }\n}\n",
      "formalParam": [
        "CollectionChange<T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<Tau_E>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Set<Tau_E>.removeAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Set<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/sneer/code/src/sneer/bricks/pulp/reactive/collections/impl/SetRegisterImpl.java",
      "classTypes": [
        "EventNotifier<CollectionChange<T>>",
        "Set<T>",
        "long",
        "Register<Integer>"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "removeAll",
        "addAll",
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<Tau_E>.addAll(java.util.Collection)",
            "java.util.Set<Tau_E>.removeAll(java.util.Collection)",
            "java.util.Set<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "boolean",
        "set",
        "collection",
        "add",
        "size"
      ]
    },
    {
      "method": "getListaCaronasEncerradas@1604",
      "body": "/** \n * Retorna lista de caronas encerradas ate o momento, dentre as caronas oferecidas por ele.\n * @return lista de caronas encerradas\n */\npublic List<Carona> getListaCaronasEncerradas(){\n  try {\n    List<Carona> listaCaronasEncerradas=new LinkedList<Carona>();\n    lockMapIdCaronasOferecidas.lock();\n    iteratorIdCaronasOferecidas=mapIdCaronasOferecidas.values().iterator();\n    while (iteratorIdCaronasOferecidas.hasNext()) {\n      Carona caronaOferecida=iteratorIdCaronasOferecidas.next();\n      if (caronaOferecida.getEstadoDaCarona().getNomeEstado().equals(EnumNomeEstadoDaCarona.ENCERRADA))       listaCaronasEncerradas.add(caronaOferecida);\n    }\n    return listaCaronasEncerradas;\n  }\n  finally {\n    lockMapIdCaronasOferecidas.unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "List<Usuario>",
        "List<Integer>",
        "Integer",
        "List<Carona>",
        "List<Mensagem>",
        "Map<Integer,Carona>",
        "Integer",
        "List<Solicitacao>",
        "Solicitacao",
        "List<Carona>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.Map<Tau_K,Tau_V>.values()",
              "java.util.List<Tau_E>.addAll(java.util.Collection)",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "List<Carona>",
      "file": "./java_projects/SIProject/ProjetoSI/src/main/java/estradasolidaria/ui/server/logic/Usuario.java",
      "classTypes": [
        "Map<Integer,Carona>",
        "Iterator<Carona>",
        "Lock"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [
          "Integer",
          "Integer"
        ],
        []
      ],
      "types": [
        "concurrent",
        "LinkedList"
      ],
      "apicalls": [
        "lock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "lock",
        "locks",
        "list"
      ]
    },
    {
      "method": "isReservedProjectName@125",
      "body": "/** \n * This method checks whether or not a proposed project name is reserved or not.\n * @param proposedName may or may not include the file extension\n * @return true if it is reserved, false if not.\n * @since 5.5.3\n */\npublic static boolean isReservedProjectName(final String proposedName){\n  if (proposedName == null || proposedName.length() <= 0)   return false;\n  for (  final String element : RESERVED_PROJECT_NAMES)   if (proposedName.equalsIgnoreCase(element))   return true;\n  return false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.legacy/src/org/teiid/designer/core/util/ResourceNameUtil.java",
      "classTypes": [
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "length",
        "boolean",
        "equals",
        "case",
        "lang"
      ]
    },
    {
      "method": "isMatch@98",
      "body": "public boolean isMatch(QualifierBinding binding,Annotation[] bindingAnn){\n  for (  Annotation ann : bindingAnn) {\n    Class<? extends Annotation> annType=ann.annotationType();\n    if (!annType.isAnnotationPresent(InterceptorBinding.class))     continue;\n    if (binding.isMatch(ann))     return true;\n    if (isMatch(binding,annType.getAnnotations()))     return true;\n  }\n  return false;\n}\n",
      "formalParam": [
        "QualifierBinding",
        "Annotation[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.annotation.Annotation.annotationType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "$NOT$java.lang.Class<Tau_T>.isAnnotationPresent(java.lang.Class)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getAnnotations()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.annotation.Annotation[]"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/Quercus/resin/src/main/java/com/caucho/config/inject/InterceptorEntry.java",
      "classTypes": [
        "Logger",
        "boolean",
        "ArrayList<QualifierBinding>",
        "Interceptor<X>",
        "L10N"
      ],
      "sorrformalparam": [],
      "types": [
        "Class"
      ],
      "apicalls": [
        "annotationType",
        "getAnnotations"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.annotation.Annotation.annotationType()",
            "$NOT$java.lang.Class<Tau_T>.isAnnotationPresent(java.lang.Class)",
            "java.lang.Class<Tau_T>.getAnnotations()"
          ]
        }
      ],
      "keywords": [
        "annotation",
        "class",
        "boolean",
        "present",
        "annotations"
      ]
    },
    {
      "method": "addListener@1024",
      "body": "public void addListener(TRHostListener l){\n  try {\n    this_mon.enter();\n    listeners.addListener(l);\n    for (int i=0; i < host_torrents.size(); i++) {\n      listeners.dispatch(l,LDT_TORRENT_ADDED,host_torrents.get(i));\n    }\n  }\n  finally {\n    this_mon.exit();\n  }\n}\n",
      "formalParam": [
        "TRHostListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/OneSwarm/az_src/src/org/gudy/azureus2/core3/tracker/host/impl/TRHostImpl.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "URL",
          "String",
          "String"
        ]
      ],
      "types": [
        "List",
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size",
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.get(int)",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "get",
        "object",
        "integer"
      ]
    },
    {
      "method": "median@8583",
      "body": "/** \n * Add option -median to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps median(Double radius){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-median\");\n  if (radius != null) {\n    buf.append(radius.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "Double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Double.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "Double"
        ],
        [],
        [],
        []
      ],
      "types": [
        "StringBuffer",
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "length",
        "buffer",
        "string",
        "integer"
      ]
    },
    {
      "method": "getMimeType@356",
      "body": "public static String getMimeType(GenericValue dataResource){\n  String mimeTypeId=null;\n  if (dataResource != null) {\n    mimeTypeId=(String)dataResource.get(\"mimeTypeId\");\n    if (UtilValidate.isEmpty(mimeTypeId)) {\n      String fileName=(String)dataResource.get(\"objectInfo\");\n      if (fileName != null && fileName.indexOf('.') > -1) {\n        String fileExtension=fileName.substring(fileName.lastIndexOf('.') + 1);\n        if (UtilValidate.isNotEmpty(fileExtension)) {\n          GenericValue ext=null;\n          try {\n            ext=dataResource.getDelegator().findOne(\"FileExtension\",UtilMisc.toMap(\"fileExtensionId\",fileExtension),false);\n          }\n catch (          GenericEntityException e) {\n            Debug.logError(e,module);\n          }\n          if (ext != null) {\n            mimeTypeId=ext.getString(\"mimeTypeId\");\n          }\n        }\n      }\n      if (UtilValidate.isEmpty(mimeTypeId)) {\n        mimeTypeId=\"application/octet-stream\";\n      }\n    }\n  }\n  return mimeTypeId;\n}\n",
      "formalParam": [
        "GenericValue"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.lastIndexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "ByteBuffer",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.nio.ByteBuffer.wrap(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)",
              "java.lang.String.toLowerCase()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ofbiz/applications/content/src/org/ofbiz/content/data/DataResourceWorker.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "GenericValue",
          "Map<String,Object>"
        ],
        [
          "Delegator",
          "String",
          "String",
          "String",
          "Locale",
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(int)"
          ]
        }
      ],
      "keywords": [
        "index",
        "integer",
        "substring"
      ]
    },
    {
      "method": "hexToLong@887",
      "body": "/** \n * <p> Converts an array of Char into a long using the default (little endian, Lsb0) byte and bit ordering. </p>\n * @param src the hex string to convert\n * @param srcPos the position in {@code src}, in Char unit, from where to start the conversion\n * @param dstInit initial value of the destination long\n * @param dstPos the position of the lsb, in bits, in the result long\n * @param nHex the number of Chars to convert\n * @return a long containing the selected bits\n * @throws IllegalArgumentException if {@code (nHexs-1)*4+dstPos >= 64}\n */\npublic static long hexToLong(String src,int srcPos,long dstInit,int dstPos,int nHex){\n  if (0 == nHex) {\n    return dstInit;\n  }\n  if ((nHex - 1) * 4 + dstPos >= 64) {\n    throw new IllegalArgumentException(\"(nHexs-1)*4+dstPos is greather or equal to than 64\");\n  }\n  long out=dstInit;\n  int shift=0;\n  for (int i=0; i < nHex; i++) {\n    shift=i * 4 + dstPos;\n    long bits=(0xfL & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n    long mask=0xfL << shift;\n    out=(out & ~mask) | bits;\n  }\n  return out;\n}\n",
      "formalParam": [
        "String",
        "int",
        "long",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.Character.digit(char,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "byte[]",
        "char",
        "char",
        "short",
        "byte"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.Character.digit(char,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.UUID.getMostSignificantBits()",
              "java.util.UUID.getLeastSignificantBits()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.Character.digit(char,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.Character.digit(char,int)"
            ]
          }
        ]
      ],
      "returnType": "long",
      "file": "./java_projects/commons-lang/src/main/java/org/apache/commons/lang3/Conversion.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "UUID",
          "byte[]",
          "int",
          "int"
        ],
        [
          "boolean[]"
        ],
        [
          "boolean[]",
          "int"
        ],
        [
          "String",
          "int",
          "short",
          "int",
          "int"
        ],
        [
          "String",
          "int",
          "byte",
          "int",
          "int"
        ]
      ],
      "types": [
        "Character",
        "Integer"
      ],
      "apicalls": [
        "digit"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.lang.Character.digit(char,int)"
          ]
        }
      ],
      "keywords": [
        "char",
        "character",
        "string",
        "integer"
      ]
    },
    {
      "method": "print@19",
      "body": "public void print(String strMsg){\n  print(strMsg,0);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(char[])",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/CSE131/src/ErrorPrinter.java",
      "classTypes": [
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "int"
        ]
      ],
      "types": [
        "PrintStream",
        "Character",
        "String"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(char[])",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "main@65",
      "body": "public static void main(String[] args){\n  EvLog.addListener(new EvLogStdout());\n  EV.loadPlugins();\n  try {\n    new ImageJroiImport(new File(\"/Volumes/TBU_main06/customer/RoiSet.zip\"),new EvStack(),new EvData());\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Endrov/ev/endrov/IJ/roi/ImageJroiImport.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "trace"
      ]
    },
    {
      "method": "putThreadLocal@1898",
      "body": "/** \n * Put a value that can later be retrieved using a given key. <p>\n * @param key the key used to index the value\n * @param value the value to save\n */\npublic final void putThreadLocal(Object key,Object value){\n  if (sealed)   onSealedMutation();\n  if (hashtable == null)   hashtable=new Hashtable();\n  hashtable.put(key,value);\n}\n",
      "formalParam": [
        "Object",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Hashtable.Hashtable()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Hashtable.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Character.charValue()",
              "java.lang.String.valueOf(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
              "java.lang.RuntimeException.RuntimeException()"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Hashtable.Hashtable(int)",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/vjet/extmod/org.ebayopensource.vjet.extmod.rhino/src/org/mozilla/mod/javascript/Context.java",
      "classTypes": [
        "String",
        "int",
        "int",
        "int",
        "Object",
        "ClassLoader",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "Object",
          "Scriptable"
        ],
        [
          "ContextListener"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Object",
        "Hashtable"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.Hashtable()",
            "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "put",
        "util",
        "hashtable"
      ]
    },
    {
      "method": "getHandle@124",
      "body": "public HttpCommandConnectionHandle<C> getHandle(HttpCommandRendezvous<?> rendezvous) throws InterruptedException, TimeoutException {\n  exceptionIfNotActive();\n  C conn=getConnection();\n  HttpCommandConnectionHandle<C> handle=createHandle(rendezvous,conn);\n  associateHandleWithConnection(handle,conn);\n  return handle;\n}\n",
      "formalParam": [
        "HttpCommandRendezvous<?>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.Semaphore.availablePermits()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.BlockingQueue<Tau_E>.poll(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "_call": "java.util.concurrent.Semaphore.release()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "HttpCommandConnectionHandle<C>",
      "file": "./java_projects/android-rackspacecloud/extensions/httpnio/src/main/java/org/jclouds/http/pool/HttpCommandConnectionPool.java",
      "classTypes": [
        "BlockingQueue<C>",
        "int",
        "Semaphore",
        "boolean",
        "BlockingQueue<HttpCommandRendezvous<?>>"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "release",
        "poll",
        "availablePermits"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.size()",
            "java.util.concurrent.Semaphore.availablePermits()",
            "java.util.concurrent.BlockingQueue<Tau_E>.poll(long,java.util.concurrent.TimeUnit)",
            "java.util.concurrent.Semaphore.release()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "long",
        "collection",
        "integer"
      ]
    },
    {
      "method": "toString@45",
      "body": "@Override public String toString(){\n  final StringBuilder buffer=new StringBuilder();\n  buffer.append(\"[offset=\");\n  buffer.append(fOffset);\n  buffer.append(\", length=\");\n  buffer.append(fLength);\n  buffer.append(']');\n  return buffer.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/erlide/org.erlide.core/src/org/erlide/core/internal/model/erlang/SourceRange.java",
      "classTypes": [
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "String",
        "Character",
        "StringBuilder"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(int)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "append"
      ]
    },
    {
      "method": "getFocusableComponentOrChild@214",
      "body": "public static Component getFocusableComponentOrChild(Component c){\n  return getFocusableComponentOrChild(c,false);\n}\n",
      "formalParam": [
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.isEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Component.isVisible()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.isRequestFocusEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Container.getComponentCount()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.awt.Container.getComponent(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Component"
              },
              {
                "_call": "javax.swing.JComponent.isRequestFocusEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "Rectangle[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
              "java.util.StringTokenizer.countTokens()",
              "java.util.StringTokenizer.nextToken()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
              "java.awt.GraphicsEnvironment.getScreenDevices()"
            ]
          }
        ]
      ],
      "returnType": "Component",
      "file": "./java_projects/chartsy/Chartsy/Chat/src/org/chartsy/chatsy/chat/util/GraphicUtils.java",
      "classTypes": [
        "Map<String,Image>",
        "Cursor",
        "Color",
        "Insets",
        "Cursor"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        []
      ],
      "types": [
        "JComponent",
        "Component"
      ],
      "apicalls": [
        "isEnabled"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.isEnabled()",
            "java.awt.Component.isVisible()",
            "javax.swing.JComponent.isRequestFocusEnabled()",
            "java.awt.Container.getComponentCount()",
            "java.awt.Container.getComponent(int)",
            "javax.swing.JComponent.isRequestFocusEnabled()"
          ]
        },
        {
          "calls": [
            "java.awt.Component.isEnabled()",
            "java.awt.Component.isVisible()"
          ]
        }
      ],
      "keywords": [
        "focus",
        "j"
      ]
    },
    {
      "method": "onReceive@61",
      "body": "@Override public void onReceive(Context context,Intent intent){\n  final String action=intent.getAction();\n  if (action.equals(BluetoothAdapter.ACTION_STATE_CHANGED)) {\n    handleAdapterStateChange(intent.getIntExtra(BluetoothAdapter.EXTRA_STATE,BluetoothAdapter.ERROR));\n  }\n else   if (action.equals(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED)) {\n    handleConnectionStateChange(intent.getIntExtra(BluetoothAdapter.EXTRA_CONNECTION_STATE,BluetoothAdapter.STATE_DISCONNECTED));\n  }\n  refreshViews();\n}\n",
      "formalParam": [
        "Context",
        "Intent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/frameworks_base/packages/SystemUI/src/com/android/systemui/statusbar/policy/BluetoothController.java",
      "classTypes": [
        "int",
        "Context",
        "boolean",
        "int",
        "ArrayList<ImageView>"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "string"
      ]
    },
    {
      "method": "addChild@128",
      "body": "/** \n * Add a new child node to this node.\n * @param node The new child node\n */\npublic void addChild(TreeNode node){\n  if (children == null)   children=new ArrayList();\n  children.add(node);\n}\n",
      "formalParam": [
        "TreeNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "Iterator",
        "Iterator",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap.HashMap()",
              "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()"
            ]
          },
          {
            "calls": [
              "java.util.HashMap.keySet()",
              "java.util.Set.iterator()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.iterator()"
            ]
          },
          {
            "calls": [
              "java.util.List.iterator()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/jasper/xmlparser/TreeNode.java",
      "classTypes": [
        "String",
        "String",
        "TreeNode"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [],
        [],
        [
          "String",
          "TreeNode"
        ]
      ],
      "types": [
        "Boolean",
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "list",
        "util",
        "array",
        "add"
      ]
    },
    {
      "method": "isUri@87",
      "body": "public boolean isUri(String var){\n  if (rowDatatype.get(var).equalsIgnoreCase(\"uri\"))   return true;\n  return false;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          },
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          },
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.startsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/iserve/iserve-parent/iserve-sal-model/src/main/java/uk/ac/open/kmi/iserve/sal/model/impl/QueryRowImpl.java",
      "classTypes": [
        "long",
        "Map<String,String>",
        "Map<String,String>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "Map"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "string",
        "object"
      ]
    },
    {
      "method": "compare@79",
      "body": "public final int compare(char[] key1,CharSequence key2){\n  return compare(key1,0,key1.length,key2,0,key2.length());\n}\n",
      "formalParam": [
        "char[]",
        "CharSequence"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.CharSequence.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.CharSequence.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.CharSequence.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.CharSequence.length()",
              "java.lang.Math.min(int,int)",
              "java.lang.CharSequence.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.CharSequence.charAt(int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/tries/src/java/net/jpountz/charsequence/CharComparator.java",
      "classTypes": [
        "CharComparator"
      ],
      "sorrformalparam": [
        [
          "char[]",
          "int",
          "int",
          "CharSequence",
          "int",
          "int"
        ],
        [
          "CharSequence",
          "char[]"
        ],
        [
          "CharSequence",
          "int",
          "int",
          "char[]",
          "int",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "min"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.CharSequence.length()",
            "java.lang.Math.min(int,int)",
            "java.lang.CharSequence.charAt(int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "updateIndices@402",
      "body": "/** \n * Updates the indices with all the values provided in the array.\n * @param indexArray array with new indices \n */\npublic void updateIndices(int[] indexArray){\n  updateIndices(indexArray,indexArray.length);\n}\n",
      "formalParam": [
        "int[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.nio.ByteBuffer.asIntBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.IntBuffer"
          },
          {
            "_call": "java.nio.IntBuffer.put(int[],int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.IntBuffer"
          },
          {
            "_call": "java.nio.IntBuffer.put(int[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.IntBuffer"
          },
          {
            "_call": "java.nio.Buffer.position(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.asFloatBuffer()",
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()",
              "java.nio.FloatBuffer.put(float[])",
              "java.nio.Buffer.position(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.asFloatBuffer()",
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()",
              "java.nio.FloatBuffer.put(float[])",
              "java.nio.Buffer.position(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.asFloatBuffer()",
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()",
              "java.nio.FloatBuffer.put(float[])",
              "java.nio.Buffer.position(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.put(float[])",
              "java.nio.Buffer.position(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.FloatBuffer.get(float[])",
              "java.nio.Buffer.rewind()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/propinquity/software/lib/user/GLGraphics/src/codeanticode/glgraphics/GLModel.java",
      "classTypes": [
        "GLState",
        "int",
        "float",
        "PGraphicsOpenGL",
        "GL",
        "int",
        "int",
        "int",
        "int[]"
      ],
      "sorrformalparam": [
        [
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "int",
          "float",
          "float"
        ],
        [],
        [
          "int",
          "float",
          "float",
          "float",
          "float"
        ],
        [],
        [
          "int",
          "float"
        ],
        [
          "int",
          "float",
          "float",
          "float",
          "float"
        ],
        [
          "int",
          "float",
          "float",
          "float"
        ],
        [],
        [
          "int",
          "int",
          "int"
        ]
      ],
      "types": [
        "String",
        "IntBuffer"
      ],
      "apicalls": [
        "position"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.nio.ByteBuffer.asIntBuffer()",
            "java.nio.IntBuffer.put(int[],int,int)",
            "java.nio.IntBuffer.put(int[])",
            "java.nio.Buffer.position(int)"
          ]
        }
      ],
      "keywords": [
        "put",
        "print"
      ]
    },
    {
      "method": "appendResponseQueue@656",
      "body": "public synchronized void appendResponseQueue(byte[] queue){\n  try {\n    TinygDriver.queue.put((byte[])queue);\n  }\n catch (  Exception e) {\n    System.out.println(\"ERROR n shit\");\n  }\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.concurrent.ArrayBlockingQueue<Tau_E>.put(Tau_E)",
                "_throws": [
                  "java.lang.InterruptedException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.Observable.setChanged()",
              "java.lang.Throwable.getMessage()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.util.Observable.setChanged()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()"
            ]
          },
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.Observable.notifyObservers(java.lang.Object)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.util.Observable.setChanged()",
              "java.util.Observable.notifyObservers(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.concurrent.locks.Condition.signal()",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tgFX/src/tgfx/TinygDriver.java",
      "classTypes": [
        "int",
        "String"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "int"
        ],
        [],
        [
          "ResponseHeader"
        ]
      ],
      "types": [],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue<Tau_E>.put(Tau_E)"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue<Tau_E>.put(Tau_E)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array",
        "blocking",
        "stream"
      ]
    },
    {
      "method": "toString@78",
      "body": "@Override public String toString(){\n  StringBuffer sb=new StringBuffer();\n  for (  ValidationIssue issue : getContainedIssues()) {\n    sb.append(issue.toString() + \"\\n\");\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/openflexo/flexodesktop/model/flexofoundation/src/main/java/org/openflexo/foundation/validation/CompoundIssue.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "lang"
      ]
    },
    {
      "method": "setLabels@3353",
      "body": "public void setLabels(){\n  setBorder(BorderFactory.createTitledBorder(app.getPlain(\"PointSize\")));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.border.TitledBorder"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
              "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "AllowOutlyingIntersectionsPanel",
        "JComboBox",
        "long",
        "JCheckBox",
        "TabPanel",
        "LineEqnPanel",
        "long",
        "long",
        "Kernel"
      ],
      "sorrformalparam": [
        [],
        [
          "ActionEvent"
        ],
        [],
        []
      ],
      "types": [
        "BorderFactory"
      ],
      "apicalls": [
        "createTitledBorder"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.BorderFactory.createTitledBorder(java.lang.String)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "factory",
        "string",
        "j",
        "border"
      ]
    },
    {
      "method": "union@342",
      "body": "/** \n * Create a new Section by union with another Section\n * @param other Section other section\n * @return new Section, union of the two\n * @throws InvalidRangeException if want.getRank() not equal to this.getRank(), or invalid component Range\n */\npublic Section union(Section other) throws InvalidRangeException {\n  if (other.getRank() != getRank())   throw new InvalidRangeException(\"Invalid Section rank\");\n  List<Range> results=new ArrayList<Range>(getRank());\n  for (int j=0; j < list.size(); j++) {\n    Range base=list.get(j);\n    Range r=other.getRange(j);\n    results.add(base.union(r));\n  }\n  return new Section(results);\n}\n",
      "formalParam": [
        "Section"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Section",
        "Section"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ]
      ],
      "returnType": "Section",
      "file": "./java_projects/thredds/cdm/src/main/java/ucar/ma2/Section.java",
      "classTypes": [
        "List<Range>",
        "int[]",
        "boolean",
        "long",
        "int[]"
      ],
      "sorrformalparam": [
        [],
        [
          "Section"
        ]
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(int)",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "postProcess@51",
      "body": "public ResultSetInternalMethods postProcess(String sql,Statement interceptedStatement,ResultSetInternalMethods originalResultSet,Connection connection,int warningCount,boolean noIndexUsed,boolean noGoodIndexUsed,SQLException statementException) throws SQLException {\n  try {\n    return (ResultSetInternalMethods)v2PostProcessMethod.invoke(toProxy,new Object[]{sql,interceptedStatement,originalResultSet,connection,new Integer(warningCount),noIndexUsed ? Boolean.TRUE : Boolean.FALSE,noGoodIndexUsed ? Boolean.TRUE : Boolean.FALSE,statementException});\n  }\n catch (  IllegalArgumentException e) {\n    SQLException sqlEx=new SQLException(\"Unable to reflectively invoke interceptor\");\n    sqlEx.initCause(e);\n    throw sqlEx;\n  }\ncatch (  IllegalAccessException e) {\n    SQLException sqlEx=new SQLException(\"Unable to reflectively invoke interceptor\");\n    sqlEx.initCause(e);\n    throw sqlEx;\n  }\ncatch (  InvocationTargetException e) {\n    SQLException sqlEx=new SQLException(\"Unable to reflectively invoke interceptor\");\n    sqlEx.initCause(e);\n    throw sqlEx;\n  }\n}\n",
      "formalParam": [
        "String",
        "Statement",
        "ResultSetInternalMethods",
        "Connection",
        "int",
        "boolean",
        "boolean",
        "SQLException"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.SQLException.SQLException(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.initCause(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Throwable"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "ResultSetInternalMethods",
      "file": "./java_projects/Shuttle-Tracker/server/java/mysql-connector-java-5.1.14/src/com/mysql/jdbc/ReflectiveStatementInterceptorAdapter.java",
      "classTypes": [
        "Method",
        "StatementInterceptor"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable"
      ],
      "apicalls": [
        "initCause"
      ],
      "sequences": [
        {
          "calls": [
            "java.sql.SQLException.SQLException(java.lang.String)",
            "java.lang.Throwable.initCause(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "throwable",
        "cause",
        "init",
        "lang",
        "sql"
      ]
    },
    {
      "method": "processClass@73",
      "body": "public byte[] processClass(String className,byte origClassBytes[],int offset,int length,ProtectionDomain pd,ClassLoader loader){\n  try {\n    byte[] tempArray=new byte[length];\n    System.arraycopy(origClassBytes,offset,tempArray,0,length);\n    byte[] result=this.transformer.transform(loader,className.replace('.','/'),null,pd,tempArray);\n    return (result != null ? result : origClassBytes);\n  }\n catch (  IllegalClassFormatException ex) {\n    throw new IllegalStateException(\"Cannot transform because of illegal class format\",ex);\n  }\n}\n",
      "formalParam": [
        "String",
        "byte[]",
        "int",
        "int",
        "ProtectionDomain",
        "ClassLoader"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.replace(char,char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/spring-js/src/main/java/org/springframework/instrument/classloading/oc4j/OC4JClassPreprocessorAdapter.java",
      "classTypes": [
        "ClassFileTransformer"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer",
        "Object"
      ],
      "apicalls": [
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.String.replace(char,char)"
          ]
        }
      ],
      "keywords": [
        "system",
        "integer",
        "arraycopy",
        "character",
        "object",
        "replace"
      ]
    },
    {
      "method": "process@339",
      "body": "@Override public boolean process() throws Exception {\n  try {\n    if (updateBusyRequired)     updateBusy(childQueue,true);\n    final Object[] fa=element instanceof File ? ((File)element).list() : File.listRoots();\n    final int size=fa == null || fa.length < 1 ? 0 : fa.length;\n    if (treeViewer.getControl().isDisposed())     return false;\n    treeViewer.getControl().getDisplay().asyncExec(new Runnable(){\n      @Override public void run(){\n        if (treeViewer.getControl().isDisposed())         return;\n        updateChildCountInternal(element,size);\n      }\n    }\n);\n  }\n  finally {\n    if (updateBusyRequired)     updateBusy(childQueue,true);\n  }\n  return true;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.listRoots()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.File[]"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.list()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.io.File.isDirectory()",
              "java.util.concurrent.BlockingQueue<Tau_E>.add(Tau_E)"
            ]
          },
          {
            "calls": [
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.isDirectory()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.listRoots()",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/scisoft-ui/uk.ac.diamond.sda.navigator/src/uk/ac/diamond/sda/navigator/views/FileContentProvider.java",
      "classTypes": [
        "int",
        "Map<File,List<File>>",
        "BlockingQueue<UpdateRequest>",
        "Thread",
        "Cursor",
        "TreeViewer",
        "FileSortType",
        "boolean",
        "BlockingQueue<UpdateRequest>",
        "enum"
      ],
      "sorrformalparam": [
        [
          "Object",
          "int"
        ],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.list()"
          ]
        },
        {
          "calls": [
            "java.io.File.listRoots()"
          ]
        }
      ],
      "keywords": [
        "roots"
      ]
    },
    {
      "method": "getSerializedSize@17673",
      "body": "public int getSerializedSize(){\n  int size=memoizedSerializedSize;\n  if (size != -1)   return size;\n  size=0;\n{\n    int dataSize=0;\n    for (int i=0; i < handleId_.size(); i++) {\n      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(handleId_.get(i));\n    }\n    size+=dataSize;\n    size+=1 * getHandleIdList().size();\n  }\n  size+=getUnknownFields().getSerializedSize();\n  memoizedSerializedSize=size;\n  return size;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<java.lang.Integer>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Integer>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List<java.lang.Integer>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int",
        "Builder",
        "Builder",
        "Builder",
        "Builder",
        "Builder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.get(int)",
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.get(int)",
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.addAll(java.util.Collection)"
            ]
          },
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/marshalling/impl/ProtobufMessages.java",
      "classTypes": [
        "com.google.protobuf.ByteString",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "int",
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "org.drools.marshalling.impl.ProtobufMessages.EqualityKey"
        ]
      ],
      "types": [],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.size()",
            "java.util.List<java.lang.Integer>.get(int)",
            "java.util.List<java.lang.Integer>.size()",
            "java.util.List<java.lang.Integer>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "get"
      ]
    },
    {
      "method": "createTestInstance@57",
      "body": "public static Object createTestInstance(){\n  ListAndNonListBean instance=new ListAndNonListBean();\n  instance.a=new LinkedList<String>();\n  instance.a.add(\"1\");\n  instance.d=\"2\";\n  return instance;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.lang.String>.hashCode()",
              "java.lang.String.hashCode()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<java.lang.String>.equals(java.lang.Object)",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/jersey/tests/e2e/src/test/java/org/glassfish/jersey/tests/e2e/json/entity/ListAndNonListBean.java",
      "classTypes": [
        "String",
        "List<String>"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ]
      ],
      "types": [
        "List",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "linked",
        "add",
        "boolean"
      ]
    },
    {
      "method": "getPage@43",
      "body": "public List<E> getPage(){\n  if (this.offset + this.limit < this.entities.size())   return this.entities.subList(this.offset,this.offset + this.limit);\n else   return this.entities.subList(this.offset,this.entities.size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<Tau_E>.subList(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.List<Tau_E>.subList(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "List<E>",
        "List<E>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          }
        ]
      ],
      "returnType": "List<E>",
      "file": "./java_projects/molgenis_apps/modules/variant/org/molgenis/mutation/ui/LimitOffsetPager.java",
      "classTypes": [
        "int",
        "int",
        "List<E>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.subList(int,int)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.subList(int,int)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "test_harmonyRegressionTest@700",
      "body": "@TestTargets({@TestTargetNew(level=TestLevel.PARTIAL_COMPLETE,notes=\"\",method=\"nextToken\",args={}),@TestTargetNew(level=TestLevel.PARTIAL,notes=\"\",method=\"toString\",args={})}) public void test_harmonyRegressionTest(){\n  byte[] data=new byte[]{(byte)'-'};\n  StreamTokenizer tokenizer=new StreamTokenizer(new ByteArrayInputStream(data));\n  try {\n    tokenizer.nextToken();\n  }\n catch (  Exception e) {\n    Assert.fail(e.getMessage());\n  }\n  String result=tokenizer.toString();\n  Assert.assertEquals(\"Token['-'], line 1\",result);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.getMessage()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.getBytes()",
              "java.io.OutputStream.write(byte[])",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/libcore_1/luni/src/test/java/tests/api/java/io/StreamTokenizerTest.java",
      "classTypes": [
        "Support_StringReader",
        "String",
        "StreamTokenizer"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "String",
        "Byte"
      ],
      "apicalls": [
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.lang.Throwable.getMessage()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "input",
        "get",
        "stream",
        "throwable",
        "io",
        "message"
      ]
    },
    {
      "method": "getStorageSec@41",
      "body": "/** \n * Return the secondary storage cache root (phone if external media is mounted, external media otherwise).\n * @return the root of the cache directory\n */\npublic static File getStorageSec(){\n  return getStorageSpecific(true);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.File(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.File(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "String",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getAbsolutePath()",
              "java.io.File.File(java.lang.String)",
              "java.io.FileReader.FileReader(java.io.File)",
              "java.io.Reader.read(char[])",
              "java.lang.String.String(char[],int,int)",
              "java.io.InputStreamReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()",
              "java.io.File.delete()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()",
              "java.io.File.delete()"
            ]
          }
        ]
      ],
      "returnType": "File",
      "file": "./java_projects/c-geo-opensource/main/src/cgeo/geocaching/files/LocalStorage.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "File",
          "String"
        ],
        [
          "InputStream",
          "File"
        ],
        [
          "HttpResponse",
          "File"
        ]
      ],
      "types": [
        "File",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.File(java.io.File,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "file",
        "string",
        "io"
      ]
    },
    {
      "method": "convertColStringToIndex@143",
      "body": "/** \n * takes in a column reference portion of a CellRef and converts it from ALPHA-26 number format to 0-based base 10. 'A' -> 0 'Z' -> 25 'AA' -> 26 'IV' -> 255\n * @return zero based column index\n */\npublic static int convertColStringToIndex(String ref){\n  int pos=0;\n  int retval=0;\n  for (int k=ref.length() - 1; k >= 0; k--) {\n    char thechar=ref.charAt(k);\n    if (thechar == ABSOLUTE_REFERENCE_MARKER) {\n      if (k != 0) {\n        throw new IllegalArgumentException(\"Bad col ref format '\" + ref + \"'\");\n      }\n      break;\n    }\n    int shift=(int)Math.pow(26,pos);\n    retval+=(Character.getNumericValue(thechar) - 9) * shift;\n    pos++;\n  }\n  return retval - 1;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.Character.getNumericValue(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.toUpperCase()",
              "java.lang.String.compareTo(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.compareTo(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/jubula.core/org.apache.poi/src/java/org/apache/poi/hssf/util/CellReference.java",
      "classTypes": [
        "int",
        "String",
        "boolean",
        "int",
        "boolean",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ]
      ],
      "types": [
        "String",
        "Character"
      ],
      "apicalls": [
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Character.getNumericValue(char)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "length",
        "integer",
        "character",
        "value",
        "numeric"
      ]
    },
    {
      "method": "process@56",
      "body": "public boolean process(Set<? extends TypeElement> annoTypes,RoundEnvironment round){\n  if (!round.processingOver())   doit(annoTypes,round);\n  return true;\n}\n",
      "formalParam": [
        "Set<? extends TypeElement>",
        "RoundEnvironment"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/DPJ/Implementation/Compiler/test/tools/javac/processing/model/element/TypeParamBounds.java",
      "classTypes": [
        "Types",
        "Map<String,String[]>",
        "Elements"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size",
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.String[]>.get(java.lang.Object)",
            "java.util.List<Tau_E>.size()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "equals@3499",
      "body": "public boolean equals(abort_args that){\n  if (that == null)   return false;\n  boolean this_present_queue_name=true && this.is_set_queue_name();\n  boolean that_present_queue_name=true && that.is_set_queue_name();\n  if (this_present_queue_name || that_present_queue_name) {\n    if (!(this_present_queue_name && that_present_queue_name))     return false;\n    if (!this.queue_name.equals(that.queue_name))     return false;\n  }\n  boolean this_present_ids=true && this.is_set_ids();\n  boolean that_present_ids=true && that.is_set_ids();\n  if (this_present_ids || that_present_ids) {\n    if (!(this_present_ids && that_present_ids))     return false;\n    if (!this.ids.equals(that.ids))     return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "abort_args"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "void",
        "None",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
              "java.util.Set<java.lang.Long>.add(java.lang.Long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear(int)"
            ]
          },
          {
            "calls": [
              "java.util.BitSet.set(int,boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "short",
        "org.apache.thrift7.protocol.TStruct",
        "String",
        "Map<String,_Fields>",
        "org.apache.thrift7.protocol.TStruct",
        "Map<String,_Fields>",
        "enum",
        "org.apache.thrift7.protocol.TField",
        "org.apache.thrift7.protocol.TStruct",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "long"
        ],
        [
          "confirm_result"
        ],
        [
          "_Fields",
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Object",
        "Set"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util"
      ]
    },
    {
      "method": "toString@48",
      "body": "public String toString(){\n  StringBuilder sb=new StringBuilder();\n  if (response != null && response.getCode() == 200) {\n    return ((WebSearchResponse)response).toHtml();\n  }\n else {\n    sb.append(\"\");\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/fed4j/src/main/java/com/jute/fed4j/example/workflow/WebSearchComponent.java",
      "classTypes": [
        "Provider"
      ],
      "sorrformalparam": [],
      "types": [
        "StringBuilder",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "lang"
      ]
    },
    {
      "method": "getSubDocuments@847",
      "body": "/** \n * Returns the count of sub documents, if this document is a folder.<p> If this document is a file, 0 is returned.\n * @param cms the CmsObject to be passed\n * @return count of sub documents, if this \"document\" is a folder\n * @throws CmsException \n */\npublic int getSubDocuments(CmsObject cms) throws CmsException {\n  if (m_cmsResource.isFolder()) {\n    List list=cms.getFilesInFolder(m_path);\n    for (int i=0; i < list.size(); i++) {\n      if ((((CmsResource)list.get(i)).getName()).startsWith(\"$\")) {\n        list.remove(i);\n      }\n    }\n    return list.size();\n  }\n else {\n    return 0;\n  }\n}\n",
      "formalParam": [
        "CmsObject"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List.remove(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "CmsDocument",
        "boolean",
        "String",
        "String",
        "CmsDocument"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)",
              "java.util.Locale.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date()",
              "java.util.Date.getTime()",
              "java.util.Date.Date()",
              "java.util.Date.getTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)",
              "java.text.DateFormat.getDateInstance(int,java.util.Locale)",
              "java.util.Date.Date(long)",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.endsWith(java.lang.String)",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "java.lang.String.toLowerCase()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)",
              "java.util.Locale.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Locale.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/alkacon-oamp/com.alkacon.opencms.documentcenter/src/com/alkacon/opencms/documentcenter/CmsDocument.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "int"
        ],
        [
          "long",
          "boolean"
        ],
        [],
        [
          "Locale",
          "boolean"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.remove(int)",
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "integer",
        "list",
        "util"
      ]
    },
    {
      "method": "writeSHLD_CL@1715",
      "body": "public void writeSHLD_CL(GPR dstReg,GPR srcReg){\n  println(\"\\tshld \" + dstReg + \",\"+ srcReg+ \",cl\");\n}\n",
      "formalParam": [
        "GPR",
        "GPR"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jnode/core/src/core/org/jnode/assembler/x86/X86TextAssembler.java",
      "classTypes": [
        "String",
        "byte[]",
        "int",
        "PrintWriter",
        "StringBuffer"
      ],
      "sorrformalparam": [
        [
          "GPR",
          "int"
        ],
        [],
        [
          "int",
          "X86Register.SR",
          "int",
          "int"
        ],
        [
          "GPR",
          "GPR",
          "GPR",
          "int",
          "int"
        ],
        [
          "GPR",
          "int",
          "XMM"
        ],
        [
          "GPR"
        ],
        [
          "GPR",
          "GPR"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Integer",
        "Character"
      ],
      "apicalls": [
        "append",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)"
          ]
        }
      ],
      "keywords": [
        "append",
        "length",
        "integer",
        "buffer"
      ]
    },
    {
      "method": "count@1199",
      "body": "public boolean count(){\n  if (hasBudget()) {\n    mTotal+=1;\n    mCurTotal+=1;\n    return true;\n  }\n else   return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "$NOT$java.lang.Double.isNaN(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Double.isNaN(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "IBinder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Double.isNaN(double)"
            ]
          },
          {
            "calls": [
              "java.lang.Double.isNaN(double)",
              "$NOT$java.lang.Double.isNaN(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/AccelService/src/edu/ucla/cens/accelservice/AccelService.java",
      "classTypes": [
        "String",
        "int",
        "String",
        "double",
        "int",
        "List<Double>"
      ],
      "sorrformalparam": [
        [],
        [
          "Intent"
        ]
      ],
      "types": [
        "Boolean",
        "Double"
      ],
      "apicalls": [
        "isNaN"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.isNaN(double)"
          ]
        },
        {
          "calls": [
            "java.lang.Double.isNaN(double)",
            "$NOT$java.lang.Double.isNaN(double)"
          ]
        }
      ],
      "keywords": [
        "n",
        "na",
        "boolean",
        "double",
        "lang"
      ]
    },
    {
      "method": "wrapRemoteException@345",
      "body": "/** \n * Wrap a RemoteException inside a NamingException.\n */\npublic static NamingException wrapRemoteException(RemoteException re){\n  NamingException ne;\n  if (re instanceof ConnectException) {\n    ne=new ServiceUnavailableException();\n  }\n else   if (re instanceof AccessException) {\n    ne=new NoPermissionException();\n  }\n else   if (re instanceof StubNotFoundException || re instanceof UnknownHostException || re instanceof SocketSecurityException) {\n    ne=new ConfigurationException();\n  }\n else   if (re instanceof ExportException || re instanceof ConnectIOException || re instanceof MarshalException|| re instanceof UnmarshalException|| re instanceof NoSuchObjectException) {\n    ne=new CommunicationException();\n  }\n else   if (re instanceof ServerException && re.detail instanceof RemoteException) {\n    ne=wrapRemoteException((RemoteException)re.detail);\n  }\n else {\n    ne=new NamingException();\n  }\n  ne.setRootCause(re);\n  return ne;\n}\n",
      "formalParam": [
        "RemoteException"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.naming.NamingException.NamingException()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.naming.NamingException.setRootCause(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "Object",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)",
              "javax.naming.Name.getPrefix(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)",
              "javax.naming.Name.getPrefix(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)",
              "javax.naming.Name.getPrefix(int)",
              "javax.naming.Name.get(int)",
              "javax.naming.NamingException.setRootCause(java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "javax.naming.Name.isEmpty()",
              "javax.naming.Name.get(int)",
              "javax.naming.Name.getPrefix(int)"
            ]
          }
        ]
      ],
      "returnType": "NamingException",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/com/sun/jndi/rmi/registry/RegistryContext.java",
      "classTypes": [
        "String[]",
        "Hashtable",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "Name"
        ],
        [
          "String"
        ],
        [
          "Name",
          "Object"
        ],
        [
          "String",
          "Object"
        ]
      ],
      "types": [
        "NamingException",
        "Throwable"
      ],
      "apicalls": [
        "setRootCause"
      ],
      "sequences": [
        {
          "calls": [
            "javax.naming.NamingException.NamingException()",
            "javax.naming.NamingException.setRootCause(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "root",
        "naming",
        "cause",
        "throwable"
      ]
    },
    {
      "method": "getNodes@170",
      "body": "/** \n * Returns the nodelist for a given xpath.\n * @param xpath\n * @return nodelist.\n */\npublic NodeList getNodes(String xpath){\n  xpath=completeXPath(xpath);\n  return getNodes(xpath,doc);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Element"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.util.logging.Logger.warning(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "NodeList",
      "file": "./java_projects/faban/harness/src/com/sun/faban/harness/util/XMLReader.java",
      "classTypes": [
        "Logger",
        "HashMap<Node,ArrayList<NameValuePair<Integer>>>",
        "Document",
        "String",
        "boolean",
        "XPath"
      ],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String",
          "String"
        ]
      ],
      "types": [
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.charAt(int)",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "childInfos@94",
      "body": "@Override public IFileInfo[] childInfos(int options,IProgressMonitor monitor) throws CoreException {\n  if (monitor == null)   monitor=new NullProgressMonitor();\n  try {\n    monitor.beginTask(Messages.SSHFileStore_childInfoMonitor,100);\n    ChannelSftp channel=proxy.getChannelSftp();\n    monitor.worked(25);\n    Vector<?> v=channel.ls(uri.getPath());\n    monitor.worked(50);\n    LinkedList<IFileInfo> childs=new LinkedList<IFileInfo>();\n    boolean isDir=false;\n    for (int i=0; i < v.size(); i++) {\n      ChannelSftp.LsEntry entry=(ChannelSftp.LsEntry)v.get(i);\n      if (!entry.getFilename().equals(\".\") && !entry.getFilename().equals(\"..\"))       childs.add(createFileInfo(entry.getAttrs()));\n else       isDir=true;\n    }\n    if (!isDir)     throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,MessageFormat.format(Messages.SSHFileStore_childInfoFailedDirectory,getName())));\n    monitor.worked(100);\n    monitor.done();\n    return childs.toArray(new IFileInfo[0]);\n  }\n catch (  SftpException e) {\n    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,Messages.SSHFileStore_childInfoFailed + e.getMessage()));\n  }\n}\n",
      "formalParam": [
        "int",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String[]",
        "IFileStore[]",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
              "java.util.Vector<Tau_E>.size()",
              "java.util.LinkedList<java.lang.String>.add(java.lang.String)",
              "java.util.Vector<Tau_E>.size()",
              "java.util.LinkedList<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.net.URI.getPath()"
            ]
          }
        ]
      ],
      "returnType": "IFileInfo[]",
      "file": "./java_projects/linuxtools/profiling/org.eclipse.linuxtools.ssh.proxy/src/org/eclipse/linuxtools/internal/ssh/proxy/SSHFileStore.java",
      "classTypes": [
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "int",
          "IProgressMonitor"
        ],
        [
          "int",
          "IProgressMonitor"
        ],
        [
          "int",
          "IProgressMonitor"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.getPath()",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.Vector<Tau_E>.size()",
            "java.util.Vector<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "linked",
        "path",
        "string"
      ]
    },
    {
      "method": "getLayerOpacity@762",
      "body": "/** \n * Returns the layer opacity for a layer.\n * @param layer Layer to get opacity for\n * @return Layer opacity, -1 if layer has no opacity set.\n */\npublic int getLayerOpacity(final int layer){\n  int ret=-1;\n  if (_layerOpacityMap.containsKey(new Integer(layer))) {\n    ret=((Integer)_layerOpacityMap.get(new Integer(layer))).intValue();\n  }\n  return ret;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Integer.Integer(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Map.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.intValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "void",
        "void",
        "void",
        "void",
        "boolean",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.clear()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.isEmpty()",
              "java.util.Set.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.clear()",
              "java.util.Set.toArray()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/nebula/widgets/ganttchart/org.eclipse.nebula.widgets.ganttchart/src/org/eclipse/nebula/widgets/ganttchart/GanttComposite.java",
      "classTypes": [
        "Color",
        "int",
        "int",
        "GanttChart",
        "boolean",
        "boolean",
        "Set",
        "Color"
      ],
      "sorrformalparam": [
        [
          "GanttEvent",
          "GanttEvent"
        ],
        [],
        [
          "GanttEvent"
        ],
        [],
        [
          "GanttSection",
          "int"
        ],
        [
          "GanttEvent"
        ],
        [
          "boolean"
        ],
        [
          "GanttEvent",
          "int"
        ],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map.containsKey(java.lang.Object)",
            "java.lang.Integer.intValue()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "contains"
      ]
    },
    {
      "method": "reduce@55",
      "body": "/** \n * Process all of the keys and values. Start up the application if we haven't started it yet.\n */\npublic void reduce(K2 key,Iterator<V2> values,OutputCollector<K3,V3> output,Reporter reporter) throws IOException {\n  isOk=false;\n  startApplication(output,reporter);\n  downlink.reduceKey(key);\n  while (values.hasNext()) {\n    downlink.reduceValue(values.next());\n  }\n  if (skipping) {\n    downlink.flush();\n  }\n  isOk=true;\n}\n",
      "formalParam": [
        "K2",
        "Iterator<V2>",
        "OutputCollector<K3,V3>",
        "Reporter"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<Tau_E>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "Tau_E"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<Tau_E>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/hadoop/src/mapred/org/apache/hadoop/mapred/pipes/PipesReducer.java",
      "classTypes": [
        "DownwardProtocol<K2,V2>",
        "Application<K2,V2,K3,V3>",
        "Log",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Iterator"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<Tau_E>.hasNext()",
            "java.util.Iterator<Tau_E>.next()",
            "java.util.Iterator<Tau_E>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "iterator",
        "next",
        "boolean"
      ]
    },
    {
      "method": "getImageOffset@274",
      "body": "public Point getImageOffset(){\n  final Rectangle bounds=shape.getBounds();\n  final int xOffset=bounds.x + (bounds.width - image.getWidth(null)) / 2;\n  final int yOffset=bounds.y + (bounds.height - image.getHeight(null)) / 2;\n  return new Point(xOffset,yOffset);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.geom.RectangularShape.getBounds()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Rectangle"
          },
          {
            "_call": "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Point.Point(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.geom.RectangularShape.getBounds()",
              "java.awt.Rectangle.getSize()",
              "java.awt.geom.RectangularShape.setFrame(java.awt.geom.Point2D,java.awt.geom.Dimension2D)"
            ]
          }
        ]
      ],
      "returnType": "Point",
      "file": "./java_projects/beam/beam-ui/src/main/java/org/esa/beam/framework/ui/ButtonOverlayControl.java",
      "classTypes": [
        "Dimension",
        "Image",
        "List<ButtonDef>",
        "int"
      ],
      "sorrformalparam": [
        [
          "Point"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.geom.RectangularShape.getBounds()",
            "java.awt.Image.getWidth(java.awt.image.ImageObserver)",
            "java.awt.Image.getHeight(java.awt.image.ImageObserver)",
            "java.awt.Point.Point(int,int)"
          ]
        }
      ],
      "keywords": [
        "rectangular",
        "get",
        "observer",
        "integer",
        "width",
        "point"
      ]
    },
    {
      "method": "addAll@104",
      "body": "/** \n * Add a List of bindings to the binding list.\n * @param bindings the list of BindingAdapter object to add\n */\npublic void addAll(List bindings){\n  Iterator iter=bindings.iterator();\n  while (iter.hasNext()) {\n    add((BindingAdapter)iter.next());\n  }\n}\n",
      "formalParam": [
        "List"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "BindingAdapter",
        "BindingAdapter",
        "BindingAdapter",
        "void",
        "BindingAdapter",
        "boolean",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.add(int,java.lang.Object)",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.add(int,java.lang.Object)",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/teiid-designer/plugins/org.teiid.designer.mapping.ui/src/org/teiid/designer/mapping/ui/editor/BindingList.java",
      "classTypes": [
        "Set",
        "List",
        "int"
      ],
      "sorrformalparam": [
        [
          "BindingAdapter"
        ],
        [
          "BindingAdapter"
        ],
        [],
        [
          "InputParameter"
        ],
        [
          "BindingAdapter"
        ],
        [
          "BindingAdapter"
        ],
        [],
        [
          "InputParameter"
        ],
        [
          "boolean"
        ],
        [
          "BindingAdapter"
        ]
      ],
      "types": [
        "List",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "hasNext",
        "iterator"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next",
        "list",
        "iterator",
        "boolean"
      ]
    },
    {
      "method": "addToSuccess@22558",
      "body": "public void addToSuccess(String elem){\n  if (this.success == null) {\n    this.success=new ArrayList<String>();\n  }\n  this.success.add(elem);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "remove_args",
        "byte[]",
        "String",
        "describe_splits_result"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "String",
        "TField",
        "Map<String,_Fields>",
        "TField"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "ArrayList",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "boolean",
        "list"
      ]
    },
    {
      "method": "testMarkComplete_twice@616",
      "body": "public void testMarkComplete_twice() throws Exception {\n  String input=\"(D) 2011-12-01 A @complex test +with @multiple projects and @contexts +myproject\";\n  Task task=new Task(1,input);\n  Date date=new SimpleDateFormat(\"yyyyMMdd\").parse(\"20110228\");\n  task.markComplete(date);\n  task.markComplete(date);\n  assertEquals(1,task.getId());\n  assertEquals(\"A @complex test +with @multiple projects and @contexts +myproject\",task.getOriginalText());\n  assertEquals(\"A @complex test +with @multiple projects and @contexts +myproject\",task.getText());\n  assertEquals(Priority.D,task.getOriginalPriority());\n  assertEquals(Priority.NONE,task.getPriority());\n  assertEquals(\"2011-12-01\",task.getPrependedDate());\n  assertEquals(3,task.getContexts().size());\n  assertTrue(task.getContexts().contains(\"complex\"));\n  assertTrue(task.getContexts().contains(\"multiple\"));\n  assertTrue(task.getContexts().contains(\"contexts\"));\n  assertEquals(2,task.getProjects().size());\n  assertTrue(task.getProjects().contains(\"with\"));\n  assertTrue(task.getProjects().contains(\"myproject\"));\n  assertFalse(task.isDeleted());\n  assertTrue(task.isCompleted());\n  assertEquals(\"x 2011-02-28 2011-12-01 A @complex test +with @multiple projects and @contexts +myproject\",task.inScreenFormat());\n  assertEquals(\"x 2011-02-28 2011-12-01 A @complex test +with @multiple projects and @contexts +myproject\",task.inFileFormat());\n  assertEquals(\"2011-02-28\",task.getCompletionDate());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.parse(java.lang.String)",
            "_throws": [
              "java.text.ParseException"
            ],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.text.DateFormat.parse(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/todo.txt-touch/tests/src/com/todotxt/todotxttouch/task/TaskTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "SimpleDateFormat"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "date"
      ]
    },
    {
      "method": "getRandomInt@11",
      "body": "public static int getRandomInt(int a,int b){\n  int min=Math.min(a,b);\n  int max=Math.max(a,b);\n  return min + (int)(Math.random() * (max - min + 1));\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "Image"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/ScrapBook/android/Scrapbook/src/fr/telecom/scrapbook/filters/NoiseFilter.java",
      "classTypes": [
        "float"
      ],
      "sorrformalparam": [
        [
          "Image"
        ]
      ],
      "types": [
        "Integer",
        "Math"
      ],
      "apicalls": [
        "min",
        "max"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.min(int,int)",
            "java.lang.Math.max(int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "max",
        "integer",
        "math",
        "lang"
      ]
    },
    {
      "method": "optJSONObject@490",
      "body": "/** \n * Get the optional JSONObject associated with an index. Null is returned if the key is not found, or null if the index has no value, or if the value is not a JSONObject.\n * @param index The index must be between 0 and length() - 1.\n * @return      A JSONObject value.\n */\npublic JSONObject optJSONObject(int index){\n  Object o=opt(index);\n  return o instanceof JSONObject ? (JSONObject)o : null;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "String",
        "JSONArray",
        "Object",
        "JSONArray",
        "JSONArray"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.Double(double)",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "JSONObject",
      "file": "./java_projects/meetupnow/src/org/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Map"
        ],
        [
          "int"
        ],
        [
          "long"
        ],
        [
          "double"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.get(int)"
          ]
        }
      ],
      "keywords": [
        "object",
        "util",
        "get"
      ]
    },
    {
      "method": "getValueAt@273",
      "body": "public Object getValueAt(int rowIndex,int columnIndex){\n  DataField field=(DataField)formItems.get(rowIndex);\nswitch (columnIndex) {\ncase 0:\n    return field.getId();\ncase 1:\n  return new Boolean(isFieldActive(field));\n}\nthrow new IndexOutOfBoundsException(\"Colomun index \" + columnIndex + \" is too high\");\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Boolean.Boolean(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "Component"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JLabel.setText(java.lang.String)",
              "java.awt.Component.getBackground()",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          },
          {
            "calls": [
              "javax.swing.JLabel.setText(java.lang.String)",
              "java.awt.Color.Color(int,int,int)",
              "javax.swing.JComponent.setBackground(java.awt.Color)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/jogetworkflow/wflow-designer/src/main/java/org/jped/plugins/form/shark/FormEditorPanel.java",
      "classTypes": [
        "String",
        "Action",
        "FormManager"
      ],
      "sorrformalparam": [
        [
          "JTable",
          "Object",
          "boolean",
          "boolean",
          "int",
          "int"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": []
        },
        {
          "calls": [
            "java.lang.Boolean.Boolean(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "string"
      ]
    },
    {
      "method": "handleRequest@66",
      "body": "@RequestMapping(method=RequestMethod.GET) public String handleRequest(Model model,HttpServletRequest request){\n  String id=request.getParameter(searchSettings.searchStateParam(SearchFieldKeys.ID));\n  AccessGroupSet accessGroups=getUserAccessGroups(request);\n  SimpleIdRequest idRequest=new SimpleIdRequest(id,accessGroups);\n  BriefObjectMetadataBean briefObject=queryLayer.getObjectById(idRequest);\n  String fullObjectView=null;\n  if (briefObject == null) {\n    throw new InvalidRecordRequestException();\n  }\n else {\n    DatastreamAccessValidator.filterBriefObject(briefObject,accessGroups);\n    try {\n      Document foxmlView=FullObjectMetadataFactory.getFoxmlViewXML(idRequest);\n      fullObjectView=xslViewResolver.renderView(\"external.xslView.fullRecord.url\",foxmlView);\n    }\n catch (    Exception e) {\n      LOG.error(\"Failed to render full record view for \" + idRequest.getId(),e);\n    }\n  }\n  if (fullObjectView == null) {\n    throw new InvalidRecordRequestException();\n  }\n  boolean retrieveChildrenCount=briefObject.getResourceType().equals(searchSettings.resourceTypeFolder);\n  boolean retrieveFacets=briefObject.getResourceType().equals(searchSettings.resourceTypeCollection) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveNeighbors=briefObject.getResourceType().equals(searchSettings.resourceTypeFile) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveHierarchicalStructure=briefObject.getResourceType().equals(searchSettings.resourceTypeCollection) || briefObject.getResourceType().equals(searchSettings.resourceTypeFolder) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveHierarchicalItems=briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  if (retrieveChildrenCount) {\n    briefObject.setChildCount(queryLayer.getChildrenCount(briefObject,accessGroups));\n  }\n  if (retrieveFacets) {\n    List<String> facetsToRetrieve=null;\n    if (briefObject.getResourceType().equals(searchSettings.resourceTypeCollection)) {\n      facetsToRetrieve=new ArrayList<String>(searchSettings.collectionBrowseFacetNames);\n    }\n else     if (briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate)) {\n      facetsToRetrieve=new ArrayList<String>();\n      facetsToRetrieve.add(SearchFieldKeys.CONTENT_TYPE);\n    }\n    SearchResultResponse resultResponse=queryLayer.getFullRecordSupplementalData(briefObject.getPath(),accessGroups,facetsToRetrieve);\n    briefObject.setChildCount(resultResponse.getResultCount());\n    String collectionSearchStateUrl=searchSettings.searchStateParams.get(\"FACET_FIELDS\") + \"=\" + searchSettings.searchFieldParams.get(SearchFieldKeys.ANCESTOR_PATH)+ \":\"+ briefObject.getPath().getSearchValue();\n    model.addAttribute(\"facetFields\",resultResponse.getFacetFields());\n    model.addAttribute(\"collectionSearchStateUrl\",collectionSearchStateUrl);\n  }\n  if (retrieveHierarchicalStructure) {\n    LOG.debug(\"Retrieving hierarchical structure for \" + briefObject.getResourceType() + \" \"+ id);\n    SearchState searchState=SearchStateFactory.createHierarchicalBrowseSearchState();\n    searchState.getFacets().put(SearchFieldKeys.ANCESTOR_PATH,briefObject.getPath());\n    HierarchicalBrowseRequest browseRequest=new HierarchicalBrowseRequest(searchState,4,accessGroups);\n    HierarchicalBrowseResultResponse hierarchicalResultResponse=null;\n    searchState.setRowsPerPage(0);\n    hierarchicalResultResponse=queryLayer.getHierarchicalBrowseResults(browseRequest);\n    if (LOG.isDebugEnabled() && hierarchicalResultResponse != null)     LOG.debug(id + \" returned \" + hierarchicalResultResponse.getResultCount()+ \" hierarchical results.\");\n    if (retrieveHierarchicalItems) {\n      hierarchicalResultResponse.setResultCount(hierarchicalResultResponse.getResultList().size());\n      LOG.debug(id + \" result contains \" + hierarchicalResultResponse.getResultList().size()+ \" objects after adding root for items.\");\n      searchState.setRowsPerPage(100);\n      SearchResultResponse itemResults=queryLayer.getHierarchicalBrowseItemResult(browseRequest);\n      hierarchicalResultResponse.populateItemResults(itemResults.getResultList());\n      if (LOG.isDebugEnabled() && hierarchicalResultResponse != null)       LOG.debug(id + \" returned \" + itemResults.getResultCount()+ \" item results.\"+ hierarchicalResultResponse.getResultCount());\n    }\n    model.addAttribute(\"hierarchicalViewResults\",hierarchicalResultResponse);\n  }\n  if (retrieveNeighbors) {\n    List<BriefObjectMetadataBean> neighbors=queryLayer.getNeighboringItems(briefObject,searchSettings.maxNeighborResults,accessGroups);\n    for (    BriefObjectMetadataBean neighbor : neighbors) {\n      DatastreamAccessValidator.filterBriefObject(neighbor,accessGroups);\n    }\n    model.addAttribute(\"neighborList\",neighbors);\n  }\n  LOG.debug(briefObject.toString());\n  model.addAttribute(\"briefObject\",briefObject);\n  model.addAttribute(\"fullObjectView\",fullObjectView);\n  RecordNavigationState recordNavigationState=(RecordNavigationState)request.getSession().getAttribute(\"recordNavigationState\");\n  if (recordNavigationState != null) {\n    int index=recordNavigationState.indexOf(id);\n    if (index > -1) {\n      recordNavigationState.setCurrentRecordId(id);\n      recordNavigationState.setCurrentRecordIndex(index);\n      request.getSession().setAttribute(\"recordNavigationState\",recordNavigationState);\n    }\n  }\n  model.addAttribute(\"pageSubtitle\",briefObject.getTitle());\n  return \"fullRecord\";\n}\n",
      "formalParam": [
        "Model",
        "HttpServletRequest"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/Carolina-Digital-Repository/access/src/main/java/edu/unc/lib/dl/ui/controller/FullRecordController.java",
      "classTypes": [
        "Logger",
        "XSLViewResolver",
        "SearchSettings"
      ],
      "sorrformalparam": [],
      "types": [
        "ArrayList",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "add",
        "array",
        "boolean",
        "string"
      ]
    },
    {
      "method": "getNomeCliente@424",
      "body": "public String getNomeCliente(int i){\n  String sql=\"SELECT nome FROM usuario WHERE idusuario = \" + i;\n  Statement stmt=null;\n  ResultSet rs=null;\n  String nome=\"\";\n  try {\n    stmt=connection.createStatement();\n    rs=stmt.executeQuery(sql);\n    while (rs.next()) {\n      nome=rs.getString(1);\n    }\n    return nome;\n  }\n catch (  SQLException e) {\n    System.out.println(e.getMessage());\n    return null;\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.createStatement()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.Statement"
              },
              {
                "_call": "java.sql.Statement.executeQuery(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.ResultSet"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.sql.ResultSet.getString(int)",
                    "_throws": [
                      "java.sql.SQLException"
                    ],
                    "node": "DAPICall",
                    "_returns": "java.lang.String"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.sql.ResultSet.next()",
                    "_throws": [
                      "java.sql.SQLException"
                    ],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()"
            ]
          },
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.PreparedStatement.setInt(int,int)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/DAC_Cadastros/src/dao/UsuarioDAO.java",
      "classTypes": [
        "Connection"
      ],
      "sorrformalparam": [
        [],
        [
          "int"
        ],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString(int)",
            "java.sql.ResultSet.next()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString(int)",
            "java.sql.ResultSet.next()",
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "StaticFieldStub@15",
      "body": "public StaticFieldStub(Field field){\n  this.field=field;\n  if (!field.isAccessible() || (field.getModifiers() & Modifier.STATIC) == 0) {\n    throw new RuntimeException(\"not an accessible static field: \" + field.getDeclaringClass().getName() + \".\"+ field.getName());\n  }\n  try {\n    cachedValue=field.get(null);\n  }\n catch (  IllegalAccessException e) {\n    throw new RuntimeException(\"error accessing static field\",e);\n  }\n}\n",
      "formalParam": [
        "Field"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.reflect.AccessibleObject.isAccessible()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.reflect.Field.getModifiers()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.reflect.Field.get(java.lang.Object)",
            "_throws": [
              "java.lang.IllegalArgumentException",
              "java.lang.IllegalAccessException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/mvel/src/main/java/org/mvel2/util/StaticFieldStub.java",
      "classTypes": [
        "Field",
        "Object"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Integer",
        "AccessibleObject",
        "Field",
        "Object"
      ],
      "apicalls": [
        "isAccessible"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.reflect.AccessibleObject.isAccessible()",
            "java.lang.reflect.Field.getModifiers()",
            "java.lang.reflect.Field.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "access",
        "get",
        "integer"
      ]
    },
    {
      "method": "ButtonRenderer@54",
      "body": "public ButtonRenderer(){\n  setOpaque(true);\n  setBorder(null);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JComponent.setOpaque(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.JComponent.setBorder(javax.swing.border.Border)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JButton.JButton()",
              "javax.swing.JComponent.setOpaque(boolean)",
              "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/platform/dependencies/webharvest/src/main/java/org/webharvest/gui/PropertiesGrid.java",
      "classTypes": [
        "JButton",
        "int"
      ],
      "sorrformalparam": [
        [
          "JCheckBox"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JComponent.setOpaque(boolean)",
            "javax.swing.JComponent.setBorder(javax.swing.border.Border)"
          ]
        }
      ],
      "keywords": [
        "border",
        "component",
        "opaque"
      ]
    },
    {
      "method": "execute@46",
      "body": "/** \n * @generated\n */\npublic Object execute(ExecutionEvent event) throws ExecutionException {\n  ISelection selection=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getSelectionService().getSelection();\n  if (selection instanceof IStructuredSelection) {\n    IStructuredSelection structuredSelection=(IStructuredSelection)selection;\n    if (structuredSelection.size() != 1) {\n      return null;\n    }\n    if (structuredSelection.getFirstElement() instanceof EditPart && ((EditPart)structuredSelection.getFirstElement()).getModel() instanceof View) {\n      EObject modelElement=((View)((EditPart)structuredSelection.getFirstElement()).getModel()).getElement();\n      List editPolicies=CanonicalEditPolicy.getRegisteredEditPolicies(modelElement);\n      for (Iterator it=editPolicies.iterator(); it.hasNext(); ) {\n        CanonicalEditPolicy nextEditPolicy=(CanonicalEditPolicy)it.next();\n        nextEditPolicy.refresh();\n      }\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "ExecutionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Object",
      "file": "./java_projects/gmf-tooling/examples/org.eclipse.gmf.examples.taipan.gmf.editor.rcp/src/org/eclipse/gmf/examples/taipan/gmf/editor/part/TaiPanDiagramUpdateCommand.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "List",
        "Iterator",
        "Boolean"
      ],
      "apicalls": [
        "iterator",
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "iterator",
        "next",
        "util",
        "list"
      ]
    },
    {
      "method": "onItemSelected@296",
      "body": "public void onItemSelected(AdapterView<?> arg0,View arg1,int pos,long arg3){\n  my_category_name=categoryList.get(pos).get(\"category\").toString();\n}\n",
      "formalParam": [
        "AdapterView<?>",
        "View",
        "int",
        "long"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Map<java.lang.String,java.lang.Object>"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "View"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.get(int)",
              "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/sohu/src/Client/Android/sohukan/src/com/sohu/kan/EditArticle.java",
      "classTypes": [
        "TextView",
        "List"
      ],
      "sorrformalparam": [
        [
          "int",
          "View",
          "ViewGroup"
        ]
      ],
      "types": [
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.util.Map<java.lang.String,java.lang.Object>>.get(int)",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "get"
      ]
    },
    {
      "method": "addArchive@213",
      "body": "/** \n * The equivalent to <archive> tag in oozie's workflow xml.\n * @param conf Configuration object.\n * @param file file HDFS path. A \"#...\" symbolic string can be appended to the path to specify symbolic link name.For example, \"/user/oozie/udf1.jar#my.jar\". If no \"#...\" is specified, file name will be used as symbolic link name.\n */\npublic void addArchive(Properties conf,String file){\n  if (file == null || file.length() == 0) {\n    throw new IllegalArgumentException(\"file cannot be null or empty\");\n  }\n  String files=conf.getProperty(ARCHIVES);\n  conf.setProperty(ARCHIVES,files == null ? file : files + \",\" + file);\n}\n",
      "formalParam": [
        "Properties",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/oozie-3.1/client/src/main/java/org/apache/oozie/client/XOozieClient.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Properties",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.util.Properties.getProperty(java.lang.String)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "getDetails@82",
      "body": "public List<Counts> getDetails(){\n  ArrayList<Counts> details=new ArrayList<Counts>();\n  for (  String key : allCounts.keySet()) {\n    Counts counts=allCounts.get(key);\n    if (counts != summary)     details.add(counts);\n  }\n  return details;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Counts",
        "List<String>",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.util.List<Tau_E>.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Map<Tau_K,Tau_V>.keySet()",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "List<Counts>",
      "file": "./java_projects/fitnesse-plugin/src/main/java/hudson/plugins/fitnesse/NativePageCounts.java",
      "classTypes": [
        "String",
        "Counts",
        "List<String>",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Map<Tau_K,Tau_V>.keySet()",
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "array",
        "add",
        "util",
        "set"
      ]
    },
    {
      "method": "validateSameRepoIds@152",
      "body": "public void validateSameRepoIds(List<RepositoryRouteMemberRepository> repos1,List<String> repos2){\n  Assert.assertEquals(repos1.size(),repos2.size());\n  for (int ii=0; ii < repos1.size(); ii++) {\n    RepositoryRouteMemberRepository repo1=repos1.get(ii);\n    String repo2=repos2.get(ii);\n    Assert.assertEquals(repo1.getId(),repo2);\n  }\n}\n",
      "formalParam": [
        "List<RepositoryRouteMemberRepository>",
        "List<String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.lang.String>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<java.lang.String>.get(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/nexus/nexus/nexus-test-harness/nexus-test-harness-launcher/src/main/java/org/sonatype/nexus/test/utils/RoutesMessageUtil.java",
      "classTypes": [
        "MediaType",
        "String",
        "XStream",
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.String>.size()",
            "java.util.List<java.lang.String>.get(int)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "getNomeCliente@424",
      "body": "public String getNomeCliente(int i){\n  String sql=\"SELECT nome FROM usuario WHERE idusuario = \" + i;\n  Statement stmt=null;\n  ResultSet rs=null;\n  String nome=\"\";\n  try {\n    stmt=connection.createStatement();\n    rs=stmt.executeQuery(sql);\n    while (rs.next()) {\n      nome=rs.getString(1);\n    }\n    return nome;\n  }\n catch (  SQLException e) {\n    System.out.println(e.getMessage());\n    return null;\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.sql.Connection.createStatement()",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.Statement"
              },
              {
                "_call": "java.sql.Statement.executeQuery(java.lang.String)",
                "_throws": [
                  "java.sql.SQLException"
                ],
                "node": "DAPICall",
                "_returns": "java.sql.ResultSet"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.sql.ResultSet.getString(int)",
                    "_throws": [
                      "java.sql.SQLException"
                    ],
                    "node": "DAPICall",
                    "_returns": "java.lang.String"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.sql.ResultSet.next()",
                    "_throws": [
                      "java.sql.SQLException"
                    ],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()"
            ]
          },
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.PreparedStatement.setInt(int,int)",
              "java.sql.PreparedStatement.execute()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getObject(int)",
              "java.sql.ResultSet.next()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/DAC_Cadastros/src/dao/UsuarioDAO.java",
      "classTypes": [
        "Connection"
      ],
      "sorrformalparam": [
        [],
        [
          "int"
        ],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString(int)",
            "java.sql.ResultSet.next()"
          ]
        },
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "java.sql.ResultSet.next()",
            "java.sql.ResultSet.getString(int)",
            "java.sql.ResultSet.next()",
            "java.lang.Throwable.getMessage()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "writeTest@38",
      "body": "@Test public void writeTest() throws ParserConfigurationException, IOException, TransformerException {\n  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  final DocumentBuilder builder=factory.newDocumentBuilder();\n  final Document document=builder.newDocument();\n  document.setXmlVersion(\"1.0\");\n  document.setXmlStandalone(true);\n  final Element root=document.createElement(\"logs\");\n  final Element personne=document.createElement(\"user\");\n  personne.setAttribute(\"id\",\"gfsd-589\");\n  root.appendChild(personne);\n  final Element nom=document.createElement(\"name\");\n  nom.setTextContent(\"tom\");\n  personne.appendChild(nom);\n  final Element age=document.createElement(\"age\");\n  age.setTextContent(\"45\");\n  personne.appendChild(age);\n  document.appendChild(root);\n  File f=File.createTempFile(\"test\",\".xml\");\n  f.deleteOnExit();\n  DomUtilities.write(document,f);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.newDocument()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.deleteOnExit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/geotoolkit-pending/modules/utility/geotk-utility-pending/src/test/java/org/geotoolkit/util/DomUtilitiesTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "javax.xml.parsers.DocumentBuilder.newDocument()",
            "java.io.File.createTempFile(java.lang.String,java.lang.String)",
            "java.io.File.deleteOnExit()"
          ]
        }
      ],
      "keywords": [
        "file"
      ]
    },
    {
      "method": "write@401",
      "body": "public static boolean write(RenderedImage im,String formatName,OutputStream output) throws IOException {\n  if (output == null) {\n    throw new IllegalArgumentException(Messages.getString(\"imageio.54\"));\n  }\n  ImageOutputStream ios=createImageOutputStream(output);\n  boolean rt=write(im,formatName,ios);\n  ios.close();\n  return rt;\n}\n",
      "formalParam": [
        "RenderedImage",
        "String",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.spi.ImageOutputStreamSpi"
              },
              {
                "_call": "java.lang.Class.isInstance(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.ImageWriter"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "ImageInputStream",
        "ImageWriter",
        "boolean",
        "BufferedImage",
        "String[]",
        "ImageReader",
        "ImageWriter",
        "String[]",
        "String[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageWriter>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.openStream()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "$NOT$java.util.Iterator<javax.imageio.ImageReader>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageReader>.next()",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/harmony_1/classlib/modules/imageio/src/main/java/javax/imageio/ImageIO.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "RenderedImage",
          "String",
          "ImageOutputStream"
        ],
        [
          "Object"
        ],
        [],
        [
          "Object"
        ],
        [
          "URL"
        ],
        [],
        [
          "ImageWriter"
        ],
        [
          "ImageReader"
        ],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.next()"
          ]
        },
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "image"
      ]
    },
    {
      "method": "init@87",
      "body": "@Override public void init() throws ServletException {\n  final ServletConfig config=getServletConfig();\n  Logger log=new Logger(){\n    public void log(    CharSequence msg){\n      System.out.println(\"[\" + config.getServletName() + \"] \"+ msg);\n    }\n    public void log(    CharSequence msg,    Throwable t){\n      System.err.println(\"[\" + config.getServletName() + \"] \"+ msg);\n      t.printStackTrace();\n    }\n  }\n;\n  ClassLoader loader=getClassLoader();\n  AssetServer server=(AssetServer)config.getServletContext().getAttribute(\"asset.server\");\n  if (server == null) {\n    server=new AssetServer();\n    config.getServletContext().setAttribute(\"asset.server\",server);\n  }\n  String srcPath=config.getInitParameter(\"juzu.src_path\");\n  ReadFileSystem<?> sourcePath=srcPath != null ? new DiskFileSystem(new File(srcPath)) : WarFileSystem.create(config.getServletContext(),\"/WEB-INF/src/\");\n  WarFileSystem classes=WarFileSystem.create(config.getServletContext(),\"/WEB-INF/classes/\");\n  WarFileSystem resources=WarFileSystem.create(config.getServletContext(),\"/WEB-INF/\");\n  Module module;\n  URL cfg=loader.getResource(\"juzu/config.json\");\n  try {\n    String s=Tools.read(cfg);\n    JSON json=(JSON)JSON.parse(s);\n    module=new Module(loader,json);\n  }\n catch (  Exception e) {\n    throw new ServletException(e);\n  }\n  ApplicationModuleDescriptor desc=(ApplicationModuleDescriptor)module.getDescriptors().get(\"application\");\n  Map<String,Bridge> applications=new HashMap<String,Bridge>();\n  for (  final QN name : desc.getNames()) {\n    BridgeConfig bridgeConfig;\n    try {\n      bridgeConfig=new BridgeConfig(new SimpleMap<String,String>(){\n        @Override protected Iterator<String> keys(){\n          return BridgeConfig.NAMES.iterator();\n        }\n        @Override public String get(        Object key){\n          if (BridgeConfig.APP_NAME.equals(key)) {\n            return name.toString();\n          }\n else           if (BridgeConfig.NAMES.contains(key)) {\n            return config.getInitParameter((String)key);\n          }\n else {\n            return null;\n          }\n        }\n      }\n);\n    }\n catch (    Exception e) {\n      throw wrap(e);\n    }\n    Bridge bridge=new Bridge();\n    bridge.config=bridgeConfig;\n    bridge.resources=resources;\n    bridge.server=server;\n    bridge.log=log;\n    bridge.sourcePath=sourcePath;\n    bridge.classes=classes;\n    bridge.resolver=new ResourceResolver(){\n      public URL resolve(      String uri){\n        try {\n          return config.getServletContext().getResource(uri);\n        }\n catch (        MalformedURLException e) {\n          return null;\n        }\n      }\n    }\n;\n    applications.put(name.toString(),bridge);\n  }\n  RouteDescriptor routesDesc=(RouteDescriptor)module.getDescriptors().get(\"router\");\n  LinkedHashMap<String,Handler> handlers=new LinkedHashMap<String,Handler>();\n  if (routesDesc != null) {\n    Router root=new Router();\n    for (    RouteDescriptor child : routesDesc.getChildren()) {\n      Route route=root.append(child.getPath());\n      String application=child.getTargets().get(\"application\");\n      Bridge bridge=applications.get(application);\n      handlers.put(application,new Handler(route,bridge));\n    }\n    this.root=root;\n  }\n else {\n    this.root=null;\n  }\n  this.handlers=new ArrayList<Handler>(handlers.values());\n  String applicationName=getApplicationName(config);\n  if (applicationName != null) {\n    Handler defaultHandler=handlers.get(applicationName);\n    if (defaultHandler == null) {\n      defaultHandler=new Handler(new Router(),applications.get(applicationName));\n    }\n    this.defaultHandler=defaultHandler;\n  }\n else {\n    this.defaultHandler=null;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/juzu/core/src/main/java/juzu/impl/bridge/spi/standalone/ServletBridge.java",
      "classTypes": [
        "Phase[]",
        "List<Handler>",
        "Router",
        "Handler",
        "Phase[]"
      ],
      "sorrformalparam": [],
      "types": [
        "LinkedHashMap",
        "Thread"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.io.File.File(java.lang.String)",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.LinkedHashMap<Tau_K,Tau_V>.LinkedHashMap()",
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "list",
        "thread"
      ]
    },
    {
      "method": "test0114@5327",
      "body": "public void test0114(){\n  String str=\"final fin\";\n  String completeBehind=\"fin\";\n  int cursorLocation=str.lastIndexOf(\"fin\") + completeBehind.length() - 1;\n  String expectedCompletionNodeToString=\"<CompleteOnKeyword:fin>\";\n  String expectedParentNodeToString=\"<NONE>\";\n  String completionIdentifier=\"fin\";\n  String expectedReplacedSource=\"fin\";\n  String expectedUnitDisplayString=\"import <CompleteOnKeyword:fin>;\\n\";\n  checkDietParse(str.toCharArray(),cursorLocation,expectedCompletionNodeToString,expectedParentNodeToString,expectedUnitDisplayString,completionIdentifier,expectedReplacedSource,\"diet ast\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.lastIndexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/CompletionParserTestKeyword.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "toCharArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.lastIndexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
          ]
        }
      ],
      "keywords": [
        "char",
        "index",
        "string",
        "array",
        "last",
        "integer",
        "length"
      ]
    },
    {
      "method": "handleRequest@66",
      "body": "@RequestMapping(method=RequestMethod.GET) public String handleRequest(Model model,HttpServletRequest request){\n  String id=request.getParameter(searchSettings.searchStateParam(SearchFieldKeys.ID));\n  AccessGroupSet accessGroups=getUserAccessGroups(request);\n  SimpleIdRequest idRequest=new SimpleIdRequest(id,accessGroups);\n  BriefObjectMetadataBean briefObject=queryLayer.getObjectById(idRequest);\n  String fullObjectView=null;\n  if (briefObject == null) {\n    throw new InvalidRecordRequestException();\n  }\n else {\n    DatastreamAccessValidator.filterBriefObject(briefObject,accessGroups);\n    try {\n      Document foxmlView=FullObjectMetadataFactory.getFoxmlViewXML(idRequest);\n      fullObjectView=xslViewResolver.renderView(\"external.xslView.fullRecord.url\",foxmlView);\n    }\n catch (    Exception e) {\n      LOG.error(\"Failed to render full record view for \" + idRequest.getId(),e);\n    }\n  }\n  if (fullObjectView == null) {\n    throw new InvalidRecordRequestException();\n  }\n  boolean retrieveChildrenCount=briefObject.getResourceType().equals(searchSettings.resourceTypeFolder);\n  boolean retrieveFacets=briefObject.getResourceType().equals(searchSettings.resourceTypeCollection) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveNeighbors=briefObject.getResourceType().equals(searchSettings.resourceTypeFile) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveHierarchicalStructure=briefObject.getResourceType().equals(searchSettings.resourceTypeCollection) || briefObject.getResourceType().equals(searchSettings.resourceTypeFolder) || briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  boolean retrieveHierarchicalItems=briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate);\n  if (retrieveChildrenCount) {\n    briefObject.setChildCount(queryLayer.getChildrenCount(briefObject,accessGroups));\n  }\n  if (retrieveFacets) {\n    List<String> facetsToRetrieve=null;\n    if (briefObject.getResourceType().equals(searchSettings.resourceTypeCollection)) {\n      facetsToRetrieve=new ArrayList<String>(searchSettings.collectionBrowseFacetNames);\n    }\n else     if (briefObject.getResourceType().equals(searchSettings.resourceTypeAggregate)) {\n      facetsToRetrieve=new ArrayList<String>();\n      facetsToRetrieve.add(SearchFieldKeys.CONTENT_TYPE);\n    }\n    SearchResultResponse resultResponse=queryLayer.getFullRecordSupplementalData(briefObject.getPath(),accessGroups,facetsToRetrieve);\n    briefObject.setChildCount(resultResponse.getResultCount());\n    String collectionSearchStateUrl=searchSettings.searchStateParams.get(\"FACET_FIELDS\") + \"=\" + searchSettings.searchFieldParams.get(SearchFieldKeys.ANCESTOR_PATH)+ \":\"+ briefObject.getPath().getSearchValue();\n    model.addAttribute(\"facetFields\",resultResponse.getFacetFields());\n    model.addAttribute(\"collectionSearchStateUrl\",collectionSearchStateUrl);\n  }\n  if (retrieveHierarchicalStructure) {\n    LOG.debug(\"Retrieving hierarchical structure for \" + briefObject.getResourceType() + \" \"+ id);\n    SearchState searchState=SearchStateFactory.createHierarchicalBrowseSearchState();\n    searchState.getFacets().put(SearchFieldKeys.ANCESTOR_PATH,briefObject.getPath());\n    HierarchicalBrowseRequest browseRequest=new HierarchicalBrowseRequest(searchState,4,accessGroups);\n    HierarchicalBrowseResultResponse hierarchicalResultResponse=null;\n    searchState.setRowsPerPage(0);\n    hierarchicalResultResponse=queryLayer.getHierarchicalBrowseResults(browseRequest);\n    if (LOG.isDebugEnabled() && hierarchicalResultResponse != null)     LOG.debug(id + \" returned \" + hierarchicalResultResponse.getResultCount()+ \" hierarchical results.\");\n    if (retrieveHierarchicalItems) {\n      hierarchicalResultResponse.setResultCount(hierarchicalResultResponse.getResultList().size());\n      LOG.debug(id + \" result contains \" + hierarchicalResultResponse.getResultList().size()+ \" objects after adding root for items.\");\n      searchState.setRowsPerPage(100);\n      SearchResultResponse itemResults=queryLayer.getHierarchicalBrowseItemResult(browseRequest);\n      hierarchicalResultResponse.populateItemResults(itemResults.getResultList());\n      if (LOG.isDebugEnabled() && hierarchicalResultResponse != null)       LOG.debug(id + \" returned \" + itemResults.getResultCount()+ \" item results.\"+ hierarchicalResultResponse.getResultCount());\n    }\n    model.addAttribute(\"hierarchicalViewResults\",hierarchicalResultResponse);\n  }\n  if (retrieveNeighbors) {\n    List<BriefObjectMetadataBean> neighbors=queryLayer.getNeighboringItems(briefObject,searchSettings.maxNeighborResults,accessGroups);\n    for (    BriefObjectMetadataBean neighbor : neighbors) {\n      DatastreamAccessValidator.filterBriefObject(neighbor,accessGroups);\n    }\n    model.addAttribute(\"neighborList\",neighbors);\n  }\n  LOG.debug(briefObject.toString());\n  model.addAttribute(\"briefObject\",briefObject);\n  model.addAttribute(\"fullObjectView\",fullObjectView);\n  RecordNavigationState recordNavigationState=(RecordNavigationState)request.getSession().getAttribute(\"recordNavigationState\");\n  if (recordNavigationState != null) {\n    int index=recordNavigationState.indexOf(id);\n    if (index > -1) {\n      recordNavigationState.setCurrentRecordId(id);\n      recordNavigationState.setCurrentRecordIndex(index);\n      request.getSession().setAttribute(\"recordNavigationState\",recordNavigationState);\n    }\n  }\n  model.addAttribute(\"pageSubtitle\",briefObject.getTitle());\n  return \"fullRecord\";\n}\n",
      "formalParam": [
        "Model",
        "HttpServletRequest"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/Carolina-Digital-Repository/access/src/main/java/edu/unc/lib/dl/ui/controller/FullRecordController.java",
      "classTypes": [
        "Logger",
        "XSLViewResolver",
        "SearchSettings"
      ],
      "sorrformalparam": [],
      "types": [
        "ArrayList",
        "Boolean",
        "Collection"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "add",
        "array",
        "boolean",
        "string"
      ]
    },
    {
      "method": "panic@240",
      "body": "/** \n * Issue a fatal error message. <em>If this method is overriden, <strong>it must never return normally</strong>; i.e. it must always throw an exception or call System.exit</em>.\n * @deprecated as of 2.7.2 use {@link #fatalError(String)}. By defaykt this method executes <code>fatalError(\"panic: \" + s);</code>.\n * @param s The message\n */\npublic void panic(String s){\n  fatalError(\"panic: \" + s);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "Reader",
        "Vector",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.System.getProperty(java.lang.String)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileReader.FileReader(java.lang.String)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.io.FileReader.FileReader(java.lang.String)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.valueOf(char)",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.util.StringTokenizer.hasMoreTokens()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/SQL-Code-Assistant-/shared/root/java/antlr_patch/antlr/ToolPatched.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Exception",
          "String"
        ],
        [
          "String"
        ],
        [],
        [
          "String",
          "char"
        ],
        [],
        [
          "String"
        ]
      ],
      "types": [
        "System"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "print",
        "println",
        "string",
        "integer",
        "io",
        "stream",
        "exit"
      ]
    },
    {
      "method": "begin@625",
      "body": "public void begin(String namespace,String name,Attributes attributes) throws Exception {\n  Object top=digester.peek();\n  Class paramClasses[]=new Class[1];\n  paramClasses[0]=\"String\".getClass();\n  String paramValues[]=new String[1];\n  paramValues[0]=digester.getPublicId();\n  Method m=null;\n  try {\n    m=top.getClass().getMethod(method,paramClasses);\n  }\n catch (  NoSuchMethodException e) {\n    digester.getLogger().error(\"Can't find method \" + method + \" in \"+ top+ \" CLASS \"+ top.getClass());\n    return;\n  }\n  m.invoke(top,(Object[])paramValues);\n  if (digester.getLogger().isDebugEnabled())   digester.getLogger().debug(\"\" + top.getClass().getName() + \".\"+ method+ \"(\"+ paramValues[0]+ \")\");\n}\n",
      "formalParam": [
        "String",
        "String",
        "Attributes"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method"
          },
          {
            "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "_throws": [
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Class.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.substring(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/catalina/startup/WebRuleSet.java",
      "classTypes": [
        "String",
        "SetSessionConfig",
        "boolean",
        "String",
        "boolean",
        "SetJspConfig"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "String",
          "Attributes"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "IllegalAccessException",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "target",
        "invocation",
        "invoke",
        "reflect",
        "lang"
      ]
    },
    {
      "method": "testEmptyResults0013@470",
      "body": "public void testEmptyResults0013() throws Exception {\n  Statement stmt=con.createStatement();\n  stmt.executeUpdate(\"create table #t0013 \" + \"  (mytime  datetime not null, \" + \"   mytime2 datetime null     )\");\n  ResultSet rs1=stmt.executeQuery(\"select mytime, mytime2 from #t0013\");\n  assertNotNull(rs1);\n  assertTrue(\"Expected no result set\",!rs1.next());\n  stmt.close();\n  PreparedStatement pstmt=con.prepareStatement(\"select mytime, mytime2 from #t0013\");\n  ResultSet rs2=pstmt.executeQuery();\n  assertNotNull(rs2);\n  assertTrue(\"Expected no result\",!rs2.next());\n  pstmt.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Statement.executeUpdate(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.sql.Statement.executeQuery(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "$NOT$java.sql.ResultSet.next()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.sql.PreparedStatement.executeQuery()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          },
          {
            "_call": "$NOT$java.sql.ResultSet.next()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.sql.Statement.close()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "long",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.createStatement()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()",
              "java.sql.Connection.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getString(int)",
              "java.sql.ResultSet.getTimestamp(int)",
              "java.sql.Timestamp.toString()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.ResultSet.getTimestamp(int)",
              "java.sql.Timestamp.getTime()",
              "java.sql.Timestamp.getNanos()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getString(int)",
              "java.lang.String.toString()",
              "java.sql.ResultSet.getTimestamp(int)",
              "java.sql.Timestamp.toString()",
              "java.sql.ResultSet.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Statement.executeUpdate(java.lang.String)",
              "java.sql.Statement.close()",
              "java.sql.PreparedStatement.executeQuery()",
              "$NOT$java.sql.ResultSet.next()",
              "java.sql.ResultSet.close()",
              "java.sql.PreparedStatement.executeQuery()",
              "$NOT$java.sql.ResultSet.next()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Statement.executeUpdate(java.lang.String)",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "$NOT$java.sql.ResultSet.next()",
              "java.sql.Statement.executeQuery(java.lang.String)",
              "$NOT$java.sql.ResultSet.next()",
              "java.sql.Statement.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Weave/JTDS_SqlServerDriver/src/test/net/sourceforge/jtds/test/TimestampTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [
          "ResultSet"
        ],
        [],
        [],
        []
      ],
      "types": [
        "Statement"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Statement.executeUpdate(java.lang.String)",
            "java.sql.Statement.executeQuery(java.lang.String)",
            "$NOT$java.sql.ResultSet.next()",
            "java.sql.Statement.close()",
            "java.sql.PreparedStatement.executeQuery()",
            "$NOT$java.sql.ResultSet.next()",
            "java.sql.Statement.close()"
          ]
        }
      ],
      "keywords": [
        "query"
      ]
    },
    {
      "method": "htmlize@54",
      "body": "@Test public void htmlize(){\n  String[][] input_output={{\"This is a test\",\"This is a test\"},{\"Newline\\nshould become <br/>\",\"Newline<br/>should become &lt;br/&gt;\"},{\"Open & Grok\",\"Open &amp; Grok\"},{\"&amp;&lt;&gt;\",\"&amp;amp;&amp;lt;&amp;gt;\"}};\n  for (  String[] in_out : input_output) {\n    assertEquals(in_out[1],Util.htmlize(in_out[0]));\n    StringBuilder sb=new StringBuilder();\n    Util.htmlize(in_out[0],sb);\n    assertEquals(in_out[1],sb.toString());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Locale.getDefault()",
              "java.util.Locale.setDefault(java.util.Locale)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()",
              "java.io.StringWriter.getBuffer()",
              "java.lang.StringBuffer.setLength(int)",
              "java.io.StringWriter.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/opengrok/test/org/opensolaris/opengrok/web/UtilTest.java",
      "classTypes": [
        "Locale"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder"
      ]
    },
    {
      "method": "_lsr@607",
      "body": "/** \n * Wildcard a directory. The lists can contain Instruction that are matched against the given directory ${lsr;<dir>;<list>(;<list>)*} ${lsa;<dir>;<list>(;<list>)*}\n * @author aqute\n */\npublic String _lsr(String args[]){\n  return ls(args,true);\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.io.File.isAbsolute()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "$NOT$java.io.File.isDirectory()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.listFiles()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File[]"
          },
          {
            "_call": "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String",
        "Properties",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getAbsoluteFile()",
              "java.io.File.isFile()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.io.File.isAbsolute()",
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.listFiles()",
              "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
              "java.io.File.getName()"
            ]
          },
          {
            "calls": [
              "$NOT$java.io.File.isAbsolute()",
              "$NOT$java.io.File.exists()",
              "$NOT$java.io.File.isDirectory()",
              "java.io.File.listFiles()",
              "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.parseLong(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.util.Date.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.Long.parseLong(java.lang.String)",
              "java.util.Date.Date(long)",
              "java.util.Date.toString()",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
              "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
            ]
          },
          {
            "calls": [
              "java.lang.Class<Tau_T>.getDeclaredField(java.lang.String)",
              "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
              "java.lang.Class<Tau_T>.getFields()",
              "java.util.Arrays.toString(java.lang.Object[])",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getAbsoluteFile()",
              "java.io.File.isDirectory()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/felix/bundleplugin/src/main/java/aQute/libg/sed/ReplacerAdapter.java",
      "classTypes": [
        "Link",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ],
        [
          "String[]"
        ],
        [
          "String[]"
        ],
        [
          "Properties"
        ],
        [
          "String[]"
        ]
      ],
      "types": [
        "Collection",
        "ArrayList"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.io.File.isAbsolute()",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.listFiles()",
            "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "java.io.File.getName()"
          ]
        },
        {
          "calls": [
            "$NOT$java.io.File.isAbsolute()",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.isDirectory()",
            "java.io.File.listFiles()",
            "java.util.ArrayList<java.io.File>.ArrayList<File>(java.util.Collection)",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "run@113",
      "body": "public void run(){\n  try {\n    System.out.println(\"Server - Will accept connections on port \" + getPort());\n    Socket s=ss.accept();\n    InputStream is=s.getInputStream();\n    is.read();\n  }\n catch (  IOException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.ServerSocket.getLocalPort()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.ServerSocket.accept()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.Socket"
          },
          {
            "_call": "java.net.Socket.getInputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStream.read()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/sun/security/ssl/com/sun/net/ssl/internal/ssl/InputRecord/InterruptedIO.java",
      "classTypes": [
        "SSLSocket",
        "InputStream",
        "boolean",
        "SSLServerSocket"
      ],
      "sorrformalparam": [],
      "types": [
        "InputStream",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.ServerSocket.getLocalPort()",
            "java.io.PrintStream.println(java.lang.String)",
            "java.net.ServerSocket.accept()",
            "java.net.Socket.getInputStream()",
            "java.io.InputStream.read()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "childInfos@94",
      "body": "@Override public IFileInfo[] childInfos(int options,IProgressMonitor monitor) throws CoreException {\n  if (monitor == null)   monitor=new NullProgressMonitor();\n  try {\n    monitor.beginTask(Messages.SSHFileStore_childInfoMonitor,100);\n    ChannelSftp channel=proxy.getChannelSftp();\n    monitor.worked(25);\n    Vector<?> v=channel.ls(uri.getPath());\n    monitor.worked(50);\n    LinkedList<IFileInfo> childs=new LinkedList<IFileInfo>();\n    boolean isDir=false;\n    for (int i=0; i < v.size(); i++) {\n      ChannelSftp.LsEntry entry=(ChannelSftp.LsEntry)v.get(i);\n      if (!entry.getFilename().equals(\".\") && !entry.getFilename().equals(\"..\"))       childs.add(createFileInfo(entry.getAttrs()));\n else       isDir=true;\n    }\n    if (!isDir)     throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,MessageFormat.format(Messages.SSHFileStore_childInfoFailedDirectory,getName())));\n    monitor.worked(100);\n    monitor.done();\n    return childs.toArray(new IFileInfo[0]);\n  }\n catch (  SftpException e) {\n    throw new CoreException(new Status(IStatus.ERROR,Activator.PLUGIN_ID,Messages.SSHFileStore_childInfoFailed + e.getMessage()));\n  }\n}\n",
      "formalParam": [
        "int",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URI.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Vector<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String[]",
        "IFileStore[]",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
              "java.util.Vector<Tau_E>.size()",
              "java.util.LinkedList<java.lang.String>.add(java.lang.String)",
              "java.util.Vector<Tau_E>.size()",
              "java.util.LinkedList<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.Vector<Tau_E>.size()",
              "java.util.Vector<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.net.URI.getPath()"
            ]
          }
        ]
      ],
      "returnType": "IFileInfo[]",
      "file": "./java_projects/linuxtools/profiling/org.eclipse.linuxtools.ssh.proxy/src/org/eclipse/linuxtools/internal/ssh/proxy/SSHFileStore.java",
      "classTypes": [
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "int",
          "IProgressMonitor"
        ],
        [
          "int",
          "IProgressMonitor"
        ],
        [
          "int",
          "IProgressMonitor"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URI.getPath()",
            "java.util.LinkedList<Tau_E>.LinkedList()",
            "java.util.Vector<Tau_E>.size()",
            "java.util.Vector<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "linked",
        "path",
        "string"
      ]
    },
    {
      "method": "setPerHostParallelFetches@303",
      "body": "public void setPerHostParallelFetches(int perHostParallelFetches){\n  this.perHostParallelFetches=perHostParallelFetches;\n  System.getProperties().setProperty(\"http.maxConnections\",Integer.toString(perHostParallelFetches));\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getProperties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Properties"
          },
          {
            "_call": "java.lang.Integer.toString(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "HttpClient"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.net.Proxy>.get(int)",
              "java.net.InetSocketAddress.getHostName()",
              "java.net.InetSocketAddress.getPort()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/GeoBI/print/src/main/java/org/mapfish/print/config/Config.java",
      "classTypes": [
        "TreeSet<Integer>",
        "int",
        "TreeSet<String>",
        "TreeSet<Integer>",
        "int",
        "TreeSet<String>",
        "int",
        "MultiThreadedHttpConnectionManager",
        "String"
      ],
      "sorrformalparam": [
        [
          "URI"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getProperties()",
            "java.lang.Integer.toString(int)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "properties"
      ]
    },
    {
      "method": "toString@250",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\n@Override public String toString(){\n  if (eIsProxy())   return super.toString();\n  StringBuffer result=new StringBuffer(super.toString());\n  result.append(\" (derived: \");\n  result.append(derived);\n  result.append(')');\n  return result.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/applitude/tooling/org.applause.applausedsl/src-gen/org/applause/applausedsl/applauseDsl/impl/PropertyImpl.java",
      "classTypes": [
        "boolean",
        "TypeDescription",
        "boolean"
      ],
      "sorrformalparam": [],
      "types": [
        "StringBuffer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(boolean)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "monitor@106",
      "body": "/** \n * Invokes query() to do the parsing and handles parsing errors for  each one of the NICs specified in the configuration. \n * @return an array of EventRecords that holds one element that representsthe current state of network interfaces.\n */\npublic EventRecord[] monitor(){\n  ArrayList<EventRecord> recs=new ArrayList<EventRecord>();\n  for (  String nic : nics) {\n    try {\n      recs.add(query(nic));\n    }\n catch (    UnknownHostException e) {\n      e.printStackTrace();\n    }\n  }\n  EventRecord[] T=new EventRecord[recs.size()];\n  return recs.toArray(T);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "EventRecord[]",
      "file": "./java_projects/platform/dependencies/hadoop/src/contrib/failmon/src/java/org/apache/hadoop/contrib/failmon/NICParser.java",
      "classTypes": [
        "String[]"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "list"
      ]
    },
    {
      "method": "mouseEntered@773",
      "body": "public void mouseEntered(MouseEvent e){\n  getHandler().mouseEntered(e);\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.InputEvent.getModifiers()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.getParent()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Container"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "Dimension"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.AbstractButton.setMargin(java.awt.Insets)",
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "javax.swing.JMenuItem.removeMenuDragMouseListener(javax.swing.event.MenuDragMouseListener)",
              "javax.swing.JMenuItem.removeMenuKeyListener(javax.swing.event.MenuKeyListener)",
              "java.awt.Component.removePropertyChangeListener(java.beans.PropertyChangeListener)",
              "javax.swing.SwingUtilities.replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)",
              "javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()",
              "$NOT$javax.swing.AbstractButton.getActionCommand()",
              "javax.swing.AbstractButton.doClick(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "javax.swing.JComponent.getWidth()",
              "javax.swing.JComponent.getHeight()",
              "$NOT$javax.swing.AbstractButton.getActionCommand()",
              "javax.swing.AbstractButton.doClick(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "java.awt.Dimension.Dimension()",
              "javax.swing.JComponent.getInsets()",
              "javax.swing.UIManager.get(java.lang.Object)",
              "javax.swing.text.View.getMaximumSpan(int)",
              "javax.swing.text.View.getPreferredSpan(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/plaf/basic/BasicMenuItemUI.java",
      "classTypes": [
        "boolean",
        "Font",
        "boolean",
        "Handler",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "JComponent"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.event.InputEvent.getModifiers()",
            "java.awt.Component.getParent()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "component",
        "container"
      ]
    },
    {
      "method": "testEncodeKeyValueSignedDate@269",
      "body": "@Test public void testEncodeKeyValueSignedDate() throws Exception {\n  CommonHBaseBytesUtil bu=new CommonHBaseBytesUtil();\n  SimpleDateFormat sdf=new SimpleDateFormat(\"yyyy-MM-dd\");\n  Date aDate=sdf.parse(\"1969-08-28\");\n  long negTime=aDate.getTime();\n  byte[] result=HBaseValueMeta.encodeKeyValue(aDate,Mapping.KeyType.DATE,bu);\n  assertTrue(result != null);\n  long timeResult=bu.toLong(result);\n  timeResult^=(1L << 63);\n  assertEquals(timeResult,negTime);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.text.DateFormat.parse(java.lang.String)",
            "_throws": [
              "java.text.ParseException"
            ],
            "node": "DAPICall",
            "_returns": "java.util.Date"
          },
          {
            "_call": "java.util.Date.getTime()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.lang.Long.longValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.Long(long)",
              "java.lang.Long.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.getTime()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/big-data-plugin/test-src/org/pentaho/hbase/HBaseValueMetaTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Long",
        "SimpleDateFormat"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
            "java.text.DateFormat.parse(java.lang.String)",
            "java.util.Date.getTime()"
          ]
        }
      ],
      "keywords": [
        "string",
        "text",
        "format",
        "date",
        "exception",
        "util"
      ]
    },
    {
      "method": "init@121",
      "body": "/** \n * Configure the Engine Config\n * @param session the Jcr Session\n * @throws Exception .\n */\npublic static void init(@Nonnull Session session) throws Exception {\n  KKAdminEngine kkAdminEngine=adminEngineThreadLocal.get();\n  if (kkAdminEngine == null) {\n    kkAdminEngine=new KKAdminEngine();\n    kkAdminEngine.internalInit(session);\n    adminEngineThreadLocal.set(kkAdminEngine);\n  }\n}\n",
      "formalParam": [
        "Session"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal<Tau_T>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.ThreadLocal<Tau_T>.set(Tau_T)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Hippo-CMS-Konakart/konakart/common/src/main/java/org/onehippo/forge/konakart/common/engine/KKAdminEngine.java",
      "classTypes": [
        "String",
        "KKAdminEngineConfig",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "ThreadLocal"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<Tau_T>.get()",
            "java.lang.ThreadLocal<Tau_T>.set(Tau_T)"
          ]
        }
      ],
      "keywords": [
        "set"
      ]
    },
    {
      "method": "onPackageFilterChanged@567",
      "body": "public void onPackageFilterChanged(String filter){\n  packageFilter_=filter.toLowerCase();\n  setViewPackageList();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/rstudio/src/gwt/src/org/rstudio/studio/client/workbench/views/packages/Packages.java",
      "classTypes": [
        "DefaultCRANMirror",
        "PackageInstallOptions"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.length()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "lower",
        "util",
        "length"
      ]
    },
    {
      "method": "loadImage@72",
      "body": "/** \n * Helper method to load an image file from the CLASSPATH\n * @param imageName the package and name of the file to load relative to the CLASSPATH\n * @return an ImageIcon instance with the specified image file\n * @throws IllegalArgumentException if the image resource cannot be loaded.\n */\npublic ImageIcon loadImage(String imageName){\n  try {\n    ClassLoader classloader=getClass().getClassLoader();\n    java.net.URL url=classloader.getResource(imageName);\n    if (url != null) {\n      ImageIcon icon=new ImageIcon(url);\n      return icon;\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n  throw new IllegalArgumentException(\"Unable to load image: \" + imageName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Class.getClassLoader()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.ClassLoader"
              },
              {
                "_call": "java.lang.ClassLoader.getResource(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.net.URL"
              },
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "ImageIcon",
      "file": "./java_projects/rawr/lib/rawr/launch4j/src/net/sf/launch4j/form/ConfigForm.java",
      "classTypes": [
        "TitledSeparator",
        "JTextArea",
        "JTabbedPane"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable",
        "ImageIcon"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)"
          ]
        },
        {
          "calls": [
            "java.lang.Class.getClassLoader()",
            "java.lang.ClassLoader.getResource(java.lang.String)",
            "javax.swing.ImageIcon.ImageIcon(java.net.URL)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "loader",
        "icon",
        "print",
        "stack"
      ]
    },
    {
      "method": "close@1474",
      "body": "public void close(){\n  outputMultipleBaseCounts(null);\n  try {\n    writer.flush();\n    writer.close();\n  }\n catch (  IOException e) {\n    throw new RuntimeException(\"Unable to close outputMultipleBaseCountsFile\");\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.BufferedWriter.flush()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedWriter.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "String",
        "PhasingTable",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>(java.util.Map)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.TreeMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.TreeMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Torrent-Variant-Caller-stable/public/java/src/org/broadinstitute/sting/gatk/walkers/phasing/ReadBackedPhasingWalker.java",
      "classTypes": [
        "double",
        "int",
        "double",
        "Set<String>",
        "Haplotype",
        "double"
      ],
      "sorrformalparam": [
        [
          "VariantContext"
        ],
        [],
        [],
        [
          "SampleReadLocus",
          "GenomeLoc",
          "byte",
          "byte"
        ]
      ],
      "types": [
        "BufferedWriter"
      ],
      "apicalls": [
        "close",
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.BufferedWriter.flush()",
            "java.io.BufferedWriter.close()"
          ]
        }
      ],
      "keywords": [
        "writer"
      ]
    },
    {
      "method": "getSelectedIndex@669",
      "body": "/** \n * Gets option index (option number, starting at 0) for selected option in the specified select element.\n * @param selectLocator an <a href=\"#locators\">element locator</a> identifying a drop-down menu\n * @return the selected option index in the specified select drop-down\n */\npublic String getSelectedIndex(String selectLocator){\n  String[] result=getSelectedIndexes(selectLocator);\n  if (result.length > 0) {\n    return result[0];\n  }\n  return \"-1\";\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.valueOf(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.List<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Throwable.getMessage()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.util.Date.Date()",
              "java.util.Date.getTime()",
              "java.util.Date.Date()",
              "java.util.Date.getTime()",
              "java.lang.Thread.sleep(long)",
              "java.lang.Thread.yield()",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.util.List<java.lang.Throwable>.add(java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.util.List<java.lang.Throwable>.add(java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.util.logging.Logger.info(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.warning(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/selenium-client-factory/selenium-htmlunit-driver/src/main/java/com/saucelabs/selenium/client/htmlunit/SeleniumHTMLUnit.java",
      "classTypes": [
        "boolean",
        "int",
        "Stack<URL>",
        "WebWindow",
        "List<Throwable>",
        "String",
        "int",
        "HtmlPage",
        "HtmlPage"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [],
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [],
        [
          "String",
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "ArrayList",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.lang.String.valueOf(int)",
            "java.util.List<java.lang.String>.add(java.lang.String)",
            "java.util.List<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "value",
        "boolean",
        "string",
        "integer"
      ]
    },
    {
      "method": "findFiles@124",
      "body": "/** \n * Return all files that match the given pattern(s) start searching in the specified dir. Searches in all sub directories as well. More than one pattern can be specified in parameter <i>pattern</i>. They have to be separated by ';'.\n * @param dir The directory to start searching (must not be null)\n * @param pattern The pattern(s) the filenames must match (must not be null )\n * @return All file found that matched to at least one of the patterns\n * @throws IllegalArgumentException If <i>dir</i> or <i>pattern</i> is null\n */\npublic static File[] findFiles(String dir,String pattern){\n  return findFiles(dir,pattern,true);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Character.Character(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Character.charValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "File[]",
        "File[]",
        "File"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.lang.Class<Tau_T>.getClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)",
              "java.net.URL.getFile()",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Character.Character(char)",
              "java.util.ArrayList.ArrayList()",
              "java.lang.Character.charValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Character.Character(char)",
              "java.util.ArrayList.ArrayList()",
              "java.lang.Character.charValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)",
              "java.net.URL.getFile()",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "File[]",
      "file": "./java_projects/BitMate/uis/src/org/pf/file/FileFinder.java",
      "classTypes": [
        "List"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String",
          "boolean"
        ],
        [
          "String",
          "String",
          "boolean",
          "char"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Character",
        "ArrayList"
      ],
      "apicalls": [
        "charValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Character.Character(char)",
            "java.util.ArrayList.ArrayList()",
            "java.lang.Character.charValue()"
          ]
        }
      ],
      "keywords": [
        "util",
        "list",
        "lang",
        "array",
        "char",
        "character"
      ]
    },
    {
      "method": "isValidIPAddress@253",
      "body": "public boolean isValidIPAddress(String ip){\n  String[] parts=ip.split(\"\\\\.\");\n  if (parts.length < 4)   return false;\n  for (  String s : parts) {\n    final int i=Integer.parseInt(s);\n    if (i < 0 || i > 255)     return false;\n  }\n  return true;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/android_8/src/com/defuzeme/gui/Gui.java",
      "classTypes": [
        "int",
        "ProgressDialog"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.split(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "string"
      ]
    },
    {
      "method": "totalSize@36",
      "body": "public static long totalSize(Collection files){\n  long total=0;\n  for (Iterator it=files.iterator(); it.hasNext(); ) {\n    File f=(File)it.next();\n    total+=f.length();\n  }\n  return total;\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.File.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "long"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "long",
      "file": "./java_projects/felix/sigil/ivy/resolver/test/multi-project/projects/size/src/size/FileSize.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Collection",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.io.File.length()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "long"
      ]
    },
    {
      "method": "getPage@43",
      "body": "public List<E> getPage(){\n  if (this.offset + this.limit < this.entities.size())   return this.entities.subList(this.offset,this.offset + this.limit);\n else   return this.entities.subList(this.offset,this.entities.size());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.List<Tau_E>.subList(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.List<Tau_E>.subList(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "List<E>",
        "List<E>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.subList(int,int)"
            ]
          }
        ]
      ],
      "returnType": "List<E>",
      "file": "./java_projects/molgenis_apps/modules/variant/org/molgenis/mutation/ui/LimitOffsetPager.java",
      "classTypes": [
        "int",
        "int",
        "List<E>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.subList(int,int)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.subList(int,int)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "getBytes@374",
      "body": "public static byte[] getBytes(String s){\n  try {\n    return s.getBytes(__ISO_8859_1);\n  }\n catch (  Exception e) {\n    LOG.warn(e);\n    return s.getBytes();\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.String.getBytes()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.String.getBytes(java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "byte[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "byte[]",
        "boolean",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(int)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.getBytes(java.lang.String)",
              "java.lang.String.getBytes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.StringBuilder.append(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.toCharArray()",
              "java.lang.String.String(char[])"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/jetty.project/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
      "classTypes": [
        "Logger",
        "String",
        "String",
        "char[]",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "char[]",
          "int",
          "int"
        ],
        [
          "StringBuilder",
          "String",
          "int",
          "int"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "UnsupportedEncodingException"
      ],
      "apicalls": [
        "getBytes"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.getBytes(java.lang.String)",
            "java.lang.String.getBytes()"
          ]
        }
      ],
      "keywords": [
        "unsupported",
        "lang",
        "bytes",
        "string",
        "get"
      ]
    },
    {
      "method": "getFocusableComponentOrChild@214",
      "body": "public static Component getFocusableComponentOrChild(Component c){\n  return getFocusableComponentOrChild(c,false);\n}\n",
      "formalParam": [
        "Component"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.isEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Component.isVisible()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.isRequestFocusEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Container.getComponentCount()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.awt.Container.getComponent(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Component"
              },
              {
                "_call": "javax.swing.JComponent.isRequestFocusEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "Rectangle[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String)",
              "java.util.StringTokenizer.countTokens()",
              "java.util.StringTokenizer.nextToken()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment()",
              "java.awt.GraphicsEnvironment.getScreenDevices()"
            ]
          }
        ]
      ],
      "returnType": "Component",
      "file": "./java_projects/chartsy/Chartsy/Chat/src/org/chartsy/chatsy/chat/util/GraphicUtils.java",
      "classTypes": [
        "Map<String,Image>",
        "Cursor",
        "Color",
        "Insets",
        "Cursor"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        []
      ],
      "types": [
        "JComponent",
        "Component"
      ],
      "apicalls": [
        "isEnabled"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.isEnabled()",
            "java.awt.Component.isVisible()",
            "javax.swing.JComponent.isRequestFocusEnabled()",
            "java.awt.Container.getComponentCount()",
            "java.awt.Container.getComponent(int)",
            "javax.swing.JComponent.isRequestFocusEnabled()"
          ]
        },
        {
          "calls": [
            "java.awt.Component.isEnabled()",
            "java.awt.Component.isVisible()"
          ]
        }
      ],
      "keywords": [
        "focus",
        "j"
      ]
    },
    {
      "method": "consumeProcessErrorStream@276",
      "body": "/** \n * Gets the error stream from a process and reads it to keep the process from blocking due to a full buffer. The processed stream data is appended to the supplied Appendable. A new Thread is started, so this method will return immediately.\n * @param self a Process\n * @param error an Appendable to capture the process stderr\n * @return the Thread\n * @since 1.7.5\n */\npublic static Thread consumeProcessErrorStream(Process self,Appendable error){\n  Thread thread=new Thread(new TextDumper(self.getErrorStream(),error));\n  thread.start();\n  return thread;\n}\n",
      "formalParam": [
        "Process",
        "Appendable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Process.getErrorStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Thread",
        "void",
        "void",
        "Thread",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Process.getInputStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Process.getInputStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Process.getErrorStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Process.getInputStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Process.getErrorStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Process.getErrorStream()",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Process.destroy()",
              "java.lang.Process.waitFor()"
            ]
          }
        ]
      ],
      "returnType": "Thread",
      "file": "./java_projects/groovy-core/src/main/org/codehaus/groovy/runtime/ProcessGroovyMethods.java",
      "classTypes": [
        "InputStream",
        "InputStream",
        "boolean",
        "Process",
        "Appendable",
        "OutputStream"
      ],
      "sorrformalparam": [
        [
          "Process",
          "OutputStream"
        ],
        [
          "Process"
        ],
        [
          "Process",
          "OutputStream",
          "OutputStream"
        ],
        [
          "Process",
          "OutputStream"
        ],
        [
          "Process",
          "long"
        ]
      ],
      "types": [],
      "apicalls": [
        "start"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Process.getErrorStream()",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "stream",
        "lang"
      ]
    },
    {
      "method": "findAllSEADUS@48",
      "body": "public static List<SEADUS> findAllSEADUS(){\n  List<SEADUS> items=entityManager().createQuery(\"SELECT o FROM SEADUS o\",SEADUS.class).getResultList();\n  for (int i=items.size() - 1; i >= 0; i--) {\n    SEADUS item=(SEADUS)items.get(i);\n    if (!Helper.IsSurrogateDate(item.getSuletud())) {\n      items.remove(i);\n    }\n  }\n  return items;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "List<SEADUS>",
      "file": "./java_projects/Team02-border-guard/Team02/src/main/java/ee/itcollege/team02/entities/SEADUS.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "size",
        "remove"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)"
          ]
        }
      ],
      "keywords": [
        "list",
        "remove",
        "util",
        "integer",
        "size"
      ]
    },
    {
      "method": "assertTestFailedWith@27",
      "body": "public void assertTestFailedWith(Class<? extends Throwable> exceptionType){\n  assertNotNull(\"test should have failed\",failure);\n  assertTrue(\"should have failed with \" + exceptionType.getName() + \" but threw \"+ failure.getException(),exceptionType.isInstance(failure.getException()));\n}\n",
      "formalParam": [
        "Class<? extends Throwable>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Class<Tau_T>.isInstance(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jmock-library_1/test/org/jmock/test/acceptance/junit4/FailureRecordingRunListener.java",
      "classTypes": [
        "Failure"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.Class<Tau_T>.isInstance(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "get"
      ]
    },
    {
      "method": "GUIController@54",
      "body": "public GUIController(PApplet newParent,boolean newVisible){\n  setParent(newParent);\n  setVisible(newVisible);\n  contents=new GUIComponent[5];\n  lookAndFeel=new IFLookAndFeel(parent,IFLookAndFeel.DEFAULT);\n  userState=new IFPGraphicsState();\n  SecurityManager security=System.getSecurityManager();\n  if (security != null) {\n    try {\n      security.checkSystemClipboardAccess();\n      clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n    }\n catch (    SecurityException e) {\n      clipboard=new Clipboard(\"Interfascia Clipboard\");\n    }\n  }\n else {\n    try {\n      clipboard=Toolkit.getDefaultToolkit().getSystemClipboard();\n    }\n catch (    Exception e) {\n    }\n  }\n  parent.registerKeyEvent(this);\n  parent.registerDraw(this);\n}\n",
      "formalParam": [
        "PApplet",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.getSecurityManager()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.SecurityManager"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.awt.Toolkit.getDefaultToolkit()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Toolkit"
              },
              {
                "_call": "java.awt.Toolkit.getSystemClipboard()",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "node": "DAPICall",
                "_returns": "java.awt.datatransfer.Clipboard"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.SecurityManager.checkSystemClipboardAccess()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.awt.Toolkit.getDefaultToolkit()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.awt.Toolkit"
              },
              {
                "_call": "java.awt.Toolkit.getSystemClipboard()",
                "_throws": [
                  "java.awt.HeadlessException"
                ],
                "node": "DAPICall",
                "_returns": "java.awt.datatransfer.Clipboard"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.KeyEvent.getKeyCode()",
              "java.awt.event.InputEvent.getModifiersEx()"
            ]
          },
          {
            "calls": [
              "java.awt.event.KeyEvent.getKeyCode()",
              "java.awt.event.KeyEvent.getKeyCode()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/interfascia/interfascia/GUIController.java",
      "classTypes": [
        "int",
        "PApplet",
        "int",
        "GUIComponent[]"
      ],
      "sorrformalparam": [
        [
          "KeyEvent"
        ]
      ],
      "types": [
        "HeadlessException"
      ],
      "apicalls": [
        "getSystemClipboard"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
          ]
        },
        {
          "calls": [
            "java.lang.System.getSecurityManager()",
            "java.lang.SecurityManager.checkSystemClipboardAccess()",
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemClipboard()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "awt"
      ]
    },
    {
      "method": "deleteChannel@546",
      "body": "/** \n * Deletes the Podcast channel with the given ID.\n * @param channelId The Podcast channel ID.\n */\npublic void deleteChannel(int channelId){\n  List<PodcastEpisode> episodes=getEpisodes(channelId,false);\n  for (  PodcastEpisode episode : episodes) {\n    deleteEpisode(episode.getId(),false);\n  }\n  podcastDao.deleteChannel(channelId);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.delete()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.Future<Tau_V>.cancel(boolean)",
              "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.exists()",
              "java.io.File.delete()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/supersonic/subsonic-main/src/main/java/net/sourceforge/subsonic/service/PodcastService.java",
      "classTypes": [
        "Logger",
        "ScheduledExecutorService",
        "DateFormat[]",
        "ExecutorService"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "delete",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()",
            "java.io.File.delete()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "io",
        "boolean",
        "string",
        "delete",
        "file"
      ]
    },
    {
      "method": "Event@40",
      "body": "public Event(String name,java.lang.Class ownerType){\n  setName(name);\n  setOwnerType(ownerType);\n  listeners=new java.util.ArrayList<IEventListener>();\n  contexts=new java.util.HashMap<IEventListener,Object>();\n}\n",
      "formalParam": [
        "String",
        "java.lang.Class"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/ovirt-engine/backend/manager/modules/compat/src/main/java/org/ovirt/engine/core/compat/Event.java",
      "classTypes": [
        "java.util.Map<IEventListener,Object>",
        "Object",
        "java.util.List<IEventListener>",
        "java.lang.Class"
      ],
      "sorrformalparam": [],
      "types": [
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()"
          ]
        }
      ],
      "keywords": [
        "array",
        "util",
        "list",
        "map"
      ]
    },
    {
      "method": "getWidth@643",
      "body": "/** \n * @see org.newdawn.slick.Font#getWidth(java.lang.String)\n */\npublic int getWidth(String text){\n  DisplayList displayList=null;\n  if (displayListCaching) {\n    displayList=(DisplayList)displayLists.get(text);\n    if (displayList != null && displayList.width != null)     return displayList.width.intValue();\n  }\n  int maxWidth=0;\n  int width=0;\n  CharDef lastCharDef=null;\n  for (int i=0, n=text.length(); i < n; i++) {\n    int id=text.charAt(i);\n    if (id == '\\n') {\n      width=0;\n      continue;\n    }\n    if (id >= chars.length) {\n      continue;\n    }\n    CharDef charDef=chars[id];\n    if (charDef == null) {\n      continue;\n    }\n    if (lastCharDef != null)     width+=lastCharDef.getKerning(id);\n    lastCharDef=charDef;\n    if (i < n - 1) {\n      width+=charDef.xadvance;\n    }\n else {\n      width+=charDef.width;\n    }\n    maxWidth=Math.max(maxWidth,width);\n  }\n  if (displayList != null)   displayList.width=new Short((short)maxWidth);\n  return maxWidth;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Short.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.charAt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char"
          },
          {
            "_call": "java.lang.Math.max(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Short.intValue()",
              "java.lang.String.indexOf(int)",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.Math.min(int,int)",
              "java.lang.Short.Short(short)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.intValue()",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.Math.max(int,int)",
              "java.lang.String.length()",
              "java.lang.Short.Short(short)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/Connectable/mt4j-core/src/org/mt4j/util/font/fontFactories/AngelCodeFontFactory.java",
      "classTypes": [
        "int",
        "int",
        "short",
        "LinkedHashMap",
        "short"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Short",
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Short.intValue()",
            "java.lang.String.length()",
            "java.lang.String.charAt(int)",
            "java.lang.Math.max(int,int)",
            "java.lang.Short.Short(short)"
          ]
        }
      ],
      "keywords": [
        "math",
        "lang",
        "character"
      ]
    },
    {
      "method": "addPattern@390",
      "body": "public String addPattern(String s,String pattern){\n  if (s == null)   s=\"\";\n else   s=s.trim();\n  if (!s.contains(pattern)) {\n    if (s.length() != 0)     s=s + \"|\";\n    s=s + pattern;\n  }\n  return s;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.contains(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.lang.String.split(java.lang.String)",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/jetty-project/jetty-maven-plugin/src/main/java/org/mortbay/jetty/plugin/JettyWebAppContext.java",
      "classTypes": [
        "File",
        "String",
        "String",
        "String",
        "List<File>",
        "Logger",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String[]"
        ]
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "contains",
        "length",
        "trim"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.contains(java.lang.CharSequence)"
          ]
        },
        {
          "calls": [
            "java.lang.String.trim()",
            "$NOT$java.lang.String.contains(java.lang.CharSequence)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "string",
        "length",
        "sequence",
        "boolean",
        "trim"
      ]
    },
    {
      "method": "getAlertPriority@59",
      "body": "public String getAlertPriority(){\n  if (this.alert.getPriority() == 0) {\n    return \"n/a\";\n  }\n else   if (PatientAlertType.SymptomReporting.name().equals(getType().name())) {\n    return String.format(\"SYMPTOM PRIO-%d\",this.alert.getPriority());\n  }\n else {\n    return String.valueOf(this.alert.getPriority());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.valueOf(char[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/TAMA-Web/tama.patient/src/main/java/org/motechproject/tama/patient/domain/PatientAlert.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Character"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.lang.String,java.lang.Object[])"
          ]
        },
        {
          "calls": [
            "java.lang.String.valueOf(char[])"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "doFilter@26",
      "body": "@Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {\n  String key=request.getParameter(\"key\");\n  String uri=((HttpServletRequest)request).getRequestURI();\n  String remote_ip=request.getRemoteAddr();\n  logger.debug(String.format(\"%s - %s\",remote_ip,uri));\n  if (!remote_ip.matches(SENATE_IP_RANGE)) {\n    if (uri.matches(\"(/GeoApi)?/api/.*\") && key == null) {\n      logger.debug(\"API Request Denied: Offsite Request Missing Key\");\n      ((HttpServletResponse)response).sendRedirect(\"http://www.nysenate.gov\");\n      return;\n    }\n    if (!uri.matches(\"(/GeoApi)?(/maps/.*?)\")) {\n      logger.debug(\"Application Request Denied. Offsite Request.\");\n      ((HttpServletResponse)response).sendRedirect(\"http://www.nysenate.gov\");\n      return;\n    }\n  }\n  chain.doFilter(request,response);\n}\n",
      "formalParam": [
        "ServletRequest",
        "ServletResponse",
        "FilterChain"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "$NOT$java.lang.String.matches(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/GeoApi/src/main/java/gov/nysenate/sage/servlets/SenateFilter.java",
      "classTypes": [
        "Logger",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Object"
      ],
      "apicalls": [
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "$NOT$java.lang.String.matches(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])",
            "$NOT$java.lang.String.matches(java.lang.String)",
            "java.lang.String.matches(java.lang.String)",
            "$NOT$java.lang.String.matches(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "matches",
        "format",
        "string",
        "object",
        "locale"
      ]
    },
    {
      "method": "test_JarInputStream_Modified_Class_getNextEntry@204",
      "body": "public void test_JarInputStream_Modified_Class_getNextEntry() throws IOException {\n  String modJarName=Support_Resources.getURL(\"Modified_Class.jar\");\n  InputStream is=new URL(modJarName).openConnection().getInputStream();\n  JarInputStream jin=new JarInputStream(is,true);\n  ZipEntry zipEntry=null;\n  int count=0;\n  while (count == 0 || zipEntry != null) {\n    count++;\n    try {\n      zipEntry=jin.getNextEntry();\n      if (count == indexofTESTCLASS + 1) {\n        fail(\"Should throw Security Exception\");\n      }\n    }\n catch (    SecurityException e) {\n      if (count != indexofTESTCLASS + 1) {\n        throw e;\n      }\n    }\n  }\n  assertEquals(totalEntries + 2,count);\n  jin.close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URL.openConnection()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.URLConnection"
          },
          {
            "_call": "java.net.URLConnection.getInputStream()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.lang.Throwable.toString()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.util.zip.ZipEntry.toString()",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openConnection()",
              "java.net.URLConnection.getInputStream()",
              "java.io.FilterInputStream.read(byte[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/android_libcore/luni/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarInputStreamTest.java",
      "classTypes": [
        "int",
        "String",
        "int",
        "String",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "getInputStream",
        "openConnection"
      ],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.lang.String)",
            "java.net.URL.openConnection()",
            "java.net.URLConnection.getInputStream()"
          ]
        }
      ],
      "keywords": [
        "input",
        "net"
      ]
    },
    {
      "method": "convert@111",
      "body": "public String convert(TreatmentAdvice treatmentAdvice){\n  return new StringBuilder().append(treatmentAdvice.getPatientId()).append(\" \").append(treatmentAdvice.getRegimenId()).append(\" \").append(treatmentAdvice.getDrugCompositionId()).toString();\n}\n",
      "formalParam": [
        "TreatmentAdvice"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/TAMA-Web/tama.web/src/main/java/org/motechproject/tama/web/ApplicationConversionServiceFactoryBean.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Brand"
        ],
        [
          "Company"
        ],
        [
          "City"
        ],
        [
          "IVRLanguage"
        ],
        [
          "Gender"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "main@34",
      "body": "public static void main(String[] args) throws Exception {\n  ByteArrayOutputStream bos=new ByteArrayOutputStream();\n  Deflater def=new Deflater();\n  ByteArrayInputStream bis=new ByteArrayInputStream(new byte[10]);\n  Inflater inf=new Inflater();\n  InflaterInputStream infOS;\n  DeflaterOutputStream defOS;\n  try {\n    defOS=new DeflaterOutputStream(bos,null);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  NullPointerException e) {\n  }\n  try {\n    defOS=new DeflaterOutputStream(null,def);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  NullPointerException e) {\n  }\n  try {\n    defOS=new DeflaterOutputStream(bos,def,-1);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n  try {\n    infOS=new InflaterInputStream(bis,null);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  NullPointerException e) {\n  }\n  try {\n    infOS=new InflaterInputStream(null,inf);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  NullPointerException e) {\n  }\n  try {\n    infOS=new InflaterInputStream(bis,inf,-1);\n    throw new Exception(\"didn't catch illegal argument\");\n  }\n catch (  IllegalArgumentException e) {\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/util/zip/StreamConstructor.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "ByteArrayInputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])"
          ]
        }
      ],
      "keywords": [
        "stream",
        "output",
        "array",
        "byte"
      ]
    },
    {
      "method": "importBuiltIns@174",
      "body": "public void importBuiltIns(Problems problems) throws IOException {\n  for (  String resource : BUILT_INS) {\n    FileLookup factory=FileLookupFactory.newInstance();\n    InputStream stream=factory.lookupFile(resource,Thread.currentThread().getContextClassLoader());\n    if (stream == null) {\n      stream=factory.lookupFile(resource,getClass().getClassLoader());\n    }\n    importFrom(stream,problems,resource);\n  }\n}\n",
      "formalParam": [
        "Problems"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getContextClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Class.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          }
        ]
      },
      "sorrreturntype": [
        "List<NodeTypeDefinition>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/modeshape/modeshape-jcr/src/main/java/org/modeshape/jcr/CndImporter.java",
      "classTypes": [
        "List<NodeTypeDefinition>",
        "String",
        "LocalNamespaceRegistry"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "ClassLoader",
        "Thread"
      ],
      "apicalls": [
        "getContextClassLoader",
        "getClassLoader"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getContextClassLoader()",
            "java.lang.Class.getClassLoader()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang"
      ]
    },
    {
      "method": "removePropertyChangeListener@200",
      "body": "public void removePropertyChangeListener(IPropertyChangeListener listener){\n  if (fPropertyListeners.containsKey(listener)) {\n    fPropertyListeners.remove(listener);\n  }\n}\n",
      "formalParam": [
        "IPropertyChangeListener"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Hashtable.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Hashtable.remove(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Hashtable.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Hashtable.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.toString(int)",
              "java.util.Hashtable.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/eclipse.platform.debug/org.eclipse.debug.ui/ui/org/eclipse/debug/internal/ui/views/memory/MemoryViewSynchronizationService.java",
      "classTypes": [
        "int",
        "IMemoryRendering",
        "IPropertyChangeListener",
        "IMemoryRendering",
        "Hashtable"
      ],
      "sorrformalparam": [
        [],
        [
          "PropertyChangeEvent"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)",
            "java.util.Hashtable.remove(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Hashtable.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key"
      ]
    },
    {
      "method": "setNetworkTrafficGenericSrcHost@1941",
      "body": "public void setNetworkTrafficGenericSrcHost(String networkTrafficGenericSrcHost){\n  addPair(NETWORK_TRAFFIC_GENERIC_SRC_HOST,networkTrafficGenericSrcHost);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-integration-extensions/spring-integration-splunk/src/main/java/org/springframework/integration/splunk/entity/SplunkData.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Character",
        "String",
        "StringBuffer"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "character",
        "buffer",
        "string",
        "append",
        "lang"
      ]
    },
    {
      "method": "reset@155",
      "body": "/** \n * Resets the stream to its beginning so it can be read again.\n * @exception IOException if there is an I/O error\n */\npublic void reset() throws IOException {\n  if (file == null) {\n    ((ByteArrayInputStream)is).reset();\n  }\n else {\n    if (fos != null) {\n      while (skip(4096) > 0)       ;\n      fos.close();\n      fos=null;\n      if (length == -1) {\n        length=totalBytesRead;\n      }\n    }\n    is.close();\n    is=new FileInputStream(file);\n  }\n  totalBytesRead=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "node": "DLoop",
                "_body": [],
                "_cond": [
                  {
                    "_call": "java.io.InputStream.skip(long)",
                    "_throws": [
                      "java.io.IOException"
                    ],
                    "node": "DAPICall",
                    "_returns": "long"
                  }
                ]
              },
              {
                "_call": "java.io.FileOutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.ByteArrayInputStream.reset()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStream.read()",
              "java.io.FileOutputStream.write(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.createTempFile(java.lang.String,java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/droolsjbpm-contributed-experiments/machinelearning/5.0/drools-eclipse/org.eclipse.webdav/src/client/org/eclipse/webdav/http/client/RequestInputStream.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [],
        [
          "InputStream",
          "long"
        ]
      ],
      "types": [
        "IOException",
        "FileOutputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.reset()"
          ]
        },
        {
          "calls": [
            "java.io.InputStream.skip(long)",
            "java.io.InputStream.skip(long)",
            "java.io.FileOutputStream.close()",
            "java.io.InputStream.close()",
            "java.io.FileInputStream.FileInputStream(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "close",
        "long"
      ]
    },
    {
      "method": "getSystemIcon@205",
      "body": "/** \n * Icon for a file, directory, or folder as it would be displayed in a system file browser. Example from Windows: the \"M:\\\" directory displays a CD-ROM icon. The default implementation gets information from the ShellFolder class.\n * @param f a <code>File</code> object\n * @return an icon as it would be displayed by a native file chooser\n * @see JFileChooser#getIcon\n * @since 1.4\n */\npublic Icon getSystemIcon(File f){\n  if (f != null) {\n    ShellFolder sf=getShellFolder(f);\n    Image img=sf.getIcon(false);\n    if (img != null) {\n      return new ImageIcon(img,sf.getFolderType());\n    }\n else {\n      return UIManager.getIcon(f.isDirectory() ? \"FileView.directoryIcon\" : \"FileView.fileIcon\");\n    }\n  }\n else {\n    return null;\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.isDirectory()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "javax.swing.UIManager.getIcon(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.swing.Icon"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.swing.ImageIcon.ImageIcon(java.awt.Image,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "FileSystemView",
        "File[]",
        "Boolean",
        "boolean",
        "boolean",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.getProperty(java.lang.String)",
              "java.io.File.File(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.UIManager.getDefaults()",
              "javax.swing.UIManager.addPropertyChangeListener(java.beans.PropertyChangeListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()"
            ]
          },
          {
            "calls": [
              "java.util.Vector.Vector()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.isInterrupted()",
              "$NOT$java.io.File.isHidden()",
              "java.util.Vector.addElement(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.isDirectory()",
              "java.lang.Boolean.valueOf(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getAbsolutePath()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getParent()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "Icon",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/javax/swing/filechooser/FileSystemView.java",
      "classTypes": [
        "String",
        "boolean",
        "String",
        "String",
        "FileSystemView",
        "FileSystemView",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "File",
          "boolean"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ],
        [
          "File"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "javax.swing.ImageIcon.ImageIcon(java.awt.Image,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.PrintStream.println(java.lang.String)",
            "java.lang.Throwable.printStackTrace()",
            "java.io.File.isDirectory()",
            "javax.swing.UIManager.getIcon(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "trace",
        "image",
        "boolean",
        "swing",
        "string",
        "stack"
      ]
    },
    {
      "method": "getASet@7",
      "body": "public Object getASet(boolean b){\n  if (b)   return new HashSet();\n else   return new TreeSet();\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.TreeSet.TreeSet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.HashSet.HashSet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Float.Float(double)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.Integer(int)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/fb-contrib/samples/URV_Sample.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "boolean"
        ]
      ],
      "types": [
        "HashSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet.TreeSet()"
          ]
        },
        {
          "calls": [
            "java.util.HashSet.HashSet()"
          ]
        }
      ],
      "keywords": [
        "hash"
      ]
    },
    {
      "method": "createImplModelFromExistingWsdl@111",
      "body": "/** \n * Creates the impl model from existing wsdl.\n * @param paramModel the param model\n * @param interfaceProject the interface project\n * @param monitor the monitor\n * @return the sOA impl project\n * @throws Exception the exception\n */\npublic static SOAImplProject createImplModelFromExistingWsdl(ServiceFromWsdlParamModel paramModel,SOAIntfProject interfaceProject,IProgressMonitor monitor) throws Exception {\n  SOAImplMetadata implMetadata=SOAImplMetadata.create(paramModel,interfaceProject.getMetadata());\n  SOAProjectEclipseMetadata eclipseMetadata=SOAProjectEclipseMetadata.create(implMetadata.getServiceImplProjectName(),paramModel.getWorkspaceRootDirectory());\n  SOAImplProject implProject=SOAImplProject.create(implMetadata,eclipseMetadata);\n  final ISOAOrganizationProvider orgProvider=GlobalRepositorySystem.instanceOf().getActiveRepositorySystem().getActiveOrganizationProvider();\n  Set<String> requiredLibraries=paramModel.getImplLibs();\n  requiredLibraries.addAll(orgProvider.getDefaultDependencies(SupportedProjectType.IMPL));\n  implProject.setRequiredLibraries(requiredLibraries);\n  Set<String> requiredProjects=paramModel.getImplProjects();\n  requiredProjects.add(interfaceProject.getEclipseMetadata().getProjectName());\n  implProject.setRequiredProjects(requiredProjects);\n  return implProject;\n}\n",
      "formalParam": [
        "ServiceFromWsdlParamModel",
        "SOAIntfProject",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.lang.String>.addAll(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "SOAImplProject"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Set<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "SOAImplProject",
      "file": "./java_projects/turmeric-eclipse/plugins/org.ebayopensource.turmeric.eclipse.services/src/org/ebayopensource/turmeric/eclipse/services/buildsystem/ImplementationCreator.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "ServiceFromWsdlParamModel",
          "SOAIntfProject",
          "IProgressMonitor"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "addAll",
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.lang.String>.addAll(java.util.Collection)",
            "java.util.Set<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "collection",
        "set",
        "util",
        "add",
        "string"
      ]
    },
    {
      "method": "print@350",
      "body": "public static void print(String messageIn){\n  dialog.displayMessage(messageIn,false);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.TextArea.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.TextArea.append(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Frame.Frame()",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.TextArea.append(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.ActionEvent.getActionCommand()",
              "java.awt.TextArea.append(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.awt.TextArea.append(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.interrupt()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/test/java/awt/Modal/WsDisabledStyle/CloseBlocker/CloseBlocker.java",
      "classTypes": [
        "TestDialog",
        "int",
        "int",
        "int",
        "Panel",
        "Button",
        "boolean",
        "Thread"
      ],
      "sorrformalparam": [
        [
          "String",
          "boolean"
        ],
        [],
        [
          "String[]"
        ],
        [],
        [],
        [
          "String"
        ],
        [
          "ActionEvent"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "TextArea"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.TextArea.append(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "io"
      ]
    },
    {
      "method": "stateChanged@1071",
      "body": "public void stateChanged(DownloadManagerState state,DownloadManagerStateEvent event){\n  final int type=event.getType();\n  if (type == DownloadManagerStateEvent.ET_ATTRIBUTE_WRITTEN || type == DownloadManagerStateEvent.ET_ATTRIBUTE_WILL_BE_READ) {\n    String name=(String)event.getData();\n    List property_listeners_ref=property_listeners;\n    final TorrentAttribute attr=convertAttribute(name);\n    if (attr != null) {\n      for (int i=0; i < property_listeners_ref.size(); i++) {\n        try {\n          ((DownloadPropertyListener)property_listeners_ref.get(i)).propertyChanged(this,new DownloadPropertyEvent(){\n            public int getType(){\n              return (type == DownloadManagerStateEvent.ET_ATTRIBUTE_WRITTEN ? DownloadPropertyEvent.PT_TORRENT_ATTRIBUTE_WRITTEN : DownloadPropertyEvent.PT_TORRENT_ATTRIBUTE_WILL_BE_READ);\n            }\n            public Object getData(){\n              return (attr);\n            }\n          }\n);\n        }\n catch (        Throwable e) {\n          Debug.printStackTrace(e);\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "DownloadManagerState",
        "DownloadManagerStateEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.List.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "boolean",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.io.PrintStream.println(char[])",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(java.util.Collection)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/OneSwarm/az_src/src/org/gudy/azureus2/pluginsimpl/local/download/DownloadImpl.java",
      "classTypes": [
        "int",
        "AEMonitor",
        "DownloadActivationEvent",
        "AEMonitor",
        "AEMonitor",
        "TorrentImpl"
      ],
      "sorrformalparam": [
        [
          "TRTrackerScraperResponse"
        ],
        [
          "DownloadPeerListener"
        ],
        [
          "Download",
          "DownloadPropertyEvent"
        ],
        [
          "DownloadTrackerListener",
          "boolean"
        ],
        [
          "DownloadManager",
          "int"
        ],
        [
          "int"
        ],
        [
          "TRTrackerAnnouncerResponse"
        ],
        [
          "DownloadPropertyListener"
        ],
        [
          "DownloadAttributeListener",
          "TorrentAttribute",
          "int"
        ],
        [
          "DownloadWillBeRemovedListener"
        ]
      ],
      "types": [
        "List",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List.size()",
            "java.util.List.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "list",
        "size"
      ]
    },
    {
      "method": "getChildren@34",
      "body": "public Vector getChildren(){\n  Vector v=new Vector();\n  v.addElement(expr);\n  for (Enumeration e=predicates.elements(); e.hasMoreElements(); )   v.addElement(e.nextElement());\n  return v;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.Vector()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.addElement(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration.nextElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Vector",
      "file": "./java_projects/FormDesigner/OpenRosa/src/org/openrosa/client/jr/xpath/parser/ast/ASTNodeFilterExpr.java",
      "classTypes": [
        "ASTNodeAbstractExpr",
        "Vector"
      ],
      "sorrformalparam": [],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "nextElement",
        "addElement"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.nextElement()",
            "java.util.Vector.addElement(java.lang.Object)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "object",
        "vector",
        "enumeration",
        "util"
      ]
    },
    {
      "method": "reset@480",
      "body": "public synchronized void reset(){\n  loadBitmapCounter=0;\n  for (  Tile tile : tilesWithBitmaps) {\n    tile.removeBitmap();\n  }\n  tilesWithBitmaps.clear();\n  tiles.clear();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.interrupt()",
              "java.lang.Thread.join()",
              "java.util.ArrayList<Tau_E>.clear()",
              "java.util.HashMap<Tau_K,Tau_V>.clear()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Pubtran-London/core/src/cz/fhejl/pubtran/OfflineMapSource.java",
      "classTypes": [
        "int",
        "int",
        "Bitmap",
        "TileCache",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.clear()",
            "java.util.HashMap<Tau_K,Tau_V>.clear()"
          ]
        }
      ],
      "keywords": [
        "list",
        "clear"
      ]
    },
    {
      "method": "setNetworkTrafficGenericTos@2001",
      "body": "public void setNetworkTrafficGenericTos(String networkTrafficGenericTos){\n  addPair(NETWORK_TRAFFIC_GENERIC_TOS,networkTrafficGenericTos);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              },
              {
                "_call": "java.lang.StringBuffer.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuffer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/spring-integration-extensions/spring-integration-splunk/src/main/java/org/springframework/integration/splunk/entity/SplunkData.java",
      "classTypes": [
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "append"
      ]
    },
    {
      "method": "addMessage@260",
      "body": "public void addMessage(Message message){\n  if (LOG.isDebugEnabled()) {\n    LOG.debug(\"addForum(message \" + message + \")\");\n  }\n  if (message == null) {\n    throw new IllegalArgumentException(\"message == null\");\n  }\n  if (messagesSet == null) {\n    messagesSet=new TreeSet(new MessageByCreatedDateDesc());\n  }\n  message.setTopic(this);\n  messagesSet.add(message);\n}\n",
      "formalParam": [
        "Message"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.TreeSet.TreeSet(java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.TreeSet.TreeSet(java.util.Comparator)",
              "java.util.Set.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.TreeSet.TreeSet(java.util.Comparator)",
              "java.util.Set.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet.HashSet()",
              "java.util.Set.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.TreeSet.TreeSet(java.util.Comparator)",
              "java.util.Set.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Fudan-Sakai/msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/TopicImpl.java",
      "classTypes": [
        "String",
        "Log"
      ],
      "sorrformalparam": [
        [
          "List"
        ],
        [
          "List"
        ],
        [
          "DBMembershipItem"
        ],
        [
          "Attachment"
        ]
      ],
      "types": [
        "TreeSet",
        "Comparator",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.TreeSet.TreeSet(java.util.Comparator)",
            "java.util.Set.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "add",
        "comparator",
        "tree"
      ]
    },
    {
      "method": "urlToPath@59",
      "body": "public static String urlToPath(String maybeUrl){\n  Matcher m=URL.matcher(maybeUrl);\n  return (m.matches() ? m.group(1) : maybeUrl);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.regex.Matcher"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.regex.Matcher.matches()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.regex.Matcher.group(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/MPS/core/make-runtime/solutions/jetbrains.mps.make.runtime/source_gen/jetbrains/mps/internal/make/runtime/util/DirUtil.java",
      "classTypes": [
        "String",
        "Pattern",
        "char"
      ],
      "sorrformalparam": [],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "group",
        "matcher",
        "matches"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()",
            "java.util.regex.Matcher.group(int)"
          ]
        },
        {
          "calls": [
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "util",
        "boolean",
        "sequence",
        "integer",
        "matches"
      ]
    },
    {
      "method": "swipe@874",
      "body": "/** \n * \u30da\u30fc\u30b8\u3092\u3081\u304f\u308b\u3088\u3046\u306a\u52d5\u4f5c\u3092\u3057\u305f\u3068\u304d\n * @param target \u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @param action \u30bf\u30fc\u30b2\u30c3\u30c8\u4e0a\u306e\u66f8\u304d\u8fbc\u307f\u53ef\u80fd\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\n * @param property \u53d7\u4fe1\u30a4\u30d9\u30f3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5b8c\u5168\u6307\u5b9a\u3055\u308c\u305f\u540d\u524d \n * @return \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @see MouseListener#mousePressed(java.awt.event.MouseEvent)\n * @see MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)\n */\npublic EventQuery swipe(Object target,String action,String property){\n  MouseMotionListener mouseDragged=EventHandler.create(MouseMotionListener.class,target,action,property,\"mouseDragged\");\n  MouseSwipeHandler swipeHandler=new MouseSwipeHandler();\n  for (  Component child : list) {\n    child.addMouseMotionListener(mouseDragged);\n    child.addMouseListener(swipeHandler);\n    child.addMouseMotionListener(swipeHandler);\n  }\n  return this;\n}\n",
      "formalParam": [
        "Object",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "T[]",
        "T",
        "None",
        "EventQuery",
        "void",
        "EventQuery"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.awt.Component>.iterator()",
              "java.util.Iterator<java.awt.Component>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.awt.Component>.HashSet<Component>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.awt.Component>.HashSet<Component>(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isVisible()",
              "java.awt.Component.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<java.awt.Component>.iterator()",
              "java.util.Iterator.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.awt.Component>.HashSet<Component>(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "EventQuery",
      "file": "./java_projects/DesktopKit/src/com/mac/tarchan/desktop/event/EventQuery.java",
      "classTypes": [
        "Log",
        "Collection<Component>",
        "EventQuery"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "Component"
        ],
        [
          "Component"
        ],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"
          ]
        }
      ],
      "keywords": [
        "motion",
        "mouse",
        "listener",
        "component"
      ]
    },
    {
      "method": "collectProperty@27",
      "body": "public void collectProperty(Set<? extends EquivalenceClass> eqClasses) throws Exception {\n  TimeDistribution distro;\n  HashMap<Integer,Double> bins;\n  HashMap<String,Double> features=new HashMap<String,Double>();\n  int numUnscored=0;\n  for (  EquivalenceClass eq : eqClasses) {\n    distro=(TimeDistribution)eq.getProperty(TimeDistribution.class.getName());\n    if (distro == null || !distro.isNormalized()) {\n      numUnscored++;\n    }\n else {\n      features.clear();\n      bins=distro.getBins();\n      for (      Integer window : bins.keySet()) {\n        features.put(window.toString(),bins.get(window));\n      }\n      eq.setProperty(new LSHTimeDistribution(eq,TIME_LSH.buildSignature(features)));\n      if (m_removeOrigProp) {\n        eq.removeProperty(TimeDistribution.class.getName());\n      }\n    }\n  }\n  if (numUnscored > 0) {\n    LOG.error(\"Could not compute LSH signature for \" + numUnscored + \" equvalence classes (either missing or unnormalized distribution).\");\n  }\n}\n",
      "formalParam": [
        "Set<? extends EquivalenceClass>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Double>.HashMap<String,Double>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Double>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.Integer,java.lang.Double>.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.lang.Integer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.HashMap<java.lang.Integer,java.lang.Double>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Double"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.Double>.put(java.lang.String,java.lang.Double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Double"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/babel/src/babel/content/eqclasses/properties/lshtime/LSHTimeDistributionCollector.java",
      "classTypes": [
        "LSH"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Object",
        "Integer",
        "Class"
      ],
      "apicalls": [
        "get",
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.Double>.HashMap<String,Double>()",
            "java.util.HashMap<java.lang.String,java.lang.Double>.clear()",
            "java.util.HashMap<java.lang.Integer,java.lang.Double>.keySet()",
            "java.lang.Integer.toString()",
            "java.util.HashMap<java.lang.Integer,java.lang.Double>.get(java.lang.Object)",
            "java.util.HashMap<java.lang.String,java.lang.Double>.put(java.lang.String,java.lang.Double)",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "key"
      ]
    },
    {
      "method": "testFloat@81",
      "body": "public void testFloat() throws Exception {\n  Method method=getClass().getMethod(\"m6\",List.class,Set.class,SortedSet.class);\n  Type[] types=method.getGenericParameterTypes();\n  assertEquals(Float.class,ParameterHelper.getGenericType(types[0]));\n  assertEquals(Float.class,ParameterHelper.getGenericType(types[1]));\n  assertEquals(Float.class,ParameterHelper.getGenericType(types[2]));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Method"
          },
          {
            "_call": "java.lang.reflect.Method.getGenericParameterTypes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Type[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
              "java.lang.reflect.Method.getGenericParameterTypes()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ws/exo.ws.rest.core/src/test/java/org/exoplatform/services/rest/impl/method/ParameterHelperTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getMethod(java.lang.String,java.lang.Class[])",
            "java.lang.reflect.Method.getGenericParameterTypes()"
          ]
        }
      ],
      "keywords": [
        "reflect"
      ]
    },
    {
      "method": "handle@27",
      "body": "@Override public String handle(HandleParameters parameters) throws DataTransferException {\n  Gson gson=new Gson();\n  SendFile sendFile=gson.fromJson(parameters.request,SendFile.class);\n  SendFileConfirm confirm;\n  SendFileResult result=null;\n  String fileName=null;\n  if (parameters.sessionHandler.getCallbacks() != null) {\n    ConfirmResult confirmReq=parameters.sessionHandler.getCallbacks().onIncomingFile(sendFile);\n    if (confirmReq.accept) {\n      fileName=confirmReq.fileName;\n      confirm=new SendFileConfirm(true);\n      parameters.outToHost.write(gson.toJson(confirm) + \"\\n\");\n      parameters.outToHost.flush();\n    }\n else {\n      confirm=new SendFileConfirm(false);\n      parameters.outToHost.write(gson.toJson(confirm) + \"\\n\");\n      parameters.outToHost.flush();\n      result=new SendFileResult(\"rejected\");\n      return gson.toJson(result);\n    }\n  }\n else {\n    confirm=new SendFileConfirm(false);\n    parameters.outToHost.write(gson.toJson(confirm) + \"\\n\");\n    parameters.outToHost.flush();\n    result=new SendFileResult(\"rejected\");\n    return gson.toJson(result);\n  }\n  try {\n    FileOutputStream fos=new FileOutputStream(fileName);\n    BufferedOutputStream bos=new BufferedOutputStream(fos);\n    long fileSizeRemaining=sendFile.fileSize;\n    Cipher c=Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n    byte[] iv_bytes={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};\n    IvParameterSpec ivspec=new IvParameterSpec(iv_bytes);\n    c.init(Cipher.DECRYPT_MODE,parameters.sessionHandler.getKey(parameters.handle),ivspec);\n    CipherInputStream cis=new CipherInputStream(parameters.inputStream,c);\n    while (fileSizeRemaining > 0) {\n      byte[] byteArray=new byte[buffer_size];\n      int readSize=fileSizeRemaining > buffer_size ? buffer_size : (int)fileSizeRemaining;\n      int bytes_read=cis.read(byteArray,0,readSize);\n      fileSizeRemaining-=bytes_read;\n      bos.write(byteArray,0,bytes_read);\n      bos.flush();\n    }\n    bos.close();\n    if (parameters.sessionHandler.getCallbacks() != null) {\n      parameters.sessionHandler.getCallbacks().onFileReceived(\"copy_\" + sendFile.filename);\n    }\n    throw new DataTransferException();\n  }\n catch (  FileNotFoundException e) {\n    e.printStackTrace();\n  }\ncatch (  IOException e) {\n    result=new SendFileResult(\"failure\");\n    e.printStackTrace();\n  }\ncatch (  InvalidKeyException e) {\n    e.printStackTrace();\n  }\ncatch (  InvalidAlgorithmParameterException e) {\n    e.printStackTrace();\n  }\ncatch (  NoSuchAlgorithmException e) {\n    e.printStackTrace();\n  }\ncatch (  NoSuchPaddingException e) {\n    e.printStackTrace();\n  }\n  return null;\n}\n",
      "formalParam": [
        "HandleParameters"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "javax.crypto.Cipher.getInstance(java.lang.String)",
                "_throws": [
                  "java.security.NoSuchAlgorithmException",
                  "javax.crypto.NoSuchPaddingException"
                ],
                "node": "DAPICall",
                "_returns": "javax.crypto.Cipher"
              },
              {
                "_call": "javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",
                "_throws": [
                  "java.security.InvalidKeyException",
                  "java.security.InvalidAlgorithmParameterException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.BufferedOutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.BufferedOutputStream.flush()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FilterOutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "String",
      "file": "./java_projects/NIS_JAVA/src/com/nis/client/handlers/SendFileHandler.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "InvalidAlgorithmParameterException",
        "Key"
      ],
      "apicalls": [
        "getInstance",
        "init",
        "write",
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "java.io.BufferedOutputStream.write(byte[],int,int)",
            "java.io.BufferedOutputStream.flush()",
            "java.io.FilterOutputStream.close()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
            "java.io.BufferedOutputStream.BufferedOutputStream(java.io.OutputStream)",
            "javax.crypto.Cipher.getInstance(java.lang.String)",
            "javax.crypto.Cipher.init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)",
            "java.io.BufferedOutputStream.write(byte[],int,int)",
            "java.io.BufferedOutputStream.flush()",
            "java.io.FilterOutputStream.close()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "trace",
        "throwable",
        "instance"
      ]
    },
    {
      "method": "getSerializedSize@17673",
      "body": "public int getSerializedSize(){\n  int size=memoizedSerializedSize;\n  if (size != -1)   return size;\n  size=0;\n{\n    int dataSize=0;\n    for (int i=0; i < handleId_.size(); i++) {\n      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(handleId_.get(i));\n    }\n    size+=dataSize;\n    size+=1 * getHandleIdList().size();\n  }\n  size+=getUnknownFields().getSerializedSize();\n  memoizedSerializedSize=size;\n  return size;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<java.lang.Integer>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Integer>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.util.List<java.lang.Integer>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "int",
        "int",
        "Builder",
        "Builder",
        "Builder",
        "Builder",
        "Builder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)",
              "java.util.List<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.get(int)",
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.get(int)",
              "java.util.List<java.lang.Integer>.size()",
              "java.util.List<java.lang.Integer>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.set(int,java.lang.Integer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()",
              "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>(java.util.Collection)",
              "java.util.List<java.lang.Integer>.addAll(java.util.Collection)"
            ]
          },
          {
            "calls": [
              "java.util.List<java.lang.Integer>.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/drools/drools-core/src/main/java/org/drools/marshalling/impl/ProtobufMessages.java",
      "classTypes": [
        "com.google.protobuf.ByteString",
        "int"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "int",
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "org.drools.marshalling.impl.ProtobufMessages.EqualityKey"
        ]
      ],
      "types": [],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Integer>.size()",
            "java.util.List<java.lang.Integer>.get(int)",
            "java.util.List<java.lang.Integer>.size()",
            "java.util.List<java.lang.Integer>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "util",
        "get"
      ]
    },
    {
      "method": "testBug12752@1227",
      "body": "/** \n * Tests fix for BUG#12752 - Cp1251 incorrectly mapped to win1251 for servers newer than 4.0.x.\n * @throws Exception if the test fails.\n */\npublic void testBug12752() throws Exception {\n  Properties props=new Properties();\n  props.setProperty(\"characterEncoding\",\"Cp1251\");\n  getConnectionWithProps(props).close();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.Properties()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.Properties()",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.sql.Connection.close()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ChenSun/CS5430/jars/mysql-connector-java-5.1.18/src/testsuite/regression/ConnectionRegressionTest.java",
      "classTypes": [
        "int",
        "int",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.Properties()",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "property",
        "object"
      ]
    },
    {
      "method": "gotoMarker@1586",
      "body": "/** \n * <!-- begin-user-doc --> <!-- end-user-doc -->\n * @generated\n */\npublic void gotoMarker(IMarker marker){\n  try {\n    if (marker.getType().equals(EValidator.MARKER)) {\n      String uriAttribute=marker.getAttribute(EValidator.URI_ATTRIBUTE,null);\n      if (uriAttribute != null) {\n        URI uri=URI.createURI(uriAttribute);\n        EObject eObject=editingDomain.getResourceSet().getEObject(uri,true);\n        if (eObject != null) {\n          setSelectionToViewer(Collections.singleton(editingDomain.getWrapper(eObject)));\n        }\n      }\n    }\n  }\n catch (  CoreException exception) {\n    StateChartEditorPlugin.INSTANCE.log(exception);\n  }\n}\n",
      "formalParam": [
        "IMarker"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.singleton(Tau_T)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "Object[]",
        "void",
        "Object[]",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.Set.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.Object,java.lang.Object>.HashMap<Object,Object>()",
              "java.util.Map<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.Set.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.ArrayList<java.lang.Object>.ArrayList<Object>()",
              "java.util.ArrayList<java.lang.Object>.add(java.lang.Object)",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.ArrayList<java.lang.Object>.add(java.lang.Object)",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ASEME/StateChartPlugIn.editor/src/statechart/presentation/StatechartEditor.java",
      "classTypes": [
        "Collection<Resource>",
        "Map<Resource,Diagnostic>",
        "IStatusLineManager",
        "TreeViewer",
        "Collection<Resource>",
        "ISelectionChangedListener",
        "Collection<Resource>"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "IProgressMonitor"
        ],
        [
          "Object"
        ],
        [
          "ISelection"
        ]
      ],
      "types": [],
      "apicalls": [
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.singleton(Tau_T)",
            "$NOT$java.util.Collection<Tau_E>.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "empty",
        "singleton",
        "util",
        "collections"
      ]
    },
    {
      "method": "loadPlayer@72",
      "body": "@Override public boolean loadPlayer(Player player){\n  try {\n    File f=new File(\"data/savedGames/\" + NameUtils.formatNameForProtocol(player.getName()) + \".dat.gz\");\n    InputStream is=new GZIPInputStream(new FileInputStream(f));\n    IoBuffer buf=IoBuffer.allocate(1024);\n    buf.setAutoExpand(true);\n    while (true) {\n      byte[] temp=new byte[1024];\n      int read=is.read(temp,0,temp.length);\n      if (read == -1) {\n        break;\n      }\n else {\n        buf.put(temp,0,read);\n      }\n    }\n    buf.flip();\n    player.deserialize(buf);\n    return true;\n  }\n catch (  IOException ex) {\n    return false;\n  }\n}\n",
      "formalParam": [
        "Player"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.read(byte[],int,int)",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
              "java.io.OutputStream.write(byte[])",
              "java.io.OutputStream.flush()",
              "java.io.OutputStream.close()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/Toonime/src/org/hyperion/rs2/GenericWorldLoader.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Player"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.io.InputStream.read(byte[],int,int)"
          ]
        }
      ],
      "keywords": [
        "read",
        "found",
        "file",
        "input",
        "io"
      ]
    },
    {
      "method": "transferTo@409",
      "body": "public long transferTo(long position,long count,WritableByteChannel target) throws IOException {\n  ensureOpen();\n  if (!target.isOpen())   throw new ClosedChannelException();\n  if (!readable)   throw new NonReadableChannelException();\n  if (target instanceof FileChannelImpl && !((FileChannelImpl)target).writable)   throw new NonWritableChannelException();\n  if ((position < 0) || (count < 0))   throw new IllegalArgumentException();\n  long sz=size();\n  if (position > sz)   return 0;\n  int icount=(int)Math.min(count,Integer.MAX_VALUE);\n  if ((sz - position) < icount)   icount=(int)(sz - position);\n  return transferToArbitraryChannel(position,icount,target);\n}\n",
      "formalParam": [
        "long",
        "long",
        "WritableByteChannel"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.nio.ByteBuffer.allocate(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.lang.Math.min(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.nio.Buffer.limit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          },
          {
            "_call": "java.nio.Buffer.flip()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          },
          {
            "_call": "java.nio.Buffer.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.Buffer"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "FileLock",
        "long",
        "void",
        "void",
        "FileLock",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List<java.nio.channels.FileLock>.iterator()",
              "java.util.Iterator<java.nio.channels.FileLock>.hasNext()",
              "java.util.Iterator<java.nio.channels.FileLock>.next()",
              "java.util.Iterator<java.nio.channels.FileLock>.remove()",
              "java.util.Iterator<java.nio.channels.FileLock>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.Buffer.limit(int)",
              "java.nio.Buffer.flip()",
              "java.nio.Buffer.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.size()",
              "java.util.ArrayList<Tau_E>.get(int)",
              "java.lang.ref.Reference<java.nio.channels.FileLock>.get()",
              "java.lang.ref.Reference<java.nio.channels.FileLock>.clear()",
              "java.util.ArrayList<Tau_E>.remove(int)",
              "java.util.ArrayList<Tau_E>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.ArrayList(int)",
              "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.putIfAbsent(Tau_K,Tau_V)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.util.concurrent.ConcurrentHashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedAction)",
              "java.lang.String.equals(java.lang.Object)",
              "java.nio.channels.spi.AbstractInterruptibleChannel.begin()",
              "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
              "java.nio.channels.spi.AbstractInterruptibleChannel.end(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.nio.channels.FileLock>.remove(java.lang.Object)",
              "java.util.List<java.nio.channels.FileLock>.add(java.nio.channels.FileLock)"
            ]
          }
        ]
      ],
      "returnType": "long",
      "file": "./java_projects/ikvm-monotouch/openjdk/sun/nio/ch/FileChannelImpl.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "ConcurrentHashMap<FileKey,ArrayList<FileLockReference>>",
        "FileChannelImpl"
      ],
      "sorrformalparam": [
        [
          "Releaser"
        ],
        [
          "long",
          "long",
          "boolean"
        ],
        [
          "ReadableByteChannel",
          "long",
          "long"
        ],
        [
          "Releaser"
        ],
        [
          "FileLock"
        ],
        [
          "long",
          "long",
          "boolean"
        ],
        [
          "FileLock",
          "FileLock"
        ]
      ],
      "types": [
        "Math"
      ],
      "apicalls": [
        "flip"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.nio.channels.spi.AbstractInterruptibleChannel.isOpen()",
            "java.lang.Math.min(int,int)",
            "java.nio.ByteBuffer.allocate(int)",
            "java.lang.Math.min(int,int)",
            "java.nio.Buffer.limit(int)",
            "java.nio.Buffer.flip()",
            "java.nio.Buffer.clear()"
          ]
        }
      ],
      "keywords": [
        "math",
        "integer",
        "nio",
        "open",
        "interruptible",
        "allocate"
      ]
    },
    {
      "method": "createRandomPerson@26",
      "body": "public static Person createRandomPerson(String id){\n  Person person=new Person();\n  person.setName(fnames[(int)(fnames.length * Math.random())]);\n  person.setSurname(lnames[(int)(lnames.length * Math.random())]);\n  person.setTime(times[(int)(times.length * Math.random())]);\n  person.setAvatarName(avatarNames[(int)(avatarNames.length * Math.random())]);\n  person.setId(id);\n  List<String> personsCategories=new LinkedList<String>();\n  for (int i=0; i < 4; i++) {\n    personsCategories.add(categories[(int)(categories.length * Math.random())]);\n  }\n  person.setCategories(personsCategories);\n  return person;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Person",
      "file": "./java_projects/wavilon-settings-portlet/liferay-plugins-sdk-6.0.6-20110225/portlets/wavilon-activity-portlet/docroot/WEB-INF/src/com/aimprosoft/wavilon/util/PersonUtil.java",
      "classTypes": [
        "String[]",
        "String[]",
        "String[]",
        "String[]",
        "String[]"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedList<java.lang.String>.LinkedList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "handleRefresh@63",
      "body": "public Boolean handleRefresh(String refreshType,String objectId) throws ClassNotFoundException {\n  Object id=null;\n  if (refreshType.equals(\"ApplicationInstallation\"))   id=objectId;\n else   id=Long.valueOf(objectId);\n  @SuppressWarnings(\"unchecked\") Class<ModelEntity> clazz=(Class<ModelEntity>)Class.forName(\"com.openmeap.model.dto.\" + refreshType);\n  ModelEntity entity=(ModelEntity)modelManager.getModelService().findByPrimaryKey(clazz,id);\n  if (entity != null) {\n    modelManager.refresh(entity,null);\n  }\n  return true;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Long.valueOf(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.Long"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Long.valueOf(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Boolean",
      "file": "./java_projects/OpenMEAP/server-side/openmeap-shared-serverside/src/com/openmeap/model/event/handler/ModelServiceRefreshHandler.java",
      "classTypes": [
        "ModelManager",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "E"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "equals",
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.Long.valueOf(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "equals",
        "string",
        "value",
        "format",
        "long"
      ]
    },
    {
      "method": "DoTouch@157",
      "body": "/** \n * G\ufffdre les \ufffdv\ufffdnements touch pour ajuster la grille.\n * @param e L'\ufffdv\ufffdnement motion \ufffd tester.\n */\npublic void DoTouch(MotionEvent e){\n  if (drawCache.size() == 0)   return;\n  for (int i=0; i < drawCache.size(); i++) {\n    if (FollowupLine.DistanceBetweenTwoPoints(drawCache.get(i).pos,new PointF(e.getX(),e.getY())) <= kTouchRadius) {\n      drawCache.get(i).element.isHit=true;\n    }\n  }\n}\n",
      "formalParam": [
        "MotionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.clear()",
              "java.util.Random.nextInt(int)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/UchihaIncident/Src/MiniGames/FastTatamiSwipe/src/com/ninja/exMenu/PlayGrid.java",
      "classTypes": [
        "float",
        "int",
        "GridElement",
        "ArrayList<DrawElementF>",
        "int",
        "ArrayList<GridElement>",
        "int",
        "float",
        "int"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "size"
      ]
    },
    {
      "method": "setMenus@39",
      "body": "/** \n * The menus to manage. Autowired so the aggregation happens automatically by default.\n * @param menus the menus to set\n */\n@Autowired public void setMenus(Collection<Menu> menus){\n  this.menus=new ArrayList<Menu>(menus);\n  Collections.sort(this.menus,new MenuComparator());\n}\n",
      "formalParam": [
        "Collection<Menu>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/spring-batch-admin/spring-batch-admin-resources/src/main/java/org/springframework/batch/admin/web/resources/MenuManager.java",
      "classTypes": [
        "List<Menu>"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "comparator"
      ]
    },
    {
      "method": "testRemove@600",
      "body": "/** \n * remove removes next element, or throws NSEE if empty\n */\npublic void testRemove(){\n  ArrayBlockingQueue q=populatedQueue(SIZE);\n  for (int i=0; i < SIZE; ++i) {\n    assertEquals(i,((Integer)q.remove()).intValue());\n  }\n  try {\n    q.remove();\n    shouldThrow();\n  }\n catch (  NoSuchElementException success) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.AbstractCollection.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.Integer.Integer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.AbstractCollection.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.concurrent.ArrayBlockingQueue.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.Integer.intValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Thread.sleep(long)",
              "java.util.concurrent.ArrayBlockingQueue.take()",
              "java.lang.Thread.interrupt()",
              "java.lang.Thread.join()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/concurrent/src/test/java/ArrayBlockingQueueTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [],
      "apicalls": [
        "intValue"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.ArrayBlockingQueue.ArrayBlockingQueue(int)",
            "java.util.AbstractCollection.isEmpty()",
            "java.lang.Integer.Integer(int)",
            "java.util.concurrent.ArrayBlockingQueue.offer(java.lang.Object)",
            "java.util.AbstractCollection.isEmpty()",
            "java.util.concurrent.ArrayBlockingQueue.remainingCapacity()",
            "java.util.concurrent.ArrayBlockingQueue.size()",
            "java.lang.Integer.intValue()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "getIORTemplates@295",
      "body": "/** \n * Return the IORTemplateList for this IOR. Will throw exception if it is not possible to generate an IOR from the IORTemplateList that is equal to this IOR, which can only happen if not every TaggedProfile in the IOR has the same ObjectId.\n */\npublic synchronized IORTemplateList getIORTemplates(){\n  if (iortemps == null)   initializeIORTemplateList();\n  return iortemps;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.Object>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator<java.lang.Object>.hasNext()",
              "java.util.Iterator<java.lang.Object>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "IORTemplateList",
      "file": "./java_projects/jboss-rmi-api_spec/src/main/java/org/jboss/com/sun/corba/se/impl/ior/IORImpl.java",
      "classTypes": [
        "ORB",
        "IORTemplateList",
        "String",
        "boolean",
        "IORSystemException",
        "int"
      ],
      "sorrformalparam": [
        [
          "ORB",
          "String",
          "IORTemplateList",
          "ObjectId"
        ]
      ],
      "types": [
        "Object",
        "Iterator",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.Iterator<java.lang.Object>.hasNext()",
            "java.util.Iterator<java.lang.Object>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "boolean"
      ]
    },
    {
      "method": "strDuzelt@265",
      "body": "public static String strDuzelt(String not){\n  String gonder=\"\";\n  int j=0, k=50;\n  int boy=not.length();\n  if (boy > 50) {\n    while (boy % 50 > 0) {\n      gonder+=not.substring(j,k) + \"\\n\";\n      boy-=50;\n      j=k;\n      k+=(boy < 50) ? boy : 50;\n    }\n  }\n else {\n    gonder=not;\n  }\n  return gonder;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.substring(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JFrame.JFrame()",
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "java.awt.Window.pack()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)",
              "java.lang.Thread.stop()",
              "javax.swing.AbstractButton.setText(java.lang.String)",
              "javax.swing.AbstractButton.setText(java.lang.String)",
              "javax.swing.AbstractButton.setText(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)",
              "java.lang.Thread.stop()",
              "javax.swing.AbstractButton.setText(java.lang.String)",
              "javax.swing.AbstractButton.setText(java.lang.String)",
              "javax.swing.AbstractButton.setText(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.UIManager.getSystemLookAndFeelClassName()",
              "javax.swing.UIManager.setLookAndFeel(java.lang.String)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "javax.swing.UIManager.getSystemLookAndFeelClassName()",
              "javax.swing.UIManager.setLookAndFeel(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.substring(int,int)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/pro-lang/java/Ajanda/src/Ajanda.java",
      "classTypes": [
        "Dinleyici",
        "JTextArea",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String[]"
        ],
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "substring"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)"
          ]
        }
      ],
      "keywords": [
        "substring",
        "lang"
      ]
    },
    {
      "method": "archive@73",
      "body": "@Context(types={ContextType.SUPER_ADMIN}) public void archive(){\n  Result result=new Result();\n  DateMidnight today=new DateMidnight();\n  for (  Request r : requestDAO.listByStates(states,true)) {\n    try {\n      Request request=requestDAO.findById(r.getId(),true);\n      int filingDelay=requestServiceRegistry.getRequestService(request).getFilingDelay();\n      DateMidnight lastModificationDay=new DateMidnight(request.getLastModificationDate());\n      if (Months.monthsBetween(lastModificationDay,today).getMonths() >= filingDelay) {\n        String motive=translationService.translate(\"requestArchive.motive\",new Object[]{filingDelay});\n        if (RequestState.VALIDATED.equals(request.getState()))         requestWorkflowService.updateRequestState(request.getId(),RequestState.CLOSED,motive);\n        requestWorkflowService.updateRequestState(request.getId(),RequestState.ARCHIVED,motive);\n        byte archive[]=requestPdfService.generateArchive(request.getId());\n        requestDAO.empty(request);\n        Set<Critere> criteriaSet=new HashSet<Critere>(1);\n        criteriaSet.add(new Critere(RequestExternalAction.SEARCH_BY_KEY,request.getId().toString(),Critere.EQUALS));\n        for (        RequestExternalAction trace : requestExternalActionService.getTraces(criteriaSet,null,null,0,0)) {\n          requestExternalActionDAO.delete(trace);\n        }\n        String filename=translationService.translate(\"requestArchive.filename\",new Object[]{translationService.translateRequestTypeLabel(request.getRequestType().getLabel()),new DateTime(request.getCreationDate()).toString(ISODateTimeFormat.date()),request.getId().toString()});\n        localAuthorityRegistry.saveLocalAuthorityResource(Type.REQUEST_ARCHIVE,filename,archive);\n        try {\n          JpaUtil.closeAndReOpen(false);\n          result.numberOfSuccesses++;\n        }\n catch (        Throwable t) {\n          localAuthorityRegistry.getLocalAuthorityResourceFile(Type.REQUEST_ARCHIVE,filename,false).delete();\n          throw t;\n        }\n      }\n    }\n catch (    Throwable t) {\n      t.printStackTrace();\n      result.failures.put(r,t);\n      JpaUtil.closeAndReOpen(true);\n    }\n  }\n  RequestAdminAction action=new RequestAdminAction(RequestAdminAction.Type.REQUESTS_ARCHIVED);\n  action.getComplementaryData().put(RequestAdminAction.Data.ARCHIVING_RESULT,result);\n  if (result.numberOfSuccesses > 0 || result.failures.size() > 0) {\n    genericDAO.saveOrUpdate(action);\n  }\n  RequestAdminEvent event=new RequestAdminEvent(this,action);\n  applicationContext.publishEvent(event);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.HashSet<Tau_E>.HashSet(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.util.HashSet<Tau_E>.HashSet(int)"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/capdemat/Model/src/java/fr/cg95/cvq/service/request/job/RequestArchivingJob.java",
      "classTypes": [
        "IRequestServiceRegistry",
        "Map<Request,Throwable>",
        "IRequestExternalActionDAO",
        "IRequestDAO",
        "IGenericDAO",
        "ILocalAuthorityRegistry",
        "ITranslationService"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "HashSet",
        "Integer",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet(int)"
          ]
        },
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet(int)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "trace",
        "stack",
        "hash",
        "lang",
        "set",
        "util"
      ]
    },
    {
      "method": "FlipMenuItem@541",
      "body": "FlipMenuItem(){\n  super(LanguageBundle.getString(\"in_flip\"));\n  setMnemonic(LanguageBundle.getMnemonic(\"in_mn_flip\"));\n  setIcon(Utilities.FLIP_ICON);\n  addActionListener(new FlipActionListener());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.AbstractButton.setMnemonic(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.setIcon(javax.swing.Icon)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JSplitPane.isContinuousLayout()",
              "javax.swing.JSplitPane.getLeftComponent()",
              "javax.swing.JSplitPane.getRightComponent()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/pcgen-svn/code/src/java/pcgen/gui/panes/SplitPane.java",
      "classTypes": [
        "boolean",
        "boolean",
        "boolean",
        "long"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ]
      ],
      "types": [
        "Integer",
        "ActionListener"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.AbstractButton.setMnemonic(int)",
            "javax.swing.AbstractButton.setIcon(javax.swing.Icon)",
            "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)"
          ]
        }
      ],
      "keywords": [
        "action",
        "mnemonic"
      ]
    },
    {
      "method": "actionPerformed@50",
      "body": "/** \n * Handles button clicks for dialog.\n */\n@Override public void actionPerformed(ActionEvent e){\n  Object source=e.getSource();\n  try {\n    if (source == btOK || source == inputPanel.getTextComponent()) {\n      setVisibleForTools(!processInput());\n    }\n else     if (source == btApply) {\n      processInput();\n    }\n else     if (source == btCancel) {\n      setVisibleForTools(false);\n    }\n  }\n catch (  Exception ex) {\n    setVisibleForTools(false);\n  }\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "$NOT$java.lang.String.endsWith(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/geogebra/desktop/geogebra/gui/dialog/InputDialogAngleFixed.java",
      "classTypes": [
        "GeoPoint[]",
        "String",
        "Kernel",
        "GeoPoint",
        "GeoElement[]",
        "GeoSegment[]"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [
        "endsWith"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "java.lang.String.endsWith(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.EventObject.getSource()",
            "$NOT$java.lang.String.endsWith(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "util",
        "lang",
        "event",
        "source",
        "get",
        "string"
      ]
    },
    {
      "method": "attachSource@86",
      "body": "/** \n * @see IPackageFragmentRoot\n */\npublic void attachSource(IPath sourcePath,IPath rootPath,IProgressMonitor monitor) throws JavaScriptModelException {\n  try {\n    verifyAttachSource(sourcePath);\n    if (monitor != null) {\n      monitor.beginTask(Messages.element_attachingSource,2);\n    }\n    SourceMapper oldMapper=getSourceMapper();\n    IWorkspace workspace=ResourcesPlugin.getWorkspace();\n    boolean rootNeedsToBeClosed=false;\n    if (sourcePath == null) {\n      rootNeedsToBeClosed=true;\n      setSourceMapper(null);\n    }\n else {\n      IPath storedSourcePath=getSourceAttachmentPath();\n      IPath storedRootPath=getSourceAttachmentRootPath();\n      if (monitor != null) {\n        monitor.worked(1);\n      }\n      if (storedSourcePath != null) {\n        if (!(storedSourcePath.equals(sourcePath) && (rootPath != null && rootPath.equals(storedRootPath)) || storedRootPath == null)) {\n          rootNeedsToBeClosed=true;\n        }\n      }\n      Object target=JavaModel.getTarget(workspace.getRoot(),sourcePath,false);\n      if (target == null) {\n        throw new JavaScriptModelException(new JavaModelStatus(IJavaScriptModelStatusConstants.INVALID_PATH,sourcePath));\n      }\n      SourceMapper mapper=createSourceMapper(sourcePath,rootPath);\n      if (rootPath == null && mapper.rootPath != null) {\n        rootPath=new Path(mapper.rootPath);\n      }\n      setSourceMapper(mapper);\n    }\n    if (sourcePath == null) {\n      Util.setSourceAttachmentProperty(getPath(),null);\n    }\n else {\n      Util.setSourceAttachmentProperty(getPath(),sourcePath.toString() + (rootPath == null ? \"\" : (ATTACHMENT_PROPERTY_DELIMITER + rootPath.toString())));\n    }\n    if (rootNeedsToBeClosed) {\n      if (oldMapper != null) {\n        oldMapper.close();\n      }\n      BufferManager manager=BufferManager.getDefaultBufferManager();\n      Enumeration openBuffers=manager.getOpenBuffers();\n      while (openBuffers.hasMoreElements()) {\n        IBuffer buffer=(IBuffer)openBuffers.nextElement();\n        IOpenable possibleMember=buffer.getOwner();\n        if (isAncestorOf((IJavaScriptElement)possibleMember)) {\n          buffer.close();\n        }\n      }\n      if (monitor != null) {\n        monitor.worked(1);\n      }\n    }\n  }\n catch (  JavaScriptModelException e) {\n    Util.setSourceAttachmentProperty(getPath(),null);\n    throw e;\n  }\n finally {\n    if (monitor != null) {\n      monitor.done();\n    }\n  }\n}\n",
      "formalParam": [
        "IPath",
        "IPath",
        "IProgressMonitor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IPath",
        "IPath"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hifivetools/eclipse/org.eclipse.wst.jsdt.core/src/org/eclipse/wst/jsdt/internal/core/PackageFragmentRoot.java",
      "classTypes": [
        "char",
        "Object",
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Enumeration"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "enumeration",
        "boolean"
      ]
    },
    {
      "method": "removeAllItems@644",
      "body": "/** \n * Remove all elements\n */\npublic void removeAllItems(){\n  if (selectedIdx > 0 && selectedIdx < this.items.size())   ((UIItem)items.elementAt(this.selectedIdx)).setSelected(false);\n  items.removeAllElements();\n  setDirty(true);\n  selectedIdx=-1;\n  firstVisible=0;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Vector.removeAllElements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "boolean",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.size()",
              "java.util.Vector.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.contains(java.lang.Object)",
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/CIDE/CIDE_Samples/cide_samples/Lampiro/src/it/yup/ui/UIPanel.java",
      "classTypes": [
        "int",
        "Image"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [],
        [
          "UIItem"
        ],
        [
          "UIScreen"
        ]
      ],
      "types": [
        "Vector"
      ],
      "apicalls": [
        "elements",
        "size",
        "hasMoreElements",
        "removeAllElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()",
            "java.util.Vector.removeAllElements()",
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "size",
        "integer"
      ]
    },
    {
      "method": "getExtraFieldsOfNewClass@57",
      "body": "public void getExtraFieldsOfNewClass(Class<?> type,Map<String,Type> out){\n  if (!hasMessageMap.contains(type))   return;\n  out.put(\"messageMap\",Pointer.class);\n}\n",
      "formalParam": [
        "Class<?>",
        "Map<String,Type>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Set<java.lang.Class<?>>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.reflect.Type>.put(java.lang.String,java.lang.reflect.Type)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Type"
          }
        ]
      },
      "sorrreturntype": [
        "Class<? extends T>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)"
            ]
          },
          {
            "calls": [
              "java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
              "java.lang.Class.isAssignableFrom(java.lang.Class)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/nativelibs4java/libraries/BridJ/src/main/java/org/bridj/cpp/mfc/MFCRuntime.java",
      "classTypes": [
        "Set<Class<?>>",
        "Callback",
        "String"
      ],
      "sorrformalparam": [
        [
          "Pointer<T>",
          "Type"
        ]
      ],
      "types": [
        "Set",
        "Object",
        "Type"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Set<java.lang.Class<?>>.contains(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.reflect.Type>.put(java.lang.String,java.lang.reflect.Type)"
          ]
        }
      ],
      "keywords": [
        "string",
        "class",
        "put",
        "set",
        "map"
      ]
    },
    {
      "method": "mousePressed@214",
      "body": "public void mousePressed(MouseEvent e){\n  if (isFocusable() && isEnabled())   requestFocus();\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.awt.Component.isFocusable()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.awt.Component.isEnabled()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JComponent.requestFocus()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/SwingOSC/src/main/java/de/sciss/swingosc/DragView.java",
      "classTypes": [
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.isFocusable()",
            "java.awt.Component.isEnabled()"
          ]
        },
        {
          "calls": [
            "java.awt.Component.isFocusable()",
            "java.awt.Component.isEnabled()",
            "javax.swing.JComponent.requestFocus()"
          ]
        }
      ],
      "keywords": [
        "enabled",
        "awt"
      ]
    },
    {
      "method": "main@60",
      "body": "public static void main(String[] args) throws Exception {\n  Thread[] threads=new Thread[2];\n  for (int i=0; i < threads.length; i++) {\n    threads[i]=new Thread(new Test6963811(0L,i > 0));\n    threads[i].start();\n    Thread.sleep(500L);\n  }\n  for (  Thread thread : threads) {\n    thread.join();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.sleep(long)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.join()",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.sleep(long)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.sleep(long)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/test/java/beans/PropertyEditor/Test6963811.java",
      "classTypes": [
        "long"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Runnable",
        "InterruptedException",
        "Thread"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.lang.Thread.sleep(long)",
            "java.lang.Thread.join()"
          ]
        }
      ],
      "keywords": [
        "runnable",
        "join",
        "interrupted",
        "exception",
        "lang"
      ]
    },
    {
      "method": "getChat@96",
      "body": "public Chat getChat(String id){\n  Set<User> users=new HashSet<User>();\n  List<Message> messages=new ArrayList<Message>();\n  Set<String> usernames=this.jedis.smembers(cat(CHATS,id,USERS));\n  List<String> message_ids=this.jedis.lrange(cat(CHATS,id,MESSAGES),0,-1);\n  for (  String message_id : message_ids) {\n    messages.add(getMessage(message_id));\n  }\n  for (  String username : usernames) {\n    users.add(getUser(username,false));\n  }\n  return new Chat(id,messages,users);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet<Tau_E>.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "User",
        "Chat"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.String>.get(java.lang.Object)",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.String>.HashSet<String>()",
              "java.util.Set<java.lang.String>.add(java.lang.String)",
              "java.util.Set<java.lang.String>.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Chat",
      "file": "./java_projects/ECSE_321-Game/src/main/java/mcgill/game/Database.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "boolean"
        ],
        [
          "Set<User>"
        ]
      ],
      "types": [
        "HashSet",
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet()",
            "java.util.ArrayList<Tau_E>.ArrayList()"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "set",
        "util"
      ]
    },
    {
      "method": "getInt@848",
      "body": "/** \n * Returns the current value of the integer-valued property with the given name. Returns the default-default value (<code>0</code>) if there is no property with the given name, or if the current value  cannot be treated as an integer. The given name must not be <code>null</code>.\n * @param name the name of the property\n * @return the int-valued property\n */\npublic int getInt(String name){\n  return convertToInt(properties.getProperty(name),INT_DEFAULT_DEFAULT);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Integer.parseInt(java.lang.String)",
            "_throws": [
              "java.lang.NumberFormatException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "float",
        "void",
        "void",
        "void",
        "void",
        "double",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.Float.parseFloat(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Long.toString(long)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.isNaN(double)",
              "java.lang.Double.toString(double)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Float.isNaN(float)",
              "java.lang.Float.toString(float)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.Double.parseDouble(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.toString(int)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.put(java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Hashtable<java.lang.Object,java.lang.Object>.remove(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/eclipse.platform.runtime/bundles/org.eclipse.core.runtime/src/org/eclipse/core/runtime/Preferences.java",
      "classTypes": [
        "float",
        "ListenerList",
        "Object",
        "String[]",
        "String",
        "String",
        "long",
        "Object"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "long"
        ],
        [
          "String",
          "double"
        ],
        [
          "IPath"
        ],
        [
          "String",
          "float"
        ],
        [
          "String"
        ],
        [
          "String",
          "int"
        ],
        [
          "String",
          "boolean"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "getProperty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.Integer.parseInt(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang",
        "parse",
        "number",
        "property",
        "exception",
        "format"
      ]
    },
    {
      "method": "write@30",
      "body": "@Override public void write(OutputStream out) throws IOException {\n  try {\n    Map<MethodDef,List<MethodDef>> table=getCrossRef(testsuite,service);\n    Tag coverage=toTag(table);\n    PrintWriter pw=new PrintWriter(new OutputStreamWriter(out,Constants.DEFAULT_CHARSET));\n    try {\n      coverage.print(0,pw);\n    }\n  finally {\n      pw.flush();\n    }\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
                "_throws": [
                  "java.io.UnsupportedEncodingException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintWriter.PrintWriter(java.io.Writer)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.PrintWriter.flush()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/bnd/biz.aQute.bndlib/src/aQute/bnd/make/coverage/CoverageResource.java",
      "classTypes": [
        "Collection<Clazz>"
      ],
      "sorrformalparam": [],
      "types": [
        "Throwable"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "java.io.PrintWriter.flush()",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
            "java.io.PrintWriter.PrintWriter(java.io.Writer)",
            "java.io.PrintWriter.flush()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "RepositoryMapping@68",
      "body": "/** \n * Construct a  {@link RepositoryMapping} for previouslyunknown project.\n * @param mappedContainer\n * @param gitDir\n */\npublic RepositoryMapping(final IContainer mappedContainer,final File gitDir){\n  final IPath cLoc=mappedContainer.getLocation().removeTrailingSeparator();\n  final IPath gLoc=Path.fromOSString(gitDir.getAbsolutePath()).removeTrailingSeparator();\n  final IPath gLocParent=gLoc.removeLastSegments(1);\n  container=mappedContainer;\n  containerPathString=container.getProjectRelativePath().toPortableString();\n  if (cLoc.isPrefixOf(gLoc)) {\n    int matchingSegments=gLoc.matchingFirstSegments(cLoc);\n    IPath remainder=gLoc.removeFirstSegments(matchingSegments);\n    String device=remainder.getDevice();\n    if (device == null)     gitDirPathString=remainder.toPortableString();\n else     gitDirPathString=remainder.toPortableString().substring(device.length());\n  }\n else   if (gLocParent.isPrefixOf(cLoc)) {\n    int cnt=cLoc.segmentCount() - cLoc.matchingFirstSegments(gLocParent);\n    StringBuilder p=new StringBuilder(\"\");\n    while (cnt-- > 0) {\n      p.append(\"../\");\n    }\n    p.append(gLoc.segment(gLoc.segmentCount() - 1));\n    gitDirPathString=p.toString();\n  }\n else {\n    gitDirPathString=gLoc.toPortableString();\n  }\n}\n",
      "formalParam": [
        "IContainer",
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              },
              {
                "_call": "java.lang.StringBuilder.append(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              },
              {
                "_call": "java.lang.StringBuilder.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "RepositoryMapping"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)",
              "java.util.Properties.getProperty(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.toString()",
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/egit/org.eclipse.egit.core/src/org/eclipse/egit/core/project/RepositoryMapping.java",
      "classTypes": [
        "IContainer",
        "String",
        "IPath",
        "IPath",
        "IPath",
        "Repository",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Properties",
          "String"
        ],
        [
          "IPath"
        ]
      ],
      "types": [
        "Integer",
        "String"
      ],
      "apicalls": [
        "toString",
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.getAbsolutePath()",
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        },
        {
          "calls": [
            "java.io.File.getAbsolutePath()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "string",
        "append",
        "length"
      ]
    },
    {
      "method": "getProperty@212",
      "body": "public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {\n  if (DECLARATION_HANDLER_PROPERTY.equals(name)) {\n    return null;\n  }\n else   if (LEXICAL_HANDLER_PROPERTY.equals(name)) {\n    return null;\n  }\n else {\n    return pp.getProperty(name);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/plexus-containers/plexus-component-metadata/src/main/java/org/codehaus/plexus/metadata/merge/Driver.java",
      "classTypes": [
        "String",
        "String",
        "ErrorHandler",
        "String",
        "String",
        "ContentHandler"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "InputSource"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "String",
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "boolean",
        "object",
        "string",
        "equals"
      ]
    },
    {
      "method": "testMergeVMContext@19",
      "body": "@Test(groups={\"PageGenerator\"}) public void testMergeVMContext() throws IOException {\n  PageGenerator generator=new PageGenerator();\n  Map<String,Object> context=new LinkedHashMap<String,Object>();\n  context.put(\"test\",\"This is a String\");\n  String templatePath=new File(pathToTest + \"testGenerateText.vm\").getPath();\n  StringWriter testWriter=new StringWriter();\n  try {\n    generator.mergeVMTemplate(context,templatePath,testWriter);\n  }\n catch (  Exception e) {\n    e.printStackTrace();\n    Assert.fail(\"mergeVMTemplate threw an exception: \" + e.toString());\n  }\n  Assert.assertEquals(testWriter.toString(),\"This is a String\",\"Expected the merged text to contain the correct string\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Throwable.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/tastymonster/src/test/java/com/tastymonster/automation/codegen/TestPageGenerator.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "LinkedHashMap",
        "File"
      ],
      "apicalls": [
        "getPath"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap<java.lang.String,java.lang.Object>.LinkedHashMap<String,Object>()",
            "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)",
            "java.io.File.File(java.lang.String)",
            "java.io.File.getPath()",
            "java.io.StringWriter.StringWriter()",
            "java.lang.Throwable.printStackTrace()",
            "java.lang.Throwable.toString()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "stack",
        "writer"
      ]
    },
    {
      "method": "testDeleteListener@350",
      "body": "public void testDeleteListener() throws Exception {\n  startServer(HttpMethodResource.class);\n  Client c=Client.create();\n  AsyncWebResource r=c.asyncResource(getUri().path(\"test\").build());\n  StringListener l=new StringListener();\n  Future<?> f=r.delete(l);\n  assertEquals(\"DELETE\",f.get());\n  l.check(\"DELETE\");\n  terminate(c.getExecutorService());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.Future<Tau_V>.get()",
            "_throws": [
              "java.lang.InterruptedException",
              "java.util.concurrent.ExecutionException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.concurrent.ExecutorService.shutdown()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)",
            "_throws": [
              "java.lang.InterruptedException"
            ],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.concurrent.ExecutorService.isTerminated()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.ExecutorService.shutdown()",
              "java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)",
              "java.util.concurrent.ExecutorService.isTerminated()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jersey-1.x/jersey/jersey-tests/src/test/java/com/sun/jersey/impl/client/AsyncHttpMethodTest.java",
      "classTypes": [
        "CountDownLatch",
        "List<String>"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "InterruptedException",
        "ExecutionException",
        "Future"
      ],
      "apicalls": [
        "isTerminated"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.Future<Tau_V>.get()",
            "java.util.concurrent.ExecutorService.shutdown()",
            "java.util.concurrent.ExecutorService.awaitTermination(long,java.util.concurrent.TimeUnit)",
            "java.util.concurrent.ExecutorService.isTerminated()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "future",
        "interrupted"
      ]
    },
    {
      "method": "setWindowOpt@199",
      "body": "public static synchronized void setWindowOpt(String key,Boolean value){\n  setWindowOpt(key,value ? \"true\" : \"false\");\n}\n",
      "formalParam": [
        "String",
        "Boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Properties.getProperty(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Properties.getProperty(java.lang.String)",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
              "java.io.PrintStream.println(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Custom-Salem/src/haven/Config.java",
      "classTypes": [
        "byte[]",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        []
      ],
      "types": [
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)",
            "java.io.PrintStream.println(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.Properties.getProperty(java.lang.String)",
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
            "java.io.File.File(java.lang.String)",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.util.Properties.store(java.io.OutputStream,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "print",
        "lang",
        "exception",
        "property",
        "string"
      ]
    },
    {
      "method": "FeatureExtractor@70",
      "body": "/** \n * Constructs a new FeatureExtractor and initializes extracted and required feature storage objects.\n */\npublic FeatureExtractor(){\n  extracted_features=new ArrayList<String>();\n  required_features=new HashSet<String>();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet<java.lang.String>.HashSet<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/AuToBI/src/edu/cuny/qc/speech/AuToBI/core/FeatureExtractor.java",
      "classTypes": [
        "List<String>",
        "Set<String>"
      ],
      "sorrformalparam": [],
      "types": [
        "ArrayList",
        "HashSet"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.HashSet<java.lang.String>.HashSet<String>()"
          ]
        }
      ],
      "keywords": [
        "list",
        "array",
        "util",
        "hash"
      ]
    },
    {
      "method": "addAll@185",
      "body": "/** \n * Adds the specified Collection at the end of the array.\n * @param collection The Collection to add at the end of the array.\n */\npublic void addAll(Collection<? extends T> collection){\nsynchronized (mLock) {\n    if (mOriginalValues != null) {\n      mOriginalValues.addAll(collection);\n    }\n else {\n      mObjects.addAll(collection);\n    }\n  }\n  if (mNotifyOnChange)   notifyDataSetChanged();\n}\n",
      "formalParam": [
        "Collection<? extends T>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.List<Tau_E>.addAll(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.ArrayList<Tau_E>.addAll(java.util.Collection)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.clear()"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.add(int,Tau_E)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.add(int,Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.add(Tau_E)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.remove(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.remove(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frameworks_base/core/java/android/widget/ArrayAdapter.java",
      "classTypes": [
        "LayoutInflater",
        "boolean",
        "int",
        "int",
        "List<T>",
        "int",
        "ArrayFilter",
        "ArrayList<T>",
        "Object",
        "Context"
      ],
      "sorrformalparam": [
        [],
        [
          "T",
          "int"
        ],
        [
          "T"
        ],
        [
          "T"
        ]
      ],
      "types": [
        "ArrayList",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.addAll(java.util.Collection)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.addAll(java.util.Collection)"
          ]
        }
      ],
      "keywords": [
        "array",
        "add"
      ]
    },
    {
      "method": "getListSrc@805",
      "body": "@ModelAttribute(\"listSrc\") public Map getListSrc(){\n  Map map=new LinkedHashMap();\n  List<ListData> list=listDao.getListDataList();\n  for (  ListData listData : list) {\n    map.put(listData.getId(),listData.getName());\n  }\n  return map;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.LinkedHashMap.LinkedHashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.lang.Long.toString(long)",
              "java.util.Random.Random()",
              "java.util.Random.nextLong()",
              "java.lang.Long.Long(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.lang.Long.toString(long)",
              "java.util.Random.Random()",
              "java.util.Random.nextLong()",
              "java.lang.Long.Long(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.OutputStream.write(byte[])",
              "java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream)",
              "java.io.OutputStream.flush()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.lang.Long.toString(long)"
            ]
          }
        ]
      ],
      "returnType": "Map",
      "file": "./java_projects/GovFormsFramework/src/bd/gov/forms/web/FormBuilder.java",
      "classTypes": [
        "FormDao",
        "Logger",
        "ListDao",
        "MessageSource"
      ],
      "sorrformalparam": [
        [
          "Form",
          "BindingResult",
          "HttpServletRequest",
          "ModelMap"
        ],
        [
          "Field",
          "BindingResult",
          "HttpServletRequest",
          "ModelMap"
        ],
        [
          "String",
          "ModelMap",
          "HttpServletResponse"
        ],
        [
          "Form",
          "BindingResult",
          "HttpServletRequest",
          "ModelMap"
        ]
      ],
      "types": [
        "LinkedHashMap",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.LinkedHashMap.LinkedHashMap()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "map"
      ]
    },
    {
      "method": "handleLastNameFocusChange@107",
      "body": "public void handleLastNameFocusChange(boolean hasFocus){\n  if (D)   Log.d(TAG,\"handleLastNameFocusChange called\");\n  if (!hasFocus) {\n    String nameText=view.getLastNameBox().getText().toString();\n    if (nameText != null && !nameText.equals(\"\")) {\n      boolean valid=validateNameFocusChange(nameText);\n      if (!valid) {\n        notify(INVALID_LAST_NAME);\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.regex.Matcher"
              },
              {
                "_call": "java.util.regex.Matcher.matches()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
              "java.util.regex.Matcher.matches()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/OpenComm-Group/2012_2013/OldCode/OpenComm_Sean/src/edu/cornell/opencomm/controller/SignupController.java",
      "classTypes": [
        "Pattern",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "boolean"
        ],
        [
          "boolean"
        ]
      ],
      "types": [
        "String",
        "Pattern"
      ],
      "apicalls": [
        "matcher"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.regex.Pattern.matcher(java.lang.CharSequence)",
            "java.util.regex.Matcher.matches()"
          ]
        }
      ],
      "keywords": [
        "regex"
      ]
    },
    {
      "method": "getCurrentAccessibleValue@2552",
      "body": "/** \n * Get the value of this object as a Number.\n * @return An Integer of 0 if this isn't selected or an Integer of 1 ifthis is selected.\n * @see AbstractButton#isSelected\n */\npublic Number getCurrentAccessibleValue(){\n  if (isSelected()) {\n    return Integer.valueOf(1);\n  }\n else {\n    return Integer.valueOf(0);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.ButtonModel.isSelected()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "AccessibleStateSet",
        "void",
        "void",
        "void",
        "AttributeSet",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.ButtonModel.isArmed()",
              "java.awt.Component.isFocusOwner()",
              "javax.swing.ButtonModel.isPressed()",
              "javax.swing.ButtonModel.isSelected()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "$NOT$java.awt.Component.isEnabled()"
            ]
          },
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.Component.repaint()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
              "java.awt.Component.isFocusOwner()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Component.repaint()"
            ]
          },
          {
            "calls": [
              "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
              "java.awt.Component.isFocusOwner()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.swing.JComponent.revalidate()",
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.ButtonModel.isSelected()",
              "java.awt.Component.repaint()"
            ]
          },
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.swing.JComponent.revalidate()",
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.ButtonModel.isSelected()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.View.getDocument()",
              "javax.swing.text.Element.getAttributes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()",
              "javax.swing.ButtonModel.isSelected()",
              "javax.swing.ButtonModel.setSelected(boolean)"
            ]
          }
        ]
      ],
      "returnType": "Number",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/AbstractButton.java",
      "classTypes": [
        "boolean",
        "boolean",
        "boolean",
        "String",
        "String",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "Icon"
        ],
        [
          "boolean"
        ],
        [
          "Icon"
        ],
        [
          "int"
        ],
        [
          "Number"
        ]
      ],
      "types": [
        "Boolean",
        "ButtonModel"
      ],
      "apicalls": [
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.ButtonModel.isSelected()",
            "java.lang.Integer.valueOf(int)"
          ]
        }
      ],
      "keywords": [
        "model",
        "lang",
        "value",
        "integer"
      ]
    },
    {
      "method": "split@435",
      "body": "/** \n * <p>Split a string into one or more strings, based on a set of delimiter. This method is intended to be reminiscent of the corresponding perl or awk <i>split()</i> function, though without regular expression support.</p> <p>Note that the 1.4 JDK introduces a regular expression-based <tt>split()</tt> method in the <tt>java.lang.String</tt> class. This method does not use regular expressions.</p>\n * @param s                   the string to split\n * @param delimSet            set of delimiters, or null to use white space\n * @param preserveEmptyFields Whether to parse through empty tokens orpreserve them. For example, given the string string \"a:b::c\" and a delimiter of \":\", if <tt>preserveEmptyStrings</tt> is <tt>true</tt>, then this method will return four strings, \"a\", \"b\", \"\", \"c\". If <tt>preserveEmptyStrings</tt> is <tt>false</tt>, then this method will return three strings, \"a\", \"b\", \"c\" (since the two adjacent \":\" characters are treated as one delimiter.)\n * @return an array of <tt>String</tt> objects\n * @see #split(String,String)\n * @see #split(String)\n * @see #split(String,char)\n * @see #split(String,Collection)\n * @see #split(String,char,Collection)\n * @see #split(String,String,Collection)\n */\npublic static String[] split(String s,String delimSet,boolean preserveEmptyFields){\n  String[] result=null;\n  StringTokenizer tok;\n  Collection<String> temp=new ArrayList<String>();\n  if (delimSet == null)   delimSet=\" \\t\\n\\r\";\n  tok=new StringTokenizer(s,delimSet,preserveEmptyFields);\n  boolean lastWasDelim=true;\n  while (tok.hasMoreTokens()) {\n    String token=tok.nextToken();\n    if (preserveEmptyFields && (token.length() == 1) && (delimSet.indexOf(token.charAt(0)) != -1)) {\n      if (lastWasDelim)       token=\"\";\n else {\n        lastWasDelim=true;\n        continue;\n      }\n    }\n else {\n      lastWasDelim=false;\n    }\n    temp.add(token);\n  }\n  result=new String[temp.size()];\n  temp.toArray(result);\n  return result;\n}\n",
      "formalParam": [
        "String",
        "String",
        "boolean"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.StringTokenizer.nextToken()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.Collection<java.lang.String>.add(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.StringTokenizer.hasMoreTokens()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "_call": "java.util.Collection<java.lang.String>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "String[]",
        "String",
        "String",
        "String[]",
        "String[]",
        "String",
        "String",
        "String",
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.Integer.toHexString(int)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.lang.String.length()",
              "java.util.Collection<java.lang.String>.add(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.Collection<java.lang.String>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(int)",
              "java.lang.String.length()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String[]",
      "file": "./java_projects/javautil/src/main/java/org/clapper/util/text/TextUtil.java",
      "classTypes": [
        "RomanNumberTableEntry[]",
        "String",
        "char[]",
        "int"
      ],
      "sorrformalparam": [
        [
          "String",
          "char"
        ],
        [
          "int"
        ],
        [
          "char"
        ],
        [
          "String"
        ],
        [
          "String",
          "String"
        ],
        [
          "String",
          "int",
          "char"
        ],
        [
          "String",
          "int",
          "char"
        ],
        [
          "int"
        ],
        [
          "String",
          "int"
        ],
        [
          "short"
        ]
      ],
      "types": [],
      "apicalls": [
        "hasMoreTokens"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.StringTokenizer.StringTokenizer(java.lang.String,java.lang.String,boolean)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.StringTokenizer.nextToken()",
            "java.lang.String.length()",
            "java.util.Collection<java.lang.String>.add(java.lang.String)",
            "java.util.StringTokenizer.hasMoreTokens()",
            "java.util.Collection<java.lang.String>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "tokens"
      ]
    },
    {
      "method": "saveToConf@173",
      "body": "/** \n * Store the given <code>ugi</code> as a comma separated string in <code>conf</code> as a property <code>attr</code> The String starts with the user name followed by the default group names, and other group names.\n * @param conf configuration\n * @param attr property name\n * @param ugi a UnixUserGroupInformation\n */\npublic static void saveToConf(Configuration conf,String attr,UnixUserGroupInformation ugi){\n  conf.set(attr,ugi.toString());\n}\n",
      "formalParam": [
        "Configuration",
        "String",
        "UnixUserGroupInformation"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(char)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hadoop-20-warehouse/src/core/org/apache/hadoop/security/UnixUserGroupInformation.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Character",
        "String"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(char)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "setPathFiles@67",
      "body": "public synchronized void setPathFiles(Collection<File> files){\n  pathFiles.clear();\n  classLoader=null;\n  for (  File file : files) {\n    addFile(file);\n  }\n}\n",
      "formalParam": [
        "Collection<File>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<java.io.File>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getAbsoluteFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.util.List<java.io.File>.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.File.toURI()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          },
          {
            "_call": "java.net.URI.toURL()",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          },
          {
            "_call": "java.util.List<java.io.File>.add(java.io.File)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "ClassLoader",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.io.File.toURI()",
              "java.net.URI.toURL()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.toURI()",
              "java.net.URI.toURL()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cayenne/modeler/cayenne-modeler/src/main/java/org/apache/cayenne/modeler/FileClassLoadingService.java",
      "classTypes": [
        "FileClassLoader",
        "List<File>"
      ],
      "sorrformalparam": [
        [],
        [
          "ClassLoader",
          "List<File>"
        ]
      ],
      "types": [
        "MalformedURLException",
        "URL"
      ],
      "apicalls": [
        "toURL",
        "clear"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.io.File>.clear()",
            "java.io.File.getAbsoluteFile()",
            "java.util.List<java.io.File>.contains(java.lang.Object)",
            "java.io.File.toURI()",
            "java.net.URI.toURL()",
            "java.util.List<java.io.File>.add(java.io.File)"
          ]
        }
      ],
      "keywords": [
        "net",
        "list",
        "malformed"
      ]
    },
    {
      "method": "sugerirPontoEncontro@311",
      "body": "/** \n * Procura caroneiro e adiciona solicitacao com aquele ponto de encontro.\n * @param idCarona\n * @param donoDaCarona\n * @param donoDaSolicitacao\n * @param pontos\n * @return idSolicitacao\n * @throws CadastroEmCaronaPreferencialException \n */\npublic Solicitacao sugerirPontoEncontro(String idCarona,Usuario donoDaCarona,Usuario donoDaSolicitacao,String pontos) throws CadastroEmCaronaPreferencialException {\n  try {\n    lockMapIdCaronasOferecidas.lock();\n    Carona c=this.mapIdCaronasOferecidas.get(idCarona);\n    if (c == null)     throw new IllegalArgumentException(\"Identificador do carona \u00e9 inv\u00e1lido\");\n    return c.addSolicitacao(c.getOrigem(),c.getDestino(),donoDaCarona,donoDaSolicitacao,pontos,listaIdsUsuariosPreferenciais);\n  }\n  finally {\n    lockMapIdCaronasOferecidas.unlock();\n  }\n}\n",
      "formalParam": [
        "String",
        "Usuario",
        "Usuario",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.Lock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.Lock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "List<Solicitacao>",
        "List<Carona>",
        "List<Carona>",
        "Carona",
        "List<Carona>",
        "List<Integer>",
        "EnumCaronaReview",
        "List<Carona>",
        "List<Integer>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.Collections.sort(java.util.List)",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList<Tau_E>.LinkedList()",
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.Collections.sort(java.util.List)",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "Solicitacao",
      "file": "./java_projects/SIProject/ProjetoSI/src/main/java/estradasolidaria/ui/server/logic/Usuario.java",
      "classTypes": [
        "List<Mensagem>",
        "Iterator<Carona>",
        "Map<Integer,Solicitacao>",
        "List<Integer>",
        "Lock",
        "Lock",
        "String",
        "List<String>",
        "Lock",
        "Iterator<Solicitacao>"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "int"
        ],
        [
          "String"
        ],
        [],
        [
          "Integer",
          "Integer",
          "String"
        ],
        [],
        []
      ],
      "types": [
        "concurrent"
      ],
      "apicalls": [
        "unlock",
        "lock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.Lock.lock()",
            "java.util.concurrent.locks.Lock.unlock()"
          ]
        }
      ],
      "keywords": [
        "locks",
        "lock",
        "unlock",
        "util"
      ]
    },
    {
      "method": "HashChain@90",
      "body": "/** \n * Constructs a HashChain filled with the contents of the src Chain. \n */\npublic HashChain(Chain<E> src){\n  this();\n  for (  E e : src) {\n    add(e);\n  }\n}\n",
      "formalParam": [
        "Chain<E>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          }
        ]
      },
      "sorrreturntype": [
        "HashChain",
        "boolean",
        "List",
        "Iterator<E>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.LinkedList.LinkedList()",
              "java.util.List.addAll(java.util.Collection)",
              "java.util.List.iterator()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/soot/src/soot/util/HashChain.java",
      "classTypes": [
        "X",
        "HashMap<E,Link>",
        "X",
        "E",
        "long",
        "long",
        "Link<X>"
      ],
      "sorrformalparam": [
        [
          "List"
        ],
        [
          "E",
          "E"
        ],
        [
          "Chain"
        ],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.containsKey(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.util.HashMap<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "createForWrite@157",
      "body": "/** \n * Open the specified File for write access, ensuring that it does not exist.\n * @param f the file that we want to create\n * @param permissions we want to have on the file (if security is enabled)\n * @throws AlreadyExistsException if the file already exists\n * @throws IOException if any other error occurred\n */\npublic static FileOutputStream createForWrite(File f,int permissions) throws IOException {\n  if (skipSecurity) {\n    return insecureCreateForWrite(f,permissions);\n  }\n else {\n    try {\n      FileDescriptor fd=NativeIO.open(f.getAbsolutePath(),NativeIO.O_WRONLY | NativeIO.O_CREAT | NativeIO.O_EXCL,permissions);\n      return new FileOutputStream(fd);\n    }\n catch (    NativeIOException nioe) {\n      if (nioe.getErrno() == Errno.EEXIST) {\n        throw new AlreadyExistsException(nioe);\n      }\n      throw nioe;\n    }\n  }\n}\n",
      "formalParam": [
        "File",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.io.FileDescriptor)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.io.FileOutputStream.FileOutputStream(java.io.File)",
                "_throws": [
                  "java.io.FileNotFoundException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.getAbsolutePath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.io.FileOutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "FileOutputStream",
      "file": "./java_projects/ADFS/adfs-common-project/adfs-common/src/main/java/org/apache/hadoop/io/SecureIOUtils.java",
      "classTypes": [
        "boolean",
        "FileSystem"
      ],
      "sorrformalparam": [],
      "types": [
        "FileNotFoundException",
        "File",
        "IOException"
      ],
      "apicalls": [
        "exists",
        "getAbsolutePath"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.exists()",
            "java.io.FileOutputStream.FileOutputStream(java.io.File)",
            "java.io.File.getAbsolutePath()",
            "java.io.FileOutputStream.close()"
          ]
        },
        {
          "calls": [
            "java.io.File.getAbsolutePath()",
            "java.io.FileOutputStream.FileOutputStream(java.io.FileDescriptor)"
          ]
        }
      ],
      "keywords": [
        "string",
        "get",
        "boolean",
        "close",
        "stream"
      ]
    },
    {
      "method": "tracepoint@120",
      "body": "public void tracepoint(String component,int tracepoint,String classContext,String methodContext){\n  if (traceSuspended()) {\n    return;\n  }\n  String staticContextTracepointRecord=component + \"[time:\" + System.currentTimeMillis()+ \"]\"+ \"[thread:\"+ Thread.currentThread().getName()+ \"]\"+ \"[tracepoint:\"+ tracepoint+ \"]\"+ \"[\"+ classContext+ \".\"+ methodContext+ \"]\";\n  dncprintln(staticContextTracepointRecord);\n}\n",
      "formalParam": [
        "String",
        "int",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintWriter.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.PrintWriter.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.flush()",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.flush()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/derby/java/client/org/apache/derby/client/am/LogWriter.java",
      "classTypes": [
        "boolean",
        "int",
        "java.io.PrintWriter",
        "boolean",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "SqlException"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "flush"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintWriter.println(java.lang.String)",
            "java.io.PrintWriter.flush()"
          ]
        }
      ],
      "keywords": [
        "print"
      ]
    },
    {
      "method": "getElement@45",
      "body": "public Object getElement(Object key){\n  Enumeration enumeration=data.elements();\n  while (enumeration.hasMoreElements()) {\n    Node n=(Node)enumeration.nextElement();\n    if (n.key == key) {\n      data.removeElement(n);\n      data.insertElementAt(n,0);\n      return n.element;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector.removeElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Vector.insertElementAt(java.lang.Object,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Object",
      "file": "./java_projects/JacORB/src/org/jacorb/collection/util/Cach.java",
      "classTypes": [
        "int",
        "Vector",
        "Object",
        "Object"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "insertElementAt",
        "removeElement",
        "hasMoreElements",
        "elements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Vector.removeElement(java.lang.Object)",
            "java.util.Vector.insertElementAt(java.lang.Object,int)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "vector",
        "elements"
      ]
    },
    {
      "method": "readStartElement@114",
      "body": "public void readStartElement(long startTagLong,TreeMap<String,String> attributes) throws ContentDecodingException {\n  String startTag=tagToString(startTagLong);\n  int event=readToNextTag(XmlPullParser.START_TAG);\n  if (event != XmlPullParser.START_TAG) {\n    throw new ContentDecodingException(\"Expected start element, got: \" + XmlPullParser.TYPES[event]);\n  }\n  if (!startTag.equals(_reader.getName())) {\n    throw new ContentDecodingException(\"Expected start element: \" + startTag + \" got: \"+ _reader.getName());\n  }\n  if (null != attributes) {\n    for (int i=0; i < _reader.getAttributeCount(); ++i) {\n      attributes.put(_reader.getAttributeName(i),_reader.getAttributeValue(i));\n    }\n  }\n  try {\n    _reader.next();\n  }\n catch (  XmlPullParserException e) {\n    throw new ContentDecodingException(e.getMessage());\n  }\ncatch (  IOException e) {\n    throw new ContentDecodingException(e.getMessage());\n  }\n}\n",
      "formalParam": [
        "long",
        "TreeMap<String,String>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.TreeMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.TreeMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/BitNomen/src/org/ccnx/ccn/impl/encoding/TextXMLDecoder.java",
      "classTypes": [
        "XmlPullParser"
      ],
      "sorrformalparam": [
        [
          "String",
          "TreeMap<String,String>"
        ],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.String.equals(java.lang.Object)",
            "java.util.TreeMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "map",
        "put",
        "lang"
      ]
    },
    {
      "method": "JSONObject@280",
      "body": "/** \n * Construct a JSONObject from an Object, using reflection to find the public members. The resulting JSONObject's keys will be the strings from the names array, and the values will be the field values associated with those keys in the object. If a key is not found or not visible, then it will not be copied into the new JSONObject.\n * @param object An object that has fields that should be used to make aJSONObject.\n * @param names An array of strings, the names of the fields to be obtainedfrom the object.\n */\npublic JSONObject(Object object,String names[]){\n  this();\n  Class c=object.getClass();\n  for (int i=0; i < names.length; i+=1) {\n    String name=names[i];\n    try {\n      this.putOpt(name,c.getField(name).get(object));\n    }\n catch (    Exception ignore) {\n    }\n  }\n}\n",
      "formalParam": [
        "Object",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class.getField(java.lang.String)",
            "_throws": [
              "java.lang.NoSuchFieldException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Field"
          },
          {
            "_call": "java.lang.reflect.Field.get(java.lang.Object)",
            "_throws": [
              "java.lang.IllegalArgumentException",
              "java.lang.IllegalAccessException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "String[]",
        "int",
        "long",
        "JSONObject",
        "String[]",
        "String",
        "JSONArray",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map.size()",
              "java.util.Map.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.longValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Long.parseLong(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Map.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getFields()",
              "java.lang.reflect.Field.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.getBuffer()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.isInfinite()",
              "java.lang.Double.isNaN()"
            ]
          },
          {
            "calls": [
              "java.lang.Float.isInfinite()",
              "java.lang.Float.isNaN()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/mpd-2012-i41N/aula25-mvc/src/main/java/org/json/JSONObject.java",
      "classTypes": [
        "Map",
        "Object"
      ],
      "sorrformalparam": [
        [
          "JSONObject"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String",
          "Object"
        ],
        [
          "Object"
        ],
        [
          "int"
        ],
        [],
        [
          "Object"
        ]
      ],
      "types": [
        "String",
        "IllegalAccessException",
        "IllegalArgumentException",
        "Class",
        "Field"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.getField(java.lang.String)",
            "java.lang.reflect.Field.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "security",
        "class",
        "field"
      ]
    },
    {
      "method": "dispatchNextGuiEvent@812",
      "body": "/** \n * Processes the next GUI event.\n */\npublic void dispatchNextGuiEvent() throws InterruptedException {\n  EventQueue queue=awtEventQueue;\n  if (queue == null) {\n    queue=Toolkit.getDefaultToolkit().getSystemEventQueue();\n    awtEventQueue=queue;\n  }\n  AWTEvent event=queue.getNextEvent();\n  if (event instanceof ActiveEvent) {\n    ((ActiveEvent)event).dispatch();\n  }\n else {\n    Object source=event.getSource();\n    if (source instanceof Component) {\n      Component comp=(Component)source;\n      comp.dispatchEvent(event);\n    }\n else     if (source instanceof MenuComponent) {\n      ((MenuComponent)source).dispatchEvent(event);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Toolkit.getDefaultToolkit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Toolkit"
          },
          {
            "_call": "java.awt.Toolkit.getSystemEventQueue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.EventQueue"
          },
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Component.dispatchEvent(java.awt.AWTEvent)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "Object",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.getCaret()",
              "javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.getMessage()",
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.Character.isISOControl(char)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/google-closure-compiler/lib/rhino/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "JCheckBoxMenuItem",
        "VariableNode",
        "Menubar",
        "Evaluator",
        "long",
        "long",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "MouseEvent"
        ],
        [
          "Object",
          "int"
        ],
        [
          "Component"
        ]
      ],
      "types": [
        "EventQueue",
        "Toolkit"
      ],
      "apicalls": [
        "dispatchEvent"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemEventQueue()",
            "java.util.EventObject.getSource()",
            "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
          ]
        }
      ],
      "keywords": [
        "queue",
        "dispatch"
      ]
    },
    {
      "method": "append@444",
      "body": "public void append(char[] c,int start,int len){\n  if (_inputStart >= 0) {\n    unshare(len);\n  }\n  _resultString=null;\n  _resultArray=null;\n  char[] curr=_currentSegment;\n  int max=curr.length - _currentSize;\n  if (max >= len) {\n    System.arraycopy(c,start,curr,_currentSize,len);\n    _currentSize+=len;\n  }\n else {\n    if (max > 0) {\n      System.arraycopy(c,start,curr,_currentSize,max);\n      start+=max;\n      len-=max;\n    }\n    expand(len);\n    System.arraycopy(c,start,_currentSegment,0,len);\n    _currentSize=len;\n  }\n}\n",
      "formalParam": [
        "char[]",
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.Math.min(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.String.getChars(int,int,char[],int)",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.lang.Math.min(int,int)",
              "java.lang.String.getChars(int,int,char[],int)"
            ]
          },
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.lang.String.getChars(int,int,char[],int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/calabash-android/ruby-gem/test-server/instrumentation-backend/src/sh/calaba/org/codehaus/jackson/util/TextBuffer.java",
      "classTypes": [
        "String",
        "int",
        "char[]",
        "int",
        "char[]",
        "int",
        "boolean",
        "int",
        "ArrayList<char[]>",
        "char[]"
      ],
      "sorrformalparam": [
        [
          "String",
          "int",
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Math",
        "System"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "java.lang.Math.min(int,int)",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        }
      ],
      "keywords": [
        "min",
        "array",
        "boolean"
      ]
    },
    {
      "method": "placeCorner1@126",
      "body": "public void placeCorner1(Block corner1Block){\n  Warzone warzone=War.war.findWarzone(this.zoneName);\n  StringBuilder msgString=new StringBuilder();\n  try {\n    if (warzone == null && War.war.getWarzones().size() >= War.war.getWarConfig().getInt(WarConfig.MAXZONES)) {\n      War.war.badMsg(player,\"Too many warzones already! To change the maximum, use /warcfg maxzone:20.\");\n      return;\n    }\n else     if (warzone == null) {\n      warzone=new Warzone(this.player.getLocation().getWorld(),this.zoneName);\n      warzone.addAuthor(player.getName());\n      War.war.getIncompleteZones().add(warzone);\n      warzone.getVolume().setZoneCornerOne(corner1Block);\n      War.war.msg(this.player,\"Warzone \" + warzone.getName() + \" created. Corner 1 set to x:\"+ corner1Block.getX()+ \" y:\"+ corner1Block.getY()+ \" z:\"+ corner1Block.getZ()+ \". \");\n      War.war.log(player.getName() + \" created warzone \" + zoneName+ \" by setting its corner 1\",Level.INFO);\n    }\n else     if (!this.isPlayerAuthorOfZoneOrAdmin(warzone)) {\n      return;\n    }\n else {\n      this.resetWarzone(warzone,msgString);\n      warzone.getVolume().setZoneCornerOne(corner1Block);\n      msgString.append(\"Warzone \" + warzone.getName() + \" modified. Corner 1 set to x:\"+ corner1Block.getX()+ \" y:\"+ corner1Block.getY()+ \" z:\"+ corner1Block.getZ()+ \". \");\n      War.war.log(player.getName() + \" updated warzone \" + zoneName+ \" by setting its corner 1\",Level.INFO);\n    }\n    this.saveIfReady(warzone,msgString);\n  }\n catch (  TooSmallException e) {\n    this.handleTooSmall();\n    if (warzone.getVolume().isSaved()) {\n      warzone.initializeZone();\n    }\n  }\ncatch (  TooBigException e) {\n    this.handleTooBig();\n    if (warzone.getVolume().isSaved()) {\n      warzone.initializeZone();\n    }\n  }\n}\n",
      "formalParam": [
        "Block"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/war/war/src/main/java/com/tommytony/war/command/ZoneSetter.java",
      "classTypes": [
        "String",
        "Player"
      ],
      "sorrformalparam": [
        [
          "Block"
        ],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "getRepresentativeImageBySeries@457",
      "body": "/** \n */\npublic gov.nih.nci.ncia.domain.Image getRepresentativeImageBySeries(java.lang.String seriesInstanceUID) throws RemoteException {\n  imageDao=(ImageDAOInterface)SpringApplicationContext.getBean(imageDaoBean);\n  trialDataProvenanceDAO=(TrialDataProvenanceDAOInterface)SpringApplicationContext.getBean(trialDataProvenanceDaoBean);\n  Image image=null;\n  try {\n    List<String> seriesInstanceUIDs=new ArrayList<String>();\n    seriesInstanceUIDs.add(seriesInstanceUID);\n    Map<String,TrialDataProvenance> tdps=trialDataProvenanceDAO.getTDPBySeriesInstanceUID(seriesInstanceUIDs);\n    TrialDataProvenance tdp=tdps.get(seriesInstanceUID);\n    if (tdp == null) {\n      logger.error(\"Couldn't find trial data provenance information for seriesInstanceUID \" + seriesInstanceUID);\n      throw new RemoteException(\"Couldn't find trial data provenance information for seriesInstanceUID: \" + seriesInstanceUID);\n    }\n    boolean isPublic=ServiceImplHelper.getPublicGroupAndCheckForPublicAccess(tdp);\n    if (isPublic) {\n      image=imageDao.getRepresentativeImageBySeries(seriesInstanceUID);\n    }\n else {\n      logger.info(\"The SeriesInstanceUID \" + seriesInstanceUID + NOT_PUBLIC_GROUP);\n      throw new RemoteException(\"The SeriesInstanceUID \" + seriesInstanceUID + NOT_PUBLIC_GROUP);\n    }\n  }\n catch (  Exception e) {\n    logger.error(ERROR_SERIES + seriesInstanceUID,e);\n    throw new RemoteException(ERROR_SERIES + seriesInstanceUID + e.getMessage(),e);\n  }\n  return image;\n}\n",
      "formalParam": [
        "java.lang.String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference",
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference",
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference",
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference",
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference",
        "org.cagrid.transfer.context.stubs.types.TransferServiceContextReference"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.Map<java.lang.String,java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.Map<java.lang.String,java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.List<java.lang.String>.size()",
              "java.util.List<java.lang.String>.get(int)"
            ]
          },
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>(java.util.Collection)",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ]
      ],
      "returnType": "gov.nih.nci.ncia.domain.Image",
      "file": "./java_projects/nbia/software/ncia-core-grid-transfer/src/gov/nih/nci/cagrid/ncia/service/NCIACoreServiceImpl.java",
      "classTypes": [
        "ImageDAOInterface",
        "String",
        "Logger",
        "String",
        "TrialDataProvenanceDAOInterface",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "java.lang.String"
        ],
        [
          "gov.nih.nci.cagrid.cqlquery.CQLQuery"
        ],
        [
          "java.lang.String[]"
        ],
        [
          "java.lang.String"
        ],
        [
          "java.lang.String[]"
        ],
        [
          "java.lang.String[]"
        ]
      ],
      "types": [
        "String",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "array"
      ]
    },
    {
      "method": "SecureHashAuthManager@41",
      "body": "public SecureHashAuthManager(){\n  try {\n    random=new SecureRandom();\n  }\n catch (  Exception ex) {\n    throw new RuntimeException(ex);\n  }\n  random.setSeed(random.nextLong() ^ System.currentTimeMillis() ^ hashCode()^ Runtime.getRuntime().freeMemory());\n  credentials=newCredentials();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.security.SecureRandom.SecureRandom()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextLong()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.lang.System.currentTimeMillis()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Random.setSeed(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "HashCredentials"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cling/bridge/src/main/java/org/fourthline/cling/bridge/auth/SecureHashAuthManager.java",
      "classTypes": [
        "String",
        "Random",
        "String",
        "HashCredentials",
        "Logger"
      ],
      "sorrformalparam": [
        [
          "HttpServletRequest"
        ]
      ],
      "types": [
        "Long"
      ],
      "apicalls": [
        "currentTimeMillis",
        "nextLong"
      ],
      "sequences": [
        {
          "calls": [
            "java.security.SecureRandom.SecureRandom()",
            "java.util.Random.nextLong()",
            "java.lang.System.currentTimeMillis()",
            "java.util.Random.setSeed(long)"
          ]
        }
      ],
      "keywords": [
        "security",
        "current",
        "lang",
        "time",
        "next",
        "long",
        "system"
      ]
    },
    {
      "method": "snapshotWithoutFlush@1500",
      "body": "public void snapshotWithoutFlush(String snapshotName){\n  for (  ColumnFamilyStore cfs : concatWithIndexes()) {\n    DataTracker.View currentView=cfs.markCurrentViewReferenced();\n    try {\n      for (      SSTableReader ssTable : currentView.sstables) {\n        File snapshotDirectory=Directories.getSnapshotDirectory(ssTable.descriptor,snapshotName);\n        ssTable.createLinks(snapshotDirectory.getPath());\n        if (logger.isDebugEnabled())         logger.debug(\"Snapshot for \" + table + \" keyspace data file \"+ ssTable.getFilename()+ \" created in \"+ snapshotDirectory);\n      }\n      if (cfs.compactionStrategy instanceof LeveledCompactionStrategy)       cfs.directories.snapshotLeveledManifest(snapshotName);\n    }\n  finally {\n      SSTableReader.releaseReferences(currentView.sstables);\n    }\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collections.singleton(Tau_T)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.io.File.getPath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Iterable<ColumnFamilyStore>",
        "ByteBuffer",
        "ViewFragment",
        "void",
        "SSTableWriter",
        "List<ColumnFamilyStore>",
        "void",
        "ByteBuffer",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>>.ArrayList<Iterable<ColumnFamilyStore>>(java.util.Collection)",
              "java.util.List<java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>>.add(java.lang.Iterable<org.apache.cassandra.db.ColumnFamilyStore>)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>.size()",
              "java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>.get(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.singleton(Tau_T)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.HashSet<java.lang.String>.HashSet<String>(java.util.Collection)",
              "java.lang.String.format(java.util.Locale,java.lang.String,java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.List<Tau_E>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.concurrent.Future<Tau_V>.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>.size()",
              "java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer>.get(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.singleton(Tau_T)",
              "java.util.concurrent.Future<Tau_V>.get()",
              "java.util.Collections.singleton(Tau_T)",
              "java.io.File.getPath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
              "javax.management.ObjectName.ObjectName(java.lang.String)",
              "javax.management.MBeanServer.isRegistered(javax.management.ObjectName)"
            ]
          },
          {
            "calls": [
              "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
              "javax.management.ObjectName.ObjectName(java.lang.String)",
              "javax.management.MBeanServer.isRegistered(javax.management.ObjectName)",
              "javax.management.MBeanServer.unregisterMBean(javax.management.ObjectName)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cassandra/src/java/org/apache/cassandra/db/ColumnFamilyStore.java",
      "classTypes": [
        "String",
        "ConcurrentMap<ByteBuffer,ByteBuffer>",
        "double",
        "AtomicLong"
      ],
      "sorrformalparam": [
        [],
        [
          "ByteBuffer"
        ],
        [
          "RowPosition",
          "RowPosition"
        ],
        [
          "String",
          "String",
          "String"
        ],
        [
          "long",
          "File",
          "Collection<SSTableReader>"
        ],
        [],
        [],
        [
          "ByteBuffer",
          "Allocator"
        ],
        [
          "String"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Collections.singleton(Tau_T)",
            "java.io.File.getPath()"
          ]
        }
      ],
      "keywords": [
        "get",
        "file"
      ]
    },
    {
      "method": "testLargeRandom@59",
      "body": "public void testLargeRandom(){\n  Random r=new Random(666);\n  SkipList list=new SkipList();\n  int count=10000;\n  double[] original=new double[count];\n  double[] sorted=new double[count];\n  for (int i=0; i < count; i++) {\n    double data=r.nextLong();\n    sorted[i]=data;\n    original[i]=data;\n    list.add(data);\n  }\n  Arrays.sort(sorted);\n  assertEquals(count,list.size());\n  int i=0;\n  for (  double d : sorted) {\n    assertEquals(d,list.get(i++));\n  }\n  for (i=0; i < count; i++) {\n    assertTrue(list.remove(original[i]));\n    assertEquals(count - (i + 1),list.size());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Random.Random(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextLong()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.Arrays.sort(double[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Jackal/framework/src/test/java/com/hellblazer/jackal/util/SkipListTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Long",
        "Arrays",
        "Random"
      ],
      "apicalls": [
        "nextLong",
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Random.Random(long)",
            "java.util.Random.nextLong()",
            "java.util.Arrays.sort(double[])"
          ]
        }
      ],
      "keywords": [
        "next",
        "sort",
        "random",
        "util",
        "double"
      ]
    },
    {
      "method": "addReferences@228",
      "body": "public void addReferences(int parentnum,int childnum,ConfigClass child){\n  addReferenceList(child.classname,child.classname);\n  Bean[] b=beans.toArray(new Bean[0]);\n  for (int i=0; i < parentnum; i++) {\n    List<Integer> numbers=randomUniqueInt(0,beans.size() - 1);\n    while (parentnum-- > 0) {\n      if (parentnum > b.length) {\n        throw new IllegalArgumentException(\"MINILANG: too few instances available [\" + b.length + \"] to reference [\"+ parentnum+ \"] instances.\");\n      }\n      Bean parent=b[numbers.get(parentnum)];\n      Set<Bean> children=child.getInstances(childnum);\n      for (      Bean bean : children) {\n        if (!bean.equals(parent)) {\n          parent.addReference(bean.getId().getSchemaName(),bean.getId());\n        }\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "int",
        "int",
        "ConfigClass"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.shuffle(java.util.List)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Random.Random()",
              "java.util.Random.nextBoolean()",
              "java.util.Random.Random()",
              "java.util.Random.nextInt(int)",
              "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tools4j/config/config-tck/src/main/java/org/deephacks/tools4j/config/test/utils/BeanUnitils.java",
      "classTypes": [
        "String",
        "int",
        "Map<String,String>"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer",
        "ArrayList"
      ],
      "apicalls": [
        "add",
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "java.util.ArrayList<java.lang.Integer>.ArrayList<Integer>()",
            "java.util.List<java.lang.Integer>.add(int,java.lang.Integer)",
            "java.util.Collections.shuffle(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "add"
      ]
    },
    {
      "method": "testToString2@42",
      "body": "public void testToString2(){\n  HashMap<String,String> p=new HashMap<String,String>();\n  p.put(\"charset\",\"utf8\");\n  MediaType mime=new MediaType(\"text\",\"plain\",p);\n  MediaTypeHeaderDelegate hd=new MediaTypeHeaderDelegate();\n  assertEquals(\"text/plain;charset=utf8\",hd.toString(mime));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/ws/exo.ws.rest.core/src/test/java/org/exoplatform/services/rest/impl/header/MediaTypeTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>()",
            "java.util.HashMap<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "map"
      ]
    },
    {
      "method": "toString@4253",
      "body": "@Override public String toString(){\n  StringBuilder sb=new StringBuilder(\"peek_args(\");\n  boolean first=true;\n  sb.append(\"queue_name:\");\n  if (this.queue_name == null) {\n    sb.append(\"null\");\n  }\n else {\n    sb.append(this.queue_name);\n  }\n  first=false;\n  sb.append(\")\");\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.StringBuilder.append(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.StringBuilder"
              }
            ]
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "String",
        "None",
        "boolean",
        "void",
        "String",
        "abort_args",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.BitSet.clear()",
              "java.util.BitSet.or(java.util.BitSet)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "$NOT$java.util.Set<java.lang.Long>.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": []
          },
          {
            "calls": [
              "java.util.BitSet.set(int,boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(int)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<java.lang.Long>.HashSet<Long>()",
              "java.util.Set<java.lang.Long>.add(java.lang.Long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/storm-kestrel/src/jvm/net/lag/kestrel/thrift/Kestrel.java",
      "classTypes": [
        "Map<_Fields,org.apache.thrift7.meta_data.FieldMetaData>",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "Object"
        ],
        [],
        [
          "put_result"
        ],
        [
          "confirm_args"
        ],
        [
          "org.apache.thrift7.protocol.TProtocol"
        ],
        [],
        [],
        []
      ],
      "types": [
        "StringBuilder"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "saveNewPrototype@252",
      "body": "/** \n * Salvar a configuracao atual como prot\u00f3tipo.\n */\npublic void saveNewPrototype(){\n  try {\n    Object obj=JOptionPane.showInputDialog(this.getTopLevelAncestor(),\"Nome do Prot\u00f3tipo\",\"modelo \" + (getPersistentModel().getNumPrototypes() + 1));\n    if (obj != null) {\n      getPersistentModel().saveCurrentConfigAsPrototype(obj.toString());\n    }\n  }\n catch (  BackingStoreException ex) {\n    ex.printStackTrace();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Math.max(int,int)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.lang.Math.max(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumnCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)"
            ]
          },
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Math.max(int,int)",
              "javax.swing.JOptionPane.showMessageDialog(java.awt.Component,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.String,int,javax.swing.Icon,java.lang.Object[],java.lang.Object)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/blink/src/linsoft/gui/bean/PersistentBeanTable.java",
      "classTypes": [
        "TableColumnModel",
        "PropertyChangeListener",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        [],
        [
          "ActionEvent"
        ],
        [],
        [
          "ActionEvent"
        ],
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "Component"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)"
          ]
        },
        {
          "calls": [
            "javax.swing.JOptionPane.showInputDialog(java.awt.Component,java.lang.Object,java.lang.Object)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "component",
        "trace",
        "input",
        "show",
        "throwable",
        "swing",
        "object"
      ]
    },
    {
      "method": "getStats@766",
      "body": "public String getStats(){\n  StringBuffer buf=new StringBuffer();\n  buf.append(\"Tables: \" + idObjectInstances.size() + \"\\n\");\n  for (  Entry<Class<? extends DBObject>,DBIDTypeMeta> e : idObjectInstances.entrySet()) {\n    buf.append(e.getKey().getSimpleName() + \": \" + e.getValue().getInstances().size()+ \" rows\"+ \"\\n\");\n  }\n  return buf.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.entrySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getSimpleName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "List<T>",
        "None",
        "void",
        "void",
        "int",
        "T",
        "None",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean)",
              "javax.xml.parsers.SAXParserFactory.newSAXParser()",
              "java.lang.System.nanoTime()",
              "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)",
              "java.lang.System.nanoTime()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.SAXParserFactory.newInstance()",
              "javax.xml.parsers.SAXParserFactory.setNamespaceAware(boolean)",
              "javax.xml.parsers.SAXParserFactory.newSAXParser()",
              "java.lang.System.nanoTime()",
              "javax.xml.parsers.SAXParser.parse(java.io.File,org.xml.sax.helpers.DefaultHandler)",
              "java.lang.System.nanoTime()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/peerfactsim.kom/src/de/tud/kom/p2psim/impl/util/db/relational/RelationalDB.java",
      "classTypes": [
        "Class<? extends DBObject>",
        "Map<Integer,DBObject>",
        "String"
      ],
      "sorrformalparam": [
        [
          "IDBObjInstantiator"
        ],
        [
          "Class<T>"
        ],
        [
          "int"
        ],
        [
          "File",
          "SAXParserFactory"
        ],
        [
          "String",
          "String",
          "String",
          "Attributes"
        ],
        [
          "DBObject"
        ],
        [
          "String",
          "Class<? extends T>"
        ],
        [],
        [
          "File"
        ]
      ],
      "types": [
        "StringBuffer"
      ],
      "apicalls": [
        "getSimpleName",
        "entrySet"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.util.Map<Tau_K,Tau_V>.size()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.util.Map<Tau_K,Tau_V>.entrySet()",
            "java.lang.Class<Tau_T>.getSimpleName()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "util"
      ]
    },
    {
      "method": "testServerWithPort@46",
      "body": "public void testServerWithPort(){\n  int port=new Random().nextInt(20000) + 10000;\n  Server server=new Server(port);\n  assertEquals(port,server.getConnectors()[0].getPort());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Random.Random()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Random.nextInt(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/qedserver/jetty/modules/jetty/src/test/java/org/mortbay/jetty/ServerTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Integer",
        "Random"
      ],
      "apicalls": [
        "nextInt"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Random.Random()",
            "java.util.Random.nextInt(int)"
          ]
        }
      ],
      "keywords": [
        "int",
        "integer",
        "util",
        "next",
        "random"
      ]
    },
    {
      "method": "installUI@319",
      "body": "public void installUI(JComponent c){\n  header=(JTableHeader)c;\n  rendererPane=new CellRendererPane();\n  header.add(rendererPane);\n  installDefaults();\n  installListeners();\n  installKeyboardActions();\n}\n",
      "formalParam": [
        "JComponent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Container.add(java.awt.Component)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Component"
          },
          {
            "_call": "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Component.addFocusListener(java.awt.event.FocusListener)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "$NOT$javax.swing.JComponent.isPaintingForPrint()",
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "java.awt.Component.getPreferredSize()",
              "java.awt.Component.getBaseline(int,int)",
              "javax.swing.table.TableColumnModel.getColumnCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.moveColumn(int,int)",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Component.contains(java.awt.Point)"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumnCount()",
              "javax.swing.table.TableColumnModel.moveColumn(int,int)",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Component.contains(java.awt.Point)",
              "java.awt.event.MouseEvent.getPoint()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Rectangle.grow(int,int)",
              "java.awt.Rectangle.contains(java.awt.Point)",
              "java.awt.Component.getComponentOrientation()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "java.awt.Component.getComponentOrientation()"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Rectangle.grow(int,int)",
              "java.awt.Rectangle.contains(java.awt.Point)",
              "java.awt.Component.getComponentOrientation()",
              "javax.swing.table.TableColumnModel.getColumn(int)",
              "javax.swing.table.TableColumnModel.getColumn(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Component.contains(java.awt.Point)"
            ]
          },
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.event.MouseEvent.getPoint()",
              "java.awt.Component.contains(java.awt.Point)",
              "java.awt.event.MouseEvent.getPoint()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)",
              "javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)",
              "javax.swing.SwingUtilities.replaceUIActionMap(javax.swing.JComponent,javax.swing.ActionMap)",
              "java.awt.Container.remove(java.awt.Component)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/plaf/basic/BasicTableHeaderUI.java",
      "classTypes": [
        "MouseInputListener",
        "JTableHeader",
        "String",
        "String",
        "int",
        "CellRendererPane"
      ],
      "sorrformalparam": [
        [
          "JComponent",
          "int",
          "int"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "JComponent"
        ]
      ],
      "types": [
        "MouseMotionListener",
        "SwingUtilities"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Container.add(java.awt.Component)",
            "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
            "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)",
            "java.awt.Component.addFocusListener(java.awt.event.FocusListener)",
            "javax.swing.SwingUtilities.replaceUIInputMap(javax.swing.JComponent,int,javax.swing.InputMap)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "clear@745",
      "body": "/** \n * Removes all of the elements from this list. The list will be empty after this call returns.\n */\npublic void clear(){\n  final ReentrantLock lock=this.lock;\n  lock.lock();\n  try {\n    setArray(new Object[0]);\n  }\n  finally {\n    lock.unlock();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.lock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.locks.ReentrantLock.unlock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Iterator<E>",
        "List<E>",
        "int",
        "List<E>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.List<Tau_E>.listIterator(int)",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collection<Tau_E>.toArray()",
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.Arrays.copyOf(T[],int)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantLock.lock()",
              "java.util.concurrent.locks.ReentrantLock.unlock()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ikvm-openjdk/jdk/src/share/classes/java/util/concurrent/CopyOnWriteArrayList.java",
      "classTypes": [
        "Object[]",
        "Unsafe",
        "int",
        "ReentrantLock",
        "Object[]",
        "CopyOnWriteArrayList<E>"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "int"
        ],
        [
          "Collection<? extends E>"
        ],
        [
          "int",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "lock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantLock.lock()",
            "java.util.concurrent.locks.ReentrantLock.unlock()"
          ]
        }
      ],
      "keywords": [
        "locks",
        "unlock",
        "lock"
      ]
    },
    {
      "method": "test_getSystemClassLoader@199",
      "body": "/** \n * @tests java.lang.ClassLoader#getSystemClassLoader()\n */\npublic void test_getSystemClassLoader(){\n  ClassLoader cl=ClassLoader.getSystemClassLoader();\n  java.io.InputStream is=cl.getResourceAsStream(\"hyts_Foo.c\");\n  assertNotNull(\"Failed to find resource from system classpath\",is);\n  try {\n    is.close();\n  }\n catch (  java.io.IOException e) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ClassLoader.getSystemClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "Class<?>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ClassLoader.getSystemClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.lang.ClassLoader.getSystemClassLoader()",
              "java.lang.ClassLoader.getResource(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.InputStream.close()",
              "java.lang.Throwable.getMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ClassLoader.getSystemClassLoader()",
              "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.lang.ClassLoader.getSystemClassLoader()",
              "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
              "java.io.InputStream.close()",
              "java.lang.Throwable.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)"
            ]
          },
          {
            "calls": [
              "java.lang.Class.forName(java.lang.String,boolean,java.lang.ClassLoader)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getClassLoader()",
              "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getPackage()",
              "java.lang.Package.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
              "java.io.InputStream.read(byte[])",
              "java.lang.ClassLoader.defineClass(byte[],int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getProtectionDomain()",
              "java.security.Permission.newPermissionCollection()",
              "java.lang.Class<Tau_T>.getProtectionDomain()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/luni/src/test/api/common/org/apache/harmony/luni/tests/java/lang/ClassLoaderTest.java",
      "classTypes": [
        "byte[]",
        "ClassLoader",
        "int",
        "PermissionCollection",
        "boolean",
        "Object"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [
        "getResourceAsStream"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.ClassLoader.getSystemClassLoader()",
            "java.lang.ClassLoader.getResourceAsStream(java.lang.String)",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "class",
        "close",
        "loader",
        "string",
        "io",
        "exception",
        "get"
      ]
    },
    {
      "method": "deleteChannel@546",
      "body": "/** \n * Deletes the Podcast channel with the given ID.\n * @param channelId The Podcast channel ID.\n */\npublic void deleteChannel(int channelId){\n  List<PodcastEpisode> episodes=getEpisodes(channelId,false);\n  for (  PodcastEpisode episode : episodes) {\n    deleteEpisode(episode.getId(),false);\n  }\n  podcastDao.deleteChannel(channelId);\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.delete()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.Future<Tau_V>.cancel(boolean)",
              "java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)",
              "java.lang.System.currentTimeMillis()",
              "java.util.Date.Date(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.exists()",
              "java.io.File.delete()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/supersonic/subsonic-main/src/main/java/net/sourceforge/subsonic/service/PodcastService.java",
      "classTypes": [
        "Logger",
        "ScheduledExecutorService",
        "DateFormat[]",
        "ExecutorService"
      ],
      "sorrformalparam": [
        [],
        [
          "int",
          "boolean"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "delete",
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()",
            "java.io.File.delete()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.io.File.exists()"
          ]
        }
      ],
      "keywords": [
        "io",
        "boolean",
        "string",
        "delete",
        "file"
      ]
    },
    {
      "method": "getAudioInputStream@722",
      "body": "public static AudioInputStream getAudioInputStream(AudioFormat targetFormat,AudioInputStream sourceStream){\n  return getAudioInputStreamImpl(targetFormat,sourceStream);\n}\n",
      "formalParam": [
        "AudioFormat",
        "AudioInputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "AudioInputStream",
        "AudioFileFormat.Type[]",
        "AudioFormat.Encoding[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collection<javax.sound.sampled.AudioFormat.Encoding>.addAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashSet<javax.sound.sampled.AudioFileFormat.Type>.HashSet<Type>()",
              "java.util.Iterator.hasNext()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.add(javax.sound.sampled.AudioFileFormat.Type)",
              "java.util.Iterator.hasNext()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.size()",
              "java.util.Set<javax.sound.sampled.AudioFileFormat.Type>.toArray(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()",
              "java.util.Collection<javax.sound.sampled.AudioFormat.Encoding>.toArray(T[])"
            ]
          }
        ]
      ],
      "returnType": "AudioInputStream",
      "file": "./java_projects/Konsolenradio/src/main/resources/tritonus/src/classes/javax/sound/sampled/AudioSystem.java",
      "classTypes": [
        "Object",
        "Collection<AudioFormat.Encoding>",
        "Set<Line.Info>",
        "AudioFormat",
        "Set<Line.Info>"
      ],
      "sorrformalparam": [
        [
          "FormatConversionProvider"
        ],
        [
          "AudioFileFormat.Type"
        ],
        [
          "AudioFormat.Encoding",
          "AudioInputStream"
        ],
        [
          "AudioInputStream"
        ],
        [
          "AudioFormat"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "hasNext"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "boolean"
      ]
    },
    {
      "method": "getMimeType@356",
      "body": "public static String getMimeType(GenericValue dataResource){\n  String mimeTypeId=null;\n  if (dataResource != null) {\n    mimeTypeId=(String)dataResource.get(\"mimeTypeId\");\n    if (UtilValidate.isEmpty(mimeTypeId)) {\n      String fileName=(String)dataResource.get(\"objectInfo\");\n      if (fileName != null && fileName.indexOf('.') > -1) {\n        String fileExtension=fileName.substring(fileName.lastIndexOf('.') + 1);\n        if (UtilValidate.isNotEmpty(fileExtension)) {\n          GenericValue ext=null;\n          try {\n            ext=dataResource.getDelegator().findOne(\"FileExtension\",UtilMisc.toMap(\"fileExtensionId\",fileExtension),false);\n          }\n catch (          GenericEntityException e) {\n            Debug.logError(e,module);\n          }\n          if (ext != null) {\n            mimeTypeId=ext.getString(\"mimeTypeId\");\n          }\n        }\n      }\n      if (UtilValidate.isEmpty(mimeTypeId)) {\n        mimeTypeId=\"application/octet-stream\";\n      }\n    }\n  }\n  return mimeTypeId;\n}\n",
      "formalParam": [
        "GenericValue"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.indexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.lastIndexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "ByteBuffer",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toByteArray()",
              "java.nio.ByteBuffer.wrap(byte[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(java.lang.String)",
              "java.lang.String.substring(int)",
              "java.lang.String.toLowerCase()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ofbiz/applications/content/src/org/ofbiz/content/data/DataResourceWorker.java",
      "classTypes": [
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "GenericValue",
          "Map<String,Object>"
        ],
        [
          "Delegator",
          "String",
          "String",
          "String",
          "Locale",
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "lastIndexOf",
        "indexOf"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(int)",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)"
          ]
        },
        {
          "calls": [
            "java.lang.String.indexOf(int)"
          ]
        }
      ],
      "keywords": [
        "index",
        "integer",
        "substring"
      ]
    },
    {
      "method": "InjectionMetadata@56",
      "body": "public InjectionMetadata(Class targetClass,Collection<InjectedElement> elements){\n  if (!elements.isEmpty()) {\n    this.injectedElements=Collections.synchronizedSet(new LinkedHashSet<InjectedElement>(elements.size()));\n    for (    InjectedElement element : elements) {\n      if (logger.isDebugEnabled()) {\n        logger.debug(\"Found injected element on class [\" + targetClass.getName() + \"]: \"+ element);\n      }\n      this.injectedElements.add(element);\n    }\n  }\n else {\n    this.injectedElements=Collections.emptySet();\n  }\n}\n",
      "formalParam": [
        "Class",
        "Collection<InjectedElement>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Collections.emptySet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.util.Collection<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collection<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Collections.synchronizedSet(java.util.Set)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              },
              {
                "_call": "java.lang.Class.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.Set<Tau_E>.add(Tau_E)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Set<Tau_E>.iterator()",
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.remove()",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/spring-framework/spring-beans/src/main/java/org/springframework/beans/factory/annotation/InjectionMetadata.java",
      "classTypes": [
        "Set<InjectedElement>",
        "Boolean"
      ],
      "sorrformalparam": [
        [
          "RootBeanDefinition"
        ]
      ],
      "types": [],
      "apicalls": [
        "isEmpty",
        "synchronizedSet"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collections.emptySet()"
          ]
        },
        {
          "calls": [
            "$NOT$java.util.Collection<Tau_E>.isEmpty()",
            "java.util.Collection<Tau_E>.size()",
            "java.util.LinkedHashSet<Tau_E>.LinkedHashSet(int)",
            "java.util.Collections.synchronizedSet(java.util.Set)",
            "java.lang.Class.getName()",
            "java.util.Set<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "class",
        "get",
        "synchronized",
        "size"
      ]
    },
    {
      "method": "getLayerOpacity@762",
      "body": "/** \n * Returns the layer opacity for a layer.\n * @param layer Layer to get opacity for\n * @return Layer opacity, -1 if layer has no opacity set.\n */\npublic int getLayerOpacity(final int layer){\n  int ret=-1;\n  if (_layerOpacityMap.containsKey(new Integer(layer))) {\n    ret=((Integer)_layerOpacityMap.get(new Integer(layer))).intValue();\n  }\n  return ret;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Integer.Integer(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Map.containsKey(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.intValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "void",
        "void",
        "void",
        "void",
        "boolean",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.clear()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Set.isEmpty()",
              "java.util.Set.clear()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.size()",
              "java.util.List.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.remove(java.lang.Object)",
              "java.util.List.add(int,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List.clear()",
              "java.util.Set.toArray()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/nebula/widgets/ganttchart/org.eclipse.nebula.widgets.ganttchart/src/org/eclipse/nebula/widgets/ganttchart/GanttComposite.java",
      "classTypes": [
        "Color",
        "int",
        "int",
        "GanttChart",
        "boolean",
        "boolean",
        "Set",
        "Color"
      ],
      "sorrformalparam": [
        [
          "GanttEvent",
          "GanttEvent"
        ],
        [],
        [
          "GanttEvent"
        ],
        [],
        [
          "GanttSection",
          "int"
        ],
        [
          "GanttEvent"
        ],
        [
          "boolean"
        ],
        [
          "GanttEvent",
          "int"
        ],
        []
      ],
      "types": [
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map.containsKey(java.lang.Object)",
            "java.lang.Integer.intValue()"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.Integer(int)",
            "java.util.Map.containsKey(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "key",
        "contains"
      ]
    },
    {
      "method": "addFiles@196",
      "body": "public Cmd addFiles(List files){\n  for (Iterator iter=files.iterator(); iter.hasNext(); ) {\n    addFile((String)iter.next());\n  }\n  return this;\n}\n",
      "formalParam": [
        "List"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.List.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Cmd",
        "File",
        "Cmd",
        "Cmd",
        "Cmd"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.StringTokenizer.StringTokenizer(java.lang.String)",
              "java.util.StringTokenizer.hasMoreTokens()",
              "java.util.StringTokenizer.nextToken()",
              "java.util.List.add(java.lang.Object)",
              "java.util.StringTokenizer.hasMoreTokens()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File,boolean)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.FileOutputStream.write(byte[],int,int)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.File.getPath()",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File,boolean)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.FileOutputStream.write(byte[],int,int)",
              "java.io.FileInputStream.read(byte[])",
              "java.io.File.getPath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.File.getPath()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getPath()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.File.getPath()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Cmd",
      "file": "./java_projects/SPREAD/release/tools/launch4j/src/net/sf/launch4j/Builder.java",
      "classTypes": [
        "Log",
        "File",
        "File"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [],
        [
          "String"
        ],
        [
          "File"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.List.iterator()",
            "java.util.Iterator.hasNext()",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.getPath()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "file"
      ]
    },
    {
      "method": "getServiceReferences@328",
      "body": "/** \n * Returns an array of ServiceReference objects for all services being tracked by this Tracker object.\n * @return Array of ServiceReference objects or <code>null</code> if no service are being tracked.\n */\npublic ServiceReference[] getServiceReferences(){\n  Tracked tracked=this.m_tracked;\n  if (tracked == null) {\n    return null;\n  }\nsynchronized (tracked) {\n    int length=tracked.size();\n    if (length == 0) {\n      return null;\n    }\n    ServiceReference[] references=new ServiceReference[length];\n    Iterator keys=tracked.keySet().iterator();\n    for (int i=0; i < length; i++) {\n      references[i]=(ServiceReference)keys.next();\n    }\n    return references;\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.HashMap.keySet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Set"
          },
          {
            "_call": "java.util.Set.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "None",
        "List",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(int)",
              "java.util.LinkedList.LinkedList()",
              "java.util.List.isEmpty()",
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.util.List.contains(java.lang.Object)",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList(int)",
              "java.util.LinkedList.LinkedList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.size()",
              "java.util.ArrayList.ArrayList(int)",
              "java.util.HashMap.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap.get(java.lang.Object)",
              "java.util.HashMap.containsKey(java.lang.Object)",
              "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashMap.get(java.lang.Object)",
              "java.util.HashMap.containsKey(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "ServiceReference[]",
      "file": "./java_projects/felix/ipojo/runtime/core/src/main/java/org/apache/felix/ipojo/util/Tracker.java",
      "classTypes": [
        "long",
        "String",
        "TrackerCustomizer",
        "Filter",
        "ServiceReference"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "ServiceReference"
        ]
      ],
      "types": [
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.size()",
            "java.util.HashMap.keySet()",
            "java.util.Set.iterator()"
          ]
        }
      ],
      "keywords": [
        "key"
      ]
    },
    {
      "method": "testBug54175@6534",
      "body": "public void testBug54175() throws Exception {\n  if (!versionMeetsMinimum(5,5)) {\n    return;\n  }\n  Connection utf8conn=getConnectionWithProps(\"characterEncoding=utf8\");\n  createTable(\"testBug54175\",\"(a VARCHAR(10)) CHARACTER SET utf8mb4\");\n  stmt.execute(\"INSERT INTO testBug54175 VALUES(0xF0AFA6B2)\");\n  rs=utf8conn.createStatement().executeQuery(\"SELECT * FROM testBug54175\");\n  assertTrue(rs.next());\n  assertEquals(55422,rs.getString(1).charAt(0));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.sql.Connection.createStatement()",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.Statement"
          },
          {
            "_call": "java.sql.Statement.executeQuery(java.lang.String)",
            "_throws": [
              "java.sql.SQLException"
            ],
            "node": "DAPICall",
            "_returns": "java.sql.ResultSet"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.lang.Thread.sleep(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.PreparedStatement.setString(int,java.lang.String)",
              "java.sql.PreparedStatement.executeUpdate()",
              "java.sql.Statement.getGeneratedKeys()",
              "java.sql.ResultSet.next()",
              "java.sql.ResultSet.getInt(int)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.sql.ResultSet.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Properties.Properties()",
              "java.util.Properties.setProperty(java.lang.String,java.lang.String)",
              "java.sql.Connection.prepareStatement(java.lang.String)",
              "java.sql.Connection.close()",
              "java.sql.Statement.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.sql.Statement.executeQuery(java.lang.String)",
              "java.sql.ResultSet.moveToInsertRow()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.sql.ResultSet.updateBinaryStream(java.lang.String,java.io.InputStream,int)",
              "java.sql.ResultSet.insertRow()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/ChenSun/Phase2/jars/mysql-connector-java-5.1.18/src/testsuite/regression/StatementRegressionTest.java",
      "classTypes": [
        "int",
        "boolean",
        "boolean",
        "int[][]",
        "Connection",
        "boolean",
        "boolean",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.sql.Connection.createStatement()",
            "java.sql.Statement.executeQuery(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "connection"
      ]
    },
    {
      "method": "postUpdateUI@1193",
      "body": "/** \n * Attempts to clean up the damage done by  {@link #updateUI()}.\n */\npublic synchronized void postUpdateUI(){\n  setCaret(getCaret());\n  select(outputMark,outputMark);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.JTextComponent.getCaret()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.text.Caret"
          },
          {
            "_call": "javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "void",
        "void",
        "String",
        "void",
        "void",
        "JTree",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.InputEvent.getModifiers()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()"
            ]
          },
          {
            "calls": [
              "java.awt.event.InputEvent.getModifiers()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JSplitPane.setDividerLocation(double)",
              "javax.swing.JInternalFrame.setMaximum(boolean)",
              "javax.swing.JInternalFrame.setSelected(boolean)",
              "javax.swing.JInternalFrame.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JTextArea.insert(java.lang.String,int)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()",
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.isPopupTrigger()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getSystemEventQueue()",
              "java.util.EventObject.getSource()",
              "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()",
              "java.awt.event.MouseEvent.getY()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "long",
        "String",
        "SwingGui",
        "SwingGui",
        "FilePopupMenu",
        "long",
        "JButton",
        "JList",
        "JButton"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ],
        [
          "Component"
        ],
        [
          "boolean"
        ],
        [
          "String"
        ],
        [
          "MouseEvent"
        ],
        [
          "Component"
        ],
        [],
        [
          "MouseEvent"
        ],
        [
          "TreeTableModel"
        ],
        [
          "MouseEvent"
        ]
      ],
      "types": [],
      "apicalls": [
        "getCaret"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.JTextComponent.getCaret()",
            "javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)"
          ]
        }
      ],
      "keywords": [
        "swing",
        "caret"
      ]
    },
    {
      "method": "canZoomIn@7375",
      "body": "/** \n * @return TRUE if the WebView can be zoomed in.\n */\npublic boolean canZoomIn(){\n  checkThread();\n  return mZoomManager.canZoomIn();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Thread.currentThread()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Thread"
          },
          {
            "_call": "java.lang.Thread.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Throwable.Throwable(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Thread.currentThread()",
              "java.lang.Thread.getName()",
              "java.lang.Throwable.Throwable(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/frameworks_base/core/java/android/webkit/WebView.java",
      "classTypes": [
        "HitTestResult",
        "int",
        "int"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Thread"
      ],
      "apicalls": [
        "currentThread"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Thread.currentThread()",
            "java.lang.Thread.getName()",
            "java.lang.Throwable.Throwable(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "thread"
      ]
    },
    {
      "method": "retrieveTagContents@49",
      "body": "/** \n * Retrieves the content of the child tag if it's found enclosed by the parent tag.\n * @param parentTag the name of the parent tag.\n * @param childTag the name of the child tag.\n * @return a <tt>String</tt> containing the data.\n */\npublic static String retrieveTagContents(String parentTag,String childTag){\n  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();\n  String contents=\"\";\n  try {\n    DocumentBuilder docBuilder=factory.newDocumentBuilder();\n    InputStream input=ConfigurationXMLParser.class.getResourceAsStream(ConfigurationConstants.DEFAULT_CONFIG_FILE);\n    Document document=docBuilder.parse(input);\n    NodeList parentNodeList=document.getElementsByTagName(parentTag);\n    Element parentElement=(Element)parentNodeList.item(0);\n    NodeList childNodeList=parentElement.getElementsByTagName(childTag);\n    Element childElement=(Element)childNodeList.item(0);\n    contents=childElement.getFirstChild().getNodeValue();\n    input.close();\n  }\n catch (  ParserConfigurationException e) {\n    Logger.error(\"Error parsing configuration XML\",e);\n  }\ncatch (  SAXException e) {\n    Logger.error(\"Error parsing configuration XML\",e);\n  }\ncatch (  IOException e) {\n    Logger.error(\"Error parsing configuration XML\",e);\n  }\n  return contents.trim() + \"\\n\";\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.InputStream"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.io.InputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
              "java.lang.String.equals(java.lang.Object)",
              "java.io.InputStream.close()",
              "java.lang.String.trim()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/dolphin/org.adarsh.jutils(1.4)/src/org/adarsh/jutils/internal/ConfigurationXMLParser.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "String",
          "String",
          "String"
        ]
      ],
      "types": [
        "InputStream",
        "DocumentBuilderFactory"
      ],
      "apicalls": [
        "getResourceAsStream",
        "trim",
        "parse",
        "close"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
            "javax.xml.parsers.DocumentBuilder.parse(java.io.InputStream)",
            "java.io.InputStream.close()",
            "java.lang.String.trim()"
          ]
        }
      ],
      "keywords": [
        "parsers",
        "trim",
        "factory"
      ]
    },
    {
      "method": "EventHandler@43",
      "body": "EventHandler(Object target,Method method){\n  if (target == null) {\n    throw new NullPointerException(\"EventHandler target cannot be null.\");\n  }\n  if (method == null) {\n    throw new NullPointerException(\"EventHandler method cannot be null.\");\n  }\n  this.target=target;\n  this.method=method;\n  method.setAccessible(true);\n  final int prime=31;\n  hashCode=(prime + method.hashCode()) * prime + target.hashCode();\n}\n",
      "formalParam": [
        "Object",
        "Method"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.reflect.Method.hashCode()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/otto/library/src/main/java/com/squareup/otto/EventHandler.java",
      "classTypes": [
        "int",
        "Object",
        "Method"
      ],
      "sorrformalparam": [],
      "types": [
        "SecurityException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "java.lang.reflect.Method.hashCode()"
          ]
        }
      ],
      "keywords": [
        "object"
      ]
    },
    {
      "method": "main@37",
      "body": "/** \n * For verification of a modicum of sanity, run a few  test strings through\n */\npublic static void main(String argv[]){\n  String str[]={\"\",\"a\",\"abc\",\"message digest\",\"abcdefghijklmnopqrstuvwxyz\",\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\"12345678901234567890123456789012345678901234567890123456789012345678901234567890\",\"01234567890123456789012345678901234567890123456789012345\"};\n  for (int i=0; i < str.length; i++) {\n    md4 mdc=new md4(str[i]);\n    mdc.calc();\n    System.out.println(\"md4(\\\"\" + str[i] + \"\\\") = \"+ mdc);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "_call": "java.io.PrintStream.println(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Ganymede/src/ganymede/arlut/csd/crypto/md4.java",
      "classTypes": [
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "stream",
        "integer"
      ]
    },
    {
      "method": "deleteReport@166",
      "body": "public void deleteReport(String reportname) throws ReportingException {\n  String type=MetadataFinder.findReportType(reportname);\n  if (type.equalsIgnoreCase(ReportConstants.TABLE_TYPE)) {\n    new TableReportMetaDataHandler().removeMetaData(reportname);\n  }\n else   if (type.equalsIgnoreCase(ReportConstants.COMPOSITE_TYPE)) {\n    new CompositeReportMetaDataHandler().removeMetaData(reportname);\n  }\n else {\n    new ChartMetaDataHandler().removeMetaData(reportname);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/platform/components/reporting/org.wso2.carbon.reporting.template.core/src/main/java/org/wso2/carbon/reporting/template/core/service/ReportTemplateAdmin.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "testHead@256",
      "body": "@Test public void testHead() throws ServletException, IOException {\n  StaticContentServlet servlet=new StaticContentServlet();\n  ServletContext context=mock(ServletContext.class);\n  when(context.getServletContextName()).thenReturn(\"foo\");\n  when(context.getMimeType(anyString())).thenReturn(\"image/png\");\n  ServletConfig config=mock(ServletConfig.class);\n  when(config.getInitParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"root\")));\n  when(config.getInitParameter(\"root\")).thenReturn(getFileSystemRoot());\n  when(config.getServletContext()).thenReturn(context);\n  servlet.init(config);\n  HttpServletRequest request=mock(HttpServletRequest.class);\n  when(request.getMethod()).thenReturn(\"HEAD\");\n  when(request.getPathInfo()).thenReturn(IMAGE_RESOURCE);\n  when(request.getRequestURI()).thenReturn(\"/foo\" + IMAGE_RESOURCE);\n  when(request.getContextPath()).thenReturn(\"/foo\");\n  ServletOutputStream stream=mock(ServletOutputStream.class);\n  HttpServletResponse response=mock(HttpServletResponse.class);\n  when(response.getOutputStream()).thenReturn(stream);\n  servlet.service(request,response);\n  verify(response).setStatus(HttpServletResponse.SC_OK);\n  verifyZeroInteractions(stream);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.Collections.enumeration(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getResource(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.URL"
          },
          {
            "_call": "java.net.URL.toURI()",
            "_throws": [
              "java.net.URISyntaxException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.URI"
          },
          {
            "_call": "java.io.File.File(java.net.URI)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.getParentFile()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.io.File"
          },
          {
            "_call": "java.io.File.getAbsolutePath()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collections.enumeration(java.util.Collection)",
              "java.lang.Class<Tau_T>.getResource(java.lang.String)",
              "java.net.URL.toURI()",
              "java.io.File.File(java.net.URI)",
              "java.io.File.getParentFile()",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collections.enumeration(java.util.Collection)",
              "java.lang.Class<Tau_T>.getResource(java.lang.String)",
              "java.net.URL.toURI()",
              "java.io.File.File(java.net.URI)",
              "java.io.File.getParentFile()",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collections.enumeration(java.util.Collection)",
              "java.lang.Class<Tau_T>.getResource(java.lang.String)",
              "java.net.URL.toURI()",
              "java.io.File.File(java.net.URI)",
              "java.io.File.getParentFile()",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collections.enumeration(java.util.Collection)",
              "java.lang.Class<Tau_T>.getResource(java.lang.String)",
              "java.net.URL.toURI()",
              "java.io.File.File(java.net.URI)",
              "java.io.File.getParentFile()",
              "java.io.File.getAbsolutePath()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.enumeration(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.Collections.enumeration(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/TwelveMonkeys/servlet/src/test/java/com/twelvemonkeys/servlet/StaticContentServletTestCase.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Arrays",
        "URL",
        "Enumeration"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.asList(T[])",
            "java.util.Collections.enumeration(java.util.Collection)",
            "java.lang.Class<Tau_T>.getResource(java.lang.String)",
            "java.net.URL.toURI()",
            "java.io.File.File(java.net.URI)",
            "java.io.File.getParentFile()",
            "java.io.File.getAbsolutePath()"
          ]
        }
      ],
      "keywords": [
        "get",
        "lang"
      ]
    },
    {
      "method": "launch@25",
      "body": "@Override public void launch(){\n  Scanner cin=new Scanner(in);\n  out.println(\"****** Commmand shell application *****\");\n  while (true) {\n    out.print(\"> \");\n    out.flush();\n    String inLine=cin.nextLine();\n    ctrl.search(inLine);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Scanner.Scanner(java.lang.Readable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Scanner.nextLine()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/mpd-2012-i41N/aula29/src/main/java/movq/views/UiRequestConsole.java",
      "classTypes": [
        "IMovieController"
      ],
      "sorrformalparam": [],
      "types": [
        "Readable",
        "Scanner",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Scanner.Scanner(java.lang.Readable)",
            "java.util.Scanner.nextLine()"
          ]
        }
      ],
      "keywords": [
        "util",
        "string",
        "line",
        "readable"
      ]
    },
    {
      "method": "dispatchNextGuiEvent@776",
      "body": "/** \n * Processes the next GUI event.\n */\npublic void dispatchNextGuiEvent() throws InterruptedException {\n  EventQueue queue=awtEventQueue;\n  if (queue == null) {\n    queue=Toolkit.getDefaultToolkit().getSystemEventQueue();\n    awtEventQueue=queue;\n  }\n  AWTEvent event=queue.getNextEvent();\n  if (event instanceof ActiveEvent) {\n    ((ActiveEvent)event).dispatch();\n  }\n else {\n    Object source=event.getSource();\n    if (source instanceof Component) {\n      Component comp=(Component)source;\n      comp.dispatchEvent(event);\n    }\n else     if (source instanceof MenuComponent) {\n      ((MenuComponent)source).dispatchEvent(event);\n    }\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Toolkit.getDefaultToolkit()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Toolkit"
          },
          {
            "_call": "java.awt.Toolkit.getSystemEventQueue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.EventQueue"
          },
          {
            "_call": "java.util.EventObject.getSource()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.awt.Component.dispatchEvent(java.awt.AWTEvent)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "JTree",
        "void",
        "void",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.InputEvent.getModifiers()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()"
            ]
          },
          {
            "calls": [
              "java.awt.event.InputEvent.getModifiers()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.getFont()",
              "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
              "java.awt.FontMetrics.getHeight()",
              "java.awt.event.MouseEvent.getY()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JSplitPane.setDividerLocation(double)",
              "javax.swing.JInternalFrame.setMaximum(boolean)",
              "javax.swing.JInternalFrame.setSelected(boolean)",
              "javax.swing.JInternalFrame.show()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/etherpad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "SwingGui",
        "Runnable",
        "Vector",
        "Menubar",
        "long",
        "JLabel",
        "JToolBar"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ],
        [
          "MouseEvent"
        ],
        [
          "TreeTableModel"
        ],
        [
          "MouseEvent"
        ],
        [
          "boolean"
        ],
        [
          "Component"
        ],
        [
          "MouseEvent"
        ]
      ],
      "types": [
        "Toolkit",
        "EventObject"
      ],
      "apicalls": [
        "getDefaultToolkit"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.Toolkit.getDefaultToolkit()",
            "java.awt.Toolkit.getSystemEventQueue()",
            "java.util.EventObject.getSource()",
            "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
          ]
        }
      ],
      "keywords": [
        "dispatch",
        "util",
        "get",
        "queue"
      ]
    },
    {
      "method": "getChanges@89",
      "body": "@Override public List<UcmActivity> getChanges(Date time,String viewName,String[] branchNames,String[] viewPaths) throws IOException, InterruptedException {\n  List<UcmActivity> history=new ArrayList<UcmActivity>();\n  boolean ok=false;\n  IOException exception=null;\n  for (  String path : viewPaths) {\n    try {\n      String fullpath=viewName + File.separator + path;\n      BufferedReader reader=new BufferedReader(cleartool.lshistory(historyHandler.getFormat() + COMMENT + LINEEND,time,viewName,branchNames[0],new String[]{fullpath},filter.requiresMinorEvents(),false));\n      history.addAll(parseHistory(reader,viewName));\n      reader.close();\n      ok=true;\n    }\n catch (    IOException e) {\n      exception=e;\n    }\n  }\n  if (ok || exception == null) {\n    return history;\n  }\n else {\n    throw exception;\n  }\n}\n",
      "formalParam": [
        "Date",
        "String",
        "String[]",
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "List<UcmActivity>",
      "file": "./java_projects/clearcase-plugin/src/main/java/hudson/plugins/clearcase/ucm/UcmChangeLogAction.java",
      "classTypes": [
        "Map<String,UcmActivity>",
        "String",
        "SimpleDateFormat"
      ],
      "sorrformalparam": [],
      "types": [
        "IOException",
        "Reader"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.BufferedReader.close()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "array"
      ]
    },
    {
      "method": "mouseDragged@408",
      "body": "@Override public void mouseDragged(MouseEvent e){\n  int x=e.getX();\n  int y=e.getY();\n  tmat.unit();\n  float xtheta=(prevy - y) * (360.0f / getSize().width);\n  float ytheta=(x - prevx) * (360.0f / getSize().height);\n  tmat.xrot(xtheta);\n  tmat.yrot(ytheta);\n  amat.mult(tmat);\n  if (painted) {\n    painted=false;\n    repaint();\n  }\n  prevx=x;\n  prevy=y;\n  e.consume();\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.event.MouseEvent.getX()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.MouseEvent.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.Component.repaint()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.event.InputEvent.consume()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getX()",
              "java.awt.event.MouseEvent.getY()",
              "java.awt.event.InputEvent.consume()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.removeMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.removeMouseMotionListener(java.awt.event.MouseMotionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Float.valueOf(java.lang.String)",
              "java.lang.Float.floatValue()",
              "java.awt.Component.createImage(int,int)",
              "java.awt.Graphics.dispose()",
              "java.awt.Image.getGraphics()",
              "java.awt.Component.getSize()",
              "java.awt.Component.addMouseListener(java.awt.event.MouseListener)",
              "java.awt.Component.addMouseMotionListener(java.awt.event.MouseMotionListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/demo/applets/MoleculeViewer/XYZApp.java",
      "classTypes": [
        "Graphics",
        "String",
        "int",
        "float",
        "Map<String,Atom>",
        "Dimension"
      ],
      "sorrformalparam": [
        [
          "MouseEvent"
        ],
        [],
        [],
        []
      ],
      "types": [
        "Component"
      ],
      "apicalls": [
        "consume",
        "getY"
      ],
      "sequences": [
        {
          "calls": [
            "java.awt.event.MouseEvent.getX()",
            "java.awt.event.MouseEvent.getY()",
            "java.awt.Component.repaint()",
            "java.awt.event.InputEvent.consume()"
          ]
        }
      ],
      "keywords": [
        "component",
        "event",
        "consume",
        "input",
        "repaint"
      ]
    },
    {
      "method": "scanSources@125",
      "body": "/** \n * Scan all source class files for annotations and process them.\n */\npublic List<ClassDescription> scanSources() throws SCRDescriptorException, SCRDescriptorFailureException {\n  final List<ClassDescription> result=new ArrayList<ClassDescription>();\n  for (  final Source src : project.getSources()) {\n    if (src.getFile().getName().equals(\"package-info.java\")) {\n      log.debug(\"Skipping file \" + src.getClassName());\n      continue;\n    }\n    log.debug(\"Scanning class \" + src.getClassName());\n    try {\n      final Class<?> annotatedClass=project.getClassLoader().loadClass(src.getClassName());\n      final ClassDescription desc=this.processClass(annotatedClass,src.getFile().toString());\n      if (desc != null) {\n        this.allDescriptions.put(annotatedClass.getName(),desc);\n        if (desc.getDescriptions(ComponentDescription.class).size() > 0) {\n          result.add(desc);\n          log.debug(\"Found component description \" + desc + \" in \"+ annotatedClass.getName());\n        }\n      }\n else {\n        this.allDescriptions.put(annotatedClass.getName(),new ClassDescription(annotatedClass,GENERATED));\n      }\n    }\n catch (    final ClassNotFoundException cnfe) {\n      throw new SCRDescriptorFailureException(\"Unable to load compiled class: \" + src.getClassName(),cnfe);\n    }\n  }\n  return result;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
              "java.lang.Class<Tau_T>.getName()"
            ]
          }
        ]
      ],
      "returnType": "List<ClassDescription>",
      "file": "./java_projects/felix/scrplugin/generator/src/main/java/org/apache/felix/scrplugin/helper/ClassScanner.java",
      "classTypes": [
        "JarFile"
      ],
      "sorrformalparam": [
        [
          "Log",
          "IssueLog",
          "Project",
          "AnnotationProcessor"
        ]
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.lang.Class<Tau_T>.getName()"
          ]
        }
      ],
      "keywords": [
        "array",
        "class"
      ]
    },
    {
      "method": "isBlank@177",
      "body": "/** \n * Returns <code>true</code> if a supplied string is null or blank\n * @param input the string to check\n * @return <code>true</code> if <code>null</code> or blank (zero-length);<code>false</code> otherwise\n */\npublic static final boolean isBlank(String input){\n  return input == null || input.trim().length() < 1;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/jspwiki/src/org/apache/wiki/ui/InputValidator.java",
      "classTypes": [
        "int",
        "WikiContext",
        "Pattern",
        "String",
        "int",
        "WikiSession",
        "Pattern"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "length"
      ]
    },
    {
      "method": "setup@119",
      "body": "/** \n * Set up the export reader. See the class description for information on configuration options.\n */\npublic void setup(SourceResolver resolver,Map objectModel,String src,Parameters par) throws ProcessingException, SAXException, IOException {\n  super.setup(resolver,objectModel,src,par);\n  try {\n    this.request=ObjectModelHelper.getRequest(objectModel);\n    this.response=ObjectModelHelper.getResponse(objectModel);\n    Context context=ContextUtil.obtainContext(objectModel);\n    if (AuthorizeManager.isAdmin(context)) {\n      String handle=par.getParameter(\"handle\");\n      DSpaceObject dso=HandleManager.resolveToObject(context,handle);\n      ArrayList itemmd=new ArrayList();\n      if (dso.getType() == Constants.ITEM) {\n        itemmd.add(dso.getID());\n        exporter=new MetadataExport(context,new ItemIterator(context,itemmd),true);\n      }\n else       if (dso.getType() == Constants.COLLECTION) {\n        Collection collection=(Collection)dso;\n        ItemIterator toExport=collection.getAllItems();\n        exporter=new MetadataExport(context,toExport,true);\n      }\n else       if (dso.getType() == Constants.COMMUNITY) {\n        exporter=new MetadataExport(context,(Community)dso,false);\n      }\n      log.info(LogManager.getHeader(context,\"metadataexport\",\"exporting_handle:\" + handle));\n      csv=exporter.export();\n      filename=handle.replaceAll(\"/\",\"-\") + \".csv\";\n      log.info(LogManager.getHeader(context,\"metadataexport\",\"exported_file:\" + filename));\n    }\n else {\n      if (this.request.getSession().getAttribute(\"dspace.current.user.id\") != null) {\n        String redictURL=request.getContextPath() + \"/restricted-resource\";\n        HttpServletResponse httpResponse=(HttpServletResponse)objectModel.get(HttpEnvironment.HTTP_RESPONSE_OBJECT);\n        httpResponse.sendRedirect(redictURL);\n        return;\n      }\n else {\n        String redictURL=request.getContextPath() + \"/login\";\n        AuthenticationUtil.interruptRequest(objectModel,AUTH_REQUIRED_HEADER,AUTH_REQUIRED_MESSAGE,null);\n        HttpServletResponse httpResponse=(HttpServletResponse)objectModel.get(HttpEnvironment.HTTP_RESPONSE_OBJECT);\n        httpResponse.sendRedirect(redictURL);\n        return;\n      }\n    }\n  }\n catch (  Exception e) {\n    throw new ProcessingException(\"Unable to read bitstream.\",e);\n  }\n}\n",
      "formalParam": [
        "SourceResolver",
        "Map",
        "String",
        "Parameters"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.replaceAll(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Corisco/dspace-1.6.2-src-release-corisco-1/dspace-xmlui/dspace-xmlui-api/src/main/java/org/dspace/app/xmlui/cocoon/MetadataExportReader.java",
      "classTypes": [
        "Logger",
        "String",
        "int",
        "String",
        "Request",
        "String",
        "MetadataExport"
      ],
      "sorrformalparam": [],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.lang.String.replaceAll(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "replace",
        "object"
      ]
    },
    {
      "method": "drawWavyString@732",
      "body": "/** \n * Draw a string with letters that move up and down individually. \n */\npublic void drawWavyString(String s,int x,int y,int align,int increment_x,double tmr,double amplitude,double pos_phaseshift,double timer_phaseshift,JGFont font,JGColor col){\n  setFont(font);\n  setColor(col);\n  if (align == 0) {\n    x-=increment_x * s.length() / 2;\n  }\n else   if (align == 1) {\n    x-=increment_x * s.length();\n  }\n  for (int i=0; i < s.length(); i++)   drawString(s.substring(i,i + 1),x + i * increment_x,y + (int)(amplitude * -Math.cos(Math.PI * (pos_phaseshift * i + tmr * timer_phaseshift))),0);\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "int",
        "int",
        "double",
        "double",
        "double",
        "double",
        "JGFont",
        "JGColor"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "JGPoint",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JOptionPane.showConfirmDialog(java.awt.Component,java.lang.Object,java.lang.String,int)",
              "java.lang.System.exit(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()",
              "java.lang.Class.getName()",
              "java.io.FileInputStream.FileInputStream(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.Thread.Thread(java.lang.Runnable)",
              "java.lang.Thread.start()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.System.exit(int)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)",
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/TT2POL/RLCompetition/src/jgame/platform/MyEngine.java",
      "classTypes": [
        "double",
        "JGFont",
        "int",
        "int",
        "int",
        "JGFont"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "String[]",
          "int"
        ],
        []
      ],
      "types": [
        "String",
        "Integer"
      ],
      "apicalls": [
        "length"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.length()",
            "java.lang.String.substring(int,int)",
            "java.lang.String.length()"
          ]
        }
      ],
      "keywords": [
        "integer"
      ]
    },
    {
      "method": "minutesFromDate@159",
      "body": "@SuppressWarnings(\"deprecation\") public static int minutesFromDate(Date date){\n  return date.getHours() * 60 + date.getMinutes();\n}\n",
      "formalParam": [
        "Date"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Date.getHours()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.Date.getMinutes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "ArrayList<Route>",
        "ArrayList<String>",
        "StringBuffer"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Calendar.getInstance()",
              "java.text.SimpleDateFormat.SimpleDateFormat(java.lang.String)",
              "java.util.Calendar.getTime()",
              "java.text.DateFormat.format(java.util.Date)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.System.nanoTime()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.String.toString()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.lang.System.nanoTime()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.lang.System.nanoTime()",
              "java.io.PrintStream.println(java.lang.String)",
              "java.lang.String.toString()",
              "java.util.ArrayList<Tau_E>.ArrayList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.size()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.lang.System.nanoTime()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.lang.System.nanoTime()",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/TABuss/src/org/ubicompforall/BusTUC/Main/Helpers.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [
          "String",
          "Location",
          "int",
          "int",
          "Context"
        ],
        [
          "String",
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Date.getHours()",
            "java.util.Date.getMinutes()"
          ]
        }
      ],
      "keywords": [
        "hours",
        "minutes"
      ]
    },
    {
      "method": "put@666",
      "body": "/** \n * Put a value in the JSONArray, where the value will be a JSONArray which is produced from a Collection.\n * @param index The subscript.\n * @param value A Collection value.\n * @return      this.\n * @throws JSONException If the index is negative or if the value isnot finite.\n */\npublic JSONArray put(int index,Collection value) throws JSONException {\n  this.put(index,new JSONArray(value));\n  return this;\n}\n",
      "formalParam": [
        "int",
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collection.iterator()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Iterator"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              },
              {
                "_call": "java.util.ArrayList.add(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "JSONArray",
        "None",
        "boolean",
        "int",
        "Object",
        "JSONArray",
        "JSONArray"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.lang.String.equalsIgnoreCase(java.lang.String)",
              "java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.parseInt(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.get(int)"
            ]
          }
        ]
      ],
      "returnType": "JSONArray",
      "file": "./java_projects/Code-EDU-Game/CodeEduGame/src/com/appspot/codeedugame/json/JSONArray.java",
      "classTypes": [
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int",
          "String"
        ],
        [
          "Map"
        ],
        [
          "Collection"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "int"
        ],
        [
          "Collection"
        ],
        [
          "int"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Collection.iterator()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.ArrayList.add(java.lang.Object)",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "collection",
        "array"
      ]
    },
    {
      "method": "abort@307",
      "body": "@Override public void abort(String pid) throws Exception {\n  JobImpl job=getJob(pid);\n  if (job == null)   throw new IllegalArgumentException(\"No such pid \" + pid);\n  job.abort();\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_V"
          },
          {
            "_call": "java.lang.Thread.interrupt()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "Set<Job>",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.values()",
              "java.util.HashSet<Tau_E>.HashSet(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.concurrent.Executor.execute(java.lang.Runnable)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/aQute/aQute.jobs/src/aQute/impl/jobs/JobManagerImpl.java",
      "classTypes": [
        "AtomicLong",
        "Map<String,JobImpl>"
      ],
      "sorrformalparam": [
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Thread",
        "Map"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
            "java.lang.Thread.interrupt()"
          ]
        }
      ],
      "keywords": [
        "get",
        "interrupt"
      ]
    },
    {
      "method": "unbox@124",
      "body": "public void unbox(ClassNode type){\n  if (type.isPrimaryClassNode())   return;\n  if (type.isPrimitive())   unbox(type.getTypeClass());\n}\n",
      "formalParam": [
        "ClassNode"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.Class.isPrimitive()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Class<Tau_T>.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.replace(char,char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.Class.getName()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.isPrimitive()"
            ]
          },
          {
            "calls": [
              "java.lang.Class.isPrimitive()",
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.replace(char,char)",
              "java.lang.Class.getName()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base/org.codehaus.groovy/src/org/codehaus/groovy/classgen/BytecodeHelper.java",
      "classTypes": [
        "MethodVisitor"
      ],
      "sorrformalparam": [
        [
          "Class"
        ],
        [
          "ClassNode"
        ],
        [
          "ClassNode"
        ],
        [
          "Class"
        ],
        [
          "Variable",
          "boolean"
        ]
      ],
      "types": [
        "Character",
        "Class"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class.isPrimitive()"
          ]
        },
        {
          "calls": [
            "java.lang.Class.isPrimitive()",
            "java.lang.Class<Tau_T>.getName()",
            "java.lang.String.replace(char,char)",
            "java.lang.Class.getName()"
          ]
        }
      ],
      "keywords": [
        "character",
        "name",
        "get",
        "boolean",
        "string",
        "replace",
        "class"
      ]
    },
    {
      "method": "initialise@189",
      "body": "/** \n * Initialise this dialog ready for an addition against the given project.\n * @param project The project to edit.\n */\npublic void initialise(Project project){\n  this.project=project;\n  if (typeComboModel.isEmpty()) {\n    typeComboModel.set(SourceInfoLoader.getInstance().getSourceTypes());\n  }\n  sourceNames.clear();\n  for (  Source s : project.getSources().getSource()) {\n    sourceNames.add(s.getName());\n  }\n  clearNameField();\n}\n",
      "formalParam": [
        "Project"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Set<java.lang.String>.clear()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Set<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "javax.swing.text.JTextComponent.setText(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.text.JTextComponent.setText(java.lang.String)",
              "javax.swing.text.JTextComponent.getText()",
              "java.lang.String.length()",
              "$NOT$java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/intermine/intermine/MineManager/installer/src/main/java/org/intermine/install/swing/AddSourceDialog.java",
      "classTypes": [
        "GenericMutableComboBoxModel<String>",
        "String",
        "NewDerivedTypeDialog",
        "Color",
        "JComboBox",
        "ProjectListenerSupport",
        "long",
        "Set<String>"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ]
      ],
      "types": [
        "Boolean",
        "Set",
        "JTextComponent"
      ],
      "apicalls": [
        "add",
        "setText"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Set<java.lang.String>.clear()",
            "java.util.Set<java.lang.String>.add(java.lang.String)",
            "javax.swing.text.JTextComponent.setText(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "clear",
        "swing",
        "j",
        "component",
        "text"
      ]
    },
    {
      "method": "toString@18",
      "body": "@Override public String toString(){\n  StringBuilder res=new StringBuilder();\n  for (  Instruction instr : instructions) {\n    res.append(instr).append(\"\\n\");\n  }\n  return res.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/litil/src/main/java/litil/ast/Program.java",
      "classTypes": [
        "List<Instruction>"
      ],
      "sorrformalparam": [
        [
          "int"
        ]
      ],
      "types": [
        "StringBuilder",
        "Object"
      ],
      "apicalls": [
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "builder",
        "append",
        "object",
        "lang"
      ]
    },
    {
      "method": "testShortEqualsBigInteger@126",
      "body": "public void testShortEqualsBigInteger(){\n  JsonPrimitive p1=new JsonPrimitive(new Short((short)10));\n  JsonPrimitive p2=new JsonPrimitive(new BigInteger(\"10\"));\n  assertEquals(p1,p2);\n  assertEquals(p1.hashCode(),p2.hashCode());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.BigInteger(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Byte.Byte(byte)",
              "java.lang.Short.Short(short)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Double.Double(double)",
              "java.math.BigDecimal.BigDecimal(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Byte.Byte(byte)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.math.BigInteger.BigInteger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Byte.Byte(byte)",
              "java.lang.Long.Long(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.math.BigDecimal.BigDecimal(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Float.Float(float)",
              "java.math.BigDecimal.BigDecimal(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Short.Short(short)",
              "java.lang.Integer.Integer(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.lang.Long.Long(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Byte.Byte(byte)",
              "java.math.BigInteger.BigInteger(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/google-gson-1.4/src/test/java/com/google/gson/JsonPrimitiveTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Short.Short(short)",
            "java.math.BigInteger.BigInteger(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "math",
        "short",
        "integer"
      ]
    },
    {
      "method": "internalTypeSize@550",
      "body": "/** \n * Returns the size taken up on the stack by the given internal type. The size is 1, except for long and double types, for which it is 2, and for the void type, for which 0 is returned.\n * @param internalType the internal type,e.g. \"<code>I</code>\".\n * @return the size taken up on the stack,e.g. 1.\n */\npublic static int internalTypeSize(String internalType){\n  if (internalType.length() == 1) {\n    char internalPrimitiveType=internalType.charAt(0);\n    if (internalPrimitiveType == ClassConstants.INTERNAL_TYPE_LONG || internalPrimitiveType == ClassConstants.INTERNAL_TYPE_DOUBLE) {\n      return 2;\n    }\n else     if (internalPrimitiveType == ClassConstants.INTERNAL_TYPE_VOID) {\n      return 0;\n    }\n  }\n  return 1;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.charAt(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "char"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "String",
        "int",
        "int",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.lastIndexOf(java.lang.String,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.regionMatches(int,java.lang.String,int,int)",
              "java.lang.String.regionMatches(int,java.lang.String,int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.String.charAt(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.charAt(int)",
              "java.lang.String.charAt(int)",
              "java.lang.String.substring(int)",
              "java.lang.String.charAt(int)",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int,int)",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/proguard/src/proguard/classfile/util/ClassUtil.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "charAt"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()"
          ]
        },
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.charAt(int)"
          ]
        }
      ],
      "keywords": [
        "char",
        "string"
      ]
    },
    {
      "method": "defaultCopy@40",
      "body": "@Test public void defaultCopy() throws IOException {\n  final InputStream inputStream=new ByteArrayInputStream(\"copy\".getBytes());\n  final ConnectedStreamChannelMock channelMock=new ConnectedStreamChannelMock();\n  final OutputStream outputStream=new ChannelOutputStream(channelMock);\n  Streams.copyStream(inputStream,outputStream);\n  assertEquals(\"copy\",channelMock.getWrittenText());\n  assertEquals(-1,inputStream.read());\n  assertFalse(channelMock.isWriteResumed());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStream.read()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.InputStream.read()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.InputStream.read()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.getBytes()",
              "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
              "java.io.InputStream.close()",
              "java.io.InputStream.read()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/xnio_1/api/src/test/java/org/xnio/streams/StreamsTestCase.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.getBytes()",
            "java.io.ByteArrayInputStream.ByteArrayInputStream(byte[])",
            "java.io.InputStream.read()"
          ]
        }
      ],
      "keywords": [
        "input",
        "stream"
      ]
    },
    {
      "method": "loadResources@153",
      "body": "@Override public void loadResources(){\n  initWorld(currentWorldName,currentWorldSeed,currentWorldStartTime);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.io.File.exists()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.isEmpty()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.exists()"
            ]
          },
          {
            "calls": [
              "java.lang.String.isEmpty()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.exists()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.isEmpty()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.exists()"
            ]
          },
          {
            "calls": [
              "java.lang.String.isEmpty()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.exists()",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/TeraSpout/src/main/java/org/terasology/game/modes/StateSinglePlayer.java",
      "classTypes": [
        "WorldRenderer"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "String",
          "long"
        ],
        []
      ],
      "types": [
        "Logger",
        "Level",
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.isEmpty()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.exists()"
          ]
        },
        {
          "calls": [
            "java.lang.String.isEmpty()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Object)",
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.exists()",
            "java.util.logging.Logger.log(java.util.logging.Level,java.lang.String,java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "object",
        "log",
        "lang",
        "util"
      ]
    },
    {
      "method": "ignoreRelationship@290",
      "body": "/** \n * Ignores the relationship request from viewer to owner Implementation should remove the userId of viewer from the pending-relationship-requests list of the owner\n * @param viewer The userId of the person who has requested for a relationship with owner\n * @param owner  The userId of the person to whom the viewer has sent a relationship request\n * @return true if the relationship request was ignoredfalse if the relationship request was not ignored successfully\n * @throws org.wso2.carbon.registry.social.api.SocialDataException\n */\npublic boolean ignoreRelationship(String viewer,String owner) throws SocialDataException {\n  boolean result=false;\n  if (!(viewer == null || owner == null || viewer.trim().equals(\"\") || owner.trim().equals(\"\"))) {\n    try {\n      registry=getRegistry();\n      String resourcePath=SocialImplConstants.USER_REGISTRY_ROOT + viewer + SocialImplConstants.PENDING_RELATIONSHIP_REQUEST_PATH;\n      Resource ownerResource;\n      if (registry.resourceExists(resourcePath)) {\n        ownerResource=registry.get(resourcePath);\n        if (ownerResource.getPropertyValues(SocialImplConstants.RELATIONSHIP_REQUESTS_PROPERTY).indexOf(owner) >= 0) {\n          ownerResource.removePropertyValue(SocialImplConstants.RELATIONSHIP_REQUESTS_PROPERTY,owner);\n          registry.put(resourcePath,ownerResource);\n        }\n        result=true;\n      }\n    }\n catch (    RegistryException e) {\n      log.error(e.getMessage(),e);\n      throw new SocialDataException(\"Error while ignoring relationship request from \" + owner + \" to \"+ viewer,e);\n    }\n  }\n  return result;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.String.trim()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/platform/components/registry/org.wso2.carbon.registry.social.impl/src/main/java/org/wso2/carbon/registry/social/impl/people/relationship/RelationshipManagerImpl.java",
      "classTypes": [
        "Registry"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.trim()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object"
      ]
    },
    {
      "method": "getMATypesForTarget@277",
      "body": "/** \n * @generated\n */\npublic List getMATypesForTarget(IElementType relationshipType){\n  List types=new ArrayList();\n  if (relationshipType == GMFGraphElementTypes.DiagramElementFigure_4005) {\n    types.add(GMFGraphElementTypes.FigureDescriptor_3009);\n  }\n  return types;\n}\n",
      "formalParam": [
        "IElementType"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List.add(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "List",
        "List"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.List.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "List",
      "file": "./java_projects/gmf-tooling/plugins/org.eclipse.gmf.graphdef.editor/src/org/eclipse/gmf/graphdef/editor/edit/parts/NodeEditPart.java",
      "classTypes": [
        "IFigure",
        "IFigure",
        "int",
        "WrappingLabel",
        "boolean"
      ],
      "sorrformalparam": [
        [],
        [
          "IGraphicalEditPart"
        ]
      ],
      "types": [
        "ArrayList",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.List.add(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "object",
        "list",
        "util",
        "array",
        "add"
      ]
    },
    {
      "method": "endElementHandler@164",
      "body": "public void endElementHandler(String nsURI,String localName,String qName,StAXContentHandler contentHandler) throws SAXException {\n  if (!((featureSpanType.equals(\"exon\")) || (featureSpanType.equals(\"translate offset\")))) {\n    System.err.println(\"<feature_span> of unexpected type \" + featureSpanType);\n  }\n  template.type=featureSpanType;\n  template.source=\"\";\n  template.location=featureSpanLoc;\n  template.strand=featureSpanStrand;\n  try {\n    listener.endFeature();\n  }\n catch (  ParseException pe) {\n    pe.printStackTrace();\n    throw new SAXException(\"error in GAMEFeatureSetHandler.\");\n  }\n}\n",
      "formalParam": [
        "String",
        "String",
        "String",
        "StAXContentHandler"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/biojava-legacy/core/src/main/java/org/biojava/bio/seq/io/game12/GAMEFeatureSpanHandler.java",
      "classTypes": [
        "String",
        "Location"
      ],
      "sorrformalparam": [],
      "types": [
        "PrintStream"
      ],
      "apicalls": [
        "println"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "stream"
      ]
    },
    {
      "method": "cancelLatestCommittedText@4554",
      "body": "public AttributedCharacterIterator cancelLatestCommittedText(Attribute[] attributes){\n  Document doc=getDocument();\n  if ((doc != null) && (latestCommittedTextStart != null) && (!latestCommittedTextStart.equals(latestCommittedTextEnd))) {\n    try {\n      int startIndex=latestCommittedTextStart.getOffset();\n      int endIndex=latestCommittedTextEnd.getOffset();\n      String latestCommittedText=doc.getText(startIndex,endIndex - startIndex);\n      doc.remove(startIndex,endIndex - startIndex);\n      return new AttributedString(latestCommittedText).getIterator();\n    }\n catch (    BadLocationException ble) {\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "Attribute[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.text.Document.getText(int,int)",
            "_throws": [
              "javax.swing.text.BadLocationException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "javax.swing.text.Document.remove(int,int)",
            "_throws": [
              "javax.swing.text.BadLocationException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "javax.swing.SwingUtilities.isEventDispatchThread()",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "javax.swing.SwingUtilities.isEventDispatchThread()",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.Caret.getDot()",
              "javax.swing.text.Caret.getMark()",
              "javax.swing.event.EventListenerList.getListenerList()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.Caret.getDot()",
              "javax.swing.text.Caret.getMark()",
              "java.lang.Math.min(int,int)",
              "javax.swing.text.Caret.getDot()",
              "javax.swing.text.Caret.getMark()",
              "java.lang.Math.max(int,int)",
              "javax.swing.text.Document.getText(int,int)",
              "javax.swing.text.Document.remove(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.datatransfer.DataFlavor.equals(java.awt.datatransfer.DataFlavor)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.SwingUtilities.getUnwrappedParent(java.awt.Component)",
              "java.awt.Component.getWidth()"
            ]
          }
        ]
      ],
      "returnType": "AttributedCharacterIterator",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/text/JTextComponent.java",
      "classTypes": [
        "Hashtable<KeyStroke,Action>",
        "Color",
        "String",
        "Object",
        "JTextComponent",
        "DropLocation"
      ],
      "sorrformalparam": [
        [
          "DocumentEvent"
        ],
        [
          "ChangeEvent"
        ],
        [
          "JComponent",
          "Clipboard",
          "int"
        ],
        [
          "JComponent",
          "DataFlavor[]"
        ],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.text.Document.getText(int,int)",
            "javax.swing.text.Document.remove(int,int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "text",
        "exception",
        "location",
        "document"
      ]
    },
    {
      "method": "gfindObjects@61",
      "body": "public String gfindObjects(String query,int hitPageStart,int hitPageSize,int snippetsMax,int fieldMaxLength,String indexName,String sortFields,String resultPageXslt) throws java.rmi.RemoteException {\n  super.gfindObjects(query,hitPageStart,hitPageSize,snippetsMax,fieldMaxLength,indexName,sortFields,resultPageXslt);\n  if (\"\".equals(usingQuery)) {\n    return embeddedResult.toString();\n  }\n  String usingIndexName=config.getIndexName(indexName);\n  if (srf != null && config.isSearchResultFilteringActive(\"presearch\")) {\n    usingIndexName=srf.selectIndexNameForPresearch(fgsUserName,usingIndexName,fgsUserAttributes,config);\n    if (logger.isDebugEnabled())     logger.debug(\"gfindObjects presearch\" + \" fgsUserName=\" + fgsUserName + \" usingIndexName=\"+ usingIndexName);\n  }\n  if (srf != null && config.isSearchResultFilteringActive(\"insearch\")) {\n    usingQuery=srf.rewriteQueryForInsearch(fgsUserName,usingIndexName,usingQuery,fgsUserAttributes,config);\n    if (logger.isDebugEnabled())     logger.debug(\"gfindObjects insearch\" + \" fgsUserName=\" + fgsUserName + \" usingQuery=\"+ usingQuery);\n  }\n  ResultSet resultSet=null;\n  try {\n    getIndexReaderAndSearcher(usingIndexName);\n    resultSet=(new Connection()).createStatement().executeQuery(searcher,usingQuery,hitPageStart,hitPageSize,snippetsMax,fieldMaxLength,getQueryAnalyzer(usingIndexName),config.getDefaultQueryFields(usingIndexName),config.getAllowLeadingWildcard(usingIndexName),config.getLowercaseExpandedTerms(usingIndexName),config.getIndexDir(usingIndexName),usingIndexName,config.getSnippetBegin(usingIndexName),config.getSnippetEnd(usingIndexName),config.getSortFields(usingIndexName,sortFields));\n  }\n catch (  Exception e) {\n    throw new GenericSearchException(\"gfindObjects executeQuery error:\\n\" + e.toString());\n  }\n finally {\n    closeIndexReaderAndSearcher(usingIndexName);\n  }\n  params[12]=\"RESULTPAGEXSLT\";\n  params[13]=resultPageXslt;\n  String xsltPath=null;\n  try {\n    xsltPath=config.getConfigName() + \"/index/\" + usingIndexName+ \"/\"+ config.getGfindObjectsResultXslt(usingIndexName,resultPageXslt);\n  }\n catch (  Exception e) {\n    throw new GenericSearchException(\"gfindObjects xsltPath error:\\n\" + e.toString());\n  }\n  if (logger.isDebugEnabled())   logger.debug(\"gfindObjects xsltPath=\\n\" + xsltPath + \" resultSet=\"+ resultSet);\n  StringBuffer resultXml=null;\n  try {\n    resultXml=(new GTransformer()).transform(xsltPath,resultSet.getResultXml(),params);\n  }\n catch (  Exception e) {\n    throw new GenericSearchException(\"gfindObjects transform error:\\n\" + e.toString());\n  }\n  if (srf != null && config.isSearchResultFilteringActive(\"postsearch\")) {\n    resultXml=srf.filterResultsetForPostsearch(fgsUserName,resultXml,fgsUserAttributes,config);\n    if (logger.isDebugEnabled())     logger.debug(\"gfindObjects postsearch\" + \" fgsUserName=\" + fgsUserName + \" resultXml=\\n\"+ resultXml);\n  }\n  return resultXml.toString();\n}\n",
      "formalParam": [
        "String",
        "int",
        "int",
        "int",
        "int",
        "String",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Analyzer",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.Class.forName(java.lang.String)",
              "java.lang.Class.toString()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getResourceAsStream(java.lang.String)",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/gsearch/FgsLucene/src/java/dk/defxws/fgslucene/OperationsImpl.java",
      "classTypes": [
        "Logger"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "equals",
        "boolean",
        "lang"
      ]
    },
    {
      "method": "render@366",
      "body": "public void render(GenericTextField textField){\n  FontRenderer font=SpoutClient.getHandle().fontRenderer;\n  RenderUtil.drawRectangle((int)(textField.getScreenX() - 1),(int)(textField.getScreenY() - 1),(int)(textField.getScreenX() + textField.getWidth() + 1),(int)(textField.getScreenY() + textField.getHeight() + 1),textField.getBorderColor().toInt());\n  RenderUtil.drawRectangle((int)textField.getScreenX(),(int)textField.getScreenY(),(int)(textField.getScreenX() + textField.getWidth()),(int)(textField.getScreenY() + textField.getHeight()),textField.getFieldColor().toInt());\n  int x=(int)(textField.getScreenX() + GenericTextField.PADDING);\n  int y=(int)(textField.getScreenY() + GenericTextField.PADDING);\n  int color=textField.isEnabled() ? textField.getColor().toInt() : textField.getDisabledColor().toInt();\n  int[] cursor=textField.getTextProcessor().getCursor2D();\n  int lineNum=0;\n  int cursorOffset=0;\n  if (textField.getText().length() != 0) {\n    String line;\n    Iterator<String> iter=textField.getTextProcessor().iterator();\n    while (iter.hasNext()) {\n      line=iter.next();\n      if (lineNum == cursor[0]) {\n        cursorOffset=font.getStringWidth(line.substring(0,cursor[1]));\n      }\n      font.drawStringWithShadow(line,x,y + (GenericTextField.LINE_HEIGHT + GenericTextField.LINE_SPACING) * lineNum++,color);\n    }\n  }\n else   if (!textField.isFocus()) {\n    font.drawStringWithShadow(textField.getPlaceholder(),x,y,color);\n  }\n  boolean showCursor=textField.isEnabled() && textField.isFocus() && shouldRenderCursor;\n  if (showCursor) {\n    font.drawStringWithShadow(\"_\",x + cursorOffset,y + (GenericTextField.LINE_HEIGHT + GenericTextField.LINE_SPACING) * cursor[0] + 1,color);\n  }\n}\n",
      "formalParam": [
        "GenericTextField"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<java.lang.String>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.substring(int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.String>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.Math.max(int,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.String(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.Math.max(int,int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Spoutcraft/src/main/java/org/spoutcraft/client/gui/MCRenderDelegate.java",
      "classTypes": [
        "RenderItemCustom",
        "TIntObjectHashMap<String>",
        "HashMap<UUID,GuiButton>",
        "Color",
        "MinecraftFont",
        "TObjectIntMap<GenericBitmap>"
      ],
      "sorrformalparam": [
        [
          "GenericButton"
        ],
        [
          "String",
          "int"
        ]
      ],
      "types": [],
      "apicalls": [
        "next"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<java.lang.String>.hasNext()",
            "java.util.Iterator<java.lang.String>.next()",
            "java.lang.String.substring(int,int)",
            "java.util.Iterator<java.lang.String>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "stateChanged@4015",
      "body": "/** \n * change listener implementation for slider\n */\npublic void stateChanged(ChangeEvent e){\n  if (!slider.getValueIsAdjusting()) {\n    int size=slider.getValue();\n    GeoAngle angle;\n    for (int i=0; i < geos.length; i++) {\n      angle=(GeoAngle)geos[i];\n      if (size < 20 && (angle.decorationType == GeoElement.DECORATION_ANGLE_THREE_ARCS || angle.decorationType == GeoElement.DECORATION_ANGLE_TWO_ARCS)) {\n        angle.setArcSize(20);\n        int selected=((GeoAngle)geos[0]).decorationType;\n        if (selected == GeoElement.DECORATION_ANGLE_THREE_ARCS || selected == GeoElement.DECORATION_ANGLE_TWO_ARCS) {\n          slider.setValue(20);\n        }\n      }\n else       angle.setArcSize(size);\n      angle.updateRepaint();\n    }\n  }\n}\n",
      "formalParam": [
        "ChangeEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "javax.swing.JSlider.getValue()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "javax.swing.JSlider.setValue(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "JPanel",
        "void",
        "None",
        "JPanel"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.EventObject.getSource()",
              "javax.swing.JComboBox.getSelectedIndex()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
              "javax.swing.JSlider.getValue()"
            ]
          },
          {
            "calls": [
              "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JCheckBox.JCheckBox()",
              "javax.swing.AbstractButton.addActionListener(java.awt.event.ActionListener)",
              "java.awt.Container.add(java.awt.Component)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.AbstractButton.removeItemListener(java.awt.event.ItemListener)",
              "javax.swing.AbstractButton.setSelected(boolean)",
              "javax.swing.AbstractButton.addItemListener(java.awt.event.ItemListener)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/geogebra_1/geogebra/geogebra/gui/PropertiesPanel.java",
      "classTypes": [
        "boolean",
        "long",
        "JSlider",
        "AngleTextField",
        "JCheckBox",
        "JComboBox"
      ],
      "sorrformalparam": [
        [
          "ActionEvent"
        ],
        [
          "Object[]"
        ],
        [
          "ChangeEvent"
        ],
        [],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "getValueIsAdjusting",
        "setValue"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()"
          ]
        },
        {
          "calls": [
            "$NOT$javax.swing.JSlider.getValueIsAdjusting()",
            "javax.swing.JSlider.getValue()",
            "javax.swing.JSlider.setValue(int)"
          ]
        }
      ],
      "keywords": [
        "integer",
        "value",
        "set",
        "swing"
      ]
    },
    {
      "method": "out@55",
      "body": "public Type out(){\n  if (this.out_type.equals(\"IntType\")) {\n    return new IntType();\n  }\n else   if (this.out_type.equals(\"BoolType\")) {\n    return new BoolType();\n  }\n else {\n    return new NullType();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Type",
      "file": "./java_projects/CSC431/src/OperatorType.java",
      "classTypes": [
        "Integer",
        "int",
        "String",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "boolean",
        "lang",
        "equals"
      ]
    },
    {
      "method": "testCDATaElement@67",
      "body": "public void testCDATaElement() throws Exception {\n  assertSerialization(\"<div><![CDATA[Test Content]]></div>\",\"<div><![CDATA[Test Content]]></div>\");\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilderFactory"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "_throws": [
              "javax.xml.parsers.ParserConfigurationException"
            ],
            "node": "DAPICall",
            "_returns": "javax.xml.parsers.DocumentBuilder"
          },
          {
            "_call": "java.io.StringReader.StringReader(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
            "_throws": [
              "org.xml.sax.SAXException",
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "org.w3c.dom.Document"
          },
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringWriter.StringWriter()",
              "java.io.StringWriter.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/gatein-portal/component/common/src/test/java/org/exoplatform/commons/xml/TestDOMSerializer.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "IOException",
        "DocumentBuilderFactory"
      ],
      "apicalls": [
        "newInstance"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
            "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
            "java.io.StringReader.StringReader(java.lang.String)",
            "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.toString()"
          ]
        }
      ],
      "keywords": [
        "reader",
        "factory",
        "io",
        "configuration",
        "xml",
        "writer"
      ]
    },
    {
      "method": "testOrderDuplicitParams@260",
      "body": "public void testOrderDuplicitParams(){\n  List<UriTemplate> l=new ArrayList<UriTemplate>();\n  l.add(new UriTemplate(\"/{a}\"));\n  l.add(new UriTemplate(\"/{a}/{a}\"));\n  Collections.sort(l,UriTemplate.COMPARATOR);\n  assertEquals(new UriTemplate(\"/{a}/{a}\").getTemplate(),l.get(0).getTemplate());\n  assertEquals(new UriTemplate(\"/{a}\").getTemplate(),l.get(1).getTemplate());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Collections.sort(java.util.List,java.util.Comparator)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Collections.sort(java.util.List,java.util.Comparator)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/jersey/core-common/src/test/java/org/glassfish/jersey/uri/UriTemplateTest.java",
      "classTypes": [],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Collections",
        "Comparator",
        "ArrayList"
      ],
      "apicalls": [
        "sort"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Collections.sort(java.util.List,java.util.Comparator)"
          ]
        }
      ],
      "keywords": [
        "util",
        "comparator",
        "collections",
        "list",
        "array",
        "sort"
      ]
    },
    {
      "method": "MetaEnumeration@118",
      "body": "/** \n * Initiates this enumeration.\n * @param outer an iterator over external collection ofPermissionCollections\n */\npublic MetaEnumeration(Iterator outer){\n  pcIter=outer;\n  current=getNextEnumeration();\n}\n",
      "formalParam": [
        "Iterator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Enumeration<Permission>",
        "void",
        "Object",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Map.values()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.Permission.newPermissionCollection()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration.nextElement()",
              "$NOT$java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Iterator.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Enumeration.nextElement()",
              "$NOT$java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Throwable.printStackTrace()",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/harmony_1/classlib/modules/security/src/main/java/common/java/security/Permissions.java",
      "classTypes": [
        "boolean",
        "ObjectStreamField[]",
        "Enumeration",
        "Map",
        "long",
        "Iterator"
      ],
      "sorrformalparam": [
        [],
        [
          "Permission"
        ],
        [],
        [
          "Permission"
        ]
      ],
      "types": [
        "Iterator"
      ],
      "apicalls": [
        "hasMoreElements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator.hasNext()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "compare@462",
      "body": "/** \n * Tell if one object is less than the other.\n * @param obj2 Object to compare this nodeset to\n * @param comparator Comparator to use\n * @return See the comments below for each object type comparison \n * @throws javax.xml.transform.TransformerException\n */\npublic boolean compare(XObject obj2,Comparator comparator) throws javax.xml.transform.TransformerException {\n  boolean result=false;\n  int type=obj2.getType();\n  if (XObject.CLASS_NODESET == type) {\n    DTMIterator list1=iterRaw();\n    DTMIterator list2=((XNodeSet)obj2).iterRaw();\n    int node1;\n    java.util.Vector node2Strings=null;\n    while (DTM.NULL != (node1=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node1);\n      if (null == node2Strings) {\n        int node2;\n        while (DTM.NULL != (node2=list2.nextNode())) {\n          XMLString s2=getStringFromNode(node2);\n          if (comparator.compareStrings(s1,s2)) {\n            result=true;\n            break;\n          }\n          if (null == node2Strings)           node2Strings=new java.util.Vector();\n          node2Strings.addElement(s2);\n        }\n      }\n else {\n        int n=node2Strings.size();\n        for (int i=0; i < n; i++) {\n          if (comparator.compareStrings(s1,(XMLString)node2Strings.elementAt(i))) {\n            result=true;\n            break;\n          }\n        }\n      }\n    }\n    list1.reset();\n    list2.reset();\n  }\n else   if (XObject.CLASS_BOOLEAN == type) {\n    double num1=bool() ? 1.0 : 0.0;\n    double num2=obj2.num();\n    result=comparator.compareNumbers(num1,num2);\n  }\n else   if (XObject.CLASS_NUMBER == type) {\n    DTMIterator list1=iterRaw();\n    double num2=obj2.num();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      double num1=getNumberFromNode(node);\n      if (comparator.compareNumbers(num1,num2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else   if (XObject.CLASS_RTREEFRAG == type) {\n    XMLString s2=obj2.xstr();\n    DTMIterator list1=iterRaw();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node);\n      if (comparator.compareStrings(s1,s2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else   if (XObject.CLASS_STRING == type) {\n    XMLString s2=obj2.xstr();\n    DTMIterator list1=iterRaw();\n    int node;\n    while (DTM.NULL != (node=list1.nextNode())) {\n      XMLString s1=getStringFromNode(node);\n      if (comparator.compareStrings(s1,s2)) {\n        result=true;\n        break;\n      }\n    }\n    list1.reset();\n  }\n else {\n    result=comparator.compareNumbers(this.num(),obj2.num());\n  }\n  return result;\n}\n",
      "formalParam": [
        "XObject",
        "Comparator"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Vector.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Vector.Vector()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.util.Vector.addElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "boolean",
      "file": "./java_projects/libcore_1/luni/src/main/java/org/apache/xpath/objects/XNodeSet.java",
      "classTypes": [
        "NotEqualComparator",
        "LessThanOrEqualComparator",
        "EqualComparator",
        "LessThanComparator",
        "GreaterThanOrEqualComparator",
        "GreaterThanComparator",
        "long"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.size()"
          ]
        },
        {
          "calls": [
            "java.util.Vector.Vector()",
            "java.util.Vector.addElement(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "util",
        "object"
      ]
    },
    {
      "method": "toString@818",
      "body": "public String toString(){\n  StringBuffer sb=new StringBuffer();\n  sb.append(\"size: \").append(this.theMetadata.size()).append(\"\\n\");\n  Iterator<Map.Entry<Text,Text>> iter=this.theMetadata.entrySet().iterator();\n  while (iter.hasNext()) {\n    Map.Entry<Text,Text> en=iter.next();\n    sb.append(\"\\t\").append(en.getKey().toString()).append(\"\\t\").append(en.getValue().toString());\n    sb.append(\"\\n\");\n  }\n  return sb.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "RawKeyValueIterator",
        "Object",
        "void",
        "void",
        "RawKeyValueIterator"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataInputStream.skipBytes(int)",
              "java.io.FilterInputStream.read()",
              "java.io.FilterInputStream.available()"
            ]
          },
          {
            "calls": [
              "java.io.DataInputStream.skipBytes(int)",
              "java.io.FilterInputStream.read()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataInputStream.skipBytes(int)",
              "java.io.FilterInputStream.read()",
              "java.io.FilterInputStream.available()"
            ]
          },
          {
            "calls": [
              "java.io.DataInputStream.skipBytes(int)",
              "java.io.FilterInputStream.read()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataInput.readInt()",
              "java.util.TreeMap<Tau_K,Tau_V>.TreeMap()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/ADFS/adfs-common-project/adfs-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "classTypes": [
        "Class",
        "Metadata",
        "Decompressor",
        "RawComparator",
        "Metadata",
        "String",
        "DataOutputBuffer",
        "Compressor"
      ],
      "sorrformalparam": [
        [
          "Path[]",
          "Path",
          "boolean"
        ],
        [
          "Object"
        ],
        [
          "Writable"
        ],
        [
          "DataInput"
        ],
        [
          "Path[]",
          "boolean",
          "int",
          "Path"
        ]
      ],
      "types": [
        "Object",
        "StringBuffer",
        "String"
      ],
      "apicalls": [
        "toString",
        "append"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "buffer",
        "string",
        "append"
      ]
    },
    {
      "method": "dumpStats@85",
      "body": "public static void dumpStats(){\n  LOG.finer(\"Cache Size: \" + jarClassPathCache.size());\n  LOG.finer(\"Cache Hits: \" + cacheHits.get());\n  LOG.finer(\"Cache Misses: \" + cacheMisses.get());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.io.File,java.util.List<java.io.File>>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.logging.Logger.finer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicLong.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.logging.Logger.finer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.concurrent.atomic.AtomicLong.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.util.logging.Logger.finer(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.io.File.getAbsolutePath()",
              "java.lang.StringBuilder.append(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/turmeric-runtime/codegen/codegen-tools/src/main/java/org/ebayopensource/turmeric/tools/codegen/util/ClassPathUtil.java",
      "classTypes": [
        "AtomicLong",
        "ConcurrentMap<File,List<File>>",
        "Logger",
        "AtomicLong"
      ],
      "sorrformalparam": [
        [
          "StringBuilder",
          "List<File>"
        ]
      ],
      "types": [
        "Long"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.io.File,java.util.List<java.io.File>>.size()",
            "java.util.logging.Logger.finer(java.lang.String)",
            "java.util.concurrent.atomic.AtomicLong.get()",
            "java.util.logging.Logger.finer(java.lang.String)",
            "java.util.concurrent.atomic.AtomicLong.get()",
            "java.util.logging.Logger.finer(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "long"
      ]
    },
    {
      "method": "ASTList@54",
      "body": "/** \n * Initializes a list expression with a Java Collection\n */\npublic ASTList(Collection objects){\n  super(ExpressionParserTreeConstants.JJTLIST);\n  setValues(objects);\n}\n",
      "formalParam": [
        "Collection"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.ArrayList.ArrayList()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.util.Iterator.next()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "java.lang.Object"
                  },
                  {
                    "_call": "java.util.List.add(java.lang.Object)",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              },
              {
                "_call": "java.util.List.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Collection.toArray()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object[]"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "void",
        "void",
        "Expression",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char[])",
              "java.io.PrintWriter.print(char)",
              "java.io.PrintWriter.print(java.lang.String)",
              "java.io.PrintWriter.print(char)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.util.List.add(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.util.List.toArray()"
            ]
          },
          {
            "calls": [
              "java.util.Collection.toArray()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/cayenne/framework/cayenne-jdk1.5-unpublished/src/main/java/org/apache/cayenne/exp/parser/ASTList.java",
      "classTypes": [
        "Object[]"
      ],
      "sorrformalparam": [
        [
          "Iterator"
        ],
        [
          "int",
          "Object"
        ],
        [],
        [],
        [
          "PrintWriter",
          "String"
        ],
        [
          "Object[]"
        ]
      ],
      "types": [
        "Collection",
        "Object",
        "Iterator"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.ArrayList()",
            "java.util.Iterator.hasNext()",
            "java.util.Iterator.next()",
            "java.util.List.add(java.lang.Object)",
            "java.util.Iterator.hasNext()",
            "java.util.List.toArray()"
          ]
        },
        {
          "calls": [
            "java.util.Collection.toArray()"
          ]
        }
      ],
      "keywords": [
        "array",
        "iterator",
        "list",
        "add",
        "util"
      ]
    },
    {
      "method": "DoTouch@157",
      "body": "/** \n * G\ufffdre les \ufffdv\ufffdnements touch pour ajuster la grille.\n * @param e L'\ufffdv\ufffdnement motion \ufffd tester.\n */\npublic void DoTouch(MotionEvent e){\n  if (drawCache.size() == 0)   return;\n  for (int i=0; i < drawCache.size(); i++) {\n    if (FollowupLine.DistanceBetweenTwoPoints(drawCache.get(i).pos,new PointF(e.getX(),e.getY())) <= kTouchRadius) {\n      drawCache.get(i).element.isHit=true;\n    }\n  }\n}\n",
      "formalParam": [
        "MotionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.clear()",
              "java.util.Random.nextInt(int)",
              "java.util.ArrayList<Tau_E>.add(Tau_E)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/UchihaIncident/Src/MiniGames/FastTatamiSwipe/src/com/ninja/exMenu/PlayGrid.java",
      "classTypes": [
        "float",
        "int",
        "GridElement",
        "ArrayList<DrawElementF>",
        "int",
        "ArrayList<GridElement>",
        "int",
        "float",
        "int"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.size()",
            "java.util.ArrayList<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "size"
      ]
    },
    {
      "method": "postDeregister@223",
      "body": "/** \n * @see javax.management.MBeanRegistration#postDeregister()\n */\npublic void postDeregister(){\n  if (registrations.decrementAndGet() < 1) {\n    shutDownDispatcher();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.concurrent.ExecutorService.shutdown()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "ObjectName",
        "void",
        "long[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.Lock.lock()",
              "java.util.concurrent.locks.Lock.unlock()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()",
              "java.util.concurrent.Executors.newSingleThreadExecutor(java.util.concurrent.ThreadFactory)"
            ]
          },
          {
            "calls": [
              "java.util.concurrent.atomic.AtomicInteger.incrementAndGet()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.sort(long[])",
              "java.io.IOException.IOException()",
              "java.lang.Throwable.initCause(java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.Arrays.sort(long[])"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/aries/sandbox/jmx-next/jmx-core/src/main/java/org/apache/aries/jmx/framework/ServiceState.java",
      "classTypes": [
        "ExecutorService",
        "AtomicInteger",
        "Logger",
        "Lock",
        "AtomicInteger",
        "AtomicInteger"
      ],
      "sorrformalparam": [
        [
          "MBeanServer",
          "ObjectName"
        ],
        [
          "Boolean"
        ],
        []
      ],
      "types": [
        "ExecutorService",
        "Integer"
      ],
      "apicalls": [
        "decrementAndGet"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()",
            "java.util.concurrent.ExecutorService.shutdown()"
          ]
        },
        {
          "calls": [
            "java.util.concurrent.atomic.AtomicInteger.decrementAndGet()"
          ]
        }
      ],
      "keywords": [
        "get",
        "service",
        "concurrent",
        "shutdown",
        "util"
      ]
    },
    {
      "method": "main@5",
      "body": "/** \n * @param args\n */\npublic static void main(String[] args) throws FaculteitException {\n  try {\n    System.out.println(\"Waarde:\" + faculteit(Integer.parseInt(args[0])));\n  }\n catch (  ArrayIndexOutOfBoundsException e) {\n    System.out.println(\"Gebruik: week1.getallen.Faculteit <parameter>\");\n  }\ncatch (  NumberFormatException e) {\n    System.out.println(\"Parameter onjuist geformatteerd\");\n  }\ncatch (  FaculteitException e) {\n    System.out.println(e.stringFoutmelding);\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.lang.Integer.parseInt(java.lang.String)",
                "_throws": [
                  "java.lang.NumberFormatException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.io.PrintStream.println(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/P2-Practicum/P2/src/week1/getallen/Faculteit.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.parseInt(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)",
            "java.io.PrintStream.println(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "io",
        "parse",
        "number",
        "int",
        "stream"
      ]
    },
    {
      "method": "isGlobalised@45",
      "body": "public static boolean isGlobalised(final String name){\n  if (name == null) {\n    return false;\n  }\n  char[] chars=name.toCharArray();\n  boolean allowedSpaceOrSeparator=false;\n  int numberOfSeparators=1;\n  if (chars[0] != SPACE_SEPARATOR) {\n    return false;\n  }\n  for (int i=1; i < chars.length; i++) {\n    if (chars[i] == ' ' || chars[i] == SPACE_SEPARATOR) {\n      if (chars[i] == SPACE_SEPARATOR) {\n        numberOfSeparators++;\n      }\n      if (!allowedSpaceOrSeparator) {\n        return false;\n      }\n else {\n        allowedSpaceOrSeparator=false;\n      }\n    }\n else     if (Character.isWhitespace(chars[i])) {\n      return false;\n    }\n else     if (Character.isUpperCase(chars[i]) && numberOfSeparators < 3) {\n      return false;\n    }\n else {\n      allowedSpaceOrSeparator=true;\n    }\n  }\n  return allowedSpaceOrSeparator;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Character.isUpperCase(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Character.isWhitespace(char)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()"
            ]
          },
          {
            "calls": [
              "java.lang.String.length()",
              "java.util.List.isEmpty()",
              "$NOT$java.util.List.isEmpty()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/Fudan-Sakai/rwiki/rwiki-util/util/src/java/uk/ac/cam/caret/sakai/rwiki/utils/NameHelper.java",
      "classTypes": [
        "String",
        "char",
        "Log"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "isUpperCase",
        "toCharArray",
        "isWhitespace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace(char)"
          ]
        },
        {
          "calls": [
            "java.lang.String.toCharArray()",
            "java.lang.Character.isWhitespace(char)",
            "java.lang.Character.isUpperCase(char)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "char",
        "whitespace",
        "case",
        "string"
      ]
    },
    {
      "method": "unmarshall@35",
      "body": "public DeleteHostedZoneResult unmarshall(StaxUnmarshallerContext context) throws Exception {\n  DeleteHostedZoneResult deleteHostedZoneResult=new DeleteHostedZoneResult();\n  int originalDepth=context.getCurrentDepth();\n  int targetDepth=originalDepth + 1;\n  if (context.isStartOfDocument())   targetDepth+=1;\n  while (true) {\n    XMLEvent xmlEvent=context.nextEvent();\n    if (xmlEvent.isEndDocument())     return deleteHostedZoneResult;\n    if (xmlEvent.isAttribute() || xmlEvent.isStartElement()) {\n      if (context.testExpression(\"ChangeInfo\",targetDepth)) {\n        deleteHostedZoneResult.setChangeInfo(ChangeInfoStaxUnmarshaller.getInstance().unmarshall(context));\n        continue;\n      }\n    }\n else     if (xmlEvent.isEndElement()) {\n      if (context.getCurrentDepth() < originalDepth) {\n        return deleteHostedZoneResult;\n      }\n    }\n  }\n}\n",
      "formalParam": [
        "StaxUnmarshallerContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isEndElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "javax.xml.stream.events.XMLEvent.isAttribute()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "javax.xml.stream.events.XMLEvent.isStartElement()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "DeleteHostedZoneResult",
      "file": "./java_projects/aws-sdk-for-java/src/main/java/com/amazonaws/services/route53/model/transform/DeleteHostedZoneResultStaxUnmarshaller.java",
      "classTypes": [
        "DeleteHostedZoneResultStaxUnmarshaller"
      ],
      "sorrformalparam": [],
      "types": [
        "stream",
        "Boolean"
      ],
      "apicalls": [
        "isEndDocument",
        "isStartElement",
        "isEndElement"
      ],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()",
            "javax.xml.stream.events.XMLEvent.isEndElement()"
          ]
        },
        {
          "calls": [
            "javax.xml.stream.events.XMLEvent.isEndDocument()",
            "javax.xml.stream.events.XMLEvent.isAttribute()",
            "javax.xml.stream.events.XMLEvent.isStartElement()"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "attribute",
        "events"
      ]
    },
    {
      "method": "toHTML@136",
      "body": "@Override public String toHTML(String source,String syntaxId){\n  try {\n    Parser parser=componentManager.getInstance(Parser.class,syntaxId);\n    XDOM xdom=parser.parse(new StringReader(source));\n    TransformationContext txContext=new TransformationContext();\n    txContext.setXDOM(xdom);\n    txContext.setSyntax(syntaxFactory.createSyntaxFromIdString(syntaxId));\n    macroTransformation.transform(xdom,txContext);\n    WikiPrinter printer=new DefaultWikiPrinter();\n    xhtmlRenderer.render(xdom,printer);\n    return printer.toString();\n  }\n catch (  Exception e) {\n    this.logger.error(e.getLocalizedMessage(),e);\n    throw new RuntimeException(\"Exception while rendering HTML\",e);\n  }\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getLocalizedMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "java.io.StringReader.StringReader(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.lang.Throwable.getLocalizedMessage()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "java.lang.Throwable.getLocalizedMessage()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/xwiki-platform/xwiki-platform-core/xwiki-platform-wysiwyg/xwiki-platform-wysiwyg-server/src/main/java/org/xwiki/wysiwyg/server/internal/converter/DefaultHTMLConverter.java",
      "classTypes": [
        "HTMLCleaner",
        "StreamParser"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String",
          "String"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.StringReader.StringReader(java.lang.String)",
            "java.lang.Throwable.getLocalizedMessage()"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "reader"
      ]
    },
    {
      "method": "BankImpl@18",
      "body": "public BankImpl(ORB orb,org.omg.PortableServer.POA poa){\n  this.orb=orb;\n  this.poa=poa;\n  try {\n    NamingContextExt nc=NamingContextExtHelper.narrow(orb.resolve_initial_references(\"NameService\"));\n    NameComponent[] name=new NameComponent[1];\n    name[0]=new NameComponent(\"TransactionService\",\"service\");\n    transactionFactory=TransactionFactoryHelper.narrow(nc.resolve(name));\n    name[0]=new NameComponent(\"ConcurrencyControlService\",\"service\");\n    lockSetFactory=LockSetFactoryHelper.narrow(nc.resolve(name));\n  }\n catch (  Exception n) {\n    n.printStackTrace();\n    System.exit(1);\n  }\n}\n",
      "formalParam": [
        "ORB",
        "org.omg.PortableServer.POA"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Throwable.printStackTrace()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.System.exit(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(java.lang.String)",
              "java.io.PrintStream.println(char[])",
              "java.lang.System.exit(int)"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/JacORB/demo/bank/concurrency/src/demo/bank/concurrency/BankImpl.java",
      "classTypes": [
        "TransactionFactory",
        "LockSetFactory",
        "org.omg.PortableServer.POA",
        "ORB"
      ],
      "sorrformalparam": [
        [
          "Account",
          "Account",
          "float"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Throwable.printStackTrace()",
            "java.lang.System.exit(int)"
          ]
        }
      ],
      "keywords": [
        "stack",
        "system",
        "exit",
        "integer"
      ]
    },
    {
      "method": "create@60",
      "body": "public static <T extends Model>T create(Class<T> type,String name,Map<String,String[]> params,Annotation[] annotations){\n  try {\n    Constructor c=type.getDeclaredConstructor();\n    c.setAccessible(true);\n    T model=(T)c.newInstance();\n    if (model.path == null) {\n      model.path=JcrMapper.getDefaultPath(type);\n    }\n    return (T)edit(model,name,params,annotations);\n  }\n catch (  Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n",
      "formalParam": [
        "Class<T>",
        "String",
        "Map<String,String[]>",
        "Annotation[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Class<Tau_T>.getDeclaredConstructor(java.lang.Class[])",
            "_throws": [
              "java.lang.NoSuchMethodException",
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.reflect.Constructor"
          },
          {
            "_call": "java.lang.reflect.AccessibleObject.setAccessible(boolean)",
            "_throws": [
              "java.lang.SecurityException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "T",
      "file": "./java_projects/Cream/src/play/modules/cream/Model.java",
      "classTypes": [
        "Date",
        "boolean",
        "String",
        "Date"
      ],
      "sorrformalparam": [],
      "types": [
        "AccessibleObject",
        "Constructor",
        "SecurityException"
      ],
      "apicalls": [
        "getDeclaredConstructor"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Class<Tau_T>.getDeclaredConstructor(java.lang.Class[])",
            "java.lang.reflect.AccessibleObject.setAccessible(boolean)"
          ]
        }
      ],
      "keywords": [
        "security",
        "boolean",
        "get",
        "accessible",
        "reflect",
        "method"
      ]
    },
    {
      "method": "trace@28",
      "body": "@Override public void trace(String msg,Object... arg){\n  log(Level.FINEST,msg,arg);\n}\n",
      "formalParam": [
        "String",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.String.format(java.lang.String,java.lang.Object[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "ILogger",
        "void",
        "void",
        "None",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class.getName()",
              "java.util.logging.Logger.getLogger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
              "java.lang.String.format(java.lang.String,java.lang.Object[])",
              "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)"
            ]
          },
          {
            "calls": [
              "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Rythm/src/main/java/com/greenlaw110/rythm/logger/JDKLogger.java",
      "classTypes": [
        "long",
        "Logger",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "Class<?>"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "String",
          "Object"
        ],
        [
          "Class"
        ],
        [
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ],
        [
          "Throwable",
          "String",
          "Object"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "logp"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)",
            "java.lang.String.format(java.lang.String,java.lang.Object[])",
            "java.util.logging.Logger.logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.logging.Logger.isLoggable(java.util.logging.Level)"
          ]
        }
      ],
      "keywords": [
        "logging"
      ]
    },
    {
      "method": "run@56",
      "body": "public void run(){\n  textArea.write(str);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.JTextArea.insert(java.lang.String,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "javax.swing.JComponent.requestFocus()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.lang.StringBuffer.setLength(int)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JTextArea.insert(java.lang.String,int)",
              "java.lang.String.length()",
              "javax.swing.JComponent.requestFocus()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()",
              "java.lang.StringBuffer.setLength(int)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()",
              "java.lang.StringBuffer.setLength(int)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.requestFocus()",
              "javax.swing.text.JTextComponent.getCaret()",
              "javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)",
              "javax.swing.JComponent.requestFocus()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.toString()",
              "java.lang.StringBuffer.setLength(int)",
              "javax.swing.SwingUtilities.invokeLater(java.lang.Runnable)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/titanpad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/shell/ConsoleTextArea.java",
      "classTypes": [
        "java.util.Vector",
        "StringBuffer",
        "ConsoleWriter",
        "PipedInputStream",
        "int",
        "ConsoleTextArea"
      ],
      "sorrformalparam": [
        [
          "char[]",
          "int",
          "int"
        ],
        [
          "String"
        ],
        [],
        [],
        [],
        [
          "int"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.swing.JTextArea.insert(java.lang.String,int)",
            "java.lang.String.length()",
            "javax.swing.JComponent.requestFocus()"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "testJobTokenRpc@74",
      "body": "@Test public void testJobTokenRpc() throws Exception {\n  TaskUmbilicalProtocol mockTT=mock(TaskUmbilicalProtocol.class);\n  when(mockTT.getProtocolVersion(anyString(),anyLong())).thenReturn(TaskUmbilicalProtocol.versionID);\n  JobTokenSecretManager sm=new JobTokenSecretManager();\n  final Server server=RPC.getServer(mockTT,ADDRESS,0,5,true,conf,sm);\n  server.start();\n  final UserGroupInformation current=UserGroupInformation.getCurrentUser();\n  final InetSocketAddress addr=NetUtils.getConnectAddress(server);\n  String jobId=current.getUserName();\n  JobTokenIdentifier tokenId=new JobTokenIdentifier(new Text(jobId));\n  Token<JobTokenIdentifier> token=new Token<JobTokenIdentifier>(tokenId,sm);\n  sm.addTokenForJob(jobId,token);\n  Text host=new Text(addr.getAddress().getHostAddress() + \":\" + addr.getPort());\n  token.setService(host);\n  LOG.info(\"Service IP address for token is \" + host);\n  current.addToken(token);\n  current.doAs(new PrivilegedExceptionAction<Object>(){\n    @Override public Object run() throws Exception {\n      TaskUmbilicalProtocol proxy=null;\n      try {\n        proxy=(TaskUmbilicalProtocol)RPC.getProxy(TaskUmbilicalProtocol.class,TaskUmbilicalProtocol.versionID,addr,conf);\n        proxy.ping(null);\n      }\n  finally {\n        server.stop();\n        if (proxy != null) {\n          RPC.stopProxy(proxy);\n        }\n      }\n      return null;\n    }\n  }\n);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.InetSocketAddress.getAddress()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.net.InetAddress"
          },
          {
            "_call": "java.net.InetAddress.getHostAddress()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/platform/dependencies/hadoop/src/test/org/apache/hadoop/mapreduce/security/TestUmbilicalProtocolWithJobToken.java",
      "classTypes": [
        "Configuration",
        "String",
        "Log"
      ],
      "sorrformalparam": [],
      "types": [
        "InetAddress"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.InetSocketAddress.getAddress()",
            "java.net.InetAddress.getHostAddress()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "processAction@66",
      "body": "@Override public void processAction(ActionMapping mapping,ActionForm form,PortletConfig portletConfig,ActionRequest actionRequest,ActionResponse actionResponse) throws Exception {\n  String cmd=ParamUtil.getString(actionRequest,Constants.CMD);\n  try {\n    if (cmd.equals(Constants.ADD) || cmd.equals(Constants.UPDATE)) {\n      updateRule(actionRequest);\n    }\n else     if (cmd.equals(Constants.DELETE)) {\n      deleteRule(actionRequest);\n    }\n    sendRedirect(actionRequest,actionResponse);\n  }\n catch (  Exception e) {\n    if (e instanceof PrincipalException) {\n      SessionErrors.add(actionRequest,e.getClass());\n      setForward(actionRequest,\"portlet.mobile_device_rules.error\");\n    }\n else     if (e instanceof NoSuchActionException || e instanceof NoSuchRuleGroupException || e instanceof UnknownRuleHandlerException) {\n      SessionErrors.add(actionRequest,e.getClass());\n    }\n else {\n      throw e;\n    }\n  }\n}\n",
      "formalParam": [
        "ActionMapping",
        "ActionForm",
        "PortletConfig",
        "ActionRequest",
        "ActionResponse"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/liferay-portal/portal-impl/src/com/liferay/portlet/mobiledevicerules/action/EditRuleAction.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean",
        "Object",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "object",
        "lang",
        "boolean",
        "string",
        "equals"
      ]
    },
    {
      "method": "out@55",
      "body": "public Type out(){\n  if (this.out_type.equals(\"IntType\")) {\n    return new IntType();\n  }\n else   if (this.out_type.equals(\"BoolType\")) {\n    return new BoolType();\n  }\n else {\n    return new NullType();\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Type",
      "file": "./java_projects/CSC431/src/OperatorType.java",
      "classTypes": [
        "Integer",
        "int",
        "String",
        "String"
      ],
      "sorrformalparam": [],
      "types": [
        "Object",
        "String"
      ],
      "apicalls": [
        "equals"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string",
        "boolean",
        "lang",
        "equals"
      ]
    },
    {
      "method": "write@143",
      "body": "/** \n * Writes the array. If the array does not fit within the buffer, it is not split, but rather written out as one large chunk.\n */\npublic void write(byte b[]) throws IOException {\n  write(b,0,b.length);\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.lang.Integer.toHexString(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
            ]
          },
          {
            "calls": [
              "java.lang.Integer.toHexString(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/AmDroid/httpclientandroidlib/src/ch/boye/httpclientandroidlib/impl/io/ChunkedOutputStream.java",
      "classTypes": [
        "SessionOutputBuffer",
        "int",
        "boolean",
        "boolean",
        "byte[]"
      ],
      "sorrformalparam": [
        [
          "byte[]",
          "int",
          "int"
        ]
      ],
      "types": [
        "System",
        "String",
        "Integer"
      ],
      "apicalls": [
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)"
          ]
        },
        {
          "calls": [
            "java.lang.Integer.toHexString(int)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "string",
        "object",
        "hex",
        "arraycopy"
      ]
    },
    {
      "method": "makeChain@82",
      "body": "public Object makeChain(Object object){\n  Handler handler=new Handler(object);\n  Object proxy=Proxy.newProxyInstance(Chain.class.getClassLoader(),new Class[]{Chain.class},handler);\n  return Chain.class.cast(proxy);\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ref.WeakReference.WeakReference(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Class<Tau_T>.getClassLoader()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.ClassLoader"
          },
          {
            "_call": "java.lang.Class<Tau_T>.cast(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          }
        ]
      },
      "sorrreturntype": [
        "Object",
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ref.WeakReference.WeakReference(java.lang.Object)",
              "java.lang.Class<Tau_T>.getClassLoader()",
              "java.lang.Class<Tau_T>.cast(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.ref.WeakReference.WeakReference(java.lang.Object)",
              "java.lang.Class<Tau_T>.getClassLoader()",
              "java.lang.Class<Tau_T>.cast(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/Cilia_1/framework/runtime/src/main/java/fr/liglab/adele/cilia/knowledge/MediatorModelProxy.java",
      "classTypes": [
        "WeakReference"
      ],
      "sorrformalparam": [
        [
          "Object"
        ],
        [
          "Object"
        ]
      ],
      "types": [
        "Object",
        "ClassLoader",
        "Class"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ref.WeakReference.WeakReference(java.lang.Object)",
            "java.lang.Class<Tau_T>.getClassLoader()",
            "java.lang.Class<Tau_T>.cast(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "cast",
        "lang",
        "class"
      ]
    },
    {
      "method": "restoreState@166",
      "body": "/** \n * Restore the histogram state from the file 'fileName'.\n */\npublic boolean restoreState(String fileName) throws FileNotFoundException, IOException {\n  FileInputStream f=new FileInputStream(fileName);\n  DataInputStream iFile=new DataInputStream(f);\n  boolean res=restoreState(iFile);\n  f.close();\n  return res;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.DataInputStream.readLong()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.DataInputStream.readDouble()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.io.DataInputStream.readLong()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.FileInputStream.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "boolean",
        "boolean",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.lang.String)",
              "java.io.DataOutputStream.DataOutputStream(java.io.OutputStream)",
              "java.io.DataOutputStream.writeLong(long)",
              "java.io.DataOutputStream.writeDouble(double)",
              "java.io.DataOutputStream.writeLong(long)",
              "java.io.FileOutputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataInputStream.readLong()",
              "java.io.DataInputStream.readDouble()",
              "java.io.DataInputStream.readLong()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.DataOutputStream.writeLong(long)",
              "java.io.DataOutputStream.writeDouble(double)",
              "java.io.DataOutputStream.writeLong(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.println(java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.PrintStream.println(char[])"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/CSE523/JavaSim/src/arjuna/JavaSim/Statistics/PrecisionHistogram.java",
      "classTypes": [
        "Bucket",
        "long"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "DataInputStream"
        ],
        [
          "DataOutputStream"
        ],
        []
      ],
      "types": [
        "Double",
        "FileNotFoundException",
        "FileInputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.lang.String)",
            "java.io.DataInputStream.DataInputStream(java.io.InputStream)",
            "java.io.DataInputStream.readLong()",
            "java.io.DataInputStream.readDouble()",
            "java.io.DataInputStream.readLong()",
            "java.io.FileInputStream.close()"
          ]
        }
      ],
      "keywords": [
        "read",
        "found",
        "input"
      ]
    },
    {
      "method": "setHistoryMaxSize@651",
      "body": "/** \n * Sets the maximal size of the historical data. Defaults to {@link #DEFAULT_HISTORY_MAX_LENGTH}<p> <strong>Note:</strong> Setting this property will immediately enforce the specified max history size by dropping enough old historical records to enforce the desired size. Thus, any records that exceed the history size will be discarded and irreversibly lost. </p>\n * @param historyMaxSize The max history size.\n */\npublic void setHistoryMaxSize(int historyMaxSize){\nsynchronized (mInstanceLock) {\n    if (mHistoryMaxSize == historyMaxSize) {\n      return;\n    }\n    mHistoryMaxSize=historyMaxSize;\n    pruneExcessiveHistoricalRecordsLocked();\n    sortActivities();\n  }\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.List<Tau_E>.size()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.util.List<Tau_E>.remove(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_E"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.util.List<Tau_E>.isEmpty()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Collections.unmodifiableList(java.util.List)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "int",
        "ActivityChooserModel",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          },
          {
            "calls": [
              "java.util.List<Tau_E>.clear()",
              "java.util.List<Tau_E>.add(Tau_E)",
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<Tau_E>.size()",
              "java.util.List<Tau_E>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()",
              "java.lang.Runnable.run()"
            ]
          },
          {
            "calls": [
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)",
              "java.util.Map<Tau_K,Tau_V>.put(Tau_K,Tau_V)",
              "java.util.LinkedList<java.lang.Runnable>.offer(java.lang.Runnable)",
              "java.util.LinkedList<java.lang.Runnable>.poll()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.List<Tau_E>.isEmpty()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/Common-Sense-Net-2/AndroidBarSherlock/src/com/actionbarsherlock/widget/ActivityChooserModel.java",
      "classTypes": [
        "LinkedList<Runnable>",
        "Intent",
        "Object",
        "Map<String,ActivityChooserModel>",
        "Handler",
        "Object",
        "int",
        "boolean",
        "Map<String,ActivityResolveInfo>",
        "String"
      ],
      "sorrformalparam": [
        [
          "Runnable"
        ],
        [
          "Intent"
        ],
        [
          "ResolveInfo"
        ],
        [
          "Context",
          "String"
        ],
        [
          "ActivitySorter"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "remove",
        "size",
        "isEmpty"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.List<Tau_E>.remove(int)",
            "$NOT$java.util.List<Tau_E>.isEmpty()",
            "java.util.Collections.unmodifiableList(java.util.List)"
          ]
        }
      ],
      "keywords": [
        "size",
        "remove",
        "list",
        "util",
        "boolean",
        "empty"
      ]
    },
    {
      "method": "median@8583",
      "body": "/** \n * Add option -median to the ImageMagick commandline (see the documentation of ImageMagick for details).\n */\npublic IMOps median(Double radius){\n  String oper;\n  StringBuffer buf=new StringBuffer();\n  iCmdArgs.add(\"-median\");\n  if (radius != null) {\n    buf.append(radius.toString());\n  }\n  if (buf.length() > 0) {\n    iCmdArgs.add(buf.toString());\n  }\n  return this;\n}\n",
      "formalParam": [
        "Double"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Double.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.lang.StringBuffer.length()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.StringBuffer.toString()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps",
        "IMOps"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.Double.toString()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()"
            ]
          },
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer()",
              "java.lang.StringBuffer.length()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ]
      ],
      "returnType": "IMOps",
      "file": "./java_projects/chii2/transcoder.core/src/main/java/org/im4java/core/IMOps.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [
          "Double"
        ],
        [],
        [],
        []
      ],
      "types": [
        "StringBuffer",
        "Integer",
        "String"
      ],
      "apicalls": [
        "length",
        "append",
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()"
          ]
        },
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer()",
            "java.lang.Double.toString()",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.length()",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "length",
        "buffer",
        "string",
        "integer"
      ]
    },
    {
      "method": "setIn@126",
      "body": "/** \n * Set  {@link #in} to a new InputStream. This uses some VM magic to changea \"final\" variable, so naturally there is a security check, <code>RuntimePermission(\"setIO\")</code>.\n * @param in the new InputStream\n * @throws SecurityException if permission is denied\n * @since 1.1\n */\npublic static void setIn(InputStream in){\n  SecurityManager sm=SecurityManager.current;\n  if (sm != null)   sm.checkPermission(new RuntimePermission(\"setIO\"));\n  VMSystem.setIn(in);\n}\n",
      "formalParam": [
        "InputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.SecurityManager.checkPermission(java.security.Permission)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.SecurityManager.checkPropertyAccess(java.lang.String)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Runtime.getRuntime()",
              "java.lang.Runtime.loadLibrary(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
              "java.lang.SecurityManager.checkPermission(java.security.Permission)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
              "java.lang.SecurityManager.checkPermission(java.security.Permission)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/classpath/java/lang/System.java",
      "classTypes": [
        "PrintStream",
        "InputStream",
        "Collection<String>",
        "PrintStream",
        "Set<Map.Entry<String,String>>",
        "Map<String,String>",
        "Set<String>",
        "String"
      ],
      "sorrformalparam": [
        [
          "String",
          "String"
        ],
        [
          "String"
        ],
        [
          "PrintStream"
        ],
        [
          "PrintStream"
        ]
      ],
      "types": [
        "SecurityManager",
        "Permission",
        "RuntimePermission"
      ],
      "apicalls": [
        "checkPermission"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.RuntimePermission.RuntimePermission(java.lang.String)",
            "java.lang.SecurityManager.checkPermission(java.security.Permission)"
          ]
        }
      ],
      "keywords": [
        "check",
        "runtime"
      ]
    },
    {
      "method": "FGEUnionArea@188",
      "body": "public FGEUnionArea(List<? extends FGEArea> objects){\n  this();\n  for (  FGEArea o : objects) {\n    addArea(o.clone());\n  }\n  if (objects.size() == 1) {\n    logger.warning(\"Called constructor for FGEUnionArea with 1 object\");\n  }\n}\n",
      "formalParam": [
        "List<? extends FGEArea>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.List<Tau_E>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.logging.Logger.warning(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/openflexo/flexodesktop/GUI/flexographicalengine/src/main/java/org/openflexo/fge/geom/area/FGEUnionArea.java",
      "classTypes": [
        "Vector<FGEArea>",
        "Logger"
      ],
      "sorrformalparam": [],
      "types": [
        "String",
        "Logger",
        "List"
      ],
      "apicalls": [
        "warning"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<Tau_E>.size()",
            "java.util.logging.Logger.warning(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.util.List<Tau_E>.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "string",
        "list",
        "size",
        "logging",
        "logger"
      ]
    },
    {
      "method": "getCurrentAccessibleValue@2552",
      "body": "/** \n * Get the value of this object as a Number.\n * @return An Integer of 0 if this isn't selected or an Integer of 1 ifthis is selected.\n * @see AbstractButton#isSelected\n */\npublic Number getCurrentAccessibleValue(){\n  if (isSelected()) {\n    return Integer.valueOf(1);\n  }\n else {\n    return Integer.valueOf(0);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ],
            "_cond": [
              {
                "_call": "javax.swing.ButtonModel.isSelected()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.lang.Integer.valueOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Integer"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "AccessibleStateSet",
        "void",
        "void",
        "void",
        "AttributeSet",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.ButtonModel.isArmed()",
              "java.awt.Component.isFocusOwner()",
              "javax.swing.ButtonModel.isPressed()",
              "javax.swing.ButtonModel.isSelected()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "$NOT$java.awt.Component.isEnabled()"
            ]
          },
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "$NOT$java.awt.Component.isEnabled()",
              "java.awt.Component.repaint()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
              "java.awt.Component.isFocusOwner()",
              "javax.swing.JComponent.revalidate()",
              "java.awt.Component.repaint()"
            ]
          },
          {
            "calls": [
              "javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)",
              "java.awt.Component.isFocusOwner()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.swing.JComponent.revalidate()",
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.ButtonModel.isSelected()",
              "java.awt.Component.repaint()"
            ]
          },
          {
            "calls": [
              "java.awt.Component.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.accessibility.AccessibleContext.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)",
              "javax.swing.JComponent.revalidate()",
              "$NOT$java.awt.Component.isEnabled()",
              "javax.swing.ButtonModel.isSelected()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.text.View.getDocument()",
              "javax.swing.text.Element.getAttributes()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Number.intValue()",
              "javax.swing.ButtonModel.isSelected()",
              "javax.swing.ButtonModel.setSelected(boolean)"
            ]
          }
        ]
      ],
      "returnType": "Number",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/swing/AbstractButton.java",
      "classTypes": [
        "boolean",
        "boolean",
        "boolean",
        "String",
        "String",
        "int",
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "Icon"
        ],
        [
          "boolean"
        ],
        [
          "Icon"
        ],
        [
          "int"
        ],
        [
          "Number"
        ]
      ],
      "types": [
        "Boolean",
        "ButtonModel"
      ],
      "apicalls": [
        "valueOf"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.ButtonModel.isSelected()",
            "java.lang.Integer.valueOf(int)"
          ]
        }
      ],
      "keywords": [
        "model",
        "lang",
        "value",
        "integer"
      ]
    },
    {
      "method": "composeFilename@186",
      "body": "public String composeFilename(){\n  final StringBuffer filename=new StringBuffer(128);\n  if (composite != null) {\n    filename.append(composite.composeFilename().trim());\n    filename.append('.');\n    filename.append(extension);\n  }\n  return filename.toString();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.StringBuffer.StringBuffer(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(char)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuffer"
          },
          {
            "_call": "java.lang.StringBuffer.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "String",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer(int)",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.lang.StringBuffer.append(char)",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.toString()",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.StringBuffer.StringBuffer(int)",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.next()",
              "java.lang.StringBuffer.append(java.lang.String)",
              "java.lang.StringBuffer.append(java.lang.Object)",
              "java.util.Iterator.hasNext()",
              "java.lang.StringBuffer.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/open-bluedragon/src/org/farng/mp3/filename/FilenameTag.java",
      "classTypes": [
        "ID3v2_4",
        "AbstractFilenameComposite",
        "MP3File",
        "String"
      ],
      "sorrformalparam": [
        [],
        [],
        [
          "ID3v2_4"
        ]
      ],
      "types": [
        "Integer",
        "StringBuffer",
        "String",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.StringBuffer.StringBuffer(int)",
            "java.lang.StringBuffer.append(java.lang.Object)",
            "java.lang.StringBuffer.append(char)",
            "java.lang.StringBuffer.append(java.lang.String)",
            "java.lang.StringBuffer.toString()"
          ]
        }
      ],
      "keywords": [
        "append",
        "object",
        "integer"
      ]
    },
    {
      "method": "resetDefaultForeignSource@103",
      "body": "/** \n * <p>resetDefaultForeignSource</p>\n * @throws org.opennms.netmgt.provision.persist.ForeignSourceRepositoryException if any.\n */\npublic void resetDefaultForeignSource() throws ForeignSourceRepositoryException {\n  final File deleteFile=new File(ConfigFileConstants.getFilePathString() + \"default-foreign-source.xml\");\n  if (!deleteFile.exists()) {\n    return;\n  }\n  if (!deleteFile.delete()) {\n    LogUtils.warnf(this,\"unable to remove %s\",deleteFile.getPath());\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.io.File.exists()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "$NOT$java.io.File.delete()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.io.File.getPath()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/opennms_dashboard/opennms-provision/opennms-provision-persistence/src/main/java/org/opennms/netmgt/provision/persist/AbstractForeignSourceRepository.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "ForeignSource"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "exists"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.delete()",
            "java.io.File.getPath()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "$NOT$java.io.File.exists()",
            "$NOT$java.io.File.delete()"
          ]
        }
      ],
      "keywords": [
        "exists",
        "path"
      ]
    },
    {
      "method": "testGetLineMetricsCharArrayIntIntGraphics@129",
      "body": "public final void testGetLineMetricsCharArrayIntIntGraphics(){\n  char[] chars=new char[]{'H','e','l','l','o',' ','w','o','r','l','d','!'};\n  LineMetrics lm=fm.getLineMetrics(chars,0,chars.length,g);\n  lmEquals(physicalFont.getLineMetrics(chars,0,chars.length,((Graphics2D)g).getFontRenderContext()),lm);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.FontMetrics.getLineMetrics(char[],int,int,java.awt.Graphics)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.font.LineMetrics"
          },
          {
            "_call": "java.awt.Graphics2D.getFontRenderContext()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.font.FontRenderContext"
          },
          {
            "_call": "java.awt.Font.getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.font.LineMetrics"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getFontMetrics(java.awt.Font)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.FontMetrics.getLineMetrics(java.lang.String,int,int,java.awt.Graphics)",
              "java.awt.Graphics2D.getFontRenderContext()",
              "java.awt.Font.getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony-classlib/modules/awt/src/test/impl/windows/org/apache/harmony/awt/tests/java/awt/WinFontMetricsTest.java",
      "classTypes": [
        "FontMetrics",
        "Graphics"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Graphics2D"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.FontMetrics.getLineMetrics(char[],int,int,java.awt.Graphics)",
            "java.awt.Graphics2D.getFontRenderContext()",
            "java.awt.Font.getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)"
          ]
        }
      ],
      "keywords": [
        "graphics"
      ]
    },
    {
      "method": "testDeleteTag@51",
      "body": "@Test public void testDeleteTag(){\n  String createdInstance=instanceConnector.createInstance(\"m1.tiny\",\"wyan\",\"in-memory\");\n  Response response1=tagResource.deleteTag(createdInstance,\"new tag\");\n  assertEquals(Status.NO_CONTENT.getStatusCode(),response1.getStatus());\n  Response response2=tagResource.deleteTag(UUID.randomUUID().toString(),\"new tag\");\n  assertEquals(Status.NOT_FOUND.getStatusCode(),response2.getStatus());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.UUID.randomUUID()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.UUID"
          },
          {
            "_call": "java.util.UUID.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.UUID.randomUUID()",
              "java.util.UUID.toString()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/cloud-management/src/test/java/com/proofpoint/cloudmanagement/service/TestTagResource.java",
      "classTypes": [
        "InMemoryInstanceConnector",
        "TagResource"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "toString",
        "randomUUID"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.UUID.randomUUID()",
            "java.util.UUID.toString()"
          ]
        }
      ],
      "keywords": [
        "uuid",
        "util",
        "random",
        "string"
      ]
    },
    {
      "method": "implode@145",
      "body": "public static String implode(final Collection<? extends Object> coll,final String glue){\n  return implode(coll.toArray(new Object[0]),glue);\n}\n",
      "formalParam": [
        "Collection<? extends Object>",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Collection<Tau_E>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          },
          {
            "_call": "java.lang.StringBuilder.StringBuilder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.append(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.StringBuilder"
          },
          {
            "_call": "java.lang.StringBuilder.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String",
        "Integer"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.StringBuilder.StringBuilder()",
              "java.lang.StringBuilder.append(java.lang.String)",
              "java.lang.StringBuilder.append(java.lang.Object)",
              "java.lang.StringBuilder.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.substring(int,int)",
              "java.lang.String.toUpperCase()",
              "java.lang.String.substring(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.length()",
              "java.lang.String.charAt(int)",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/TerrainControl/common/src/com/khorn/terraincontrol/util/Txt.java",
      "classTypes": [
        "Pattern",
        "int",
        "String",
        "Map<String,String>"
      ],
      "sorrformalparam": [
        [
          "Object[]",
          "String"
        ],
        [
          "String"
        ],
        [
          "String"
        ]
      ],
      "types": [
        "String",
        "StringBuilder"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Collection<Tau_E>.toArray(T[])",
            "java.lang.StringBuilder.StringBuilder()",
            "java.lang.StringBuilder.append(java.lang.String)",
            "java.lang.StringBuilder.append(java.lang.Object)",
            "java.lang.StringBuilder.toString()"
          ]
        }
      ],
      "keywords": [
        "append"
      ]
    },
    {
      "method": "count@1199",
      "body": "public boolean count(){\n  if (hasBudget()) {\n    mTotal+=1;\n    mCurTotal+=1;\n    return true;\n  }\n else   return false;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "$NOT$java.lang.Double.isNaN(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.Double.isNaN(double)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "IBinder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Double.isNaN(double)"
            ]
          },
          {
            "calls": [
              "java.lang.Double.isNaN(double)",
              "$NOT$java.lang.Double.isNaN(double)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getName()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/AccelService/src/edu/ucla/cens/accelservice/AccelService.java",
      "classTypes": [
        "String",
        "int",
        "String",
        "double",
        "int",
        "List<Double>"
      ],
      "sorrformalparam": [
        [],
        [
          "Intent"
        ]
      ],
      "types": [
        "Boolean",
        "Double"
      ],
      "apicalls": [
        "isNaN"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Double.isNaN(double)"
          ]
        },
        {
          "calls": [
            "java.lang.Double.isNaN(double)",
            "$NOT$java.lang.Double.isNaN(double)"
          ]
        }
      ],
      "keywords": [
        "n",
        "na",
        "boolean",
        "double",
        "lang"
      ]
    },
    {
      "method": "testEventOffset@38",
      "body": "@Test public void testEventOffset() throws InterruptedException, AttributeNotFoundException, InstanceNotFoundException, MalformedObjectNameException, MBeanException, ReflectionException, NullPointerException {\n  String drl=\"package org.drools.test\\n\" + \"import org.drools.StockTick\\n\" + \"declare StockTick\\n\"+ \"    @role(event)\\n\"+ \"    @expires(10s)\\n\"+ \"end\\n\"+ \"rule X\\n\"+ \"when\\n\"+ \"    StockTick()\\n\"+ \"then\\n\"+ \"end\";\n  KnowledgeBaseConfiguration conf=KnowledgeBaseFactory.newKnowledgeBaseConfiguration();\n  conf.setOption(EventProcessingOption.STREAM);\n  conf.setOption(MBeansOption.ENABLED);\n  KnowledgeBase kbase=loadKnowledgeBase(\"monitoredKbase\",drl,conf);\n  MBeanServer mbserver=ManagementFactory.getPlatformMBeanServer();\n  ObjectName kbOn=new ObjectName(\"org.drools.kbases:type=monitoredKbase\");\n  mbserver.invoke(kbOn,\"startInternalMBeans\",new Object[0],new String[0]);\n  Object expOffset=mbserver.getAttribute(new ObjectName(\"org.drools.kbases:type=monitoredKbase,group=EntryPoints,EntryPoint=DEFAULT,ObjectType=org.drools.StockTick\"),\"ExpirationOffset\");\n  Assert.assertEquals(10001,((Number)expOffset).longValue());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.management.MBeanServer"
          },
          {
            "_call": "javax.management.ObjectName.ObjectName(java.lang.String)",
            "_throws": [
              "javax.management.MalformedObjectNameException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.management.MBeanServer.invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])",
            "_throws": [
              "javax.management.ReflectionException",
              "javax.management.MBeanException",
              "javax.management.InstanceNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "javax.management.ObjectName.ObjectName(java.lang.String)",
            "_throws": [
              "javax.management.MalformedObjectNameException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "javax.management.MBeanServer.getAttribute(javax.management.ObjectName,java.lang.String)",
            "_throws": [
              "javax.management.InstanceNotFoundException",
              "javax.management.ReflectionException",
              "javax.management.AttributeNotFoundException",
              "javax.management.MBeanException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.Number.longValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/drools/drools-compiler/src/test/java/org/drools/integrationtests/MBeansMonitoringTest.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [
        "ManagementFactory"
      ],
      "apicalls": [
        "getPlatformMBeanServer"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.management.ManagementFactory.getPlatformMBeanServer()",
            "javax.management.ObjectName.ObjectName(java.lang.String)",
            "javax.management.MBeanServer.invoke(javax.management.ObjectName,java.lang.String,java.lang.Object[],java.lang.String[])",
            "javax.management.ObjectName.ObjectName(java.lang.String)",
            "javax.management.MBeanServer.getAttribute(javax.management.ObjectName,java.lang.String)",
            "java.lang.Number.longValue()"
          ]
        }
      ],
      "keywords": [
        "object",
        "management"
      ]
    },
    {
      "method": "getKey@7423",
      "body": "public byte[] getKey(){\n  setKey(TBaseHelper.rightSize(key));\n  return key.array();\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.ByteBuffer.array()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [
        "describe_schema_versions_result",
        "void",
        "void",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()",
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.entrySet()",
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)",
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>.HashMap<String,List<String>>()",
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.put(java.lang.String,java.util.List<java.lang.String>)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.size()",
              "java.util.Map<java.lang.String,java.util.List<java.lang.String>>.entrySet()",
              "java.util.List<java.lang.String>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.nio.ByteBuffer>.ArrayList<ByteBuffer>()",
              "java.util.List<java.nio.ByteBuffer>.add(java.nio.ByteBuffer)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.List<java.lang.String>.add(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/logprocessing/ui/src/java/org/apache/cassandra/thrift/Cassandra.java",
      "classTypes": [
        "TimedOutException",
        "TField",
        "Map<_Fields,FieldMetaData>"
      ],
      "sorrformalparam": [
        [],
        [
          "String",
          "List<String>"
        ],
        [
          "TProtocol"
        ],
        [
          "ByteBuffer"
        ],
        [
          "describe_splits_result"
        ]
      ],
      "types": [
        "ByteBuffer",
        "Byte"
      ],
      "apicalls": [
        "wrap",
        "array"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.nio.ByteBuffer.array()"
          ]
        }
      ],
      "keywords": [
        "buffer",
        "byte",
        "nio",
        "wrap",
        "array"
      ]
    },
    {
      "method": "readCatch@45",
      "body": "public static String readCatch(File file){\n  try {\n    return read(file);\n  }\n catch (  IOException e) {\n    return null;\n  }\n}\n",
      "formalParam": [
        "File"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.FileInputStream.FileInputStream(java.io.File)",
            "_throws": [
              "java.io.FileNotFoundException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.String(byte[],java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.io.BufferedReader.readLine()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ]
          },
          {
            "_call": "java.io.BufferedReader.close()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "boolean",
        "void",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.lang.String.String(byte[],java.lang.String)",
              "java.io.BufferedReader.readLine()",
              "java.io.BufferedReader.readLine()",
              "java.io.BufferedReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.getChannel()",
              "java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel,long,long)",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.getChannel()",
              "java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel,long,long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File,boolean)",
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
              "java.io.BufferedWriter.BufferedWriter(java.io.Writer)",
              "java.io.Writer.write(java.lang.String)",
              "java.io.BufferedWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File,boolean)",
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
              "java.io.BufferedWriter.BufferedWriter(java.io.Writer)",
              "java.io.Writer.write(java.lang.String)",
              "java.io.BufferedWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.getChannel()",
              "java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel,long,long)"
            ]
          },
          {
            "calls": [
              "java.net.URL.URL(java.lang.String)",
              "java.net.URL.openStream()",
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.FileOutputStream.getChannel()",
              "java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel,long,long)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/CreativeGates/src/com/massivecraft/creativegates/zcore/util/DiscUtil.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "File"
        ],
        [
          "String",
          "String"
        ],
        [
          "File",
          "String"
        ],
        [
          "File",
          "String"
        ],
        [
          "String",
          "File"
        ]
      ],
      "types": [
        "InputStream"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.FileInputStream.FileInputStream(java.io.File)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream,java.lang.String)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.lang.String.String(byte[],java.lang.String)",
            "java.io.BufferedReader.readLine()",
            "java.io.BufferedReader.readLine()",
            "java.io.BufferedReader.close()"
          ]
        }
      ],
      "keywords": [
        "buffered",
        "found"
      ]
    },
    {
      "method": "mousePressed@2005",
      "body": "/** \n * Called when a mouse button is pressed.\n */\npublic void mousePressed(MouseEvent e){\n  Font font=fileWindow.textArea.getFont();\n  FontMetrics metrics=getFontMetrics(font);\n  int h=metrics.getHeight();\n  pressLine=e.getY() / h;\n}\n",
      "formalParam": [
        "MouseEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.awt.Component.getFont()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.Font"
          },
          {
            "_call": "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.awt.FontMetrics"
          },
          {
            "_call": "java.awt.FontMetrics.getHeight()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.awt.event.MouseEvent.getY()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "String",
        "JTree",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JTextArea.insert(java.lang.String,int)",
              "java.lang.String.length()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Window.setLocationRelativeTo(java.awt.Component)",
              "java.awt.Dialog.setVisible(boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)",
              "javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()",
              "javax.swing.AbstractButton.doClick()"
            ]
          },
          {
            "calls": [
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Toolkit.getDefaultToolkit()",
              "java.awt.Toolkit.getSystemEventQueue()",
              "java.util.EventObject.getSource()",
              "java.awt.Component.dispatchEvent(java.awt.AWTEvent)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/etherpad/infrastructure/rhino1_7R1/toolsrc/org/mozilla/javascript/tools/debugger/SwingGui.java",
      "classTypes": [
        "ContextWindow",
        "FileWindow",
        "JButton",
        "long"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "MouseEvent"
        ],
        [
          "Component"
        ],
        [
          "TreeTableModel"
        ],
        [
          "MouseEvent"
        ],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.awt.Component.getFont()",
            "javax.swing.JComponent.getFontMetrics(java.awt.Font)",
            "java.awt.FontMetrics.getHeight()",
            "java.awt.event.MouseEvent.getY()"
          ]
        }
      ],
      "keywords": [
        "height"
      ]
    },
    {
      "method": "addError@235",
      "body": "public void addError(Throwable th){\n  if (m_errors == null) {\n    m_errors=new ArrayList<Throwable>();\n  }\n  m_errors.add(th);\n}\n",
      "formalParam": [
        "Throwable"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.Throwable>.ArrayList<Throwable>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.Throwable>.add(java.lang.Throwable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.String,java.lang.Object>.entrySet()",
              "java.lang.String.startsWith(java.lang.String)",
              "$NOT$java.util.List<java.lang.Throwable>.isEmpty()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.Throwable>.ArrayList<Throwable>()",
              "java.util.List<java.lang.Throwable>.addAll(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/turmeric-runtime/soa-server/src/main/java/org/ebayopensource/turmeric/runtime/spf/impl/pipeline/ServerMessageContextBuilder.java",
      "classTypes": [
        "boolean",
        "ServiceOperationDesc",
        "String",
        "String",
        "List<Throwable>",
        "ServerServiceDesc",
        "ServiceAddress",
        "BaseMessageAttachments"
      ],
      "sorrformalparam": [
        [
          "String",
          "Object"
        ],
        [
          "ServerMessageContextImpl"
        ],
        [
          "Collection<Throwable>"
        ]
      ],
      "types": [
        "Boolean",
        "ArrayList",
        "List"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.Throwable>.ArrayList<Throwable>()",
            "java.util.List<java.lang.Throwable>.add(java.lang.Throwable)"
          ]
        }
      ],
      "keywords": [
        "boolean",
        "add"
      ]
    },
    {
      "method": "readLine@58",
      "body": "public static String readLine(String promote,String defaultValue){\n  String value=readLine(promote);\n  return Strings.isEmpty(value) ? defaultValue : value;\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.PrintStream.print(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.BufferedReader.readLine()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String",
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.io.BufferedReader.readLine()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintStream.print(java.lang.String)",
              "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.io.BufferedReader.readLine()"
            ]
          }
        ]
      ],
      "returnType": "String",
      "file": "./java_projects/bingo-core/core-lang/src/main/java/bingo/lang/Console.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [
          "String"
        ]
      ],
      "types": [
        "InputStreamReader",
        "BufferedReader"
      ],
      "apicalls": [
        "print"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.PrintStream.print(java.lang.String)",
            "java.io.InputStreamReader.InputStreamReader(java.io.InputStream)",
            "java.io.BufferedReader.BufferedReader(java.io.Reader)",
            "java.io.BufferedReader.readLine()"
          ]
        }
      ],
      "keywords": []
    },
    {
      "method": "testByteEqualsShort@84",
      "body": "public void testByteEqualsShort(){\n  JsonPrimitive p1=new JsonPrimitive(new Byte((byte)10));\n  JsonPrimitive p2=new JsonPrimitive(new Short((short)10));\n  assertEquals(p1,p2);\n  assertEquals(p1.hashCode(),p2.hashCode());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Byte.Byte(byte)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Short.Short(short)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Byte.Byte(byte)",
              "java.math.BigInteger.BigInteger(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Float.Float(float)",
              "java.math.BigDecimal.BigDecimal(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Float.Float(float)",
              "java.lang.Double.Double(double)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/frostwire-desktop/lib/jars-src/google-gson-1.4/src/test/java/com/google/gson/JsonPrimitiveTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "Short",
        "Byte"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.Byte.Byte(byte)",
            "java.lang.Short.Short(short)"
          ]
        }
      ],
      "keywords": [
        "short",
        "byte",
        "lang"
      ]
    },
    {
      "method": "testGetAssetBinary@555",
      "body": "@Test @RunAsClient public void testGetAssetBinary(@ArquillianResource URL baseURL) throws Exception {\n  URL url=new URL(baseURL,\"rest/packages/restPackage1/assets/model1/binary\");\n  HttpURLConnection connection=(HttpURLConnection)url.openConnection();\n  connection.setRequestProperty(\"Authorization\",\"Basic \" + new Base64().encodeToString((\"admin:admin\".getBytes())));\n  connection.setRequestMethod(\"GET\");\n  connection.setRequestProperty(\"Accept\",MediaType.APPLICATION_OCTET_STREAM);\n  connection.connect();\n  assertEquals(200,connection.getResponseCode());\n  assertEquals(MediaType.APPLICATION_OCTET_STREAM,connection.getContentType());\n}\n",
      "formalParam": [
        "URL"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.net.URL.URL(java.net.URL,java.lang.String)",
            "_throws": [
              "java.net.MalformedURLException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.String.getBytes()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "byte[]"
          },
          {
            "_call": "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
            "_throws": [
              "java.net.ProtocolException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.URLConnection.connect()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.HttpURLConnection.getResponseCode()",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.net.URLConnection.getContentType()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.lang.String.getBytes()",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.URLConnection.connect()",
              "java.net.HttpURLConnection.getResponseCode()",
              "java.net.URLConnection.getContentType()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.toExternalForm()",
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.net.URL.toExternalForm()",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.io.BufferedReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.toExternalForm()",
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.net.URL.toExternalForm()",
              "java.io.BufferedReader.BufferedReader(java.io.Reader)",
              "java.io.BufferedReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.toExternalForm()",
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.net.URL.toExternalForm()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.lang.String.getBytes()",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.URLConnection.connect()",
              "java.net.HttpURLConnection.getResponseCode()",
              "java.net.URLConnection.getContentType()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.lang.String.getBytes()",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.URLConnection.connect()",
              "java.net.HttpURLConnection.getResponseCode()",
              "java.net.URLConnection.getContentType()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.URL(java.net.URL,java.lang.String)",
              "java.lang.String.getBytes()",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
              "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
              "java.net.URLConnection.connect()",
              "java.net.HttpURLConnection.getResponseCode()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/guvnor/guvnor-webapp-drools/src/test/java/org/drools/guvnor/server/jaxrs/AssetPackageResourceIntegrationTest.java",
      "classTypes": [
        "int"
      ],
      "sorrformalparam": [
        [
          "URL"
        ],
        [
          "URL"
        ],
        [
          "URL"
        ],
        [
          "URL"
        ],
        [
          "URL"
        ],
        [
          "URL"
        ],
        [
          "URL"
        ]
      ],
      "types": [
        "MalformedURLException"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.net.URL.URL(java.net.URL,java.lang.String)",
            "java.lang.String.getBytes()",
            "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
            "java.net.HttpURLConnection.setRequestMethod(java.lang.String)",
            "java.net.URLConnection.setRequestProperty(java.lang.String,java.lang.String)",
            "java.net.URLConnection.connect()",
            "java.net.HttpURLConnection.getResponseCode()",
            "java.net.URLConnection.getContentType()"
          ]
        }
      ],
      "keywords": [
        "url"
      ]
    },
    {
      "method": "testRemoveITL@49",
      "body": "/** \n * remove in InheritableThreadLocal causes next access to return initial value\n */\npublic void testRemoveITL(){\n  assertEquals(itl.get(),zero);\n  itl.set(two);\n  assertEquals(itl.get(),two);\n  itl.remove();\n  assertEquals(itl.get(),zero);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.ThreadLocal<java.lang.Integer>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.lang.ThreadLocal<java.lang.Integer>.set(java.lang.Integer)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.ThreadLocal<java.lang.Integer>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          },
          {
            "_call": "java.lang.ThreadLocal<java.lang.Integer>.remove()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.ThreadLocal<java.lang.Integer>.get()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Integer"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.ThreadLocal<java.lang.Integer>.get()",
              "java.lang.ThreadLocal<java.lang.Integer>.set(java.lang.Integer)",
              "java.lang.ThreadLocal<java.lang.Integer>.get()",
              "java.lang.ThreadLocal<java.lang.Integer>.remove()",
              "java.lang.ThreadLocal<java.lang.Integer>.get()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Thread.start()",
              "java.lang.Thread.join()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/harmony_1/classlib/modules/concurrent/src/test/java/ThreadLocalTest.java",
      "classTypes": [
        "InheritableThreadLocal<Integer>",
        "int[]"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.ThreadLocal<java.lang.Integer>.get()",
            "java.lang.ThreadLocal<java.lang.Integer>.set(java.lang.Integer)",
            "java.lang.ThreadLocal<java.lang.Integer>.get()",
            "java.lang.ThreadLocal<java.lang.Integer>.remove()",
            "java.lang.ThreadLocal<java.lang.Integer>.get()"
          ]
        }
      ],
      "keywords": [
        "lang"
      ]
    },
    {
      "method": "getObjectY@622",
      "body": "/** \n * Returns the y-coordinate of a specific object from a specific group.\n * @param groupID Index of a group\n * @param objectID Index of an object\n * @return The y-coordinate of an object, or -1, when error occurred\n */\npublic int getObjectY(int groupID,int objectID){\n  if (groupID >= 0 && groupID < objectGroups.size()) {\n    ObjectGroup grp=(ObjectGroup)objectGroups.get(groupID);\n    if (objectID >= 0 && objectID < grp.objects.size()) {\n      GroupObject object=(GroupObject)grp.objects.get(objectID);\n      return object.y;\n    }\n  }\n  return -1;\n}\n",
      "formalParam": [
        "int",
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": [
              {
                "_call": "java.util.ArrayList.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "TileSet",
        "int",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.size()",
              "java.util.ArrayList.size()"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList.size()"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/ProjetX/slick/src/org/newdawn/slick/tiled/TiledMap.java",
      "classTypes": [
        "ArrayList",
        "String",
        "ArrayList"
      ],
      "sorrformalparam": [
        [
          "int",
          "int",
          "int",
          "int",
          "int",
          "int",
          "boolean"
        ],
        [
          "int"
        ],
        [
          "int",
          "int"
        ],
        [
          "int",
          "int"
        ]
      ],
      "types": [
        "ArrayList",
        "Integer"
      ],
      "apicalls": [
        "size"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList.size()",
            "java.util.ArrayList.size()"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList.size()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "size",
        "array",
        "list",
        "util"
      ]
    },
    {
      "method": "updateSecurityScanResult@212",
      "body": "public synchronized void updateSecurityScanResult(SecurityScanResult checkResult){\n  logListModel.updateSecurityScanResult(checkResult,errorsOnly);\n  if (follow) {\n    try {\n      testLogList.ensureIndexIsVisible(logListModel.getSize() - 1);\n    }\n catch (    RuntimeException e) {\n      log.error(e.getMessage());\n    }\n  }\n}\n",
      "formalParam": [
        "SecurityScanResult"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.getMessage()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_try": [
              {
                "_call": "javax.swing.JList.ensureIndexIsVisible(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.getSelectedIndex()",
              "java.awt.event.MouseEvent.getClickCount()",
              "java.awt.event.ActionEvent.ActionEvent(java.lang.Object,int,java.lang.String)"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.getSelectedIndex()",
              "java.awt.event.MouseEvent.getClickCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.PrintWriter.PrintWriter(java.io.File)",
              "java.io.PrintWriter.println(java.lang.String)",
              "java.io.PrintWriter.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)",
              "java.lang.Throwable.getMessage()"
            ]
          },
          {
            "calls": [
              "javax.swing.JList.ensureIndexIsVisible(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/soapui/src/java/com/eviware/soapui/security/log/JSecurityTestRunLog.java",
      "classTypes": [
        "Set<String>",
        "int",
        "SecurityTestLogModel",
        "String",
        "Settings",
        "Font",
        "JList",
        "JHyperlinkLabel",
        "String",
        "Font"
      ],
      "sorrformalparam": [
        [
          "SecurityScanRequestResult"
        ],
        [
          "MouseEvent"
        ],
        [
          "SecurityTestStepResult",
          "boolean",
          "boolean"
        ],
        [
          "ActionEvent"
        ],
        [
          "SecurityScan"
        ],
        [
          "TestStep"
        ]
      ],
      "types": [],
      "apicalls": [
        "ensureIndexIsVisible",
        "getMessage"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.JList.ensureIndexIsVisible(int)",
            "java.lang.Throwable.getMessage()"
          ]
        },
        {
          "calls": [
            "javax.swing.JList.ensureIndexIsVisible(int)"
          ]
        }
      ],
      "keywords": [
        "j"
      ]
    },
    {
      "method": "getIORTemplates@295",
      "body": "/** \n * Return the IORTemplateList for this IOR. Will throw exception if it is not possible to generate an IOR from the IORTemplateList that is equal to this IOR, which can only happen if not every TaggedProfile in the IOR has the same ObjectId.\n */\npublic synchronized IORTemplateList getIORTemplates(){\n  if (iortemps == null)   initializeIORTemplateList();\n  return iortemps;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.Object>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator<java.lang.Object>.hasNext()",
              "java.util.Iterator<java.lang.Object>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "IORTemplateList",
      "file": "./java_projects/jboss-rmi-api_spec/src/main/java/org/jboss/com/sun/corba/se/impl/ior/IORImpl.java",
      "classTypes": [
        "ORB",
        "IORTemplateList",
        "String",
        "boolean",
        "IORSystemException",
        "int"
      ],
      "sorrformalparam": [
        [
          "ORB",
          "String",
          "IORTemplateList",
          "ObjectId"
        ]
      ],
      "types": [
        "Object",
        "Iterator",
        "HashMap"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap<Tau_K,Tau_V>.HashMap()",
            "java.util.Iterator<java.lang.Object>.hasNext()",
            "java.util.Iterator<java.lang.Object>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "hash",
        "boolean"
      ]
    },
    {
      "method": "invoke@79",
      "body": "public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {\n  Class<?> decl=method.getDeclaringClass();\n  if (decl == Object.class || decl == GroovyObject.class)   try {\n    return method.invoke(this,args);\n  }\n catch (  InvocationTargetException e) {\n    throw e.getCause();\n  }\n  TagFile a=method.getAnnotation(TagFile.class);\n  String tagName=a != null ? a.value() : method.getName();\n  builder.doInvokeMethod(new QName(nsUri,tagName,prefix),args);\n  return null;\n}\n",
      "formalParam": [
        "Object",
        "Method",
        "Object[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.reflect.Method.getDeclaringClass()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Class"
          },
          {
            "_call": "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "_throws": [
              "java.lang.IllegalAccessException",
              "java.lang.IllegalArgumentException",
              "java.lang.reflect.InvocationTargetException"
            ],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.lang.reflect.Method.getAnnotation(java.lang.Class)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.reflect.Method.getName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "T"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Class<Tau_T>.getClassLoader()",
              "java.lang.Class<Tau_T>.cast(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/stapler/groovy/src/main/java/org/kohsuke/stapler/jelly/groovy/Namespace.java",
      "classTypes": [
        "JellyBuilder",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "Class<T>"
        ]
      ],
      "types": [
        "Object"
      ],
      "apicalls": [
        "getName"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.reflect.Method.getDeclaringClass()",
            "java.lang.reflect.Method.invoke(java.lang.Object,java.lang.Object[])",
            "java.lang.reflect.Method.getAnnotation(java.lang.Class)",
            "java.lang.reflect.Method.getName()"
          ]
        }
      ],
      "keywords": [
        "declaring"
      ]
    },
    {
      "method": "forwardDCTExtreme@623",
      "body": "public double[][] forwardDCTExtreme(float input[][]){\n  double output[][]=new double[N][N];\n  int v, u, x, y;\n  for (v=0; v < 8; v++) {\n    for (u=0; u < 8; u++) {\n      for (x=0; x < 8; x++) {\n        for (y=0; y < 8; y++) {\n          output[v][u]+=((double)input[x][y]) * Math.cos(((double)(2 * x + 1) * (double)u * Math.PI) / (double)16) * Math.cos(((double)(2 * y + 1) * (double)v * Math.PI) / (double)16);\n        }\n      }\n      output[v][u]*=(double)(0.25) * ((u == 0) ? ((double)1.0 / Math.sqrt(2)) : (double)1.0) * ((v == 0) ? ((double)1.0 / Math.sqrt(2)) : (double)1.0);\n    }\n  }\n  return output;\n}\n",
      "formalParam": [
        "float[][]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.Math.cos(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          },
          {
            "_call": "java.lang.Math.sqrt(double)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "double"
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.BufferedOutputStream.write(byte[],int,int)"
            ]
          },
          {
            "calls": [
              "java.io.BufferedOutputStream.write(byte[],int,int)",
              "java.lang.Throwable.getMessage()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "double[][]",
      "file": "./java_projects/open-bluedragon/src/com/naryx/tagfusion/cfm/tag/awt/JpegEncoder.java",
      "classTypes": [
        "Object",
        "JpegInfo",
        "int",
        "int",
        "int[]",
        "boolean[]",
        "Image",
        "int",
        "int[]"
      ],
      "sorrformalparam": [
        [
          "BufferedOutputStream"
        ]
      ],
      "types": [],
      "apicalls": [
        "sqrt",
        "cos"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.Math.cos(double)",
            "java.lang.Math.sqrt(double)"
          ]
        }
      ],
      "keywords": [
        "lang",
        "double",
        "sqrt",
        "cos",
        "math"
      ]
    },
    {
      "method": "ServiceRegistry@104",
      "body": "/** \n * Constructs a <code>ServiceRegistry</code> instance with a set of categories taken from the <code>categories</code> argument.\n * @param categories an <code>Iterator</code> containing<code>Class</code> objects to be used to define categories.\n * @exception IllegalArgumentException if<code>categories</code> is <code>null</code>.\n */\npublic ServiceRegistry(Iterator<Class<?>> categories){\n  if (categories == null) {\n    throw new IllegalArgumentException(\"categories == null!\");\n  }\n  while (categories.hasNext()) {\n    Class category=(Class)categories.next();\n    SubRegistry reg=new SubRegistry(this,category);\n    categoryMap.put(category,reg);\n  }\n}\n",
      "formalParam": [
        "Iterator<Class<?>>"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Map.put(java.lang.Object,java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Object"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<java.lang.Class<?>>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "T",
        "Iterator",
        "void",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.lang.Class<Tau_T>.isAssignableFrom(java.lang.Class)",
              "java.util.Map<java.lang.Class<?>,java.lang.Object>.get(java.lang.Object)",
              "java.util.Map<java.lang.Class<?>,java.lang.Object>.remove(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.keySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.lang.Class.isAssignableFrom(java.lang.Class)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map<java.lang.Class<?>,java.lang.Object>.values()",
              "java.util.Collection.iterator()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.values()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.values()",
              "java.util.Collection.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<Tau_E>.hasNext()",
              "java.util.Iterator<Tau_E>.next()",
              "java.util.Iterator<Tau_E>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/jdk7u-jdk/src/share/classes/javax/imageio/spi/ServiceRegistry.java",
      "classTypes": [
        "Map<Class<?>,Object>",
        "Class",
        "PartiallyOrderedSet",
        "ServiceRegistry",
        "Map"
      ],
      "sorrformalparam": [
        [
          "T",
          "Class<T>"
        ],
        [
          "Class<T>"
        ],
        [
          "boolean"
        ],
        [],
        [],
        [
          "Iterator<T>",
          "ServiceRegistry.Filter"
        ]
      ],
      "types": [
        "Iterator",
        "Object"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<java.lang.Class<?>>.hasNext()",
            "java.util.Map.put(java.lang.Object,java.lang.Object)",
            "java.util.Iterator<java.lang.Class<?>>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "util",
        "next"
      ]
    },
    {
      "method": "getPackage@88",
      "body": "public JSONObject getPackage(String packageUrl) throws ClientProtocolException, IOException, JSONException {\n  HttpClient client=new DefaultHttpClient();\n  HttpGet get=new HttpGet(packageUrl);\n  HttpResponse response=client.execute(get);\n  if (response.getStatusLine().getStatusCode() != 200) {\n    return null;\n  }\n  ByteArrayOutputStream os=new ByteArrayOutputStream();\n  response.getEntity().writeTo(os);\n  return new JSONObject(os.toString());\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayOutputStream.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.ByteArrayOutputStream.toString()"
            ]
          }
        ]
      ],
      "returnType": "JSONObject",
      "file": "./java_projects/grefine-ckan-storage-extension/src/com/google/refine/net/ckan/CkanApiProxy.java",
      "classTypes": [
        "Map<String,String>"
      ],
      "sorrformalparam": [
        [
          "String",
          "Set<Resource>",
          "String"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
            "java.io.ByteArrayOutputStream.toString()"
          ]
        }
      ],
      "keywords": [
        "stream"
      ]
    },
    {
      "method": "start@202",
      "body": "/** \n * @see org.mortbay.jetty.ant.utils.ServerProxy#start()\n */\npublic void start(){\n  try {\n    server.start();\n    startScanners();\n    server.join();\n  }\n catch (  InterruptedException e) {\n    new RuntimeException(e);\n  }\ncatch (  Exception e) {\n    new RuntimeException(e);\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.Map.keySet()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Set"
              },
              {
                "_call": "java.util.Set.iterator()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.Iterator"
              },
              {
                "node": "DLoop",
                "_body": [
                  {
                    "_call": "java.lang.Integer.intValue()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "int"
                  }
                ],
                "_cond": [
                  {
                    "_call": "java.util.Iterator.hasNext()",
                    "_throws": [],
                    "node": "DAPICall",
                    "_returns": "boolean"
                  }
                ]
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Integer.Integer(int)",
              "java.util.Map.put(java.lang.Object,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/pos_1/jetty/contrib/jetty-ant/src/main/java/org/mortbay/jetty/ant/ServerProxyImpl.java",
      "classTypes": [
        "List"
      ],
      "sorrformalparam": [
        [
          "WebApplicationProxy",
          "int"
        ]
      ],
      "types": [
        "Set",
        "Boolean",
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()",
            "java.util.Iterator.hasNext()",
            "java.lang.RuntimeException.RuntimeException(java.lang.Throwable)"
          ]
        },
        {
          "calls": [
            "java.util.Map.keySet()",
            "java.util.Set.iterator()",
            "java.util.Iterator.hasNext()",
            "java.lang.Integer.intValue()",
            "java.util.Iterator.hasNext()"
          ]
        }
      ],
      "keywords": [
        "iterator",
        "runtime",
        "integer"
      ]
    },
    {
      "method": "getLengthWithPacketSeq@92",
      "body": "public byte[] getLengthWithPacketSeq(byte packetNumber){\n  int length=getLength();\n  byte[] lenArr=intToByteArray(length);\n  lenArr[3]=packetNumber;\n  return lenArr;\n}\n",
      "formalParam": [
        "byte"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.Buffer.capacity()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.nio.Buffer.remaining()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "int",
        "None",
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.order(java.nio.ByteOrder)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.capacity()",
              "java.nio.Buffer.remaining()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.order(java.nio.ByteOrder)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.Buffer.capacity()",
              "java.nio.Buffer.remaining()",
              "java.nio.ByteBuffer.allocate(int)",
              "java.nio.ByteBuffer.put(byte[])",
              "java.nio.ByteBuffer.array()",
              "java.nio.ByteBuffer.put(byte[],int,int)",
              "java.nio.ByteBuffer.array()"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/DrizzleJDBC/src/main/java/org/drizzle/jdbc/internal/common/packet/buffer/WriteBuffer.java",
      "classTypes": [
        "ByteBuffer"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [],
        [
          "byte"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "capacity"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.Buffer.capacity()",
            "java.nio.Buffer.remaining()"
          ]
        }
      ],
      "keywords": [
        "remaining",
        "capacity",
        "buffer",
        "integer"
      ]
    },
    {
      "method": "serialize@54",
      "body": "public byte[] serialize(MediaContent mediaContent) throws IOException {\n  StringWriter writer=new StringWriter();\n  writeMediaContent(writer,mediaContent);\n  writer.flush();\n  return writer.toString().getBytes(\"UTF-8\");\n}\n",
      "formalParam": [
        "MediaContent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.StringWriter.StringWriter()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.flush()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.StringWriter.toString()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.getBytes(java.lang.String)",
            "_throws": [
              "java.io.UnsupportedEncodingException"
            ],
            "node": "DAPICall",
            "_returns": "byte[]"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "byte[]",
      "file": "./java_projects/jvm-serializers/tpc/src/serializers/json/JsonSmartManualTree.java",
      "classTypes": [
        "JSONParser",
        "String"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "toString"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.StringWriter.StringWriter()",
            "java.io.StringWriter.flush()",
            "java.io.StringWriter.toString()",
            "java.lang.String.getBytes(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "exception",
        "lang",
        "io",
        "encoding"
      ]
    },
    {
      "method": "test45@1612",
      "body": "public void test45(){\n  String str=\"class X {\t\t\t\t\t\t\t\t\t\\n\" + \"\tint i;\t\t\t\t\t\t\t\t\t\\n\" + \"\tpublic IOEx\t\t\t\t\t\t\t\t\\n\"+ \"}\t\t\t\t\t\t\t\t\t\t\t\\n\";\n  String completeBehind=\"IOEx\";\n  String expectedCompletionNodeToString=\"<CompleteOnType:IOEx>\";\n  String completionIdentifier=\"IOEx\";\n  String expectedUnitDisplayString=\"class X {\\n\" + \"  int i;\\n\" + \"  <CompleteOnType:IOEx>;\\n\"+ \"  X() {\\n\"+ \"  }\\n\"+ \"}\\n\";\n  String expectedReplacedSource=\"IOEx\";\n  String testName=\"<complete in return type>\";\n  int cursorLocation=str.indexOf(completeBehind) + completeBehind.length() - 1;\n  this.checkDietParse(str.toCharArray(),cursorLocation,expectedCompletionNodeToString,expectedUnitDisplayString,completionIdentifier,expectedReplacedSource,testName);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.indexOf(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.toCharArray()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "char[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/groovy-eclipse/base-test/org.eclipse.jdt.groovy.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/DietCompletionTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.indexOf(java.lang.String)",
            "java.lang.String.length()",
            "java.lang.String.toCharArray()"
          ]
        }
      ],
      "keywords": [
        "integer",
        "length",
        "index",
        "array"
      ]
    },
    {
      "method": "WordBuilder@20",
      "body": "public WordBuilder(Dictionary dictionary,Grid grid){\n  this.grid=grid;\n  this.dictionary=dictionary;\n  this.roots=new ArrayList<Point>();\n  for (int x=0; x < grid.getWidth(); x++) {\n    for (int y=0; y < grid.getHeight(); y++) {\n      try {\n        Point thePoint=new Point(x,y);\n        this.grid.getCell(thePoint);\n        roots.add(thePoint);\n      }\n catch (      NullPointerException e) {\n      }\n    }\n  }\n  this.words=new ArrayList<ArrayList<Point>>();\n}\n",
      "formalParam": [
        "Dictionary",
        "Grid"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.awt.Point>.ArrayList<Point>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.awt.Point.Point(int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<java.awt.Point>.add(java.awt.Point)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<java.util.ArrayList<java.awt.Point>>.ArrayList<ArrayList<Point>>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "ArrayList<ArrayList<Point>>",
        "int"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Stack<java.awt.Point>.Stack<Point>()",
              "java.util.Stack<java.awt.Point>.push(java.awt.Point)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.toCharArray()",
              "java.lang.String.length()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/wordsolver/src/solver/WordBuilder.java",
      "classTypes": [
        "ArrayList<Point>",
        "Dictionary",
        "int[]",
        "ArrayList<ArrayList<Point>>"
      ],
      "sorrformalparam": [
        [],
        [
          "String"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.awt.Point>.ArrayList<Point>()",
            "java.awt.Point.Point(int,int)",
            "java.util.ArrayList<java.awt.Point>.add(java.awt.Point)",
            "java.util.ArrayList<java.util.ArrayList<java.awt.Point>>.ArrayList<ArrayList<Point>>()"
          ]
        }
      ],
      "keywords": [
        "point",
        "list",
        "array",
        "add"
      ]
    },
    {
      "method": "testDbDirectory@186",
      "body": "public void testDbDirectory() throws Exception {\n  File derbyDbDir=new File(home,dbName);\n  checkAccessToOwner(derbyDbDir,POSITIVE);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.File.File(java.lang.String,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
            "_throws": [
              "java.security.PrivilegedActionException"
            ],
            "node": "DAPICall",
            "_returns": "Tau_T"
          },
          {
            "_call": "java.lang.Boolean.booleanValue()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/derby/java/testing/org/apache/derbyTesting/functionTests/tests/engine/RestrictiveFilePermissionsTest.java",
      "classTypes": [
        "Method",
        "Field",
        "int",
        "Class"
      ],
      "sorrformalparam": [
        [],
        [],
        []
      ],
      "types": [
        "AccessController",
        "PrivilegedActionException"
      ],
      "apicalls": [
        "booleanValue",
        "doPrivileged"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.security.AccessController.doPrivileged(java.security.PrivilegedExceptionAction)",
            "java.lang.Boolean.booleanValue()"
          ]
        }
      ],
      "keywords": [
        "value",
        "controller",
        "io",
        "lang",
        "action",
        "access"
      ]
    },
    {
      "method": "archive@73",
      "body": "@Context(types={ContextType.SUPER_ADMIN}) public void archive(){\n  Result result=new Result();\n  DateMidnight today=new DateMidnight();\n  for (  Request r : requestDAO.listByStates(states,true)) {\n    try {\n      Request request=requestDAO.findById(r.getId(),true);\n      int filingDelay=requestServiceRegistry.getRequestService(request).getFilingDelay();\n      DateMidnight lastModificationDay=new DateMidnight(request.getLastModificationDate());\n      if (Months.monthsBetween(lastModificationDay,today).getMonths() >= filingDelay) {\n        String motive=translationService.translate(\"requestArchive.motive\",new Object[]{filingDelay});\n        if (RequestState.VALIDATED.equals(request.getState()))         requestWorkflowService.updateRequestState(request.getId(),RequestState.CLOSED,motive);\n        requestWorkflowService.updateRequestState(request.getId(),RequestState.ARCHIVED,motive);\n        byte archive[]=requestPdfService.generateArchive(request.getId());\n        requestDAO.empty(request);\n        Set<Critere> criteriaSet=new HashSet<Critere>(1);\n        criteriaSet.add(new Critere(RequestExternalAction.SEARCH_BY_KEY,request.getId().toString(),Critere.EQUALS));\n        for (        RequestExternalAction trace : requestExternalActionService.getTraces(criteriaSet,null,null,0,0)) {\n          requestExternalActionDAO.delete(trace);\n        }\n        String filename=translationService.translate(\"requestArchive.filename\",new Object[]{translationService.translateRequestTypeLabel(request.getRequestType().getLabel()),new DateTime(request.getCreationDate()).toString(ISODateTimeFormat.date()),request.getId().toString()});\n        localAuthorityRegistry.saveLocalAuthorityResource(Type.REQUEST_ARCHIVE,filename,archive);\n        try {\n          JpaUtil.closeAndReOpen(false);\n          result.numberOfSuccesses++;\n        }\n catch (        Throwable t) {\n          localAuthorityRegistry.getLocalAuthorityResourceFile(Type.REQUEST_ARCHIVE,filename,false).delete();\n          throw t;\n        }\n      }\n    }\n catch (    Throwable t) {\n      t.printStackTrace();\n      result.failures.put(r,t);\n      JpaUtil.closeAndReOpen(true);\n    }\n  }\n  RequestAdminAction action=new RequestAdminAction(RequestAdminAction.Type.REQUESTS_ARCHIVED);\n  action.getComplementaryData().put(RequestAdminAction.Data.ARCHIVING_RESULT,result);\n  if (result.numberOfSuccesses > 0 || result.failures.size() > 0) {\n    genericDAO.saveOrUpdate(action);\n  }\n  RequestAdminEvent event=new RequestAdminEvent(this,action);\n  applicationContext.publishEvent(event);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.util.HashSet<Tau_E>.HashSet(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.util.HashSet<Tau_E>.HashSet(int)"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.util.HashSet<Tau_E>.HashSet(int)",
              "java.lang.Throwable.printStackTrace()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/capdemat/Model/src/java/fr/cg95/cvq/service/request/job/RequestArchivingJob.java",
      "classTypes": [
        "IRequestServiceRegistry",
        "Map<Request,Throwable>",
        "IRequestExternalActionDAO",
        "IRequestDAO",
        "IGenericDAO",
        "ILocalAuthorityRegistry",
        "ITranslationService"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "HashSet",
        "Integer",
        "Throwable"
      ],
      "apicalls": [
        "printStackTrace"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet(int)"
          ]
        },
        {
          "calls": [
            "java.util.HashSet<Tau_E>.HashSet(int)",
            "java.lang.Throwable.printStackTrace()"
          ]
        }
      ],
      "keywords": [
        "trace",
        "stack",
        "hash",
        "lang",
        "set",
        "util"
      ]
    },
    {
      "method": "getStorageSec@41",
      "body": "/** \n * Return the secondary storage cache root (phone if external media is mounted, external media otherwise).\n * @return the root of the cache directory\n */\npublic static File getStorageSec(){\n  return getStorageSpecific(true);\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.File.File(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.File.File(java.io.File,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.File.File(java.lang.String,java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "File",
        "String",
        "boolean",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)",
              "java.io.File.File(java.io.File,java.lang.String)"
            ]
          },
          {
            "calls": [
              "java.io.File.File(java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.getAbsolutePath()",
              "java.io.File.File(java.lang.String)",
              "java.io.FileReader.FileReader(java.io.File)",
              "java.io.Reader.read(char[])",
              "java.lang.String.String(char[],int,int)",
              "java.io.InputStreamReader.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()",
              "java.io.File.delete()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()"
            ]
          },
          {
            "calls": [
              "java.io.FileOutputStream.FileOutputStream(java.io.File)",
              "java.io.InputStream.read(byte[])",
              "java.io.OutputStream.write(byte[],int,int)",
              "java.io.InputStream.read(byte[])",
              "java.io.FileOutputStream.close()",
              "java.io.File.delete()",
              "java.io.InputStream.close()",
              "java.io.File.delete()"
            ]
          }
        ]
      ],
      "returnType": "File",
      "file": "./java_projects/c-geo-opensource/main/src/cgeo/geocaching/files/LocalStorage.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [],
        [
          "File",
          "String"
        ],
        [
          "InputStream",
          "File"
        ],
        [
          "HttpResponse",
          "File"
        ]
      ],
      "types": [
        "File",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)",
            "java.io.File.File(java.io.File,java.lang.String)",
            "java.io.File.File(java.io.File,java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String,java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "file",
        "string",
        "io"
      ]
    },
    {
      "method": "isLegalReplacement@601",
      "body": "/** \n * Checks if the given argument is legal as this encoder's replacement byte array. The given byte array is legal if and only if it can be decode into sixteen bits Unicode characters. This method can be overridden for performance improvement.\n * @param replacement the given byte array to be checked.\n * @return true if the the given argument is legal as this encoder'sreplacement byte array.\n */\npublic boolean isLegalReplacement(byte[] replacement){\n  if (decoder == null) {\n    decoder=cs.newDecoder();\n    decoder.onMalformedInput(CodingErrorAction.REPORT);\n    decoder.onUnmappableCharacter(CodingErrorAction.REPORT);\n  }\n  ByteBuffer in=ByteBuffer.wrap(replacement);\n  CharBuffer out=CharBuffer.allocate((int)(replacement.length * decoder.maxCharsPerByte()));\n  CoderResult result=decoder.decode(in,out,true);\n  return !result.isError();\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.nio.charset.Charset.newDecoder()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CharsetDecoder"
          },
          {
            "_call": "java.nio.ByteBuffer.wrap(byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.ByteBuffer"
          },
          {
            "_call": "java.nio.CharBuffer.allocate(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.CharBuffer"
          },
          {
            "_call": "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.nio.charset.CoderResult"
          }
        ]
      },
      "sorrreturntype": [
        "None",
        "CharsetEncoder"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.nio.charset.Charset.newDecoder()",
              "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
              "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.CharBuffer.allocate(int)",
              "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.nio.charset.Charset.newDecoder()",
              "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
              "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
              "java.nio.ByteBuffer.wrap(byte[])",
              "java.nio.CharBuffer.allocate(int)",
              "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/libcore_1/luni/src/main/java/java/nio/charset/CharsetEncoder.java",
      "classTypes": [
        "float",
        "int"
      ],
      "sorrformalparam": [
        [
          "Charset",
          "float",
          "float",
          "byte[]"
        ],
        [
          "byte[]"
        ]
      ],
      "types": [
        "Character",
        "Byte",
        "Boolean",
        "CoderResult"
      ],
      "apicalls": [
        "newDecoder"
      ],
      "sequences": [
        {
          "calls": [
            "java.nio.charset.Charset.newDecoder()",
            "java.nio.charset.CharsetDecoder.onMalformedInput(java.nio.charset.CodingErrorAction)",
            "java.nio.charset.CharsetDecoder.onUnmappableCharacter(java.nio.charset.CodingErrorAction)",
            "java.nio.ByteBuffer.wrap(byte[])",
            "java.nio.CharBuffer.allocate(int)",
            "java.nio.charset.CharsetDecoder.decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)"
          ]
        }
      ],
      "keywords": [
        "result",
        "byte",
        "char",
        "unmappable"
      ]
    },
    {
      "method": "write@401",
      "body": "public static boolean write(RenderedImage im,String formatName,OutputStream output) throws IOException {\n  if (output == null) {\n    throw new IllegalArgumentException(Messages.getString(\"imageio.54\"));\n  }\n  ImageOutputStream ios=createImageOutputStream(output);\n  boolean rt=write(im,formatName,ios);\n  ios.close();\n  return rt;\n}\n",
      "formalParam": [
        "RenderedImage",
        "String",
        "OutputStream"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.spi.ImageOutputStreamSpi"
              },
              {
                "_call": "java.lang.Class.isInstance(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [],
            "_cond": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Iterator<javax.imageio.ImageWriter>.next()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "javax.imageio.ImageWriter"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "ImageInputStream",
        "ImageWriter",
        "boolean",
        "BufferedImage",
        "String[]",
        "ImageReader",
        "ImageWriter",
        "String[]",
        "String[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageWriter>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Throwable.printStackTrace()"
            ]
          },
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.List.contains(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.net.URL.openStream()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.next()",
              "java.lang.Class.isInstance(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageInputStreamSpi>.hasNext()",
              "$NOT$java.util.Iterator<javax.imageio.ImageReader>.hasNext()",
              "java.util.Iterator<javax.imageio.ImageReader>.next()",
              "java.io.InputStream.close()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.lang.Class.getName()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageWriterSpi>.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.next()",
              "java.util.Arrays.asList(T[])",
              "java.util.List<java.lang.String>.addAll(java.util.Collection)",
              "java.util.Iterator<javax.imageio.spi.ImageReaderSpi>.hasNext()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/harmony_1/classlib/modules/imageio/src/main/java/javax/imageio/ImageIO.java",
      "classTypes": [
        "String"
      ],
      "sorrformalparam": [
        [
          "RenderedImage",
          "String",
          "ImageOutputStream"
        ],
        [
          "Object"
        ],
        [],
        [
          "Object"
        ],
        [
          "URL"
        ],
        [],
        [
          "ImageWriter"
        ],
        [
          "ImageReader"
        ],
        [],
        []
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.next()"
          ]
        },
        {
          "calls": [
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.next()",
            "java.lang.Class.isInstance(java.lang.Object)",
            "java.util.Iterator<javax.imageio.spi.ImageOutputStreamSpi>.hasNext()",
            "java.util.Iterator<javax.imageio.ImageWriter>.hasNext()"
          ]
        }
      ],
      "keywords": [
        "image"
      ]
    },
    {
      "method": "getNamedEntities@58",
      "body": "public List<opennlp.tools.coref.mention.Parse> getNamedEntities(){\n  List<Parse> names=new ArrayList<Parse>();\n  List<Parse> kids=new LinkedList<Parse>(Arrays.asList(parse.getChildren()));\n  while (kids.size() > 0) {\n    Parse p=kids.remove(0);\n    if (entitySet.contains(p.getType())) {\n      names.add(p);\n    }\n else {\n      kids.addAll(Arrays.asList(p.getChildren()));\n    }\n  }\n  return createParses(names.toArray(new Parse[names.size()]));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.Arrays.asList(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.List"
          },
          {
            "_call": "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Arrays.asList(T[])",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.util.List"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Set<java.lang.String>.contains(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "List<opennlp.tools.coref.mention.Parse>",
        "List<opennlp.tools.coref.mention.Parse>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.Arrays.asList(T[])",
              "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.Arrays.asList(T[])",
              "java.util.ArrayList<Tau_E>.ArrayList(java.util.Collection)",
              "java.util.Set<java.lang.String>.contains(java.lang.Object)",
              "java.util.Arrays.asList(T[])"
            ]
          }
        ]
      ],
      "returnType": "List<opennlp.tools.coref.mention.Parse>",
      "file": "./java_projects/opennlp/opennlp-tools/src/main/java/opennlp/tools/coref/mention/DefaultParse.java",
      "classTypes": [
        "int",
        "String[]",
        "Parse",
        "Set<String>"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "Set",
        "Collection"
      ],
      "apicalls": [
        "asList"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "java.util.Set<java.lang.String>.contains(java.lang.Object)"
          ]
        },
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.Arrays.asList(T[])",
            "java.util.LinkedList<Tau_E>.LinkedList(java.util.Collection)",
            "java.util.Set<java.lang.String>.contains(java.lang.Object)",
            "java.util.Arrays.asList(T[])"
          ]
        }
      ],
      "keywords": [
        "util",
        "arrays",
        "list",
        "collection"
      ]
    },
    {
      "method": "write@160",
      "body": "public void write(byte[] b) throws IOException {\n  findStream().write(b);\n}\n",
      "formalParam": [
        "byte[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "$NOT$java.util.Vector.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.io.FilterOutputStream.write(byte[])",
            "_throws": [
              "java.io.IOException"
            ],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "$NOT$java.util.Vector.isEmpty()",
              "java.io.PrintStream.print(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Vector.isEmpty()",
              "java.io.PrintStream.println(long)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Vector.isEmpty()",
              "java.io.PrintStream.print(double)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/tomcat/util/log/SystemLogHandler.java",
      "classTypes": [
        "ThreadLocal",
        "Stack",
        "PrintStream"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [
          "long"
        ],
        [
          "double"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "write"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.util.Vector.isEmpty()",
            "java.io.FilterOutputStream.write(byte[])"
          ]
        }
      ],
      "keywords": [
        "io",
        "byte"
      ]
    },
    {
      "method": "contains@40",
      "body": "public final boolean contains(Object o){\n  final ReentrantReadWriteLock.ReadLock l=rwl.readLock();\n  l.lock();\n  try {\n    return c.contains(o);\n  }\n  finally {\n    l.unlock();\n  }\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock"
          },
          {
            "_call": "java.util.Collection.contains(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "boolean",
        "Iterator<E>",
        "boolean",
        "Object[]",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
              "java.util.Collection.retainAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
              "java.util.Collection.iterator()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
              "java.util.Collection.removeAll(java.util.Collection)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
              "java.util.Collection.toArray()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.concurrent.locks.ReentrantReadWriteLock.writeLock()",
              "java.util.Collection.containsAll(java.util.Collection)"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/scala-parallel/jsr166/src/test/loops/RWCollection.java",
      "classTypes": [
        "Collection",
        "ReentrantReadWriteLock"
      ],
      "sorrformalparam": [
        [
          "Collection<?>"
        ],
        [],
        [
          "Collection<?>"
        ],
        [],
        [
          "Collection<?>"
        ]
      ],
      "types": [
        "Collection",
        "Object",
        "Boolean"
      ],
      "apicalls": [
        "readLock"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.concurrent.locks.ReentrantReadWriteLock.readLock()",
            "java.util.Collection.contains(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "concurrent",
        "write",
        "boolean",
        "collection",
        "contains",
        "reentrant"
      ]
    },
    {
      "method": "DataServiceFault@62",
      "body": "public DataServiceFault(Exception nestedException,String code,String dsFaultMessage){\n  super(nestedException);\n  this.code=code;\n  this.dsFaultMessage=dsFaultMessage;\n  if (this.code == null) {\n    this.code=extractFaultCode(nestedException);\n  }\n}\n",
      "formalParam": [
        "Exception",
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.Throwable.getCause()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "javax.xml.stream.XMLStreamException.getNestedException()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Throwable"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "String"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.xml.stream.XMLStreamException.getNestedException()"
            ]
          },
          {
            "calls": [
              "java.lang.Throwable.getCause()"
            ]
          }
        ]
      ],
      "returnType": "None",
      "file": "./java_projects/platform/components/data-services/org.wso2.carbon.dataservices.core/src/main/java/org/wso2/carbon/dataservices/core/DataServiceFault.java",
      "classTypes": [
        "Map<String,ParamValue>",
        "DataService",
        "long"
      ],
      "sorrformalparam": [
        [
          "Throwable"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "javax.xml.stream.XMLStreamException.getNestedException()"
          ]
        },
        {
          "calls": [
            "java.lang.Throwable.getCause()"
          ]
        }
      ],
      "keywords": [
        "throwable"
      ]
    },
    {
      "method": "getElement@45",
      "body": "public Object getElement(Object key){\n  Enumeration enumeration=data.elements();\n  while (enumeration.hasMoreElements()) {\n    Node n=(Node)enumeration.nextElement();\n    if (n.key == key) {\n      data.removeElement(n);\n      data.insertElementAt(n,0);\n      return n.element;\n    }\n  }\n  return null;\n}\n",
      "formalParam": [
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.Vector.removeElement(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.util.Vector.insertElementAt(java.lang.Object,int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "Object",
      "file": "./java_projects/JacORB/src/org/jacorb/collection/util/Cach.java",
      "classTypes": [
        "int",
        "Vector",
        "Object",
        "Object"
      ],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [
        "insertElementAt",
        "removeElement",
        "hasMoreElements",
        "elements"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Vector.removeElement(java.lang.Object)",
            "java.util.Vector.insertElementAt(java.lang.Object,int)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "remove",
        "vector",
        "elements"
      ]
    },
    {
      "method": "run@195",
      "body": "public void run(){\n  try {\n    byte[] buf=new byte[BUF];\n    int read=0;\n    while (!isInterrupted() && (read=_is.read(buf)) != -1) {\n      if (read == 0)       continue;\n      _os.write(buf,0,read);\n      _os.flush();\n    }\n  }\n catch (  InterruptedIOException iioe) {\n  }\ncatch (  Throwable t) {\n    _thrownError=t;\n  }\n finally {\n    try {\n      if (_closeInput) {\n        _is.close();\n      }\n else {\n        _os.close();\n      }\n    }\n catch (    IOException ioe) {\n    }\n  }\n  try {\n    _barrier.await();\n  }\n catch (  InterruptedException ie) {\n  }\ncatch (  BrokenBarrierException bbe) {\n  }\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.io.OutputStream.write(byte[],int,int)",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              },
              {
                "_call": "java.io.OutputStream.flush()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "$NOT$java.lang.Thread.isInterrupted()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.io.InputStream.read(byte[])",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          },
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.io.OutputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.io.InputStream.close()",
                "_throws": [
                  "java.io.IOException"
                ],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/nutch/src/java/org/apache/nutch/util/CommandRunner.java",
      "classTypes": [
        "int",
        "boolean",
        "boolean",
        "String",
        "InputStream",
        "CyclicBarrier",
        "OutputStream",
        "int",
        "OutputStream"
      ],
      "sorrformalparam": [],
      "types": [
        "IOException"
      ],
      "apicalls": [
        "close",
        "read"
      ],
      "sequences": [
        {
          "calls": [
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()",
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.close()"
          ]
        },
        {
          "calls": [
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.OutputStream.write(byte[],int,int)",
            "java.io.OutputStream.flush()",
            "$NOT$java.lang.Thread.isInterrupted()",
            "java.io.InputStream.read(byte[])",
            "java.io.InputStream.close()"
          ]
        }
      ],
      "keywords": [
        "close"
      ]
    },
    {
      "method": "copyIncludedLibraries@113",
      "body": "public static void copyIncludedLibraries(Shell shell,String projectPath){\n  Enumeration enumeration=SampleIncludedSourceEntry.getIncludedLibraries();\n  while (enumeration.hasMoreElements()) {\n    URL libraryURL=(URL)enumeration.nextElement();\n    String filename=libraryURL.getFile();\n    String desFileName=filename.substring(filename.lastIndexOf('/') + 1);\n    PlaceResources.copy(shell,projectPath,desFileName,libraryURL);\n  }\n}\n",
      "formalParam": [
        "Shell",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.net.URL.getFile()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              },
              {
                "_call": "java.lang.String.lastIndexOf(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              },
              {
                "_call": "java.lang.String.substring(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.String"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Enumeration.hasMoreElements()",
              "java.net.URL.getFile()",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "$NOT$java.lang.String.equals(java.lang.Object)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Enumeration.hasMoreElements()",
              "java.net.URL.getFile()",
              "java.lang.String.lastIndexOf(int)",
              "java.lang.String.substring(int)",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/birt/UI/org.eclipse.birt.report.designer.ui.samplesview/src/org/eclipse/birt/report/designer/ui/samplesview/util/PlaceResources.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "Shell",
          "String",
          "String"
        ],
        [
          "Shell",
          "String"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Enumeration.hasMoreElements()",
            "java.net.URL.getFile()",
            "java.lang.String.lastIndexOf(int)",
            "java.lang.String.substring(int)",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "net"
      ]
    },
    {
      "method": "hasIncludepathCycle@2155",
      "body": "/** \n * @see IJavaScriptProject\n */\npublic boolean hasIncludepathCycle(IIncludePathEntry[] preferredClasspath){\n  HashSet cycleParticipants=new HashSet();\n  HashMap preferredClasspaths=new HashMap(1);\n  preferredClasspaths.put(this,preferredClasspath);\n  updateCycleParticipants(new ArrayList(2),cycleParticipants,ResourcesPlugin.getWorkspace().getRoot(),new HashSet(2),preferredClasspaths);\n  return !cycleParticipants.isEmpty();\n}\n",
      "formalParam": [
        "IIncludePathEntry[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashSet.HashSet()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap.HashMap(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          },
          {
            "_call": "java.util.ArrayList.ArrayList(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashSet.HashSet(int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "$NOT$java.util.HashSet.isEmpty()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "IIncludePathEntry",
        "String[]",
        "String",
        "IPackageFragment[]",
        "Preferences",
        "void",
        "IPath[]",
        "IIncludePathEntry[]",
        "IPath"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.StringReader.StringReader(java.lang.String)",
              "javax.xml.parsers.DocumentBuilderFactory.newInstance()",
              "javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder()",
              "javax.xml.parsers.DocumentBuilder.parse(org.xml.sax.InputSource)",
              "java.io.StringReader.close()",
              "$NOT$java.lang.String.equalsIgnoreCase(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.ArrayList.size()",
              "java.util.ArrayList.toArray(java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.ByteArrayOutputStream.ByteArrayOutputStream()",
              "java.io.OutputStreamWriter.OutputStreamWriter(java.io.OutputStream,java.lang.String)",
              "java.io.OutputStreamWriter.flush()",
              "java.io.OutputStreamWriter.close()",
              "java.io.ByteArrayOutputStream.toString(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.add(java.lang.Object)",
              "java.util.ArrayList.toArray(java.lang.Object[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.exists()",
              "java.io.FileInputStream.FileInputStream(java.io.File)",
              "java.io.BufferedInputStream.BufferedInputStream(java.io.InputStream)",
              "java.io.InputStream.close()",
              "java.io.File.delete()"
            ]
          },
          {
            "calls": [
              "java.io.File.exists()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Map.entrySet()",
              "java.util.Set.iterator()",
              "java.util.Iterator.hasNext()",
              "java.util.Iterator.hasNext()",
              "$NOT$java.util.Map.containsKey(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.length()",
              "java.lang.String.toCharArray()",
              "java.lang.String.String(char[])"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.Exception.Exception(java.lang.String)",
              "java.lang.Throwable.printStackTrace(java.io.PrintStream)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.io.File.File(java.lang.String)",
              "java.io.File.getPath()",
              "java.io.File.File(java.lang.String)",
              "java.io.File.getCanonicalPath()"
            ]
          }
        ]
      ],
      "returnType": "boolean",
      "file": "./java_projects/hifivetools/eclipse/org.eclipse.wst.jsdt.core.for_Juno/src/org/eclipse/wst/jsdt/internal/core/JavaProject.java",
      "classTypes": [
        "IIncludePathEntry[]",
        "IIncludePathEntry[]",
        "IProject",
        "String[]",
        "String",
        "String",
        "String",
        "boolean",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "IIncludePathEntry[]"
        ],
        [
          "IIncludePathEntry"
        ],
        [
          "IPackageFragmentRoot[]"
        ],
        [],
        [
          "Map"
        ],
        [
          "String"
        ],
        [
          "boolean"
        ],
        [
          "IPath"
        ]
      ],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashSet.HashSet()",
            "java.util.HashMap.HashMap(int)",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "java.util.ArrayList.ArrayList(int)",
            "java.util.HashSet.HashSet(int)",
            "$NOT$java.util.HashSet.isEmpty()"
          ]
        }
      ],
      "keywords": [
        "put"
      ]
    },
    {
      "method": "abs@186",
      "body": "public LispObject abs() throws Exception {\n  if (value.signum() >= 0)   return this;\n else   return valueOf(value.negate());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.math.BigInteger.negate()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.math.BigInteger"
              }
            ],
            "_cond": [
              {
                "_call": "java.math.BigInteger.signum()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "LispObject",
        "int",
        "boolean",
        "LispObject"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.xor(java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.bitLength()",
              "java.math.BigInteger.intValue()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.compareTo(java.math.BigInteger)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.valueOf(long)",
              "java.math.BigInteger.mod(java.math.BigInteger)"
            ]
          }
        ]
      ],
      "returnType": "LispObject",
      "file": "./java_projects/geogebra_1/geogebra/org/mathpiper/mpreduce/numbers/LispBigInteger.java",
      "classTypes": [
        "BigInteger"
      ],
      "sorrformalparam": [
        [
          "LispSmallInteger"
        ],
        [],
        [
          "LispSmallInteger"
        ],
        [
          "LispSmallInteger"
        ]
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [
        "signum",
        "negate"
      ],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.signum()"
          ]
        },
        {
          "calls": [
            "java.math.BigInteger.signum()",
            "java.math.BigInteger.negate()"
          ]
        }
      ],
      "keywords": [
        "math",
        "integer",
        "big"
      ]
    },
    {
      "method": "setAcknowledgeMode@307",
      "body": "/** \n * Set the acknowledge mode\n * @param value The value\n */\npublic void setAcknowledgeMode(final String value){\n  if (HornetQActivationSpec.trace) {\n    HornetQRALogger.LOGGER.trace(\"setAcknowledgeMode(\" + value + \")\");\n  }\n  if (\"DUPS_OK_ACKNOWLEDGE\".equalsIgnoreCase(value) || \"Dups-ok-acknowledge\".equalsIgnoreCase(value)) {\n    acknowledgeMode=Session.DUPS_OK_ACKNOWLEDGE;\n  }\n else   if (\"AUTO_ACKNOWLEDGE\".equalsIgnoreCase(value) || \"Auto-acknowledge\".equalsIgnoreCase(value)) {\n    acknowledgeMode=Session.AUTO_ACKNOWLEDGE;\n  }\n else {\n    throw new IllegalArgumentException(\"Unsupported acknowledgement mode \" + value);\n  }\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              },
              {
                "_call": "java.lang.String.equalsIgnoreCase(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": []
          }
        ]
      },
      "sorrreturntype": [
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.trim()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/hornetq/hornetq-ra/src/main/java/org/hornetq/ra/inflow/HornetQActivationSpec.java",
      "classTypes": [
        "String",
        "Hashtable",
        "String",
        "boolean",
        "String",
        "String",
        "Boolean",
        "Boolean",
        "Integer",
        "String"
      ],
      "sorrformalparam": [
        []
      ],
      "types": [
        "Boolean",
        "String"
      ],
      "apicalls": [
        "equalsIgnoreCase"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        },
        {
          "calls": [
            "java.lang.String.equalsIgnoreCase(java.lang.String)",
            "java.lang.String.equalsIgnoreCase(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "string",
        "ignore",
        "case"
      ]
    },
    {
      "method": "mkTestDates@50",
      "body": "public ArrayList<User> mkTestDates(int count){\n  ArrayList<User> users=new ArrayList<User>();\n  for (int i=0; i < count; i++) {\n    User user=new User(i);\n    user.setName(\"xxxxxxxxxxxxxxxxxxxxxx\");\n    users.add(user);\n  }\n  return users;\n}\n",
      "formalParam": [
        "int"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.lang.String.length()",
              "java.lang.System.currentTimeMillis()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.System.currentTimeMillis()",
              "java.util.ArrayList<Tau_E>.ArrayList()",
              "java.util.ArrayList<Tau_E>.add(Tau_E)",
              "java.lang.System.currentTimeMillis()",
              "java.io.PrintStream.println(java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "ArrayList<User>",
      "file": "./java_projects/fastjson/src/test/java/com/alibaba/json/test/TestFor_iteye_resolute.java",
      "classTypes": [
        "int",
        "String",
        "int"
      ],
      "sorrformalparam": [
        [],
        []
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)"
          ]
        }
      ],
      "keywords": [
        "util",
        "array",
        "list",
        "add",
        "boolean"
      ]
    },
    {
      "method": "XEventPump@102",
      "body": "/** \n * Creates a new XEventPump for the specified X Display.\n * @param d the X Display\n */\nXEventPump(Display d){\n  display=d;\n  windows=new HashMap();\n  drag=-1;\n  Thread thread=new Thread(this,\"X Event Pump\");\n  thread.setDaemon(true);\n  thread.start();\n}\n",
      "formalParam": [
        "Display"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable,java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.setDaemon(boolean)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "None",
      "file": "./java_projects/classpath/gnu/java/awt/peer/x/XEventPump.java",
      "classTypes": [
        "Display",
        "HashMap",
        "int"
      ],
      "sorrformalparam": [],
      "types": [
        "Boolean"
      ],
      "apicalls": [
        "setDaemon"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.lang.Thread.Thread(java.lang.Runnable,java.lang.String)",
            "java.lang.Thread.setDaemon(boolean)",
            "java.lang.Thread.start()"
          ]
        }
      ],
      "keywords": [
        "set",
        "runnable",
        "util",
        "daemon"
      ]
    },
    {
      "method": "visit@105",
      "body": "@Override public Object visit(ScalarProperty property,Object arg) throws PropertyException {\n  if (property.getParent().isList()) {\n    ((Collection<Serializable>)arg).add(property.getValue());\n  }\n else {\n    ((Map<String,Serializable>)arg).put(property.getName(),property.getValue());\n  }\n  return null;\n}\n",
      "formalParam": [
        "ScalarProperty",
        "Object"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.io.Serializable"
              }
            ],
            "_cond": [],
            "_then": [
              {
                "_call": "java.util.Collection<java.io.Serializable>.add(java.io.Serializable)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "Object"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList<java.io.Serializable>.ArrayList<Serializable>()",
              "java.util.Collection<java.io.Serializable>.add(java.io.Serializable)"
            ]
          },
          {
            "calls": [
              "java.util.ArrayList<java.io.Serializable>.ArrayList<Serializable>()",
              "java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)"
            ]
          }
        ]
      ],
      "returnType": "Object",
      "file": "./java_projects/org.eclipse.ecr/plugins/org.eclipse.ecr.core.api/src/org/eclipse/ecr/core/api/model/ValueExporter.java",
      "classTypes": [
        "Map<String,Serializable>"
      ],
      "sorrformalparam": [
        [
          "ListProperty",
          "Object"
        ]
      ],
      "types": [
        "Serializable"
      ],
      "apicalls": [
        "put"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.io.Serializable>.put(java.lang.String,java.io.Serializable)"
          ]
        },
        {
          "calls": [
            "java.util.Collection<java.io.Serializable>.add(java.io.Serializable)"
          ]
        }
      ],
      "keywords": [
        "string",
        "util",
        "put",
        "boolean",
        "map",
        "add"
      ]
    },
    {
      "method": "start@336",
      "body": "/** \n * Starts all of the test classes to be run by this coordinator.\n * @param testClassNames An array of all the coordinating test case implementations.\n * @return A JUnit TestResult to run the tests with.\n * @throws Exception Any underlying exceptions are allowed to fall through, and fail the test process.\n */\npublic TestResult start(String[] testClassNames) throws Exception {\n  log.debug(\"public TestResult start(String[] testClassNames = \" + Arrays.toString(testClassNames) + \": called\");\n  connection=TestUtils.createConnection(TestContextProperties.getInstance());\n  Session session=connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\n  Destination controlTopic=session.createTopic(\"iop.control\");\n  Destination responseQueue=session.createQueue(\"coordinator\");\n  conversationFactory=new ConversationFactory(connection,responseQueue,LinkedBlockingQueue.class);\n  ConversationFactory.Conversation conversation=conversationFactory.startConversation();\n  connection.start();\n  Message invite=session.createMessage();\n  invite.setStringProperty(\"CONTROL_TYPE\",\"INVITE\");\n  invite.setJMSReplyTo(responseQueue);\n  conversation.send(controlTopic,invite);\n  Collection<Message> enlists=conversation.receiveAll(0,500);\n  enlistedClients=extractEnlists(enlists);\n  for (  TestClientDetails client : enlistedClients) {\n    log.debug(\"Got enlisted test client: \" + client);\n    console.info(\"Test node \" + client.clientName + \" available.\");\n  }\n  UDPClockReference clockReference=new UDPClockReference();\n  Thread clockRefThread=new Thread(clockReference);\n  registerShutdownHook(clockReference);\n  clockRefThread.start();\n  Message clockSynchRequest=session.createMessage();\n  clockSynchRequest.setStringProperty(\"CONTROL_TYPE\",\"CLOCK_SYNCH\");\n  String localAddress=InetAddress.getByName(InetAddress.getLocalHost().getHostName()).getHostAddress();\n  clockSynchRequest.setStringProperty(\"ADDRESS\",localAddress);\n  conversation.send(controlTopic,clockSynchRequest);\n  TestResult result=null;\n  for (  String testClassName : testClassNames) {\n    this.currentTestClassName=testClassName;\n    result=super.start(new String[]{testClassName});\n  }\n  if (terminate) {\n    Message terminate=session.createMessage();\n    terminate.setStringProperty(\"CONTROL_TYPE\",\"TERMINATE\");\n    conversation.send(controlTopic,terminate);\n  }\n  return result;\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Arrays.toString(java.lang.Object[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.Thread.Thread(java.lang.Runnable)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.lang.Thread.start()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.net.InetAddress.getLocalHost()",
            "_throws": [
              "java.net.UnknownHostException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.InetAddress"
          },
          {
            "_call": "java.net.InetAddress.getHostName()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.net.InetAddress.getByName(java.lang.String)",
            "_throws": [
              "java.net.UnknownHostException"
            ],
            "node": "DAPICall",
            "_returns": "java.net.InetAddress"
          },
          {
            "_call": "java.net.InetAddress.getHostAddress()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "Set<TestClientDetails>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "java.util.HashSet<Tau_E>.HashSet()",
              "java.lang.String.equals(java.lang.Object)",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "TestResult",
      "file": "./java_projects/platform/dependencies/andes/java/systests/src/main/java/org/wso2/andes/test/framework/distributedtesting/Coordinator.java",
      "classTypes": [
        "ConversationFactory",
        "Set<TestClientDetails>",
        "String",
        "String",
        "ParsedProperties"
      ],
      "sorrformalparam": [
        [
          "Collection<Message>"
        ]
      ],
      "types": [
        "String"
      ],
      "apicalls": [
        "toString",
        "getHostName",
        "getHostAddress"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.Arrays.toString(java.lang.Object[])",
            "java.lang.Thread.Thread(java.lang.Runnable)",
            "java.lang.Thread.start()",
            "java.net.InetAddress.getLocalHost()",
            "java.net.InetAddress.getHostName()",
            "java.net.InetAddress.getByName(java.lang.String)",
            "java.net.InetAddress.getHostAddress()"
          ]
        }
      ],
      "keywords": [
        "exception",
        "name",
        "inet",
        "start"
      ]
    },
    {
      "method": "decodeToQueryPairs@102",
      "body": "public static String[] decodeToQueryPairs(String query){\n  if (query == null || query.length() == 0)   return Trivial.EMPTY_STRING_ARRAY;\n  String[] pairs=query.split(\"(?<!&)&(?!&)\");\n  int idx=pairs.length;\n  if (idx == 0)   return Trivial.EMPTY_STRING_ARRAY;\n  while (--idx >= 0)   pairs[idx]=pairs[idx].replace(\"&&\",\"&\");\n  return pairs;\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.length()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.String.split(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String[]"
          },
          {
            "_call": "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          }
        ]
      },
      "sorrreturntype": [
        "URI",
        "Map<String,String>"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.net.URI.getPath()",
              "java.net.URI.getScheme()",
              "java.net.URI.getUserInfo()",
              "java.net.URI.getHost()",
              "java.net.URI.getPort()",
              "java.net.URI.getQuery()",
              "java.net.URI.getFragment()",
              "java.net.URI.URI(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyMap()",
              "java.lang.String.length()",
              "java.lang.String.split(java.lang.String)",
              "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)",
              "java.util.Collections.emptyMap()",
              "java.util.HashMap<java.lang.String,java.lang.String>.HashMap<String,String>(int)",
              "java.lang.String.split(java.lang.String,int)",
              "java.util.Map<java.lang.String,java.lang.String>.put(java.lang.String,java.lang.String)"
            ]
          }
        ]
      ],
      "returnType": "String[]",
      "file": "./java_projects/buckminster/org.eclipse.buckminster.runtime/src/org/eclipse/buckminster/runtime/URLUtils.java",
      "classTypes": [],
      "sorrformalparam": [
        [
          "URI"
        ],
        [
          "String"
        ]
      ],
      "types": [],
      "apicalls": [
        "replace"
      ],
      "sequences": [
        {
          "calls": [
            "java.lang.String.length()",
            "java.lang.String.split(java.lang.String)",
            "java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence)"
          ]
        }
      ],
      "keywords": [
        "split"
      ]
    },
    {
      "method": "addAttribute@112",
      "body": "/** \n * Add an attribute to this node, replacing any existing attribute with the same name.\n * @param name The attribute name to add\n * @param value The new attribute value\n */\npublic void addAttribute(String name,String value){\n  if (attributes == null)   attributes=new HashMap();\n  attributes.put(name,value);\n}\n",
      "formalParam": [
        "String",
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.HashMap.HashMap()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.HashMap.put(java.lang.Object,java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "TreeNode",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.ArrayList.iterator()",
              "java.util.Iterator.hasNext()",
              "java.lang.String.equals(java.lang.Object)",
              "java.util.Iterator.hasNext()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.ArrayList.ArrayList()",
              "java.util.ArrayList.add(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/tomcat60/java/org/apache/jasper/xmlparser/TreeNode.java",
      "classTypes": [
        "ArrayList",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ],
        [
          "String",
          "TreeNode"
        ]
      ],
      "types": [
        "HashMap",
        "Object"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.HashMap.HashMap()",
            "java.util.HashMap.put(java.lang.Object,java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "put",
        "util",
        "hash",
        "map"
      ]
    },
    {
      "method": "fireTreeStructureChanged@434",
      "body": "public void fireTreeStructureChanged(TreeModelEvent e){\n  Enumeration listeners=listenerList.elements();\n  while (listeners.hasMoreElements()) {\n    TreeModelListener listener=(TreeModelListener)listeners.nextElement();\n    listener.treeStructureChanged(e);\n  }\n}\n",
      "formalParam": [
        "TreeModelEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Vector.elements()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.util.Enumeration"
          },
          {
            "node": "DLoop",
            "_body": [],
            "_cond": [
              {
                "_call": "java.util.Enumeration.hasMoreElements()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "String",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.trim()",
              "java.lang.String.indexOf(java.lang.String)",
              "java.lang.String.substring(int,int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "$NOT$java.util.Vector.contains(java.lang.Object)"
            ]
          },
          {
            "calls": [
              "$NOT$java.util.Vector.contains(java.lang.Object)",
              "java.util.Vector.addElement(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Vector.elements()",
              "java.util.Enumeration.hasMoreElements()",
              "java.util.Enumeration.hasMoreElements()"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/dukesbank/src/j2eetutorial14/examples/jaxp/dom/samples/DomEcho03.java",
      "classTypes": [
        "Vector",
        "String[]",
        "int",
        "int",
        "int",
        "int"
      ],
      "sorrformalparam": [
        [
          "TreeModelEvent"
        ],
        [],
        [
          "TreeModelListener"
        ],
        [
          "TreeModelEvent"
        ],
        [
          "TreeModelEvent"
        ]
      ],
      "types": [
        "Boolean",
        "Vector",
        "Enumeration"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Vector.elements()",
            "java.util.Enumeration.hasMoreElements()",
            "java.util.Enumeration.hasMoreElements()"
          ]
        }
      ],
      "keywords": [
        "vector",
        "elements",
        "enumeration"
      ]
    },
    {
      "method": "shouldReturnRelationshipRepresentationWhenCreatingRelationship@446",
      "body": "@Test public void shouldReturnRelationshipRepresentationWhenCreatingRelationship() throws Exception {\n  long startNode=helper.createNode();\n  long endNode=helper.createNode();\n  Response response=service.createRelationship(FORCE,startNode,\"{\\\"to\\\" : \\\"\" + BASE_URI + endNode+ \"\\\", \\\"type\\\" : \\\"LOVES\\\", \\\"data\\\" : {\\\"foo\\\" : \\\"bar\\\"}}\");\n  Map<String,Object> map=JsonHelper.jsonToMap(entityAsString(response));\n  assertNotNull(map);\n  assertTrue(map.containsKey(\"self\"));\n  assertEquals(response.getMetadata().getFirst(HttpHeaders.CONTENT_ENCODING),\"UTF-8\");\n  @SuppressWarnings(\"unchecked\") Map<String,Object> data=(Map<String,Object>)map.get(\"data\");\n  assertEquals(\"bar\",data.get(\"foo\"));\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.Object"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.Long.toString(long)",
              "java.lang.String.endsWith(java.lang.String)",
              "java.lang.Long.toString(long)",
              "java.lang.String.endsWith(java.lang.String)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.lang.String.substring(int,int)",
              "java.util.Map<Tau_K,Tau_V>.get(java.lang.Object)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.HashMap<java.lang.String,java.lang.Object>.HashMap<String,Object>()",
              "java.util.Map<java.lang.String,java.lang.Object>.put(java.lang.String,java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/community/server/src/test/java/org/neo4j/server/rest/web/RestfulGraphDatabaseTest.java",
      "classTypes": [
        "RestfulGraphDatabase",
        "GraphDbHelper",
        "Database",
        "String",
        "LeaseManager",
        "EntityOutputFormat",
        "ForceMode"
      ],
      "sorrformalparam": [
        [],
        [],
        [],
        []
      ],
      "types": [
        "Object",
        "Map",
        "Boolean",
        "String"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.util.Map<java.lang.String,java.lang.Object>.containsKey(java.lang.Object)",
            "java.util.Map<java.lang.String,java.lang.Object>.get(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "string"
      ]
    },
    {
      "method": "getIconHeight@808",
      "body": "public int getIconHeight(SynthContext context){\n  int height;\n  if (context == null) {\n    context=getContext(tree);\n    height=SynthIcon.getIconHeight(expandedIcon,context);\n    context.dispose();\n  }\n else {\n    height=SynthIcon.getIconHeight(expandedIcon,context);\n  }\n  return height;\n}\n",
      "formalParam": [
        "SynthContext"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "javax.swing.plaf.synth.SynthContext"
          },
          {
            "_call": "javax.swing.plaf.synth.SynthContext.dispose()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          }
        ]
      },
      "sorrreturntype": [
        "int",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
              "javax.swing.plaf.synth.SynthContext.dispose()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
              "javax.swing.plaf.synth.SynthContext.dispose()"
            ]
          }
        ],
        [
          {
            "calls": [
              "javax.swing.plaf.synth.SynthContext.getPainter()",
              "javax.swing.plaf.synth.SynthPainter.paintTreeBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/openjdk-fontfix/openjdk-b145/jdk/src/share/classes/javax/swing/plaf/synth/SynthTreeUI.java",
      "classTypes": [
        "SynthStyle",
        "boolean"
      ],
      "sorrformalparam": [
        [
          "SynthContext"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ],
        [
          "SynthContext",
          "Graphics",
          "int",
          "int",
          "int",
          "int"
        ]
      ],
      "types": [
        "plaf"
      ],
      "apicalls": [
        "dispose",
        "getContext"
      ],
      "sequences": [
        {
          "calls": [
            "javax.swing.plaf.synth.SynthContext.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,javax.swing.plaf.synth.SynthStyle,int)",
            "javax.swing.plaf.synth.SynthContext.dispose()"
          ]
        }
      ],
      "keywords": [
        "dispose",
        "integer",
        "component",
        "plaf"
      ]
    },
    {
      "method": "main@65",
      "body": "public static void main(String[] args){\n  EvLog.addListener(new EvLogStdout());\n  EV.loadPlugins();\n  try {\n    new ImageJroiImport(new File(\"/Volumes/TBU_main06/customer/RoiSet.zip\"),new EvStack(),new EvData());\n  }\n catch (  IOException e) {\n    e.printStackTrace();\n  }\n}\n",
      "formalParam": [
        "String[]"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DExcept",
            "_catch": [
              {
                "_call": "java.lang.Throwable.printStackTrace()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_try": [
              {
                "_call": "java.io.File.File(java.lang.String)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/Endrov/ev/endrov/IJ/roi/ImageJroiImport.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.io.File.File(java.lang.String)",
            "java.lang.Throwable.printStackTrace()"
          ]
        },
        {
          "calls": [
            "java.io.File.File(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "trace"
      ]
    },
    {
      "method": "changeLocale@18",
      "body": "public void changeLocale(ActionEvent evt){\n  String componentId=evt.getComponent().getId();\n  FacesContext context=FacesContext.getCurrentInstance();\n  if (\"header-locale-fr\".equals(componentId)) {\n    Locale.setDefault(Locale.FRENCH);\n  }\n else {\n    Locale.setDefault(Locale.ENGLISH);\n  }\n}\n",
      "formalParam": [
        "ActionEvent"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DBranch",
            "_else": [
              {
                "_call": "java.util.Locale.setDefault(java.util.Locale)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ],
            "_cond": [
              {
                "_call": "java.lang.String.equals(java.lang.Object)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "boolean"
              }
            ],
            "_then": [
              {
                "_call": "java.util.Locale.setDefault(java.util.Locale)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "void"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [],
      "sorrsequences": [],
      "returnType": "void",
      "file": "./java_projects/jcertif-webapp/src/main/java/com/jcertif/web/ihm/LocaleBean.java",
      "classTypes": [],
      "sorrformalparam": [],
      "types": [],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.equals(java.lang.Object)",
            "java.util.Locale.setDefault(java.util.Locale)"
          ]
        }
      ],
      "keywords": [
        "default"
      ]
    },
    {
      "method": "startElement@200",
      "body": "public ParseState startElement(String tagName){\n  String tagValue=tagName.toLowerCase();\n  if (TAG_MAPPING.equals(tagValue)) {\n    return new AliasState();\n  }\n  return super.startElement(tagName);\n}\n",
      "formalParam": [
        "String"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.lang.String.toLowerCase()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "java.lang.String"
          },
          {
            "_call": "java.lang.String.equals(java.lang.Object)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "ParseState"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.lang.String.toLowerCase()",
              "java.lang.String.equals(java.lang.Object)"
            ]
          }
        ]
      ],
      "returnType": "ParseState",
      "file": "./java_projects/birt/engine/org.eclipse.birt.report.engine/src/org/eclipse/birt/report/engine/layout/pdf/font/FontConfigHandler.java",
      "classTypes": [
        "String",
        "String",
        "HashMap",
        "String",
        "LinkedHashSet",
        "LinkedHashMap",
        "String",
        "String",
        "String"
      ],
      "sorrformalparam": [
        [
          "String"
        ]
      ],
      "types": [
        "Boolean"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.lang.String.toLowerCase()",
            "java.lang.String.equals(java.lang.Object)"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "getMechsForName@185",
      "body": "@Override public Oid[] getMechsForName(Oid nameType){\n  ArrayList<Oid> mechs=new ArrayList<Oid>();\n  Oid[] oids=getMechs();\n  for (  Oid oid : oids) {\n    GSSMechSpi api=spis.get(oid);\n    Oid[] mechNames=api.getNameMechs();\n    boolean support=false;\n    for (    Oid mechName : mechNames) {\n      if (mechName.equals(nameType)) {\n        support=true;\n        break;\n      }\n    }\n    if (support) {\n      mechs.add(oid);\n    }\n  }\n  return mechs.toArray(new Oid[mechs.size()]);\n}\n",
      "formalParam": [
        "Oid"
      ],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<Tau_E>.ArrayList()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          },
          {
            "_call": "java.util.ArrayList<Tau_E>.toArray(T[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "T[]"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "None"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.security.Provider.entrySet()",
              "$NOT$java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.Provider.entrySet()",
              "$NOT$java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)",
              "java.lang.String.trim()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.security.Provider.entrySet()",
              "$NOT$java.lang.String.startsWith(java.lang.String)",
              "java.lang.String.length()",
              "java.lang.String.substring(int)",
              "java.lang.String.trim()"
            ]
          }
        ]
      ],
      "returnType": "Oid[]",
      "file": "./java_projects/harmony_1/classlib/modules/auth/src/main/java/common/org/apache/harmony/auth/jgss/GSSManagerImpl.java",
      "classTypes": [
        "GSSMechSpi",
        "Hashtable<Oid,GSSMechSpi>",
        "Oid",
        "String",
        "Provider"
      ],
      "sorrformalparam": [
        [
          "Provider",
          "Oid"
        ],
        [
          "Provider",
          "Oid"
        ],
        []
      ],
      "types": [
        "ArrayList"
      ],
      "apicalls": [
        "add",
        "toArray"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<Tau_E>.ArrayList()",
            "java.util.ArrayList<Tau_E>.add(Tau_E)",
            "java.util.ArrayList<Tau_E>.toArray(T[])"
          ]
        }
      ],
      "keywords": [
        "boolean"
      ]
    },
    {
      "method": "countInRange@135",
      "body": "public int countInRange(){\n  int res=0;\n  for (int i=0; i < data.size(); i++) {\n    Double d=data.get(i);\n    if ((inclusive && d >= minRange && d <= maxRange) || (!inclusive && d > minRange && d < maxRange)) {\n      res++;\n    }\n  }\n  return res;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "node": "DLoop",
            "_body": [
              {
                "_call": "java.util.List<java.lang.Double>.get(int)",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "java.lang.Double"
              }
            ],
            "_cond": [
              {
                "_call": "java.util.List<java.lang.Double>.size()",
                "_throws": [],
                "node": "DAPICall",
                "_returns": "int"
              }
            ]
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "double",
        "double",
        "double",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)",
              "java.util.List<java.lang.Double>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)",
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.size()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.size()",
              "java.util.List<java.lang.Double>.get(int)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setPreferredSize(java.awt.Dimension)",
              "java.awt.Dimension.Dimension(int,int)",
              "javax.swing.JComponent.setMinimumSize(java.awt.Dimension)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.List<java.lang.Double>.add(java.lang.Double)",
              "java.lang.Math.min(int,int)",
              "java.lang.Math.max(int,int)"
            ]
          }
        ]
      ],
      "returnType": "int",
      "file": "./java_projects/gephi-maven/modules/FiltersPluginUI/src/main/java/org/gephi/ui/filters/plugin/JQuickHistogram.java",
      "classTypes": [
        "Double",
        "int",
        "Color",
        "Double",
        "List<Double>"
      ],
      "sorrformalparam": [
        [
          "int"
        ],
        [],
        [],
        [],
        [
          "int"
        ],
        [
          "Double"
        ]
      ],
      "types": [
        "Integer",
        "List"
      ],
      "apicalls": [
        "get"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.List<java.lang.Double>.size()",
            "java.util.List<java.lang.Double>.get(int)",
            "java.util.List<java.lang.Double>.size()"
          ]
        }
      ],
      "keywords": [
        "size",
        "util",
        "integer",
        "double",
        "list"
      ]
    },
    {
      "method": "getParamNames@191",
      "body": "/** \n * {@inheritDoc}\n * @see org.eclipse.jubula.client.core.model.IParamNodePO#getParamNames()\n */\n@Transient public List<String> getParamNames(){\n  List<String> paramNames=new ArrayList<String>();\n  for (  IParamDescriptionPO desc : getParameterList()) {\n    paramNames.add(desc.getName());\n  }\n  return paramNames;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.util.List<java.lang.String>.add(java.lang.String)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "boolean"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "List<IParamDescriptionPO>",
        "boolean"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.util.Locale.toString()",
              "java.lang.Boolean.valueOf(boolean)",
              "java.util.Map<java.lang.String,java.lang.Boolean>.put(java.lang.String,java.lang.Boolean)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Collections.emptyList()",
              "java.util.Collections.unmodifiableList(java.util.List)"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.util.Locale.toString()",
              "java.util.Map<java.lang.String,java.lang.Boolean>.get(java.lang.Object)",
              "java.lang.Boolean.booleanValue()"
            ]
          }
        ]
      ],
      "returnType": "List<String>",
      "file": "./java_projects/jubula.core/org.eclipse.jubula.client.core/src/org/eclipse/jubula/client/core/model/TestDataCubePO.java",
      "classTypes": [
        "Long",
        "List<IParamDescriptionPO>",
        "IParameterInterfacePO",
        "ITestDataCategoryPO",
        "String",
        "Integer",
        "ITDManager",
        "String",
        "Long"
      ],
      "sorrformalparam": [
        [
          "Locale",
          "boolean"
        ],
        [],
        [
          "Locale"
        ]
      ],
      "types": [
        "ArrayList",
        "String"
      ],
      "apicalls": [
        "add"
      ],
      "sequences": [
        {
          "calls": [
            "java.util.ArrayList<java.lang.String>.ArrayList<String>()",
            "java.util.List<java.lang.String>.add(java.lang.String)"
          ]
        }
      ],
      "keywords": [
        "list",
        "add",
        "string",
        "boolean"
      ]
    },
    {
      "method": "testBitLengthPositive3@84",
      "body": "/** \n * bitLength() of a positive number which is a power of 2\n */\npublic void testBitLengthPositive3(){\n  byte aBytes[]={1,0,0,0,0,0,0,0,0,0,0};\n  int aSign=1;\n  BigInteger aNumber=new BigInteger(aSign,aBytes);\n  assertEquals(81,aNumber.bitLength());\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.math.BigInteger.BigInteger(int,byte[])",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.math.BigInteger.bitLength()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          }
        ]
      },
      "sorrreturntype": [
        "void",
        "void",
        "void",
        "void",
        "void"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.math.BigInteger.bitCount()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.setBit(int)",
              "java.math.BigInteger.toByteArray()",
              "java.math.BigInteger.signum()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(java.lang.String)",
              "java.math.BigInteger.clearBit(int)",
              "java.math.BigInteger.toString()"
            ]
          }
        ],
        [
          {
            "calls": [
              "java.math.BigInteger.BigInteger(int,byte[])",
              "java.math.BigInteger.testBit(int)"
            ]
          }
        ]
      ],
      "returnType": "void",
      "file": "./java_projects/platform_external_apache-harmony/math/src/test/java/org/apache/harmony/tests/java/math/BigIntegerOperateBitsTest.java",
      "classTypes": [],
      "sorrformalparam": [
        [],
        [],
        [],
        [],
        []
      ],
      "types": [
        "Integer"
      ],
      "apicalls": [],
      "sequences": [
        {
          "calls": [
            "java.math.BigInteger.BigInteger(int,byte[])",
            "java.math.BigInteger.bitLength()"
          ]
        }
      ],
      "keywords": [
        "byte"
      ]
    },
    {
      "method": "expose@84",
      "body": "/** \n * Reads the whole stream and returns the stream snapshot.\n */\npublic synchronized byte[] expose(){\n  if (pos == 0 && count == buf.length) {\n    skip(count);\n    return buf;\n  }\n  final int available=available();\n  final byte[] buffer=new byte[available];\n  System.arraycopy(buf,pos,buffer,0,available);\n  skip(available);\n  return buffer;\n}\n",
      "formalParam": [],
      "ast": {
        "node": "DSubTree",
        "_nodes": [
          {
            "_call": "java.io.ByteArrayInputStream.skip(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          },
          {
            "_call": "java.io.ByteArrayInputStream.available()",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "int"
          },
          {
            "_call": "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "void"
          },
          {
            "_call": "java.io.ByteArrayInputStream.skip(long)",
            "_throws": [],
            "node": "DAPICall",
            "_returns": "long"
          }
        ]
      },
      "sorrreturntype": [
        "byte[]"
      ],
      "sorrsequences": [
        [
          {
            "calls": [
              "java.io.ByteArrayInputStream.skip(long)",
              "java.io.ByteArrayInputStream.available()",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.io.ByteArrayInputStream.skip(long)",
              "java.io.ByteArrayInputStream.available()",
              "java.lang.reflect.Field.getInt(java.lang.Object)",
              "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
              "java.io.ByteArrayInputStream.skip(long)"
            ]
          }
        ]
      ],
      "returnType": "byte[]",
      "file": "./java_projects/harmony-classlib/modules/luni/src/main/java/org/apache/harmony/luni/util/InputStreamHelper.java",
      "classTypes": [
        "Field",
        "Field"
      ],
      "sorrformalparam": [
        [
          "InputStream"
        ]
      ],
      "types": [],
      "apicalls": [
        "arraycopy"
      ],
      "sequences": [
        {
          "calls": [
            "java.io.ByteArrayInputStream.skip(long)",
            "java.io.ByteArrayInputStream.available()",
            "java.lang.System.arraycopy(java.lang.Object,int,java.lang.Object,int,int)",
            "java.io.ByteArrayInputStream.skip(long)"
          ]
        }
      ],
      "keywords": []
    }
  ]
}