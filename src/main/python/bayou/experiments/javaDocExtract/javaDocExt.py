# Copyright 2017 Rice University
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
import argparse
import sys
import ijson.backends.yajl2 as ijson
import simplejson
import math
import random
from nltk.stem import WordNetLemmatizer
# import numpy as np
import re
from collections import defaultdict


LEMMATIZER = WordNetLemmatizer()

HELP = """Use this script to extract evidences from a raw data file with sequences generated by driver.
You can also filter programs based on number and length of sequences, and control the samples from each program."""

def camelCaseSplit(inputString):
    s = re.sub("(.)([A-Z][a-z]+)", r"\1 \2", inputString);
    s = re.sub("([a-z])([A-Z])", r"\1 \2", s).lower().split();
    return s


def extract_jD( inputFile ):
    print('Loading data file...')

    f = open(inputFile , 'rb')

    valid = []
    #This part appends sorrounding evidences
    done = 0
    ignored = 0

    allJavaDocSeqs = []
    for program in ijson.items(f, 'programs.item'):

        javadoc = program['javaDoc']

        if (javadoc is None) or (len(javadoc) == 0):
            ignored += 1
        else:

            javadoc_list = javadoc.strip().split()
            # replace all non alphabetical char into underscore
            javadoc_list = [re.sub("[^a-zA-Z]", '_', w) for w in javadoc_list]

            # break the terms using underscores
            tmp_list = []
            for t in javadoc_list:
               s = re.split("_+", t)
               tmp_list.extend(s)

            result_list = []
            for x in tmp_list:
                if len(x) > 1:
                    x = LEMMATIZER.lemmatize(x)
                    result_list.extend(camelCaseSplit(x))

            done += 1
            allJavaDocSeqs.append(result_list)
        print("Done with this many programs :: " + str(done + ignored), end='\r' )

    f.close()

    print("Number of programs with javadoc :: " + str(done) )
    print("Number of programs without javadoc :: " + str(ignored))
    
    return allJavaDocSeqs
